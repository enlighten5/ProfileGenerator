:- use_module(library(clpfd)).
:- style_check(-singleton).
pointer([
		[0x38bc208,59490824],
		[0x38bc210,59490824],
		[0x38bc220,59490848],
		[0x38bc228,59490848],
		[0x38bc230,59490864],
		[0x38bc238,59490864],
		[0x38bc240,0],
		[0x38bc248,59585544],
		[0x38bc250,0],
		[0x38bc258,0],
		[0x38bc260,0],
		[0x38bc268,0],
		[0x38bc270,0],
		[0x38bc278,0],
		[0x38bc280,0],
		[0x38bc288,0],
		[0x38bc290,59490416],
		[0x38bc298,59490416],
		[0x38bc2a0,59490976],
		[0x38bc2a8,59490976],
		[0x38bc2b0,59490992],
		[0x38bc2b8,59490992],
		[0x38bc2c0,59490416],
		[0x38bc2c8,59491016],
		[0x38bc2d0,59491016],
		[0x38bc2d8,59491032],
		[0x38bc2e0,59491032],
		[0x38bc2e8,0],
		[0x38bc2f0,0],
		[0x38bc2f8,59545288],
		[0x38bc300,0],
		[0x38bc308,0],
		[0x38bc310,59545288],
		[0x38bc318,0],
		[0x38bc320,0],
		[0x38bc328,59545288],
		[0x38bc330,59491120],
		[0x38bc338,59491120],
		[0x38bc340,59494888],
		[0x38bc348,59494888],
		[0x38bc350,0],
		[0x38bc358,0],
		[0x38bc360,0],
		[0x38bc368,0],
		[0x38bc370,0],
		[0x38bc378,0],
		[0x38bc380,0],
		[0x38bc388,0],
		[0x38bc390,0],
		[0x38bc398,0],
		[0x38bc3a0,0],
		[0x38bc3a8,0],
		[0x38bc3b0,0],
		[0x38bc3b8,0],
		[0x38bc3c0,0],
		[0x38bc3c8,0],
		[0x38bc3d0,0],
		[0x38bc3d8,0],
		[0x38bc3e0,0],
		[0x38bc3e8,0],
		[0x38bc3f0,0],
		[0x38bc3f8,59491320],
		[0x38bc400,59491320],
		[0x38bc408,59491336],
		[0x38bc410,59491336],
		[0x38bc418,59491352],
		[0x38bc420,59491352],
		[0x38bc428,58165248],
		[0x38bc430,58165248],
		[0x38bc440,0],
		[0x38bc448,0],
		[0x38bc450,0],
		[0x38bc458,0],
		[0x38bc460,0],
		[0x38bc468,0],
		[0x38bc470,0],
		[0x38bc478,0],
		[0x38bc480,0],
		[0x38bc488,0],
		[0x38bc490,0],
		[0x38bc498,0],
		[0x38bc4a0,0],
		[0x38bc4a8,0],
		[0x38bc4b0,0],
		[0x38bc4b8,0],
		[0x38bc4c0,0],
		[0x38bc4c8,0],
		[0x38bc4d0,0],
		[0x38bc4d8,0],
		[0x38bc4e0,0],
		[0x38bc4e8,0],
		[0x38bc4f0,0],
		[0x38bc4f8,0],
		[0x38bc500,0],
		[0x38bc508,0],
		[0x38bc510,0],
		[0x38bc518,0],
		[0x38bc520,0],
		[0x38bc528,0],
		[0x38bc530,0],
		[0x38bc538,0],
		[0x38bc540,0],
		[0x38bc548,0],
		[0x38bc550,0],
		[0x38bc558,0],
		[0x38bc560,0],
		[0x38bc568,0],
		[0x38bc570,0],
		[0x38bc578,0],
		[0x38bc580,0],
		[0x38bc588,0],
		[0x38bc590,0],
		[0x38bc598,0],
		[0x38bc5a0,0],
		[0x38bc5a8,0],
		[0x38bc5b0,0],
		[0x38bc5b8,0],
		[0x38bc5c0,0],
		[0x38bc5c8,0],
		[0x38bc5d0,0],
		[0x38bc5d8,0],
		[0x38bc5e0,0],
		[0x38bc5e8,0],
		[0x38bc5f0,0],
		[0x38bc5f8,0],
		[0x38bc600,0],
		[0x38bc608,0],
		[0x38bc610,0],
		[0x38bc618,0],
		[0x38bc620,0],
		[0x38bc628,0],
		[0x38bc630,0],
		[0x38bc638,0],
		[0x38bc640,0],
		[0x38bc648,0],
		[0x38bc650,0],
		[0x38bc658,0],
		[0x38bc660,0],
		[0x38bc668,0],
		[0x38bc670,0],
		[0x38bc678,0],
		[0x38bc680,0],
		[0x38bc688,0],
		[0x38bc690,0],
		[0x38bc698,0],
		[0x38bc6a0,0],
		[0x38bc6a8,0],
		[0x38bc6b0,0],
		[0x38bc6b8,0],
		[0x38bc6c0,0],
		[0x38bc6c8,0],
		[0x38bc6d0,0],
		[0x38bc6d8,0],
		[0x38bc6e0,0],
		[0x38bc6e8,0],
		[0x38bc6f0,0],
		[0x38bc6f8,0],
		[0x38bc700,0],
		[0x38bc708,0],
		[0x38bc710,0],
		[0x38bc718,0],
		[0x38bc720,0],
		[0x38bc728,0],
		[0x38bc730,0],
		[0x38bc738,0],
		[0x38bc740,0],
		[0x38bc748,0],
		[0x38bc750,0],
		[0x38bc758,0],
		[0x38bc760,0],
		[0x38bc768,0],
		[0x38bc770,0],
		[0x38bc778,0],
		[0x38bc780,0],
		[0x38bc788,0],
		[0x38bc790,0],
		[0x38bc798,0],
		[0x38bc7a0,0],
		[0x38bc7a8,0],
		[0x38bc7b0,0],
		[0x38bc7b8,0],
		[0x38bc7c0,0],
		[0x38bc7c8,0],
		[0x38bc7d0,0],
		[0x38bc7d8,0],
		[0x38bc7e0,0],
		[0x38bc7e8,0],
		[0x38bc7f0,0],
		[0x38bc7f8,0],
		[0x38bc800,59600696],
		[0x38bc808,59596288],
		[0x38bc810,59546144],
		[0x38bc818,59494872],
		[0x38bc820,59492784],
		[0x38bc828,0],
		[0x38bc830,0],
		[0x38bc838,0],
		[0x38bc840,59492416],
		[0x38bc848,59492416],
		[0x38bc850,0],
		[0x38bc858,0],
		[0x38bc860,0],
		[0x38bc868,0],
		[0x38bc870,0],
		[0x38bc878,0],
		[0x38bc880,0],
		[0x38bc888,0],
		[0x38bc890,274917734399],
		[0x38bc898,0],
		[0x38bc8a0,0],
		[0x38bc8a8,0],
		[0x38bc8b0,0],
		[0x38bc8b8,0],
		[0x38bc8c0,0],
		[0x38bc8c8,0],
		[0x38bc8d0,0],
		[0x38bc8d8,0],
		[0x38bc8e0,0],
		[0x38bc8e8,0],
		[0x38bc8f0,0],
		[0x38bc8f8,0],
		[0x38bc900,0],
		[0x38bc908,0],
		[0x38bc910,0],
		[0x38bc918,0],
		[0x38bc920,0],
		[0x38bc928,0],
		[0x38bc930,0],
		[0x38bc938,0],
		[0x38bc940,0],
		[0x38bc948,0],
		[0x38bc950,0],
		[0x38bc958,0],
		[0x38bc960,0],
		[0x38bc968,0],
		[0x38bc970,0],
		[0x38bc978,0],
		[0x38bc980,0],
		[0x38bc990,0],
		[0x38bc998,0],
		[0x38bc9a0,0],
		[0x38bc9a8,0],
		[0x38bc9b8,0],
		[0x38bc9c0,0],
		[0x38bc9c8,0],
		[0x38bc9d0,0],
		[0x38bc9d8,0],
		[0x38bc9e0,0],
		[0x38bc9e8,0],
		[0x38bc9f0,0],
		[0x38bc9f8,0],
		[0x38bca00,0],
		[0x38bca08,0],
		[0x38bca10,0],
		[0x38bca18,0],
		[0x38bca20,0],
		[0x38bca28,0],
		[0x38bca30,0],
		[0x38bca38,0],
		[0x38bca40,0],
		[0x38bca48,0],
		[0x38bca50,0],
		[0x38bca58,0],
		[0x38bca60,0],
		[0x38bca68,0],
		[0x38bca70,0],
		[0x38bca78,0],
		[0x38bca80,0],
		[0x38bca88,0],
		[0x38bca90,0],
		[0x38bca98,0],
		[0x38bcaa0,0],
		[0x38bcaa8,0],
		[0x38bcab0,0],
		[0x38bcab8,0],
		[0x38bcac0,0],
		[0x38bcac8,0],
		[0x38bcad0,0],
		[0x38bcad8,0],
		[0x38bcae0,0],
		[0x38bcae8,0],
		[0x38bcaf0,0],
		[0x38bcaf8,0],
		[0x38bcb00,0],
		[0x38bcb08,0],
		[0x38bcb10,0],
		[0x38bcb18,0],
		[0x38bcb20,0],
		[0x38bcb28,0],
		[0x38bcb30,0],
		[0x38bcb38,0],
		[0x38bcb40,0],
		[0x38bcb48,0],
		[0x38bcb50,0],
		[0x38bcb58,0],
		[0x38bcb60,0],
		[0x38bcb68,0],
		[0x38bcb70,0],
		[0x38bcb78,0],
		[0x38bcb80,0],
		[0x38bcb88,0],
		[0x38bcb90,0],
		[0x38bcb98,0],
		[0x38bcba0,0],
		[0x38bcba8,0],
		[0x38bcbb0,0],
		[0x38bcbb8,0],
		[0x38bcbc0,0],
		[0x38bcbc8,0],
		[0x38bcbd0,0],
		[0x38bcbd8,0],
		[0x38bcbe0,0],
		[0x38bcbe8,0],
		[0x38bcbf0,0],
		[0x38bcbf8,0],
		[0x38bcc00,0],
		[0x38bcc08,0],
		[0x38bcc10,0],
		[0x38bcc18,0],
		[0x38bcc20,0],
		[0x38bcc28,0],
		[0x38bcc30,0],
		[0x38bcc38,0],
		[0x38bcc40,0],
		[0x38bcc48,0],
		[0x38bcc50,0],
		[0x38bcc58,0],
		[0x38bcc60,0],
		[0x38bcc68,0],
		[0x38bcc70,0],
		[0x38bcc78,0],
		[0x38bcc80,0],
		[0x38bcc88,0],
		[0x38bcc90,0],
		[0x38bcc98,0],
		[0x38bcca0,0],
		[0x38bcca8,0],
		[0x38bccb0,0],
		[0x38bccb8,0],
		[0x38bccc0,0],
		[0x38bccc8,0],
		[0x38bccd0,0],
		[0x38bccd8,0],
		[0x38bcce0,0],
		[0x38bcce8,0],
		[0x38bccf0,0],
		[0x38bccf8,0],
		[0x38bcd00,0],
		[0x38bcd08,0],
		[0x38bcd10,0],
		[0x38bcd18,0],
		[0x38bcd20,0],
		[0x38bcd28,0],
		[0x38bcd30,0],
		[0x38bcd38,0],
		[0x38bcd40,0],
		[0x38bcd48,0],
		[0x38bcd50,0],
		[0x38bcd58,0],
		[0x38bcd60,0],
		[0x38bcd68,0],
		[0x38bcd70,0],
		[0x38bcd78,0],
		[0x38bcd80,0],
		[0x38bcd88,0],
		[0x38bcd90,0],
		[0x38bcd98,0],
		[0x38bcda0,0],
		[0x38bcda8,0],
		[0x38bcdb0,0],
		[0x38bcdb8,0],
		[0x38bcdc0,0],
		[0x38bcdc8,0],
		[0x38bcdd0,0],
		[0x38bcdd8,0],
		[0x38bcde0,0],
		[0x38bcde8,0],
		[0x38bcdf0,0],
		[0x38bcdf8,0],
		[0x38bce00,0],
		[0x38bce08,0],
		[0x38bce10,0],
		[0x38bce18,0],
		[0x38bce20,0],
		[0x38bce28,0],
		[0x38bce30,0],
		[0x38bce38,0],
		[0x38bce40,0],
		[0x38bce48,0],
		[0x38bce50,0],
		[0x38bce58,0],
		[0x38bce60,0],
		[0x38bce68,0],
		[0x38bce70,0],
		[0x38bce78,0],
		[0x38bce80,0],
		[0x38bce88,0],
		[0x38bce90,0],
		[0x38bce98,0],
		[0x38bcea0,0],
		[0x38bcea8,0],
		[0x38bceb0,0],
		[0x38bceb8,0],
		[0x38bcec0,0],
		[0x38bcec8,0],
		[0x38bced0,0],
		[0x38bced8,0],
		[0x38bcee0,0],
		[0x38bcee8,0],
		[0x38bcef0,0],
		[0x38bcef8,0],
		[0x38bcf00,0],
		[0x38bcf08,0],
		[0x38bcf10,0],
		[0x38bcf18,0],
		[0x38bcf20,0],
		[0x38bcf28,0],
		[0x38bcf30,0],
		[0x38bcf38,0],
		[0x38bcf40,0],
		[0x38bcf48,0],
		[0x38bcf50,0],
		[0x38bcf58,0],
		[0x38bcf60,0],
		[0x38bcf68,0],
		[0x38bcf70,0],
		[0x38bcf78,0],
		[0x38bcf80,0],
		[0x38bcf88,0],
		[0x38bcf90,0],
		[0x38bcf98,0],
		[0x38bcfa0,0],
		[0x38bcfa8,0],
		[0x38bcfb0,0],
		[0x38bcfb8,0],
		[0x38bcfc0,0],
		[0x38bcfc8,0],
		[0x38bcfd0,0],
		[0x38bcfd8,0],
		[0x38bcfe0,0],
		[0x38bcfe8,0],
		[0x38bcff0,0],
		[0x38bcff8,0],
		[0x38bd000,0],
		[0x38bd008,0],
		[0x38bd010,0],
		[0x38bd018,0],
		[0x38bd020,0],
		[0x38bd028,0],
		[0x38bd030,0],
		[0x38bd038,0],
		[0x38bd040,0],
		[0x38bd048,0],
		[0x38bd050,0],
		[0x38bd058,0],
		[0x38bd060,0],
		[0x38bd068,0],
		[0x38bd070,0],
		[0x38bd078,0],
		[0x38bd080,0],
		[0x38bd088,0],
		[0x38bd090,0],
		[0x38bd098,0],
		[0x38bd0a0,0],
		[0x38bd0a8,0],
		[0x38bd0b0,0],
		[0x38bd0b8,0],
		[0x38bd0c0,0],
		[0x38bd0c8,0],
		[0x38bd0d0,0],
		[0x38bd0d8,0],
		[0x38bd0e0,0],
		[0x38bd0e8,0],
		[0x38bd0f0,0],
		[0x38bd0f8,0],
		[0x38bd100,0],
		[0x38bd108,0],
		[0x38bd110,0],
		[0x38bd118,0],
		[0x38bd120,0],
		[0x38bd128,0],
		[0x38bd130,0],
		[0x38bd138,0],
		[0x38bd140,0],
		[0x38bd148,0],
		[0x38bd150,0],
		[0x38bd158,0],
		[0x38bd160,0],
		[0x38bd168,0],
		[0x38bd170,0],
		[0x38bd178,0],
		[0x38bd180,0],
		[0x38bd188,0],
		[0x38bd190,0],
		[0x38bd198,0],
		[0x38bd1a0,0],
		[0x38bd1a8,0],
		[0x38bd1b0,0],
		[0x38bd1b8,0],
		[0x38bd1c0,0],
		[0x38bd1c8,59494856],
		[0x38bd1d0,59494856],
		[0x38bd1d8,0],
		[0x38bd1e8,59491136],
		[0x38bd1f0,59491136],
		[0x38bd1f8,0],
		[0x38bd200,59494912],
		[0, 0]
]).
unknown([
		[0, 0]
]).
long([
		[0x38bc218,140],
		[0x38bc988,50000],
		[0x38bc9b0,1],
		[0x38bd1e0,1],
		[0, 0]
]).
int([
		[0x38bc218,140],
		[0x38bc21c,0],
		[0x38bc240,0],
		[0x38bc244,0],
		[0x38bc250,0],
		[0x38bc254,0],
		[0x38bc258,0],
		[0x38bc25c,0],
		[0x38bc260,0],
		[0x38bc264,0],
		[0x38bc268,0],
		[0x38bc26c,0],
		[0x38bc270,0],
		[0x38bc274,0],
		[0x38bc278,0],
		[0x38bc27c,0],
		[0x38bc280,0],
		[0x38bc284,0],
		[0x38bc288,0],
		[0x38bc28c,0],
		[0x38bc2e8,0],
		[0x38bc2ec,0],
		[0x38bc2f0,0],
		[0x38bc2f4,0],
		[0x38bc300,0],
		[0x38bc304,0],
		[0x38bc308,0],
		[0x38bc30c,0],
		[0x38bc318,0],
		[0x38bc31c,0],
		[0x38bc320,0],
		[0x38bc324,0],
		[0x38bc350,0],
		[0x38bc354,0],
		[0x38bc358,0],
		[0x38bc35c,0],
		[0x38bc360,0],
		[0x38bc364,0],
		[0x38bc368,0],
		[0x38bc36c,0],
		[0x38bc370,0],
		[0x38bc374,0],
		[0x38bc378,0],
		[0x38bc37c,0],
		[0x38bc380,0],
		[0x38bc384,0],
		[0x38bc388,0],
		[0x38bc38c,0],
		[0x38bc390,0],
		[0x38bc394,0],
		[0x38bc398,0],
		[0x38bc39c,0],
		[0x38bc3a0,0],
		[0x38bc3a4,0],
		[0x38bc3a8,0],
		[0x38bc3ac,0],
		[0x38bc3b0,0],
		[0x38bc3b4,0],
		[0x38bc3b8,0],
		[0x38bc3bc,0],
		[0x38bc3c0,0],
		[0x38bc3c4,0],
		[0x38bc3c8,0],
		[0x38bc3cc,0],
		[0x38bc3d0,0],
		[0x38bc3d4,0],
		[0x38bc3d8,0],
		[0x38bc3dc,0],
		[0x38bc3e0,0],
		[0x38bc3e4,0],
		[0x38bc3e8,0],
		[0x38bc3ec,0],
		[0x38bc3f0,0],
		[0x38bc3f4,0],
		[0x38bc440,0],
		[0x38bc444,0],
		[0x38bc448,0],
		[0x38bc44c,0],
		[0x38bc450,0],
		[0x38bc454,0],
		[0x38bc458,0],
		[0x38bc45c,0],
		[0x38bc460,0],
		[0x38bc464,0],
		[0x38bc468,0],
		[0x38bc46c,0],
		[0x38bc470,0],
		[0x38bc474,0],
		[0x38bc478,0],
		[0x38bc47c,0],
		[0x38bc480,0],
		[0x38bc484,0],
		[0x38bc488,0],
		[0x38bc48c,0],
		[0x38bc490,0],
		[0x38bc494,0],
		[0x38bc498,0],
		[0x38bc49c,0],
		[0x38bc4a0,0],
		[0x38bc4a4,0],
		[0x38bc4a8,0],
		[0x38bc4ac,0],
		[0x38bc4b0,0],
		[0x38bc4b4,0],
		[0x38bc4b8,0],
		[0x38bc4bc,0],
		[0x38bc4c0,0],
		[0x38bc4c4,0],
		[0x38bc4c8,0],
		[0x38bc4cc,0],
		[0x38bc4d0,0],
		[0x38bc4d4,0],
		[0x38bc4d8,0],
		[0x38bc4dc,0],
		[0x38bc4e0,0],
		[0x38bc4e4,0],
		[0x38bc4e8,0],
		[0x38bc4ec,0],
		[0x38bc4f0,0],
		[0x38bc4f4,0],
		[0x38bc4f8,0],
		[0x38bc4fc,0],
		[0x38bc500,0],
		[0x38bc504,0],
		[0x38bc508,0],
		[0x38bc50c,0],
		[0x38bc510,0],
		[0x38bc514,0],
		[0x38bc518,0],
		[0x38bc51c,0],
		[0x38bc520,0],
		[0x38bc524,0],
		[0x38bc528,0],
		[0x38bc52c,0],
		[0x38bc530,0],
		[0x38bc534,0],
		[0x38bc538,0],
		[0x38bc53c,0],
		[0x38bc540,0],
		[0x38bc544,0],
		[0x38bc548,0],
		[0x38bc54c,0],
		[0x38bc550,0],
		[0x38bc554,0],
		[0x38bc558,0],
		[0x38bc55c,0],
		[0x38bc560,0],
		[0x38bc564,0],
		[0x38bc568,0],
		[0x38bc56c,0],
		[0x38bc570,0],
		[0x38bc574,0],
		[0x38bc578,0],
		[0x38bc57c,0],
		[0x38bc580,0],
		[0x38bc584,0],
		[0x38bc588,0],
		[0x38bc58c,0],
		[0x38bc590,0],
		[0x38bc594,0],
		[0x38bc598,0],
		[0x38bc59c,0],
		[0x38bc5a0,0],
		[0x38bc5a4,0],
		[0x38bc5a8,0],
		[0x38bc5ac,0],
		[0x38bc5b0,0],
		[0x38bc5b4,0],
		[0x38bc5b8,0],
		[0x38bc5bc,0],
		[0x38bc5c0,0],
		[0x38bc5c4,0],
		[0x38bc5c8,0],
		[0x38bc5cc,0],
		[0x38bc5d0,0],
		[0x38bc5d4,0],
		[0x38bc5d8,0],
		[0x38bc5dc,0],
		[0x38bc5e0,0],
		[0x38bc5e4,0],
		[0x38bc5e8,0],
		[0x38bc5ec,0],
		[0x38bc5f0,0],
		[0x38bc5f4,0],
		[0x38bc5f8,0],
		[0x38bc5fc,0],
		[0x38bc600,0],
		[0x38bc604,0],
		[0x38bc608,0],
		[0x38bc60c,0],
		[0x38bc610,0],
		[0x38bc614,0],
		[0x38bc618,0],
		[0x38bc61c,0],
		[0x38bc620,0],
		[0x38bc624,0],
		[0x38bc628,0],
		[0x38bc62c,0],
		[0x38bc630,0],
		[0x38bc634,0],
		[0x38bc638,0],
		[0x38bc63c,0],
		[0x38bc640,0],
		[0x38bc644,0],
		[0x38bc648,0],
		[0x38bc64c,0],
		[0x38bc650,0],
		[0x38bc654,0],
		[0x38bc658,0],
		[0x38bc65c,0],
		[0x38bc660,0],
		[0x38bc664,0],
		[0x38bc668,0],
		[0x38bc66c,0],
		[0x38bc670,0],
		[0x38bc674,0],
		[0x38bc678,0],
		[0x38bc67c,0],
		[0x38bc680,0],
		[0x38bc684,0],
		[0x38bc688,0],
		[0x38bc68c,0],
		[0x38bc690,0],
		[0x38bc694,0],
		[0x38bc698,0],
		[0x38bc69c,0],
		[0x38bc6a0,0],
		[0x38bc6a4,0],
		[0x38bc6a8,0],
		[0x38bc6ac,0],
		[0x38bc6b0,0],
		[0x38bc6b4,0],
		[0x38bc6b8,0],
		[0x38bc6bc,0],
		[0x38bc6c0,0],
		[0x38bc6c4,0],
		[0x38bc6c8,0],
		[0x38bc6cc,0],
		[0x38bc6d0,0],
		[0x38bc6d4,0],
		[0x38bc6d8,0],
		[0x38bc6dc,0],
		[0x38bc6e0,0],
		[0x38bc6e4,0],
		[0x38bc6e8,0],
		[0x38bc6ec,0],
		[0x38bc6f0,0],
		[0x38bc6f4,0],
		[0x38bc6f8,0],
		[0x38bc6fc,0],
		[0x38bc700,0],
		[0x38bc704,0],
		[0x38bc708,0],
		[0x38bc70c,0],
		[0x38bc710,0],
		[0x38bc714,0],
		[0x38bc718,0],
		[0x38bc71c,0],
		[0x38bc720,0],
		[0x38bc724,0],
		[0x38bc728,0],
		[0x38bc72c,0],
		[0x38bc730,0],
		[0x38bc734,0],
		[0x38bc738,0],
		[0x38bc73c,0],
		[0x38bc740,0],
		[0x38bc744,0],
		[0x38bc748,0],
		[0x38bc74c,0],
		[0x38bc750,0],
		[0x38bc754,0],
		[0x38bc758,0],
		[0x38bc75c,0],
		[0x38bc760,0],
		[0x38bc764,0],
		[0x38bc768,0],
		[0x38bc76c,0],
		[0x38bc770,0],
		[0x38bc774,0],
		[0x38bc778,0],
		[0x38bc77c,0],
		[0x38bc780,0],
		[0x38bc784,0],
		[0x38bc788,0],
		[0x38bc78c,0],
		[0x38bc790,0],
		[0x38bc794,0],
		[0x38bc798,0],
		[0x38bc79c,0],
		[0x38bc7a0,0],
		[0x38bc7a4,0],
		[0x38bc7a8,0],
		[0x38bc7ac,0],
		[0x38bc7b0,0],
		[0x38bc7b4,0],
		[0x38bc7b8,0],
		[0x38bc7bc,0],
		[0x38bc7c0,0],
		[0x38bc7c4,0],
		[0x38bc7c8,0],
		[0x38bc7cc,0],
		[0x38bc7d0,0],
		[0x38bc7d4,0],
		[0x38bc7d8,0],
		[0x38bc7dc,0],
		[0x38bc7e0,0],
		[0x38bc7e4,0],
		[0x38bc7e8,0],
		[0x38bc7ec,0],
		[0x38bc7f0,0],
		[0x38bc7f4,0],
		[0x38bc7f8,0],
		[0x38bc7fc,0],
		[0x38bc828,0],
		[0x38bc82c,0],
		[0x38bc830,0],
		[0x38bc834,0],
		[0x38bc838,0],
		[0x38bc83c,0],
		[0x38bc850,0],
		[0x38bc854,0],
		[0x38bc858,0],
		[0x38bc85c,0],
		[0x38bc860,0],
		[0x38bc864,0],
		[0x38bc868,0],
		[0x38bc86c,0],
		[0x38bc870,0],
		[0x38bc874,0],
		[0x38bc878,0],
		[0x38bc87c,0],
		[0x38bc880,0],
		[0x38bc884,0],
		[0x38bc888,0],
		[0x38bc88c,0],
		[0x38bc898,0],
		[0x38bc89c,0],
		[0x38bc8a0,0],
		[0x38bc8a4,0],
		[0x38bc8a8,0],
		[0x38bc8ac,0],
		[0x38bc8b0,0],
		[0x38bc8b4,0],
		[0x38bc8b8,0],
		[0x38bc8bc,0],
		[0x38bc8c0,0],
		[0x38bc8c4,0],
		[0x38bc8c8,0],
		[0x38bc8cc,0],
		[0x38bc8d0,0],
		[0x38bc8d4,0],
		[0x38bc8d8,0],
		[0x38bc8dc,0],
		[0x38bc8e0,0],
		[0x38bc8e4,0],
		[0x38bc8e8,0],
		[0x38bc8ec,0],
		[0x38bc8f0,0],
		[0x38bc8f4,0],
		[0x38bc8f8,0],
		[0x38bc8fc,0],
		[0x38bc900,0],
		[0x38bc904,0],
		[0x38bc908,0],
		[0x38bc90c,0],
		[0x38bc910,0],
		[0x38bc914,0],
		[0x38bc918,0],
		[0x38bc91c,0],
		[0x38bc920,0],
		[0x38bc924,0],
		[0x38bc928,0],
		[0x38bc92c,0],
		[0x38bc930,0],
		[0x38bc934,0],
		[0x38bc938,0],
		[0x38bc93c,0],
		[0x38bc940,0],
		[0x38bc944,0],
		[0x38bc948,0],
		[0x38bc94c,0],
		[0x38bc950,0],
		[0x38bc954,0],
		[0x38bc958,0],
		[0x38bc95c,0],
		[0x38bc960,0],
		[0x38bc964,0],
		[0x38bc968,0],
		[0x38bc96c,0],
		[0x38bc970,0],
		[0x38bc974,0],
		[0x38bc978,0],
		[0x38bc97c,0],
		[0x38bc980,0],
		[0x38bc984,0],
		[0x38bc98c,0],
		[0x38bc990,0],
		[0x38bc994,0],
		[0x38bc998,0],
		[0x38bc99c,0],
		[0x38bc9a0,0],
		[0x38bc9a4,0],
		[0x38bc9a8,0],
		[0x38bc9ac,0],
		[0x38bc9b0,1],
		[0x38bc9b4,0],
		[0x38bc9b8,0],
		[0x38bc9bc,0],
		[0x38bc9c0,0],
		[0x38bc9c4,0],
		[0x38bc9c8,0],
		[0x38bc9cc,0],
		[0x38bc9d0,0],
		[0x38bc9d4,0],
		[0x38bc9d8,0],
		[0x38bc9dc,0],
		[0x38bc9e0,0],
		[0x38bc9e4,0],
		[0x38bc9e8,0],
		[0x38bc9ec,0],
		[0x38bc9f0,0],
		[0x38bc9f4,0],
		[0x38bc9f8,0],
		[0x38bc9fc,0],
		[0x38bca00,0],
		[0x38bca04,0],
		[0x38bca08,0],
		[0x38bca0c,0],
		[0x38bca10,0],
		[0x38bca14,0],
		[0x38bca18,0],
		[0x38bca1c,0],
		[0x38bca20,0],
		[0x38bca24,0],
		[0x38bca28,0],
		[0x38bca2c,0],
		[0x38bca30,0],
		[0x38bca34,0],
		[0x38bca38,0],
		[0x38bca3c,0],
		[0x38bca40,0],
		[0x38bca44,0],
		[0x38bca48,0],
		[0x38bca4c,0],
		[0x38bca50,0],
		[0x38bca54,0],
		[0x38bca58,0],
		[0x38bca5c,0],
		[0x38bca60,0],
		[0x38bca64,0],
		[0x38bca68,0],
		[0x38bca6c,0],
		[0x38bca70,0],
		[0x38bca74,0],
		[0x38bca78,0],
		[0x38bca7c,0],
		[0x38bca80,0],
		[0x38bca84,0],
		[0x38bca88,0],
		[0x38bca8c,0],
		[0x38bca90,0],
		[0x38bca94,0],
		[0x38bca98,0],
		[0x38bca9c,0],
		[0x38bcaa0,0],
		[0x38bcaa4,0],
		[0x38bcaa8,0],
		[0x38bcaac,0],
		[0x38bcab0,0],
		[0x38bcab4,0],
		[0x38bcab8,0],
		[0x38bcabc,0],
		[0x38bcac0,0],
		[0x38bcac4,0],
		[0x38bcac8,0],
		[0x38bcacc,0],
		[0x38bcad0,0],
		[0x38bcad4,0],
		[0x38bcad8,0],
		[0x38bcadc,0],
		[0x38bcae0,0],
		[0x38bcae4,0],
		[0x38bcae8,0],
		[0x38bcaec,0],
		[0x38bcaf0,0],
		[0x38bcaf4,0],
		[0x38bcaf8,0],
		[0x38bcafc,0],
		[0x38bcb00,0],
		[0x38bcb04,0],
		[0x38bcb08,0],
		[0x38bcb0c,0],
		[0x38bcb10,0],
		[0x38bcb14,0],
		[0x38bcb18,0],
		[0x38bcb1c,0],
		[0x38bcb20,0],
		[0x38bcb24,0],
		[0x38bcb28,0],
		[0x38bcb2c,0],
		[0x38bcb30,0],
		[0x38bcb34,0],
		[0x38bcb38,0],
		[0x38bcb3c,0],
		[0x38bcb40,0],
		[0x38bcb44,0],
		[0x38bcb48,0],
		[0x38bcb4c,0],
		[0x38bcb50,0],
		[0x38bcb54,0],
		[0x38bcb58,0],
		[0x38bcb5c,0],
		[0x38bcb60,0],
		[0x38bcb64,0],
		[0x38bcb68,0],
		[0x38bcb6c,0],
		[0x38bcb70,0],
		[0x38bcb74,0],
		[0x38bcb78,0],
		[0x38bcb7c,0],
		[0x38bcb80,0],
		[0x38bcb84,0],
		[0x38bcb88,0],
		[0x38bcb8c,0],
		[0x38bcb90,0],
		[0x38bcb94,0],
		[0x38bcb98,0],
		[0x38bcb9c,0],
		[0x38bcba0,0],
		[0x38bcba4,0],
		[0x38bcba8,0],
		[0x38bcbac,0],
		[0x38bcbb0,0],
		[0x38bcbb4,0],
		[0x38bcbb8,0],
		[0x38bcbbc,0],
		[0x38bcbc0,0],
		[0x38bcbc4,0],
		[0x38bcbc8,0],
		[0x38bcbcc,0],
		[0x38bcbd0,0],
		[0x38bcbd4,0],
		[0x38bcbd8,0],
		[0x38bcbdc,0],
		[0x38bcbe0,0],
		[0x38bcbe4,0],
		[0x38bcbe8,0],
		[0x38bcbec,0],
		[0x38bcbf0,0],
		[0x38bcbf4,0],
		[0x38bcbf8,0],
		[0x38bcbfc,0],
		[0x38bcc00,0],
		[0x38bcc04,0],
		[0x38bcc08,0],
		[0x38bcc0c,0],
		[0x38bcc10,0],
		[0x38bcc14,0],
		[0x38bcc18,0],
		[0x38bcc1c,0],
		[0x38bcc20,0],
		[0x38bcc24,0],
		[0x38bcc28,0],
		[0x38bcc2c,0],
		[0x38bcc30,0],
		[0x38bcc34,0],
		[0x38bcc38,0],
		[0x38bcc3c,0],
		[0x38bcc40,0],
		[0x38bcc44,0],
		[0x38bcc48,0],
		[0x38bcc4c,0],
		[0x38bcc50,0],
		[0x38bcc54,0],
		[0x38bcc58,0],
		[0x38bcc5c,0],
		[0x38bcc60,0],
		[0x38bcc64,0],
		[0x38bcc68,0],
		[0x38bcc6c,0],
		[0x38bcc70,0],
		[0x38bcc74,0],
		[0x38bcc78,0],
		[0x38bcc7c,0],
		[0x38bcc80,0],
		[0x38bcc84,0],
		[0x38bcc88,0],
		[0x38bcc8c,0],
		[0x38bcc90,0],
		[0x38bcc94,0],
		[0x38bcc98,0],
		[0x38bcc9c,0],
		[0x38bcca0,0],
		[0x38bcca4,0],
		[0x38bcca8,0],
		[0x38bccac,0],
		[0x38bccb0,0],
		[0x38bccb4,0],
		[0x38bccb8,0],
		[0x38bccbc,0],
		[0x38bccc0,0],
		[0x38bccc4,0],
		[0x38bccc8,0],
		[0x38bcccc,0],
		[0x38bccd0,0],
		[0x38bccd4,0],
		[0x38bccd8,0],
		[0x38bccdc,0],
		[0x38bcce0,0],
		[0x38bcce4,0],
		[0x38bcce8,0],
		[0x38bccec,0],
		[0x38bccf0,0],
		[0x38bccf4,0],
		[0x38bccf8,0],
		[0x38bccfc,0],
		[0x38bcd00,0],
		[0x38bcd04,0],
		[0x38bcd08,0],
		[0x38bcd0c,0],
		[0x38bcd10,0],
		[0x38bcd14,0],
		[0x38bcd18,0],
		[0x38bcd1c,0],
		[0x38bcd20,0],
		[0x38bcd24,0],
		[0x38bcd28,0],
		[0x38bcd2c,0],
		[0x38bcd30,0],
		[0x38bcd34,0],
		[0x38bcd38,0],
		[0x38bcd3c,0],
		[0x38bcd40,0],
		[0x38bcd44,0],
		[0x38bcd48,0],
		[0x38bcd4c,0],
		[0x38bcd50,0],
		[0x38bcd54,0],
		[0x38bcd58,0],
		[0x38bcd5c,0],
		[0x38bcd60,0],
		[0x38bcd64,0],
		[0x38bcd68,0],
		[0x38bcd6c,0],
		[0x38bcd70,0],
		[0x38bcd74,0],
		[0x38bcd78,0],
		[0x38bcd7c,0],
		[0x38bcd80,0],
		[0x38bcd84,0],
		[0x38bcd88,0],
		[0x38bcd8c,0],
		[0x38bcd90,0],
		[0x38bcd94,0],
		[0x38bcd98,0],
		[0x38bcd9c,0],
		[0x38bcda0,0],
		[0x38bcda4,0],
		[0x38bcda8,0],
		[0x38bcdac,0],
		[0x38bcdb0,0],
		[0x38bcdb4,0],
		[0x38bcdb8,0],
		[0x38bcdbc,0],
		[0x38bcdc0,0],
		[0x38bcdc4,0],
		[0x38bcdc8,0],
		[0x38bcdcc,0],
		[0x38bcdd0,0],
		[0x38bcdd4,0],
		[0x38bcdd8,0],
		[0x38bcddc,0],
		[0x38bcde0,0],
		[0x38bcde4,0],
		[0x38bcde8,0],
		[0x38bcdec,0],
		[0x38bcdf0,0],
		[0x38bcdf4,0],
		[0x38bcdf8,0],
		[0x38bcdfc,0],
		[0x38bce00,0],
		[0x38bce04,0],
		[0x38bce08,0],
		[0x38bce0c,0],
		[0x38bce10,0],
		[0x38bce14,0],
		[0x38bce18,0],
		[0x38bce1c,0],
		[0x38bce20,0],
		[0x38bce24,0],
		[0x38bce28,0],
		[0x38bce2c,0],
		[0x38bce30,0],
		[0x38bce34,0],
		[0x38bce38,0],
		[0x38bce3c,0],
		[0x38bce40,0],
		[0x38bce44,0],
		[0x38bce48,0],
		[0x38bce4c,0],
		[0x38bce50,0],
		[0x38bce54,0],
		[0x38bce58,0],
		[0x38bce5c,0],
		[0x38bce60,0],
		[0x38bce64,0],
		[0x38bce68,0],
		[0x38bce6c,0],
		[0x38bce70,0],
		[0x38bce74,0],
		[0x38bce78,0],
		[0x38bce7c,0],
		[0x38bce80,0],
		[0x38bce84,0],
		[0x38bce88,0],
		[0x38bce8c,0],
		[0x38bce90,0],
		[0x38bce94,0],
		[0x38bce98,0],
		[0x38bce9c,0],
		[0x38bcea0,0],
		[0x38bcea4,0],
		[0x38bcea8,0],
		[0x38bceac,0],
		[0x38bceb0,0],
		[0x38bceb4,0],
		[0x38bceb8,0],
		[0x38bcebc,0],
		[0x38bcec0,0],
		[0x38bcec4,0],
		[0x38bcec8,0],
		[0x38bcecc,0],
		[0x38bced0,0],
		[0x38bced4,0],
		[0x38bced8,0],
		[0x38bcedc,0],
		[0x38bcee0,0],
		[0x38bcee4,0],
		[0x38bcee8,0],
		[0x38bceec,0],
		[0x38bcef0,0],
		[0x38bcef4,0],
		[0x38bcef8,0],
		[0x38bcefc,0],
		[0x38bcf00,0],
		[0x38bcf04,0],
		[0x38bcf08,0],
		[0x38bcf0c,0],
		[0x38bcf10,0],
		[0x38bcf14,0],
		[0x38bcf18,0],
		[0x38bcf1c,0],
		[0x38bcf20,0],
		[0x38bcf24,0],
		[0x38bcf28,0],
		[0x38bcf2c,0],
		[0x38bcf30,0],
		[0x38bcf34,0],
		[0x38bcf38,0],
		[0x38bcf3c,0],
		[0x38bcf40,0],
		[0x38bcf44,0],
		[0x38bcf48,0],
		[0x38bcf4c,0],
		[0x38bcf50,0],
		[0x38bcf54,0],
		[0x38bcf58,0],
		[0x38bcf5c,0],
		[0x38bcf60,0],
		[0x38bcf64,0],
		[0x38bcf68,0],
		[0x38bcf6c,0],
		[0x38bcf70,0],
		[0x38bcf74,0],
		[0x38bcf78,0],
		[0x38bcf7c,0],
		[0x38bcf80,0],
		[0x38bcf84,0],
		[0x38bcf88,0],
		[0x38bcf8c,0],
		[0x38bcf90,0],
		[0x38bcf94,0],
		[0x38bcf98,0],
		[0x38bcf9c,0],
		[0x38bcfa0,0],
		[0x38bcfa4,0],
		[0x38bcfa8,0],
		[0x38bcfac,0],
		[0x38bcfb0,0],
		[0x38bcfb4,0],
		[0x38bcfb8,0],
		[0x38bcfbc,0],
		[0x38bcfc0,0],
		[0x38bcfc4,0],
		[0x38bcfc8,0],
		[0x38bcfcc,0],
		[0x38bcfd0,0],
		[0x38bcfd4,0],
		[0x38bcfd8,0],
		[0x38bcfdc,0],
		[0x38bcfe0,0],
		[0x38bcfe4,0],
		[0x38bcfe8,0],
		[0x38bcfec,0],
		[0x38bcff0,0],
		[0x38bcff4,0],
		[0x38bcff8,0],
		[0x38bcffc,0],
		[0x38bd000,0],
		[0x38bd004,0],
		[0x38bd008,0],
		[0x38bd00c,0],
		[0x38bd010,0],
		[0x38bd014,0],
		[0x38bd018,0],
		[0x38bd01c,0],
		[0x38bd020,0],
		[0x38bd024,0],
		[0x38bd028,0],
		[0x38bd02c,0],
		[0x38bd030,0],
		[0x38bd034,0],
		[0x38bd038,0],
		[0x38bd03c,0],
		[0x38bd040,0],
		[0x38bd044,0],
		[0x38bd048,0],
		[0x38bd04c,0],
		[0x38bd050,0],
		[0x38bd054,0],
		[0x38bd058,0],
		[0x38bd05c,0],
		[0x38bd060,0],
		[0x38bd064,0],
		[0x38bd068,0],
		[0x38bd06c,0],
		[0x38bd070,0],
		[0x38bd074,0],
		[0x38bd078,0],
		[0x38bd07c,0],
		[0x38bd080,0],
		[0x38bd084,0],
		[0x38bd088,0],
		[0x38bd08c,0],
		[0x38bd090,0],
		[0x38bd094,0],
		[0x38bd098,0],
		[0x38bd09c,0],
		[0x38bd0a0,0],
		[0x38bd0a4,0],
		[0x38bd0a8,0],
		[0x38bd0ac,0],
		[0x38bd0b0,0],
		[0x38bd0b4,0],
		[0x38bd0b8,0],
		[0x38bd0bc,0],
		[0x38bd0c0,0],
		[0x38bd0c4,0],
		[0x38bd0c8,0],
		[0x38bd0cc,0],
		[0x38bd0d0,0],
		[0x38bd0d4,0],
		[0x38bd0d8,0],
		[0x38bd0dc,0],
		[0x38bd0e0,0],
		[0x38bd0e4,0],
		[0x38bd0e8,0],
		[0x38bd0ec,0],
		[0x38bd0f0,0],
		[0x38bd0f4,0],
		[0x38bd0f8,0],
		[0x38bd0fc,0],
		[0x38bd100,0],
		[0x38bd104,0],
		[0x38bd108,0],
		[0x38bd10c,0],
		[0x38bd110,0],
		[0x38bd114,0],
		[0x38bd118,0],
		[0x38bd11c,0],
		[0x38bd120,0],
		[0x38bd124,0],
		[0x38bd128,0],
		[0x38bd12c,0],
		[0x38bd130,0],
		[0x38bd134,0],
		[0x38bd138,0],
		[0x38bd13c,0],
		[0x38bd140,0],
		[0x38bd144,0],
		[0x38bd148,0],
		[0x38bd14c,0],
		[0x38bd150,0],
		[0x38bd154,0],
		[0x38bd158,0],
		[0x38bd15c,0],
		[0x38bd160,0],
		[0x38bd164,0],
		[0x38bd168,0],
		[0x38bd16c,0],
		[0x38bd170,0],
		[0x38bd174,0],
		[0x38bd178,0],
		[0x38bd17c,0],
		[0x38bd180,0],
		[0x38bd184,0],
		[0x38bd188,0],
		[0x38bd18c,0],
		[0x38bd190,0],
		[0x38bd194,0],
		[0x38bd198,0],
		[0x38bd19c,0],
		[0x38bd1a0,0],
		[0x38bd1a4,0],
		[0x38bd1a8,0],
		[0x38bd1ac,0],
		[0x38bd1b0,0],
		[0x38bd1b4,0],
		[0x38bd1b8,0],
		[0x38bd1bc,0],
		[0x38bd1c0,0],
		[0x38bd1c4,0],
		[0x38bd1d8,0],
		[0x38bd1dc,0],
		[0x38bd1e0,1],
		[0x38bd1e4,0],
		[0x38bd1f8,0],
		[0x38bd1fc,0],
		[0, 0]
]).
string_val([
		[0x38bc438,32199680941193075],
		[0, 0]
]).
/* This file contains recursive predicates */
:- use_module(library(clpfd)).
:- use_module(reif).
:- style_check(-singleton).

isTrue([X, Y]):-
    X == 49.

isTrue([X|Tail]):-
    isTrue(Tail).

log(File_name, Name, Addr, Base):-
    Offset #= Addr - Base,
    open(File_name, append, Stream),
    write(Stream, Name),
    write(Stream, ':'),
    write(Stream, Offset),
    nl(Stream),
    close(Stream).

possible_task_struct(Base_addr) :-
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM2_addr, Pid_addr, Tgid_addr, Real_parent_addr, Parent_addr , Child_addr, 
           Group_leader_addr, Thread_group_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    %MM2_addr #> Base_addr + 1000,
    Tasks_addr #> MM2_addr - 100,
    %FS_struct_addr #< Base_addr + 4000,
    Tgid_addr #= Pid_addr + 4,
    Real_parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr - 8,
    Child_addr #= Parent_addr + 8,
    %FIXME This may be too strong
    Group_leader_addr #=< Child_addr +32,
    %Comm_addr #= Base_addr + 1656,
    %Tasks_addr #= Base_addr + 1072,
    %FS_struct_addr #= Base_addr + 2640,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    % make query after labeling
    MM2_val #> 0,
    integer(MM2_val),
    
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val,  Comm_addr, Comm_val ]),

    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_parent_addr, Real_parent_val, Group_leader_addr, Group_leader_val]),
    Real_parent_val #> 0,
    Group_leader_val #> 0,
    query_ts(Real_parent_val, Comm_offset, Tasks_offset),
    query_ts(Group_leader_val, Comm_offset, Tasks_offset),

    labeling([enum], [Cred_addr, Cred_val]),
    Cred_val #> 0,
    query_cred(Cred_val),

    labeling([enum], [FS_struct_addr, FS_struct_val]),
    FS_struct_val #> 0,
    %query_fs_struct(FS_struct_val),



    get_time(End),
    Time_past is End - Current,
    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    log("profile.txt", "tasks", Tasks_addr, Base_addr),
    log("profile.txt", "mm_struct", MM2_addr, Base_addr),
    log("profile.txt", "comm", Comm_addr, Base_addr),
    log("profile.txt", "parent", Parent_addr, Base_addr),
    log("profile.txt", "group_leader", Group_leader_addr, Base_addr),
    log("profile.txt", "cred", Cred_addr, Base_addr),

    
    print_nl('tasks offset', Tasks_offset),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).

possible_string_pointer(Base_addr) :-
    /* Verify if this pointer points to a stirng */
    string_val(Str),
    Str_profile = [
        [Name_addr, Name_val]
    ],
    tuples_in(Str_profile, Str),
    Name_addr #= Base_addr.

query_string_pointer(Val) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "string_pointer"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_mount_struct(Base_addr, Offset) :-
    pointer(Ptr),
    Ptr_profile = ([
        [Mnt_devname_addr, Mnt_devname_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Mnt_devname_addr #= Base_addr + Offset,
    labeling([enum], [Mnt_devname_addr, Mnt_devname_val]),
    query_string_pointer(Mnt_devname_val).



possible_kernel_param(Base_addr) :-
    string_val(Str),
    Str_profile = [
        [Name_addr, Name_val]
    ],
    tuples_in(Str_profile, Str),
    Name_addr #= Base_addr.

possible_in_device(Base_addr) :-
    /* in_ifaddr remains the same across kernel versions 
       but we need this query to find ip_ptr in net_device struct
    */
    /*
        struct net_device *dev;
        int               refcnt;
        int               dead;
        struct in_ifaddr  *ifa_list;
    */
    pointer(Ptr),
    int(Int),
    Ptr_profile = ([
        [Dev_addr, Dev_val],
        [Ifa_list_addr, Ifa_list_val]
    ]),
    Int_profile = ([
        [Refcnt_addr, Refcnt_val],
        [Dead_addr, Dead_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Dead_addr #= Refcnt_addr + 4,
    chain([Dev_addr, Refcnt_addr, Dead_addr, Ifa_list_addr], #<),
    Dev_addr #= Base_addr,
    Ifa_list_addr #= Base_addr + 16,
    labeling([enum], [Ifa_list_addr, Ifa_list_val]),

    process_create(path('python'),
                    ['subquery.py', Ifa_list_val, "in_ifaddr"],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_in_ifaddr(Base_addr) :-
    /* in_ifaddr remains the same across kernel versions */
    pointer(Ptr),
    Ptr_profile = ([
        [Hash_addr, Hash_val],
        [Ifa_next_addr, Ifa_next_val],
        [Ifa_dev_addr, Ifa_dev_val],
        [Rcu_head_addr, Rcu_head_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([Hash_addr, Ifa_next_addr, Ifa_dev_addr, Rcu_head_addr], #<),
    Hash_addr #= Base_addr,
    Ifa_next_addr #= Hash_addr + 16,
    Ifa_dev_addr #= Ifa_next_addr + 8,
    Rcu_head_addr #= Ifa_dev_addr + 8,
    labeling([enum], [Hash_addr, Ifa_next_addr, Ifa_dev_addr, Rcu_head_addr]).



possible_mm_struct(Current_addr) :- 
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),

    Ptr_profile = [
        [Mmap_addr, Mmap_val],
        [Pgd_addr, Pgd_val]  
    ],
    Ulong_profile = [
        [Mmap_base_addr, Mmap_base_val],
        [Mmap_legacy_base_addr, Mmap_legacy_base_val],
        [Task_size_addr, Task_size_val],
        [High_vm_end_addr, High_vm_end_val],
        [Start_brk_addr, Start_brk_val],
        [Brk_addr, Brk_val],
        [Start_stack_addr, Start_stack_val],
        [ARG_start_addr, ARG_start_val]
    ],
    Mmap_addr #= Current_addr,


    Mmap_base_addr #> Mmap_addr,
    %FIXME mmap_base need more value constraint, because we removed mmap_legacy_base and highest_vm_end.
    Mmap_base_val #> 0x7f0000000000,
    High_vm_end_addr #= Mmap_base_addr + 24,
    
    chain([Mmap_base_addr, Mmap_legacy_base_addr, Task_size_addr, High_vm_end_addr, Pgd_addr], #<),


    Pgd_addr #> Task_size_addr,
    Pgd_addr #=< Task_size_addr + 40,
    %FIXME: This rule may not be true for other mm_struct.
    Task_size_val #>= 0x7ffffffff000,


    Start_brk_addr #> Pgd_addr,
    Start_stack_val #> 0x7ff000000000,
    ARG_start_addr #< Current_addr + 500,
    chain([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr], #<),
    ARG_start_addr #= Start_brk_addr + 24,
    Brk_val #< 0x7ff000000000,
    ARG_start_val #> 0x7ff000000000,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),


    labeling([enum], [Mmap_addr, Mmap_val, Mmap_base_addr, Pgd_addr, Pgd_val]),
    Mmap_val #> 0,
    Pgd_val #> 0,
    
    process_create(path('python'),
                    ['subquery.py', Mmap_val, "vm_area_struct", Current_addr],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    label([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr]),
    statistics(real_time, [End|_]),

    log("./profile/mm_struct", "mmap", Mmap_addr, Current_addr),
    log("./profile/mm_struct", "mmap_base", Mmap_base_addr, Current_addr),
    log("./profile/mm_struct", "pgd", Pgd_addr, Current_addr),
    log("./profile/mm_struct", "start_brk", Start_brk_addr, Current_addr),
    log("./profile/mm_struct", "brk", Brk_addr, Current_addr),
    log("./profile/mm_struct", "start_stack", Start_stack_addr, Current_addr),
    log("./profile/mm_struct", "arg_start", ARG_start_addr, Current_addr),
    log("./profile/mm_struct", "mm_struct", End, Start).


possible_vm_area_struct(Base_addr, MM_addr) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [VM_next_addr, VM_next_val],
        [Vm_mm_addr, Vm_mm_val],
        [VM_file_addr, VM_file_val]
    ],
    Ulong_profile = [
        [VM_start_addr, VM_start_val],
        [VM_end_addr, VM_end_val],
        [VM_flag_addr, VM_flag_val]
        /*VM_pgoff is 0, and we do not consider 0 as ulong*/
        %[VM_pgoff_addr, VM_pgoff_val]
    ],
    VM_start_addr #>= Base_addr,
    chain([VM_start_addr, VM_end_addr, VM_next_addr, Vm_mm_addr, VM_flag_addr, VM_file_addr], #<),
    VM_end_addr #= VM_start_addr + 8,
    VM_next_addr #= VM_end_addr + 8,
    VM_next_addr #< Base_addr + 32,

    Vm_mm_val #= MM_addr,
    VM_file_addr #< Base_addr + 180,
    VM_pgoff_addr #= VM_file_addr - 8,
    VM_flag_val #< 0x88888888,
    VM_file_addr #< Base_addr + 200,

    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    %FIXME: VM_flag may need value constraints.

    label([VM_next_addr, VM_next_val]),
    /* vm_file maybe zero! */
    labeling([enum], [VM_start_addr, VM_end_addr, Vm_mm_addr, Vm_mm_val, VM_flag_addr, VM_pgoff_addr, VM_file_addr, VM_file_val]),
    
    VM_file_val #> 0,
    
    process_create(path('python'),
                ['subquery.py', VM_file_val, "vm_file"],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    statistics(real_time, [End|_]),
    

    log("./profile/vm_area_struct", "vm_start", VM_start_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_end", VM_end_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_next", VM_next_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_mm", Vm_mm_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_flag", VM_flag_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_pgoff", VM_pgoff_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_file", VM_file_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_area_struct", End, Start).

check_vm_area_struct(Base_addr, Level) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "vm_area_struct", Level],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vm_file(Base_addr) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [Vfs_mount_addr, Vfs_mount_val],
        [Dentry_addr, Dentry_val],
        [F_op_addr, F_op_val]
    ],
    tuples_in(Ptr_profile, Ptr),
    Vfs_mount_addr #> Base_addr,
    Dentry_addr #= Vfs_mount_addr + 8,
    Dentry_addr #< Base_addr + 40,
    Vfs_mount_val #> 0,
    Dentry_val #> 0,
    F_op_addr #= Base_addr + 40, 
    F_op_val #> 0,
    chain([Vfs_mount_addr, Dentry_addr, F_op_addr], #<),
    labeling([enum], [Vfs_mount_val, Dentry_val, F_op_addr, F_op_val]),


    process_create(path('python'),
                    ['subquery.py', Vfs_mount_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),
/*
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/
    query_file_operation(F_op_val),
    statistics(real_time, [End|_]),

    log("./profile/file", "f_path", Vfs_mount_addr, Base_addr),
    log("./profile/file", "f_op", F_op_addr, Base_addr),
    log("./profile/file", "file", End, Start).



query_file_operation(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result).

possible_name_pointer(Val, Name_offset) :-
    /* The value at val+name_offset is a string pointer */
    current_predicate(pointer/1),
    pointer(Ptr),
    Ptr_profile = ([
        [Name_addr, Name_val]
    ]),
    Name_addr #= Val + Name_offset,
    tuples_in(Ptr_profile, Ptr),
    labeling([enum], [Name_addr, Name_val]),
    query_string_pointer(Name_val).

possible_vfs_mount(Base_addr) :-
    pointer(Ptr),
    int(Int),
    Ptr_profile = [
        [Dentry_addr, Dentry_val],
        [Mnt_sb_addr, Mnt_sb_val]
    ],
    Int_profile = [
        [Mnt_flags_addr, Mnt_flags_val]
    ],
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Dentry_addr #= Base_addr,
    Dentry_val #> 0,
    Mnt_flags_addr #= Dentry_addr + 16,
    Mnt_flags_val #>= 0,
    Mnt_sb_val #> 0,
    chain([Dentry_addr, Mnt_sb_addr, Mnt_flags_addr], #<),
    label([Dentry_addr, Dentry_val, Mnt_flags_addr, Mnt_flags_val]).
 
possible_dentry(Base_addr) :-
    /*
        struct dentry *d_parent;
        struct qstr d_name contains char *name; it's a name pointer
        struct inode *d_inode;
        unsigned char d_iname[LEN];
        const struct dentry_operations *d_op;
        struct list_head d_child;
        struct list_head d_subdirs;
        union {
	        struct hlist_node d_alias;
	        struct rcu_head d_rcu;
        } d_u;
    */
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    string_val(Str),
    Ptr_profile = [
        [Dparent_addr, Dparent_val],
        [Dname_addr, Dname_val],
        [D_inode_addr, D_inode_val],
        [D_op_addr, D_op_val],
        [Dchild_addr, Dchild_val],
        [D_subdirs_addr, D_subdirs_val]
    ],
    Str_profile = [
        [D_iname_addr, D_iname_val]
    ],
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    Dparent_addr #> Base_addr,
    chain([Dparent_addr, Dname_addr, D_inode_addr, D_iname_addr, 
            D_op_addr, Dchild_addr, D_subdirs_addr], #<),
    D_subdirs_addr #= Dchild_addr + 16,
    D_subdirs_addr #< Base_addr + 200,
    Dparent_val #> 0,
    labeling([enum], [Dname_addr, Dname_val]),
    query_string_pointer(Dname_val),
    labeling([enum], [D_iname_addr, D_iname_val]),
    D_iname_offset #= D_iname_addr - Base_addr,
    Dname_offset #= Dname_addr - Base_addr,
    labeling([enum], [Dparent_addr, Dparent_val]),
    Parent_dname #= Dparent_val + Dname_offset,
    process_create(path('python'),
                    ['subquery.py', Parent_dname, "name_pointer", Dname_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    labeling([enum], [D_inode_addr, D_inode_val]),
    query_inode(D_inode_val),
    /* d_op might be zero! */
    labeling([enum], [D_op_addr, D_op_val]),
    %query_file_operation(D_op_val),

    labeling([enum], [Dchild_addr, Dchild_val]),
    Dchild_offset #= Dchild_addr - Base_addr,
    Dchild_init #= Dchild_val - Dchild_offset,
    query_name_pointer(Dchild_init, Dname_offset),

    /* This can be hardcoded as d_child_addr + 16 */
    labeling([enum], [D_subdirs_addr, D_subdirs_val]),
    Dsubdirs_offset #= D_subdirs_addr - Base_addr,
    D_subdirs_init #= D_subdirs_val - Dsubdirs_offset,
    query_name_pointer(D_subdirs_init, Dname_offset),

    _Name_addr #= Dname_addr - 8,

    statistics(real_time, [End|_]),

    log("./profile/dentry", "parent", Dparent_addr, Base_addr),
    log("./profile/dentry", "d_name", _Name_addr, Base_addr),
    log("./profile/dentry", "d_inode", D_inode_addr, Base_addr),
    log("./profile/dentry", "d_iname", D_iname_addr, Base_addr),
    log("./profile/dentry", "dchild", Dchild_addr, Base_addr),
    log("./profile/dentry", "d_subdirs", D_subdirs_addr, Base_addr),
    log("./profile/dentry", "dentry", End, Start).

query_inode(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_inode(Base_addr) :-
    /*
        struct inode_operations *i_op;
        struct super_block      *i_sb;
        struct address_space    *i_mapping;
    */
    statistics(real_time, [Start|_]),

    pointer(Ptr),
    long(Ulg),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [I_op_addr, I_op_val],
        [I_sb_addr, I_sb_val],
        [I_mapping_addr, I_mapping_val],
        [I_fop_addr, I_fop_val]
    ]),
    Ulong_profile = ([
        /* i_mode is actually not long type. */
        [I_mode_addr, I_mode_val],
        [I_ino_addr, I_ino_val],
        [I_size_addr, I_size_val],
        [I_atime_addr, I_atime_val],
        [_I_atime_addr, _I_atime_val],
        [I_mtime_addr, I_mtime_val],
        [I_ctime_addr, I_ctime_val],
        [_I_ctime_addr, _I_ctime_val]
    ]),
    Int_profile = ([
        [I_uid_addr, I_uid_val],
        [I_gid_addr, I_gid_val],
        [_atomic_t_addr, _atomic_t_val],
        [_atomic_t2_addr, _atomic_t2_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    tuples_in(Int_profile, Int),

    chain([I_mode_addr, I_uid_addr, I_gid_addr, I_op_addr, I_sb_addr, I_mapping_addr, I_ino_addr,
           I_size_addr, I_atime_addr, _I_atime_addr, I_mtime_addr, I_ctime_addr, _I_ctime_addr, 
           _atomic_t_addr, _atomic_t2_addr, I_fop_addr], #<),

    I_mode_addr #= Base_addr,
    I_mode_val #> 0,
    I_gid_addr #= I_mode_addr + 8,
    %I_op_addr #= Base_addr + 32,
    I_op_addr #=< Base_addr + 32,
    I_op_val #> 0,
    labeling([enum], [I_op_addr, I_op_val]),
    query_inode_operations(I_op_val),

    I_sb_addr #= I_op_addr + 8,
    I_mapping_addr #= I_sb_addr + 8,
    I_atime_addr #= I_size_addr + 8,
    I_mtime_addr #= I_atime_addr + 16,
    I_ctime_addr #= I_mtime_addr + 16,
    _I_ctime_addr #= I_ctime_addr + 8,
    I_size_val #> 0,
    I_atime_val #> 4096,
    I_mtime_val #> 4096,
    I_ctime_val #> 4096,
    I_fop_addr #< Base_addr + 400,
    labeling([enum], [I_sb_addr, I_mapping_addr, I_atime_addr, I_mtime_addr, I_ctime_addr]),
    I_fop_addr #= _atomic_t_addr + 8,
    labeling([enum], [I_fop_addr, I_fop_val]),
    I_fop_val #> 0,
    query_inode_operations(I_fop_val),

    statistics(real_time, [End|_]),
    log("./profile/inode", "I_mode_addr", I_mode_addr, Base_addr),
    log("./profile/inode", "I_uid_addr", I_uid_addr, Base_addr),
    log("./profile/inode", "I_gid_addr", I_gid_addr, Base_addr),
    log("./profile/inode", "I_op_addr", I_op_addr, Base_addr),
    log("./profile/inode", "I_sb_addr", I_sb_addr, Base_addr),
    log("./profile/inode", "I_mapping_addr", I_mapping_addr, Base_addr),
    log("./profile/inode", "I_size_addr", I_size_addr, Base_addr),
    log("./profile/inode", "I_atime_addr", I_atime_addr, Base_addr),
    log("./profile/inode", "I_mtime_addr", I_mtime_addr, Base_addr),
    log("./profile/inode", "I_ctime_addr", I_ctime_addr, Base_addr),
    log("./profile/inode", "I_fop_addr", I_fop_addr, Base_addr),
    log("./profile/inode", "inode", End, Start).


query_inode_operations(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_name_pointer(Base_addr, Offset) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "name_pointer", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_inode_operations(Base_addr) :-
    /* a bunch of function pointers. */
    pointer(Ptr),
    Ptr_profile = ([
        [_L1_addr, _L1_val],
        [_L2_addr, _L2_val],
        [_L3_addr, _L3_val],
        [_L4_addr, _L4_val],
        [_L5_addr, _L5_val],
        [_L6_addr, _L6_val],
        [_L7_addr, _L7_val],
        [_L8_addr, _L8_val],
        [_L9_addr, _L9_val],
        [_L10_addr, _L10_val],
        [_L11_addr, _L11_val],
        [_L12_addr, _L12_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([_L1_addr, _L2_addr, _L3_addr, _L4_addr, _L5_addr, _L6_addr, _L7_addr,
           _L8_addr, _L9_addr, _L10_addr, _L11_addr, _L12_addr], #<),
    _L1_addr #= Base_addr,
    _L12_addr #= Base_addr + 88.




possible_nothing() :-

    %log("profile.txt", "dentry addr", Base_addr, 0),
    Dparent_addr #> Base_addr,
    Dname_addr #> 0,
    Dname_addr #< Base_addr + 200,
    %Dname_addr #= Base_addr + 160,
    %FIXME This child rule is not applicable for old kernel version. 
    %chain([Dparent_addr, Dname_addr, Dchild_addr], #<),
    %Dchild_addr #< Base_addr + 200,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    labeling([enum], [Dparent_addr, Dparent_val, Dname_addr, Dchild_addr, Dchild_val]),
    Dname_offset #= Dname_addr - Base_addr,
    integer(Dname_offset),
    Dparent_val #> 0,
    
    %FIXME d_parent may not be initialized
    /*process_create(path('python'),
                ['subquery.py', Dparent_val, "d_entry", Dname_offset],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/

    %FIXME: may need to find another way for all list_head. 
    /*Dchild_offset #= Dchild_addr - Base_addr,
    integer(Dchild_offset),
    Dchild_base #= Dchild_val - Dchild_offset,
    integer(Dchild_base),
    Dchild_base #> 0,
    process_create(path('python'),
                ['subquery.py', Dchild_base, "d_entry", Dname_offset],
                [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    statistics(real_time, [End|_]).
/*
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    log("profile.txt", "d_parent", Dparent_addr, Base_addr),
    log("profile.txt", "d_child", Dchild_addr, Base_addr),
    log("profile.txt", "dentry time", End, Start).
*/
possible_d_entry(Base_addr, Dname_offset) :-
    current_predicate(string_val/1),
    string_val(Str),
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    Dname_addr #= Base_addr + Dname_offset,
    tuples_in(Str_profile, Str),
    label([Dname_addr]).

possible_list_head(Tasks_val, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_val, Tasks_addr]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],
    Comm_addr #= Tasks_val - Tasks_offset + Comm_offset,
    Tasks_addr #\= Tasks_val,
    tuples_in(Str_profile, Str),
    tuples_in(Ptr_profile, Ptr),
    label([Comm_addr]).

possible_ts(Base_addr, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_addr, Tasks_val]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],

    Comm_addr #= Base_addr + Comm_offset,
    Tasks_addr #= Base_addr + Tasks_offset,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),

    label([Tasks_val]),
    
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "list_head", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_cred(Base_addr) :-
    statistics(real_time, [Start|_]),

    int(Int),
    long(Ulg),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3],
        [Addr4, Val4],
        [Addr5, Val5],
        [Addr6, Val6],
        [Addr7, Val7],
        [Addr8, Val8],
        [Addr9, Val9]
    ],
    %FIXME For now, this rule is hard-coded because we do not consider 0 as a unsign long number. 
    %So that for cred whos val10 is 0, this rule does not apply.
    /*Ulong_profile = [
        [Addr10, Val10],
        [Addr11, Val11]
    ],*/
    Addr1 #> Base_addr,
    %chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9, Addr10, Addr11], #<),
    chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9], #<),
    Addr1 #= Base_addr + 4,
    Addr9 #= Addr1 + 32,
    %Addr11 #< Base_addr + 120,
    tuples_in(Int_profile, Int),
    %tuples_in(Ulong_profile, Ulg),
    statistics(real_time, [End|_]),
    labeling([enum], [Addr1, Addr2, Addr5, Addr6]),
    log("./profile/cred", "cred", End, Start),
    log('./profile/cred', "uid", Addr1, Base_addr),
    log('./profile/cred', "gid", Addr2, Base_addr),
    log('./profile/cred', "euid", Addr5, Base_addr),
    log('./profile/cred', "egid", Addr6, Base_addr).

possible_fs_struct(Base_addr) :-
    statistics(real_time, [Start|_]),
    int(Int),
    pointer(Ptr),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3]
    ],
    Ptr_profile = [
        [Root_addr, Root_val],
        [Root_dentry_addr, Root_dentry_val],
        [PWD_addr, PWD_val]
    ],
    Addr1 #>= Base_addr,
    Root_dentry_addr #= Root_addr + 8,
    chain([Addr1, Addr2, Addr3, Root_addr, Root_dentry_addr, PWD_addr], #<),
    PWD_addr #= Root_addr + 16,
    PWD_addr #< Base_addr + 50,
    tuples_in(Int_profile, Int),
    tuples_in(Ptr_profile, Ptr),
    Root_val #> 0,
    PWD_val #> 0,
    label([Root_addr, Root_val, Root_dentry_addr, Root_dentry_val]),
    /* some times the dentry fields are zero, use vfs_mount instead */
    process_create(path('python'),
                    ['subquery.py', Root_val, "vfs_mount"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    query_dentry(Root_dentry_val),

    label([PWD_addr, PWD_val]),
    process_create(path('python'),
                    ['subquery.py', PWD_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    statistics(real_time, [End|_]),
    log("./profile/fs_struct", "fs time", End, Start),
    log('./profile/fs_struct', "Root", Root_addr, Base_addr),
    log('./profile/fs_struct', "pwd", PWD_addr, Base_addr),
    log('./profile/fs_struct', "fs_struct", End, Start).

possible_mount(Base_addr) :-
    /* struct hlist_head mnt_hash;
       struct mount *mnt_parent; 
       struct vfsmount mnt;
       struct list_head mnt_mounts;
       struct list_head mnt_child;
       struct list_head mnt_instance;
       const char *mnt_devname;
       struct list_head mnt_list;
    */
    statistics(real_time, [Start|_]),
    %get_time(Current),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Mnt_hash_addr, Mnt_hash_val],
        [Mnt_parent_addr, Mnt_parent_val],
        [Vfsmount_addr, Vfsmount_val],
        [Mnt_child_addr, Mnt_child_val],
        [Mnt_devname_addr, Mnt_devname_val],
        [Mnt_list_addr, Mnt_list_val]
    ]),
    Int_profile = ([
        [Mnt_flags_addr, Mnt_flags_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    /* Order Invariants */
    chain([Mnt_hash_addr, Mnt_parent_addr, Vfsmount_addr, Mnt_flags_addr,
            Mnt_child_addr, Mnt_devname_addr, Mnt_list_addr], #<),
    Mnt_hash_addr #= Base_addr,
    /* mnt_hash_addr is a list_head */
    Mnt_parent_addr #> Base_addr + 8,
    Mnt_list_addr - Base_addr #< 200,
    labeling([enum], [Mnt_devname_addr, Mnt_devname_val]),
    query_string_pointer(Mnt_devname_val),
    Mnt_devname_offset #= Mnt_devname_addr - Base_addr,
    /* the offset from mnt_mounts to mnt_list remains the same, so it's safe to use fixed offsets. */
    Mnt_child_addr #= Mnt_devname_addr - 32,
    Mnt_list_addr #= Mnt_devname_addr + 8,
    Mnt_flags_addr #= Vfsmount_addr + 16,
    labeling([enum], [Mnt_child_addr, Mnt_list_addr, Vfsmount_addr, Vfsmount_val]),
    /* Seems unnecessary 
    Mnt_list_offset #= Mnt_list_addr - Base_addr,
    Mnt_list #= Mnt_list_val - Mnt_list_offset,
    Mnt_list #> 0,
    query_mount_struct(Mnt_list, Mnt_devname_offset),
    */
    Vfsmount_val #>= 0,
    /* Here we can infer layout of dentry structure 
       Maybe need to infer using another dentry, somehow it may not be initialized. 
    */
    Vfsmount_addr #> 0,
    %query_dentry(Vfsmount_addr),

    labeling([enum], [Mnt_parent_addr, Mnt_parent_val]),
    /* To verify another mount struct, only one-level query, so it does not direct call query_mount recursively */
    
    query_mount_struct(Mnt_parent_val, Mnt_devname_offset),
    

    %get_time(End),
    %Time_past is End - Current,
    statistics(real_time, [End|_]),
    log("./profile/mount", "mnt_hash", Mnt_hash_addr, Base_addr),
    log("./profile/mount", "mnt_parent", Mnt_parent_addr, Base_addr),
    log("./profile/mount", "mnt_child", Mnt_child_addr, Base_addr),
    log("./profile/mount", "mnt_devname", Mnt_devname_addr, Base_addr),
    log("./profile/mount", "mnt_list", Mnt_list_addr, Base_addr),
    log("./profile/mount", "mount", End, Start).


possible_neigh_hash_table(Base_addr) :-
    /* neighbour **hash_buckets */
    pointer(Ptr),
    Ptr_profile = ([
        [Hash_buckest_addr, Hash_buckets_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Hash_buckest_addr #= Base_addr,
    labeling([enum], [Hash_buckest_addr, Hash_buckets_val]),
    process_create(path('python'),
                    ['subquery.py', Hash_buckets_val, "hash_buckets"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_hash_buckets(Base_addr) :-
    /* hash_buckets is an array of neighbour pointer 
       note that not all element are non-zero
    */
    pointer(Ptr),
    Ptr_profile = ([
        [Neighbour_addr, Neighbour_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Neighbour_addr #< Base_addr + 32,
    Neighbour_val #> 0,
    labeling([enum], [Neighbour_addr, Neighbour_val]),
    process_create(path('python'),
                    ['subquery.py', Neighbour_val, "neighbour"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_neighbour(Base_addr) :-
    /* net_device *dev at offset 464 */
    pointer(Ptr),
    Ptr_profile = ([
        [Dev_addr, Dev_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Dev_addr #>= Base_addr + 360,
    Dev_addr #=< Base_addr + 376,
    labeling([enum], [Dev_addr, Dev_val]),
    process_create(path('python'),
                    ['subquery.py', Dev_val, "net_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).


possible_net_device(Base_addr) :- 
    /*
        char             name[NAMSIZ];
        struct list_head dev_list;
        unsigned char    addr_len;
        unsigned int     promiscuity;
        struct in_device *ip_ptr;
    */
    statistics(real_time, [Start|_]),

    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Dev_list_addr, Dev_list_val],
        [_atalk_ptr_addr, _atalk_ptr_val],
        [IP_ptr_addr, IP_ptr_val],
        [_dn_ptr_addr, _dn_ptr_val],
        [_ip6_ptr_addr, _ip6_ptr_val],
        [Dev_addr_addr, Dev_addr_val]
    ]),
    Str_profile = ([
        [Name_addr, Name_val],
        [Broad_cast_addr, Broad_cast_val]
    ]),
    Int_profile = ([
        [Promisc_addr, Promisc_val],
        [Addr_len_addr, Addr_len_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),
    /* Hard to determine offsets for addr_len and promisc */
    chain([Name_addr, Dev_list_addr, Addr_len_addr, Promisc_addr, 
           _atalk_ptr_addr, IP_ptr_addr, _dn_ptr_addr, _ip6_ptr_addr, Dev_addr_addr, Broad_cast_addr], #<),
    Name_addr #= Base_addr,
    Name_offset #= Name_addr - Base_addr,
    IP_ptr_addr #= _atalk_ptr_addr + 8,
    IP_ptr_addr #< Base_addr + 1000,
    _ip6_ptr_addr #= IP_ptr_addr + 16,


    /* dev_list offset can be hardcoded since it remains the same */
    Dev_list_addr #= Base_addr + 80,
    labeling([enum], [Name_addr, Dev_list_addr, Dev_list_val]),
    /* do not have a good constrain to narrow down ip_ptr, use its rough offset
       to reduce the search space. 
     */
    IP_ptr_addr #> Base_addr + 700,
    IP_ptr_val #> 0,
    labeling([enum], [IP_ptr_addr, IP_ptr_val]),
    query_in_device(IP_ptr_val),

    %labeling([enum], [Dev_addr_addr, Dev_addr_val]),
    %query_string_pointer(Dev_addr_val),

    statistics(real_time, [End|_]),

    log("./profile/net_device", "name", Name_addr, Base_addr),
    log("./profile/net_device", "ip_ptr", IP_ptr_addr, Base_addr),
    log("./profile/net_device", "dev_list", Dev_list_addr, Base_addr),
    log("./profile/net_device", "net_device", End, Start).

query_in_device(IP_ptr_val) :-
    process_create(path('python'),
                    ['subquery.py', IP_ptr_val, "in_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).


query_mount_struct(Val, Offset) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "mount_struct", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_dentry(Dentry_val) :-
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).
