:- use_module(library(clpfd)).
:- style_check(-singleton).
pointer([
		[0xe7faef8,0],
		[0xe7faf00,0],
		[0xe7faf08,0],
		[0xe7faf10,0],
		[0xe7faf18,0],
		[0xe7faf20,0],
		[0xe7faf28,0],
		[0xe7faf30,0],
		[0xe7faf38,0],
		[0xe7faf40,0],
		[0xe7faf48,0],
		[0xe7faf50,0],
		[0xe7faf58,0],
		[0xe7faf60,0],
		[0xe7faf68,0],
		[0xe7faf70,0],
		[0xe7faf78,0],
		[0xe7faf80,0],
		[0xe7faf88,0],
		[0xe7faf90,0],
		[0xe7faf98,0],
		[0xe7fafa0,0],
		[0xe7fafa8,0],
		[0xe7fafb0,0],
		[0xe7fafb8,0],
		[0xe7fafc0,0],
		[0xe7fafc8,0],
		[0xe7fafd0,0],
		[0xe7fafd8,0],
		[0xe7fafe0,0],
		[0xe7fafe8,0],
		[0xe7faff0,0],
		[0xe7faff8,0],
		[0xe7fb000,0],
		[0xe7fb008,0],
		[0xe7fb010,0],
		[0xe7fb018,0],
		[0xe7fb020,0],
		[0xe7fb028,0],
		[0xe7fb030,0],
		[0xe7fb038,0],
		[0xe7fb040,0],
		[0xe7fb048,0],
		[0xe7fb050,0],
		[0xe7fb058,0],
		[0xe7fb060,0],
		[0xe7fb068,0],
		[0xe7fb070,0],
		[0xe7fb078,0],
		[0xe7fb080,0],
		[0xe7fb088,0],
		[0xe7fb090,0],
		[0xe7fb098,0],
		[0xe7fb0a0,0],
		[0xe7fb0a8,0],
		[0xe7fb0b0,0],
		[0xe7fb0b8,0],
		[0xe7fb0c0,0],
		[0xe7fb0c8,0],
		[0xe7fb0d0,0],
		[0xe7fb0d8,0],
		[0xe7fb0e0,0],
		[0xe7fb0e8,0],
		[0xe7fb0f0,0],
		[0xe7fb0f8,0],
		[0xe7fb100,0],
		[0xe7fb108,0],
		[0xe7fb110,0],
		[0xe7fb118,0],
		[0xe7fb120,0],
		[0xe7fb128,0],
		[0xe7fb130,0],
		[0xe7fb138,0],
		[0xe7fb140,0],
		[0xe7fb148,0],
		[0xe7fb150,0],
		[0xe7fb158,0],
		[0xe7fb160,0],
		[0xe7fb168,0],
		[0xe7fb170,0],
		[0xe7fb178,0],
		[0xe7fb180,0],
		[0xe7fb188,0],
		[0xe7fb190,0],
		[0xe7fb198,0],
		[0xe7fb1a0,0],
		[0xe7fb1a8,0],
		[0xe7fb1b0,0],
		[0xe7fb1b8,0],
		[0xe7fb1c0,0],
		[0xe7fb1c8,0],
		[0xe7fb1d0,0],
		[0xe7fb1d8,0],
		[0xe7fb1e0,0],
		[0xe7fb1e8,0],
		[0xe7fb1f0,0],
		[0xe7fb1f8,0],
		[0xe7fb200,0],
		[0xe7fb208,0],
		[0xe7fb210,0],
		[0xe7fb218,0],
		[0xe7fb220,0],
		[0xe7fb228,0],
		[0xe7fb230,0],
		[0xe7fb238,0],
		[0xe7fb240,0],
		[0xe7fb248,0],
		[0xe7fb250,0],
		[0xe7fb258,0],
		[0xe7fb260,0],
		[0xe7fb268,0],
		[0xe7fb270,0],
		[0xe7fb278,0],
		[0xe7fb280,0],
		[0xe7fb288,0],
		[0xe7fb2b0,0],
		[0xe7fb2c8,0],
		[0xe7fb2d0,0],
		[0xe7fb2d8,0],
		[0xe7fb2e0,0],
		[0xe7fb2f0,0],
		[0xe7fb308,0],
		[0xe7fb310,0],
		[0xe7fb318,0],
		[0xe7fb320,0],
		[0xe7fb328,0],
		[0xe7fb330,0],
		[0xe7fb338,0],
		[0xe7fb340,0],
		[0xe7fb348,0],
		[0xe7fb350,0],
		[0xe7fb358,0],
		[0xe7fb360,0],
		[0xe7fb368,0],
		[0xe7fb370,0],
		[0xe7fb378,0],
		[0xe7fb380,0],
		[0xe7fb388,0],
		[0xe7fb390,0],
		[0xe7fb398,0],
		[0xe7fb3a0,0],
		[0xe7fb3a8,0],
		[0xe7fb3b0,0],
		[0xe7fb3b8,0],
		[0xe7fb3c0,0],
		[0xe7fb3c8,0],
		[0xe7fb3d0,0],
		[0xe7fb3d8,0],
		[0xe7fb3e0,0],
		[0xe7fb3e8,0],
		[0xe7fb3f0,0],
		[0xe7fb3f8,0],
		[0xe7fb400,0],
		[0xe7fb408,0],
		[0xe7fb410,0],
		[0xe7fb418,0],
		[0xe7fb420,0],
		[0xe7fb428,0],
		[0xe7fb430,0],
		[0xe7fb438,0],
		[0xe7fb440,0],
		[0xe7fb448,0],
		[0xe7fb450,0],
		[0xe7fb458,0],
		[0xe7fb460,0],
		[0xe7fb468,0],
		[0xe7fb470,0],
		[0xe7fb478,0],
		[0xe7fb480,0],
		[0xe7fb488,0],
		[0xe7fb490,0],
		[0xe7fb498,0],
		[0xe7fb4a0,0],
		[0xe7fb4a8,0],
		[0xe7fb4b0,0],
		[0xe7fb4b8,0],
		[0xe7fb4c0,0],
		[0xe7fb4c8,0],
		[0xe7fb4d0,0],
		[0xe7fb4d8,0],
		[0xe7fb4e0,0],
		[0xe7fb4e8,0],
		[0xe7fb4f0,0],
		[0xe7fb4f8,0],
		[0xe7fb500,0],
		[0xe7fb508,0],
		[0xe7fb510,0],
		[0xe7fb518,0],
		[0xe7fb520,0],
		[0xe7fb528,0],
		[0xe7fb530,0],
		[0xe7fb538,0],
		[0xe7fb540,0],
		[0xe7fb548,0],
		[0xe7fb550,0],
		[0xe7fb558,0],
		[0xe7fb560,0],
		[0xe7fb568,0],
		[0xe7fb570,0],
		[0xe7fb578,0],
		[0xe7fb580,0],
		[0xe7fb588,0],
		[0xe7fb590,0],
		[0xe7fb598,0],
		[0xe7fb5a0,0],
		[0xe7fb5a8,0],
		[0xe7fb5b0,0],
		[0xe7fb5b8,0],
		[0xe7fb5c0,0],
		[0xe7fb5c8,0],
		[0xe7fb5d0,0],
		[0xe7fb5d8,0],
		[0xe7fb5e0,0],
		[0xe7fb5e8,0],
		[0xe7fb5f0,0],
		[0xe7fb5f8,0],
		[0xe7fb600,0],
		[0xe7fb608,0],
		[0xe7fb610,0],
		[0xe7fb618,0],
		[0xe7fb620,0],
		[0xe7fb628,0],
		[0xe7fb630,0],
		[0xe7fb638,0],
		[0xe7fb640,0],
		[0xe7fb648,0],
		[0xe7fb650,0],
		[0xe7fb658,0],
		[0xe7fb660,0],
		[0xe7fb668,0],
		[0xe7fb670,0],
		[0xe7fb678,0],
		[0xe7fb680,0],
		[0xe7fb688,0],
		[0xe7fb690,0],
		[0xe7fb698,0],
		[0xe7fb6a0,0],
		[0xe7fb6a8,0],
		[0xe7fb6b0,0],
		[0xe7fb6b8,0],
		[0xe7fb6c0,0],
		[0xe7fb6c8,0],
		[0xe7fb6d0,0],
		[0xe7fb6d8,0],
		[0xe7fb6e0,0],
		[0xe7fb6e8,0],
		[0xe7fb6f0,0],
		[0xe7fb6f8,0],
		[0xe7fb700,0],
		[0xe7fb708,0],
		[0xe7fb710,0],
		[0xe7fb718,0],
		[0xe7fb720,0],
		[0xe7fb728,0],
		[0xe7fb730,0],
		[0xe7fb738,0],
		[0xe7fb740,0],
		[0xe7fb748,0],
		[0xe7fb750,0],
		[0xe7fb758,0],
		[0xe7fb760,0],
		[0xe7fb768,0],
		[0xe7fb770,0],
		[0xe7fb778,0],
		[0xe7fb780,0],
		[0xe7fb788,0],
		[0xe7fb790,0],
		[0xe7fb798,0],
		[0xe7fb7a0,0],
		[0xe7fb7a8,0],
		[0xe7fb7b0,0],
		[0xe7fb7b8,0],
		[0xe7fb7c0,0],
		[0xe7fb7c8,0],
		[0xe7fb7d0,0],
		[0xe7fb7d8,0],
		[0xe7fb7e0,0],
		[0xe7fb7e8,0],
		[0xe7fb7f0,0],
		[0xe7fb7f8,0],
		[0xe7fb800,0],
		[0xe7fb808,0],
		[0xe7fb810,0],
		[0xe7fb818,0],
		[0xe7fb820,0],
		[0xe7fb828,0],
		[0xe7fb830,0],
		[0xe7fb838,0],
		[0xe7fb840,0],
		[0xe7fb848,0],
		[0xe7fb850,0],
		[0xe7fb858,0],
		[0xe7fb860,0],
		[0xe7fb868,0],
		[0xe7fb870,0],
		[0xe7fb878,0],
		[0xe7fb880,0],
		[0xe7fb888,0],
		[0xe7fb890,0],
		[0xe7fb898,0],
		[0xe7fb8a0,0],
		[0xe7fb8a8,0],
		[0xe7fb8b0,0],
		[0xe7fb8b8,0],
		[0xe7fb8c0,0],
		[0xe7fb8c8,0],
		[0xe7fb8d0,0],
		[0xe7fb8d8,0],
		[0xe7fb8e0,0],
		[0xe7fb8e8,0],
		[0xe7fb8f0,0],
		[0xe7fb8f8,0],
		[0xe7fb900,0],
		[0xe7fb908,0],
		[0xe7fb910,0],
		[0xe7fb918,0],
		[0xe7fb920,0],
		[0xe7fb928,0],
		[0xe7fb930,0],
		[0xe7fb938,0],
		[0xe7fb940,0],
		[0xe7fb948,0],
		[0xe7fb950,0],
		[0xe7fb958,0],
		[0xe7fb960,0],
		[0xe7fb968,0],
		[0xe7fb970,0],
		[0xe7fb978,0],
		[0xe7fb980,0],
		[0xe7fb988,0],
		[0xe7fb990,0],
		[0xe7fb998,0],
		[0xe7fb9a0,0],
		[0xe7fb9a8,0],
		[0xe7fb9b0,0],
		[0xe7fb9b8,0],
		[0xe7fb9c0,0],
		[0xe7fb9c8,0],
		[0xe7fb9d0,0],
		[0xe7fb9d8,0],
		[0xe7fb9e0,0],
		[0xe7fb9e8,0],
		[0xe7fb9f0,0],
		[0xe7fb9f8,0],
		[0xe7fba00,0],
		[0xe7fba08,0],
		[0xe7fba10,0],
		[0xe7fba18,0],
		[0xe7fba20,0],
		[0xe7fba28,0],
		[0xe7fba30,0],
		[0xe7fba38,0],
		[0xe7fba40,0],
		[0xe7fba48,0],
		[0xe7fba50,0],
		[0xe7fba58,0],
		[0xe7fba60,0],
		[0xe7fba68,0],
		[0xe7fba70,0],
		[0xe7fba78,0],
		[0xe7fba80,0],
		[0xe7fba88,0],
		[0xe7fba90,0],
		[0xe7fba98,0],
		[0xe7fbaa0,0],
		[0xe7fbaa8,0],
		[0xe7fbab0,0],
		[0xe7fbab8,0],
		[0xe7fbac0,0],
		[0xe7fbac8,0],
		[0xe7fbad0,0],
		[0xe7fbad8,0],
		[0xe7fbae0,0],
		[0xe7fbae8,0],
		[0xe7fbaf0,0],
		[0xe7fbaf8,0],
		[0xe7fbb00,0],
		[0xe7fbb08,0],
		[0xe7fbb10,0],
		[0xe7fbb18,0],
		[0xe7fbb20,0],
		[0xe7fbb28,0],
		[0xe7fbb30,0],
		[0xe7fbb38,0],
		[0xe7fbb40,0],
		[0xe7fbb48,0],
		[0xe7fbb50,0],
		[0xe7fbb58,0],
		[0xe7fbb60,0],
		[0xe7fbb68,0],
		[0xe7fbb70,0],
		[0xe7fbb78,0],
		[0xe7fbb80,0],
		[0xe7fbb88,0],
		[0xe7fbb90,0],
		[0xe7fbb98,0],
		[0xe7fbba0,0],
		[0xe7fbba8,0],
		[0xe7fbbb0,0],
		[0xe7fbbb8,0],
		[0xe7fbbc0,0],
		[0xe7fbbc8,0],
		[0xe7fbbd0,0],
		[0xe7fbbd8,0],
		[0xe7fbbe0,0],
		[0xe7fbbe8,0],
		[0xe7fbbf0,0],
		[0xe7fbbf8,0],
		[0xe7fbc00,0],
		[0xe7fbc08,0],
		[0xe7fbc10,0],
		[0xe7fbc18,0],
		[0xe7fbc20,0],
		[0xe7fbc28,0],
		[0xe7fbc30,0],
		[0xe7fbc38,0],
		[0xe7fbc40,0],
		[0xe7fbc48,0],
		[0xe7fbc50,0],
		[0xe7fbc58,0],
		[0xe7fbc60,0],
		[0xe7fbc68,0],
		[0xe7fbc70,0],
		[0xe7fbc78,0],
		[0xe7fbc80,0],
		[0xe7fbc88,0],
		[0xe7fbc90,0],
		[0xe7fbc98,0],
		[0xe7fbca0,0],
		[0xe7fbca8,0],
		[0xe7fbcb0,0],
		[0xe7fbcb8,0],
		[0xe7fbcc0,0],
		[0xe7fbcc8,0],
		[0xe7fbcd0,0],
		[0xe7fbcd8,0],
		[0xe7fbce0,0],
		[0xe7fbce8,0],
		[0xe7fbcf0,0],
		[0xe7fbcf8,0],
		[0xe7fbd00,0],
		[0xe7fbd08,0],
		[0xe7fbd10,0],
		[0xe7fbd18,0],
		[0xe7fbd20,0],
		[0xe7fbd28,0],
		[0xe7fbd30,0],
		[0xe7fbd38,0],
		[0xe7fbd40,0],
		[0xe7fbd48,0],
		[0xe7fbd50,0],
		[0xe7fbd58,0],
		[0xe7fbd60,0],
		[0xe7fbd68,0],
		[0xe7fbd70,0],
		[0xe7fbd78,0],
		[0xe7fbd80,0],
		[0xe7fbd88,0],
		[0xe7fbd90,0],
		[0xe7fbd98,0],
		[0xe7fbda0,0],
		[0xe7fbda8,0],
		[0xe7fbdb0,0],
		[0xe7fbdb8,0],
		[0xe7fbdc0,0],
		[0xe7fbdc8,0],
		[0xe7fbdd0,0],
		[0xe7fbdd8,0],
		[0xe7fbde0,0],
		[0xe7fbde8,0],
		[0xe7fbdf0,0],
		[0xe7fbdf8,0],
		[0xe7fbe00,0],
		[0xe7fbe08,0],
		[0xe7fbe10,0],
		[0xe7fbe18,0],
		[0xe7fbe20,0],
		[0xe7fbe28,0],
		[0xe7fbe30,0],
		[0xe7fbe38,0],
		[0xe7fbe40,0],
		[0xe7fbe48,0],
		[0xe7fbe50,0],
		[0xe7fbe58,0],
		[0xe7fbe60,0],
		[0xe7fbe68,0],
		[0xe7fbe70,0],
		[0xe7fbe78,0],
		[0xe7fbe80,0],
		[0xe7fbe88,0],
		[0xe7fbe90,0],
		[0xe7fbe98,0],
		[0xe7fbea0,0],
		[0xe7fbea8,0],
		[0xe7fbed0,0],
		[0xe7fbef0,0],
		[0, 0]
]).
unknown([
		[0xe7fb2b8,4574601690245759260],
		[0xe7fb2c0,4575270193315446865],
		[0xe7fb2f8,4672146513571348480],
		[0xe7fb300,4666149227397644288],
		[0xe7fbee0,4672214133536456704],
		[0xe7fbee8,4666208601025544192],
		[0, 0]
]).
long([
		[0xe7fb290,3105],
		[0xe7fb298,25769804031],
		[0xe7fb2a0,43894565765552],
		[0xe7fb2a8,38654705673],
		[0xe7fb2e8,3298534883331],
		[0xe7fbeb0,3105],
		[0xe7fbeb8,103079215359],
		[0xe7fbec0,43903155700336],
		[0xe7fbec8,38654705673],
		[0xe7fbed8,3],
		[0, 0]
]).
int([
		[0xe7faef8,0],
		[0xe7faefc,0],
		[0xe7faf00,0],
		[0xe7faf04,0],
		[0xe7faf08,0],
		[0xe7faf0c,0],
		[0xe7faf10,0],
		[0xe7faf14,0],
		[0xe7faf18,0],
		[0xe7faf1c,0],
		[0xe7faf20,0],
		[0xe7faf24,0],
		[0xe7faf28,0],
		[0xe7faf2c,0],
		[0xe7faf30,0],
		[0xe7faf34,0],
		[0xe7faf38,0],
		[0xe7faf3c,0],
		[0xe7faf40,0],
		[0xe7faf44,0],
		[0xe7faf48,0],
		[0xe7faf4c,0],
		[0xe7faf50,0],
		[0xe7faf54,0],
		[0xe7faf58,0],
		[0xe7faf5c,0],
		[0xe7faf60,0],
		[0xe7faf64,0],
		[0xe7faf68,0],
		[0xe7faf6c,0],
		[0xe7faf70,0],
		[0xe7faf74,0],
		[0xe7faf78,0],
		[0xe7faf7c,0],
		[0xe7faf80,0],
		[0xe7faf84,0],
		[0xe7faf88,0],
		[0xe7faf8c,0],
		[0xe7faf90,0],
		[0xe7faf94,0],
		[0xe7faf98,0],
		[0xe7faf9c,0],
		[0xe7fafa0,0],
		[0xe7fafa4,0],
		[0xe7fafa8,0],
		[0xe7fafac,0],
		[0xe7fafb0,0],
		[0xe7fafb4,0],
		[0xe7fafb8,0],
		[0xe7fafbc,0],
		[0xe7fafc0,0],
		[0xe7fafc4,0],
		[0xe7fafc8,0],
		[0xe7fafcc,0],
		[0xe7fafd0,0],
		[0xe7fafd4,0],
		[0xe7fafd8,0],
		[0xe7fafdc,0],
		[0xe7fafe0,0],
		[0xe7fafe4,0],
		[0xe7fafe8,0],
		[0xe7fafec,0],
		[0xe7faff0,0],
		[0xe7faff4,0],
		[0xe7faff8,0],
		[0xe7faffc,0],
		[0xe7fb000,0],
		[0xe7fb004,0],
		[0xe7fb008,0],
		[0xe7fb00c,0],
		[0xe7fb010,0],
		[0xe7fb014,0],
		[0xe7fb018,0],
		[0xe7fb01c,0],
		[0xe7fb020,0],
		[0xe7fb024,0],
		[0xe7fb028,0],
		[0xe7fb02c,0],
		[0xe7fb030,0],
		[0xe7fb034,0],
		[0xe7fb038,0],
		[0xe7fb03c,0],
		[0xe7fb040,0],
		[0xe7fb044,0],
		[0xe7fb048,0],
		[0xe7fb04c,0],
		[0xe7fb050,0],
		[0xe7fb054,0],
		[0xe7fb058,0],
		[0xe7fb05c,0],
		[0xe7fb060,0],
		[0xe7fb064,0],
		[0xe7fb068,0],
		[0xe7fb06c,0],
		[0xe7fb070,0],
		[0xe7fb074,0],
		[0xe7fb078,0],
		[0xe7fb07c,0],
		[0xe7fb080,0],
		[0xe7fb084,0],
		[0xe7fb088,0],
		[0xe7fb08c,0],
		[0xe7fb090,0],
		[0xe7fb094,0],
		[0xe7fb098,0],
		[0xe7fb09c,0],
		[0xe7fb0a0,0],
		[0xe7fb0a4,0],
		[0xe7fb0a8,0],
		[0xe7fb0ac,0],
		[0xe7fb0b0,0],
		[0xe7fb0b4,0],
		[0xe7fb0b8,0],
		[0xe7fb0bc,0],
		[0xe7fb0c0,0],
		[0xe7fb0c4,0],
		[0xe7fb0c8,0],
		[0xe7fb0cc,0],
		[0xe7fb0d0,0],
		[0xe7fb0d4,0],
		[0xe7fb0d8,0],
		[0xe7fb0dc,0],
		[0xe7fb0e0,0],
		[0xe7fb0e4,0],
		[0xe7fb0e8,0],
		[0xe7fb0ec,0],
		[0xe7fb0f0,0],
		[0xe7fb0f4,0],
		[0xe7fb0f8,0],
		[0xe7fb0fc,0],
		[0xe7fb100,0],
		[0xe7fb104,0],
		[0xe7fb108,0],
		[0xe7fb10c,0],
		[0xe7fb110,0],
		[0xe7fb114,0],
		[0xe7fb118,0],
		[0xe7fb11c,0],
		[0xe7fb120,0],
		[0xe7fb124,0],
		[0xe7fb128,0],
		[0xe7fb12c,0],
		[0xe7fb130,0],
		[0xe7fb134,0],
		[0xe7fb138,0],
		[0xe7fb13c,0],
		[0xe7fb140,0],
		[0xe7fb144,0],
		[0xe7fb148,0],
		[0xe7fb14c,0],
		[0xe7fb150,0],
		[0xe7fb154,0],
		[0xe7fb158,0],
		[0xe7fb15c,0],
		[0xe7fb160,0],
		[0xe7fb164,0],
		[0xe7fb168,0],
		[0xe7fb16c,0],
		[0xe7fb170,0],
		[0xe7fb174,0],
		[0xe7fb178,0],
		[0xe7fb17c,0],
		[0xe7fb180,0],
		[0xe7fb184,0],
		[0xe7fb188,0],
		[0xe7fb18c,0],
		[0xe7fb190,0],
		[0xe7fb194,0],
		[0xe7fb198,0],
		[0xe7fb19c,0],
		[0xe7fb1a0,0],
		[0xe7fb1a4,0],
		[0xe7fb1a8,0],
		[0xe7fb1ac,0],
		[0xe7fb1b0,0],
		[0xe7fb1b4,0],
		[0xe7fb1b8,0],
		[0xe7fb1bc,0],
		[0xe7fb1c0,0],
		[0xe7fb1c4,0],
		[0xe7fb1c8,0],
		[0xe7fb1cc,0],
		[0xe7fb1d0,0],
		[0xe7fb1d4,0],
		[0xe7fb1d8,0],
		[0xe7fb1dc,0],
		[0xe7fb1e0,0],
		[0xe7fb1e4,0],
		[0xe7fb1e8,0],
		[0xe7fb1ec,0],
		[0xe7fb1f0,0],
		[0xe7fb1f4,0],
		[0xe7fb1f8,0],
		[0xe7fb1fc,0],
		[0xe7fb200,0],
		[0xe7fb204,0],
		[0xe7fb208,0],
		[0xe7fb20c,0],
		[0xe7fb210,0],
		[0xe7fb214,0],
		[0xe7fb218,0],
		[0xe7fb21c,0],
		[0xe7fb220,0],
		[0xe7fb224,0],
		[0xe7fb228,0],
		[0xe7fb22c,0],
		[0xe7fb230,0],
		[0xe7fb234,0],
		[0xe7fb238,0],
		[0xe7fb23c,0],
		[0xe7fb240,0],
		[0xe7fb244,0],
		[0xe7fb248,0],
		[0xe7fb24c,0],
		[0xe7fb250,0],
		[0xe7fb254,0],
		[0xe7fb258,0],
		[0xe7fb25c,0],
		[0xe7fb260,0],
		[0xe7fb264,0],
		[0xe7fb268,0],
		[0xe7fb26c,0],
		[0xe7fb270,0],
		[0xe7fb274,0],
		[0xe7fb278,0],
		[0xe7fb27c,0],
		[0xe7fb280,0],
		[0xe7fb284,0],
		[0xe7fb288,0],
		[0xe7fb28c,0],
		[0xe7fb290,3105],
		[0xe7fb294,0],
		[0xe7fb298,255],
		[0xe7fb29c,6],
		[0xe7fb2a0,432],
		[0xe7fb2a4,10220],
		[0xe7fb2a8,9],
		[0xe7fb2ac,9],
		[0xe7fb2b0,0],
		[0xe7fb2b4,0],
		[0xe7fb2b8,284],
		[0xe7fb2c0,81],
		[0xe7fb2c8,0],
		[0xe7fb2cc,0],
		[0xe7fb2d0,0],
		[0xe7fb2d4,0],
		[0xe7fb2d8,0],
		[0xe7fb2dc,0],
		[0xe7fb2e0,0],
		[0xe7fb2e4,0],
		[0xe7fb2e8,3],
		[0xe7fb2ec,768],
		[0xe7fb2f0,0],
		[0xe7fb2f4,0],
		[0xe7fb2f8,0],
		[0xe7fb300,0],
		[0xe7fb308,0],
		[0xe7fb30c,0],
		[0xe7fb310,0],
		[0xe7fb314,0],
		[0xe7fb318,0],
		[0xe7fb31c,0],
		[0xe7fb320,0],
		[0xe7fb324,0],
		[0xe7fb328,0],
		[0xe7fb32c,0],
		[0xe7fb330,0],
		[0xe7fb334,0],
		[0xe7fb338,0],
		[0xe7fb33c,0],
		[0xe7fb340,0],
		[0xe7fb344,0],
		[0xe7fb348,0],
		[0xe7fb34c,0],
		[0xe7fb350,0],
		[0xe7fb354,0],
		[0xe7fb358,0],
		[0xe7fb35c,0],
		[0xe7fb360,0],
		[0xe7fb364,0],
		[0xe7fb368,0],
		[0xe7fb36c,0],
		[0xe7fb370,0],
		[0xe7fb374,0],
		[0xe7fb378,0],
		[0xe7fb37c,0],
		[0xe7fb380,0],
		[0xe7fb384,0],
		[0xe7fb388,0],
		[0xe7fb38c,0],
		[0xe7fb390,0],
		[0xe7fb394,0],
		[0xe7fb398,0],
		[0xe7fb39c,0],
		[0xe7fb3a0,0],
		[0xe7fb3a4,0],
		[0xe7fb3a8,0],
		[0xe7fb3ac,0],
		[0xe7fb3b0,0],
		[0xe7fb3b4,0],
		[0xe7fb3b8,0],
		[0xe7fb3bc,0],
		[0xe7fb3c0,0],
		[0xe7fb3c4,0],
		[0xe7fb3c8,0],
		[0xe7fb3cc,0],
		[0xe7fb3d0,0],
		[0xe7fb3d4,0],
		[0xe7fb3d8,0],
		[0xe7fb3dc,0],
		[0xe7fb3e0,0],
		[0xe7fb3e4,0],
		[0xe7fb3e8,0],
		[0xe7fb3ec,0],
		[0xe7fb3f0,0],
		[0xe7fb3f4,0],
		[0xe7fb3f8,0],
		[0xe7fb3fc,0],
		[0xe7fb400,0],
		[0xe7fb404,0],
		[0xe7fb408,0],
		[0xe7fb40c,0],
		[0xe7fb410,0],
		[0xe7fb414,0],
		[0xe7fb418,0],
		[0xe7fb41c,0],
		[0xe7fb420,0],
		[0xe7fb424,0],
		[0xe7fb428,0],
		[0xe7fb42c,0],
		[0xe7fb430,0],
		[0xe7fb434,0],
		[0xe7fb438,0],
		[0xe7fb43c,0],
		[0xe7fb440,0],
		[0xe7fb444,0],
		[0xe7fb448,0],
		[0xe7fb44c,0],
		[0xe7fb450,0],
		[0xe7fb454,0],
		[0xe7fb458,0],
		[0xe7fb45c,0],
		[0xe7fb460,0],
		[0xe7fb464,0],
		[0xe7fb468,0],
		[0xe7fb46c,0],
		[0xe7fb470,0],
		[0xe7fb474,0],
		[0xe7fb478,0],
		[0xe7fb47c,0],
		[0xe7fb480,0],
		[0xe7fb484,0],
		[0xe7fb488,0],
		[0xe7fb48c,0],
		[0xe7fb490,0],
		[0xe7fb494,0],
		[0xe7fb498,0],
		[0xe7fb49c,0],
		[0xe7fb4a0,0],
		[0xe7fb4a4,0],
		[0xe7fb4a8,0],
		[0xe7fb4ac,0],
		[0xe7fb4b0,0],
		[0xe7fb4b4,0],
		[0xe7fb4b8,0],
		[0xe7fb4bc,0],
		[0xe7fb4c0,0],
		[0xe7fb4c4,0],
		[0xe7fb4c8,0],
		[0xe7fb4cc,0],
		[0xe7fb4d0,0],
		[0xe7fb4d4,0],
		[0xe7fb4d8,0],
		[0xe7fb4dc,0],
		[0xe7fb4e0,0],
		[0xe7fb4e4,0],
		[0xe7fb4e8,0],
		[0xe7fb4ec,0],
		[0xe7fb4f0,0],
		[0xe7fb4f4,0],
		[0xe7fb4f8,0],
		[0xe7fb4fc,0],
		[0xe7fb500,0],
		[0xe7fb504,0],
		[0xe7fb508,0],
		[0xe7fb50c,0],
		[0xe7fb510,0],
		[0xe7fb514,0],
		[0xe7fb518,0],
		[0xe7fb51c,0],
		[0xe7fb520,0],
		[0xe7fb524,0],
		[0xe7fb528,0],
		[0xe7fb52c,0],
		[0xe7fb530,0],
		[0xe7fb534,0],
		[0xe7fb538,0],
		[0xe7fb53c,0],
		[0xe7fb540,0],
		[0xe7fb544,0],
		[0xe7fb548,0],
		[0xe7fb54c,0],
		[0xe7fb550,0],
		[0xe7fb554,0],
		[0xe7fb558,0],
		[0xe7fb55c,0],
		[0xe7fb560,0],
		[0xe7fb564,0],
		[0xe7fb568,0],
		[0xe7fb56c,0],
		[0xe7fb570,0],
		[0xe7fb574,0],
		[0xe7fb578,0],
		[0xe7fb57c,0],
		[0xe7fb580,0],
		[0xe7fb584,0],
		[0xe7fb588,0],
		[0xe7fb58c,0],
		[0xe7fb590,0],
		[0xe7fb594,0],
		[0xe7fb598,0],
		[0xe7fb59c,0],
		[0xe7fb5a0,0],
		[0xe7fb5a4,0],
		[0xe7fb5a8,0],
		[0xe7fb5ac,0],
		[0xe7fb5b0,0],
		[0xe7fb5b4,0],
		[0xe7fb5b8,0],
		[0xe7fb5bc,0],
		[0xe7fb5c0,0],
		[0xe7fb5c4,0],
		[0xe7fb5c8,0],
		[0xe7fb5cc,0],
		[0xe7fb5d0,0],
		[0xe7fb5d4,0],
		[0xe7fb5d8,0],
		[0xe7fb5dc,0],
		[0xe7fb5e0,0],
		[0xe7fb5e4,0],
		[0xe7fb5e8,0],
		[0xe7fb5ec,0],
		[0xe7fb5f0,0],
		[0xe7fb5f4,0],
		[0xe7fb5f8,0],
		[0xe7fb5fc,0],
		[0xe7fb600,0],
		[0xe7fb604,0],
		[0xe7fb608,0],
		[0xe7fb60c,0],
		[0xe7fb610,0],
		[0xe7fb614,0],
		[0xe7fb618,0],
		[0xe7fb61c,0],
		[0xe7fb620,0],
		[0xe7fb624,0],
		[0xe7fb628,0],
		[0xe7fb62c,0],
		[0xe7fb630,0],
		[0xe7fb634,0],
		[0xe7fb638,0],
		[0xe7fb63c,0],
		[0xe7fb640,0],
		[0xe7fb644,0],
		[0xe7fb648,0],
		[0xe7fb64c,0],
		[0xe7fb650,0],
		[0xe7fb654,0],
		[0xe7fb658,0],
		[0xe7fb65c,0],
		[0xe7fb660,0],
		[0xe7fb664,0],
		[0xe7fb668,0],
		[0xe7fb66c,0],
		[0xe7fb670,0],
		[0xe7fb674,0],
		[0xe7fb678,0],
		[0xe7fb67c,0],
		[0xe7fb680,0],
		[0xe7fb684,0],
		[0xe7fb688,0],
		[0xe7fb68c,0],
		[0xe7fb690,0],
		[0xe7fb694,0],
		[0xe7fb698,0],
		[0xe7fb69c,0],
		[0xe7fb6a0,0],
		[0xe7fb6a4,0],
		[0xe7fb6a8,0],
		[0xe7fb6ac,0],
		[0xe7fb6b0,0],
		[0xe7fb6b4,0],
		[0xe7fb6b8,0],
		[0xe7fb6bc,0],
		[0xe7fb6c0,0],
		[0xe7fb6c4,0],
		[0xe7fb6c8,0],
		[0xe7fb6cc,0],
		[0xe7fb6d0,0],
		[0xe7fb6d4,0],
		[0xe7fb6d8,0],
		[0xe7fb6dc,0],
		[0xe7fb6e0,0],
		[0xe7fb6e4,0],
		[0xe7fb6e8,0],
		[0xe7fb6ec,0],
		[0xe7fb6f0,0],
		[0xe7fb6f4,0],
		[0xe7fb6f8,0],
		[0xe7fb6fc,0],
		[0xe7fb700,0],
		[0xe7fb704,0],
		[0xe7fb708,0],
		[0xe7fb70c,0],
		[0xe7fb710,0],
		[0xe7fb714,0],
		[0xe7fb718,0],
		[0xe7fb71c,0],
		[0xe7fb720,0],
		[0xe7fb724,0],
		[0xe7fb728,0],
		[0xe7fb72c,0],
		[0xe7fb730,0],
		[0xe7fb734,0],
		[0xe7fb738,0],
		[0xe7fb73c,0],
		[0xe7fb740,0],
		[0xe7fb744,0],
		[0xe7fb748,0],
		[0xe7fb74c,0],
		[0xe7fb750,0],
		[0xe7fb754,0],
		[0xe7fb758,0],
		[0xe7fb75c,0],
		[0xe7fb760,0],
		[0xe7fb764,0],
		[0xe7fb768,0],
		[0xe7fb76c,0],
		[0xe7fb770,0],
		[0xe7fb774,0],
		[0xe7fb778,0],
		[0xe7fb77c,0],
		[0xe7fb780,0],
		[0xe7fb784,0],
		[0xe7fb788,0],
		[0xe7fb78c,0],
		[0xe7fb790,0],
		[0xe7fb794,0],
		[0xe7fb798,0],
		[0xe7fb79c,0],
		[0xe7fb7a0,0],
		[0xe7fb7a4,0],
		[0xe7fb7a8,0],
		[0xe7fb7ac,0],
		[0xe7fb7b0,0],
		[0xe7fb7b4,0],
		[0xe7fb7b8,0],
		[0xe7fb7bc,0],
		[0xe7fb7c0,0],
		[0xe7fb7c4,0],
		[0xe7fb7c8,0],
		[0xe7fb7cc,0],
		[0xe7fb7d0,0],
		[0xe7fb7d4,0],
		[0xe7fb7d8,0],
		[0xe7fb7dc,0],
		[0xe7fb7e0,0],
		[0xe7fb7e4,0],
		[0xe7fb7e8,0],
		[0xe7fb7ec,0],
		[0xe7fb7f0,0],
		[0xe7fb7f4,0],
		[0xe7fb7f8,0],
		[0xe7fb7fc,0],
		[0xe7fb800,0],
		[0xe7fb804,0],
		[0xe7fb808,0],
		[0xe7fb80c,0],
		[0xe7fb810,0],
		[0xe7fb814,0],
		[0xe7fb818,0],
		[0xe7fb81c,0],
		[0xe7fb820,0],
		[0xe7fb824,0],
		[0xe7fb828,0],
		[0xe7fb82c,0],
		[0xe7fb830,0],
		[0xe7fb834,0],
		[0xe7fb838,0],
		[0xe7fb83c,0],
		[0xe7fb840,0],
		[0xe7fb844,0],
		[0xe7fb848,0],
		[0xe7fb84c,0],
		[0xe7fb850,0],
		[0xe7fb854,0],
		[0xe7fb858,0],
		[0xe7fb85c,0],
		[0xe7fb860,0],
		[0xe7fb864,0],
		[0xe7fb868,0],
		[0xe7fb86c,0],
		[0xe7fb870,0],
		[0xe7fb874,0],
		[0xe7fb878,0],
		[0xe7fb87c,0],
		[0xe7fb880,0],
		[0xe7fb884,0],
		[0xe7fb888,0],
		[0xe7fb88c,0],
		[0xe7fb890,0],
		[0xe7fb894,0],
		[0xe7fb898,0],
		[0xe7fb89c,0],
		[0xe7fb8a0,0],
		[0xe7fb8a4,0],
		[0xe7fb8a8,0],
		[0xe7fb8ac,0],
		[0xe7fb8b0,0],
		[0xe7fb8b4,0],
		[0xe7fb8b8,0],
		[0xe7fb8bc,0],
		[0xe7fb8c0,0],
		[0xe7fb8c4,0],
		[0xe7fb8c8,0],
		[0xe7fb8cc,0],
		[0xe7fb8d0,0],
		[0xe7fb8d4,0],
		[0xe7fb8d8,0],
		[0xe7fb8dc,0],
		[0xe7fb8e0,0],
		[0xe7fb8e4,0],
		[0xe7fb8e8,0],
		[0xe7fb8ec,0],
		[0xe7fb8f0,0],
		[0xe7fb8f4,0],
		[0xe7fb8f8,0],
		[0xe7fb8fc,0],
		[0xe7fb900,0],
		[0xe7fb904,0],
		[0xe7fb908,0],
		[0xe7fb90c,0],
		[0xe7fb910,0],
		[0xe7fb914,0],
		[0xe7fb918,0],
		[0xe7fb91c,0],
		[0xe7fb920,0],
		[0xe7fb924,0],
		[0xe7fb928,0],
		[0xe7fb92c,0],
		[0xe7fb930,0],
		[0xe7fb934,0],
		[0xe7fb938,0],
		[0xe7fb93c,0],
		[0xe7fb940,0],
		[0xe7fb944,0],
		[0xe7fb948,0],
		[0xe7fb94c,0],
		[0xe7fb950,0],
		[0xe7fb954,0],
		[0xe7fb958,0],
		[0xe7fb95c,0],
		[0xe7fb960,0],
		[0xe7fb964,0],
		[0xe7fb968,0],
		[0xe7fb96c,0],
		[0xe7fb970,0],
		[0xe7fb974,0],
		[0xe7fb978,0],
		[0xe7fb97c,0],
		[0xe7fb980,0],
		[0xe7fb984,0],
		[0xe7fb988,0],
		[0xe7fb98c,0],
		[0xe7fb990,0],
		[0xe7fb994,0],
		[0xe7fb998,0],
		[0xe7fb99c,0],
		[0xe7fb9a0,0],
		[0xe7fb9a4,0],
		[0xe7fb9a8,0],
		[0xe7fb9ac,0],
		[0xe7fb9b0,0],
		[0xe7fb9b4,0],
		[0xe7fb9b8,0],
		[0xe7fb9bc,0],
		[0xe7fb9c0,0],
		[0xe7fb9c4,0],
		[0xe7fb9c8,0],
		[0xe7fb9cc,0],
		[0xe7fb9d0,0],
		[0xe7fb9d4,0],
		[0xe7fb9d8,0],
		[0xe7fb9dc,0],
		[0xe7fb9e0,0],
		[0xe7fb9e4,0],
		[0xe7fb9e8,0],
		[0xe7fb9ec,0],
		[0xe7fb9f0,0],
		[0xe7fb9f4,0],
		[0xe7fb9f8,0],
		[0xe7fb9fc,0],
		[0xe7fba00,0],
		[0xe7fba04,0],
		[0xe7fba08,0],
		[0xe7fba0c,0],
		[0xe7fba10,0],
		[0xe7fba14,0],
		[0xe7fba18,0],
		[0xe7fba1c,0],
		[0xe7fba20,0],
		[0xe7fba24,0],
		[0xe7fba28,0],
		[0xe7fba2c,0],
		[0xe7fba30,0],
		[0xe7fba34,0],
		[0xe7fba38,0],
		[0xe7fba3c,0],
		[0xe7fba40,0],
		[0xe7fba44,0],
		[0xe7fba48,0],
		[0xe7fba4c,0],
		[0xe7fba50,0],
		[0xe7fba54,0],
		[0xe7fba58,0],
		[0xe7fba5c,0],
		[0xe7fba60,0],
		[0xe7fba64,0],
		[0xe7fba68,0],
		[0xe7fba6c,0],
		[0xe7fba70,0],
		[0xe7fba74,0],
		[0xe7fba78,0],
		[0xe7fba7c,0],
		[0xe7fba80,0],
		[0xe7fba84,0],
		[0xe7fba88,0],
		[0xe7fba8c,0],
		[0xe7fba90,0],
		[0xe7fba94,0],
		[0xe7fba98,0],
		[0xe7fba9c,0],
		[0xe7fbaa0,0],
		[0xe7fbaa4,0],
		[0xe7fbaa8,0],
		[0xe7fbaac,0],
		[0xe7fbab0,0],
		[0xe7fbab4,0],
		[0xe7fbab8,0],
		[0xe7fbabc,0],
		[0xe7fbac0,0],
		[0xe7fbac4,0],
		[0xe7fbac8,0],
		[0xe7fbacc,0],
		[0xe7fbad0,0],
		[0xe7fbad4,0],
		[0xe7fbad8,0],
		[0xe7fbadc,0],
		[0xe7fbae0,0],
		[0xe7fbae4,0],
		[0xe7fbae8,0],
		[0xe7fbaec,0],
		[0xe7fbaf0,0],
		[0xe7fbaf4,0],
		[0xe7fbaf8,0],
		[0xe7fbafc,0],
		[0xe7fbb00,0],
		[0xe7fbb04,0],
		[0xe7fbb08,0],
		[0xe7fbb0c,0],
		[0xe7fbb10,0],
		[0xe7fbb14,0],
		[0xe7fbb18,0],
		[0xe7fbb1c,0],
		[0xe7fbb20,0],
		[0xe7fbb24,0],
		[0xe7fbb28,0],
		[0xe7fbb2c,0],
		[0xe7fbb30,0],
		[0xe7fbb34,0],
		[0xe7fbb38,0],
		[0xe7fbb3c,0],
		[0xe7fbb40,0],
		[0xe7fbb44,0],
		[0xe7fbb48,0],
		[0xe7fbb4c,0],
		[0xe7fbb50,0],
		[0xe7fbb54,0],
		[0xe7fbb58,0],
		[0xe7fbb5c,0],
		[0xe7fbb60,0],
		[0xe7fbb64,0],
		[0xe7fbb68,0],
		[0xe7fbb6c,0],
		[0xe7fbb70,0],
		[0xe7fbb74,0],
		[0xe7fbb78,0],
		[0xe7fbb7c,0],
		[0xe7fbb80,0],
		[0xe7fbb84,0],
		[0xe7fbb88,0],
		[0xe7fbb8c,0],
		[0xe7fbb90,0],
		[0xe7fbb94,0],
		[0xe7fbb98,0],
		[0xe7fbb9c,0],
		[0xe7fbba0,0],
		[0xe7fbba4,0],
		[0xe7fbba8,0],
		[0xe7fbbac,0],
		[0xe7fbbb0,0],
		[0xe7fbbb4,0],
		[0xe7fbbb8,0],
		[0xe7fbbbc,0],
		[0xe7fbbc0,0],
		[0xe7fbbc4,0],
		[0xe7fbbc8,0],
		[0xe7fbbcc,0],
		[0xe7fbbd0,0],
		[0xe7fbbd4,0],
		[0xe7fbbd8,0],
		[0xe7fbbdc,0],
		[0xe7fbbe0,0],
		[0xe7fbbe4,0],
		[0xe7fbbe8,0],
		[0xe7fbbec,0],
		[0xe7fbbf0,0],
		[0xe7fbbf4,0],
		[0xe7fbbf8,0],
		[0xe7fbbfc,0],
		[0xe7fbc00,0],
		[0xe7fbc04,0],
		[0xe7fbc08,0],
		[0xe7fbc0c,0],
		[0xe7fbc10,0],
		[0xe7fbc14,0],
		[0xe7fbc18,0],
		[0xe7fbc1c,0],
		[0xe7fbc20,0],
		[0xe7fbc24,0],
		[0xe7fbc28,0],
		[0xe7fbc2c,0],
		[0xe7fbc30,0],
		[0xe7fbc34,0],
		[0xe7fbc38,0],
		[0xe7fbc3c,0],
		[0xe7fbc40,0],
		[0xe7fbc44,0],
		[0xe7fbc48,0],
		[0xe7fbc4c,0],
		[0xe7fbc50,0],
		[0xe7fbc54,0],
		[0xe7fbc58,0],
		[0xe7fbc5c,0],
		[0xe7fbc60,0],
		[0xe7fbc64,0],
		[0xe7fbc68,0],
		[0xe7fbc6c,0],
		[0xe7fbc70,0],
		[0xe7fbc74,0],
		[0xe7fbc78,0],
		[0xe7fbc7c,0],
		[0xe7fbc80,0],
		[0xe7fbc84,0],
		[0xe7fbc88,0],
		[0xe7fbc8c,0],
		[0xe7fbc90,0],
		[0xe7fbc94,0],
		[0xe7fbc98,0],
		[0xe7fbc9c,0],
		[0xe7fbca0,0],
		[0xe7fbca4,0],
		[0xe7fbca8,0],
		[0xe7fbcac,0],
		[0xe7fbcb0,0],
		[0xe7fbcb4,0],
		[0xe7fbcb8,0],
		[0xe7fbcbc,0],
		[0xe7fbcc0,0],
		[0xe7fbcc4,0],
		[0xe7fbcc8,0],
		[0xe7fbccc,0],
		[0xe7fbcd0,0],
		[0xe7fbcd4,0],
		[0xe7fbcd8,0],
		[0xe7fbcdc,0],
		[0xe7fbce0,0],
		[0xe7fbce4,0],
		[0xe7fbce8,0],
		[0xe7fbcec,0],
		[0xe7fbcf0,0],
		[0xe7fbcf4,0],
		[0xe7fbcf8,0],
		[0xe7fbcfc,0],
		[0xe7fbd00,0],
		[0xe7fbd04,0],
		[0xe7fbd08,0],
		[0xe7fbd0c,0],
		[0xe7fbd10,0],
		[0xe7fbd14,0],
		[0xe7fbd18,0],
		[0xe7fbd1c,0],
		[0xe7fbd20,0],
		[0xe7fbd24,0],
		[0xe7fbd28,0],
		[0xe7fbd2c,0],
		[0xe7fbd30,0],
		[0xe7fbd34,0],
		[0xe7fbd38,0],
		[0xe7fbd3c,0],
		[0xe7fbd40,0],
		[0xe7fbd44,0],
		[0xe7fbd48,0],
		[0xe7fbd4c,0],
		[0xe7fbd50,0],
		[0xe7fbd54,0],
		[0xe7fbd58,0],
		[0xe7fbd5c,0],
		[0xe7fbd60,0],
		[0xe7fbd64,0],
		[0xe7fbd68,0],
		[0xe7fbd6c,0],
		[0xe7fbd70,0],
		[0xe7fbd74,0],
		[0xe7fbd78,0],
		[0xe7fbd7c,0],
		[0xe7fbd80,0],
		[0xe7fbd84,0],
		[0xe7fbd88,0],
		[0xe7fbd8c,0],
		[0xe7fbd90,0],
		[0xe7fbd94,0],
		[0xe7fbd98,0],
		[0xe7fbd9c,0],
		[0xe7fbda0,0],
		[0xe7fbda4,0],
		[0xe7fbda8,0],
		[0xe7fbdac,0],
		[0xe7fbdb0,0],
		[0xe7fbdb4,0],
		[0xe7fbdb8,0],
		[0xe7fbdbc,0],
		[0xe7fbdc0,0],
		[0xe7fbdc4,0],
		[0xe7fbdc8,0],
		[0xe7fbdcc,0],
		[0xe7fbdd0,0],
		[0xe7fbdd4,0],
		[0xe7fbdd8,0],
		[0xe7fbddc,0],
		[0xe7fbde0,0],
		[0xe7fbde4,0],
		[0xe7fbde8,0],
		[0xe7fbdec,0],
		[0xe7fbdf0,0],
		[0xe7fbdf4,0],
		[0xe7fbdf8,0],
		[0xe7fbdfc,0],
		[0xe7fbe00,0],
		[0xe7fbe04,0],
		[0xe7fbe08,0],
		[0xe7fbe0c,0],
		[0xe7fbe10,0],
		[0xe7fbe14,0],
		[0xe7fbe18,0],
		[0xe7fbe1c,0],
		[0xe7fbe20,0],
		[0xe7fbe24,0],
		[0xe7fbe28,0],
		[0xe7fbe2c,0],
		[0xe7fbe30,0],
		[0xe7fbe34,0],
		[0xe7fbe38,0],
		[0xe7fbe3c,0],
		[0xe7fbe40,0],
		[0xe7fbe44,0],
		[0xe7fbe48,0],
		[0xe7fbe4c,0],
		[0xe7fbe50,0],
		[0xe7fbe54,0],
		[0xe7fbe58,0],
		[0xe7fbe5c,0],
		[0xe7fbe60,0],
		[0xe7fbe64,0],
		[0xe7fbe68,0],
		[0xe7fbe6c,0],
		[0xe7fbe70,0],
		[0xe7fbe74,0],
		[0xe7fbe78,0],
		[0xe7fbe7c,0],
		[0xe7fbe80,0],
		[0xe7fbe84,0],
		[0xe7fbe88,0],
		[0xe7fbe8c,0],
		[0xe7fbe90,0],
		[0xe7fbe94,0],
		[0xe7fbe98,0],
		[0xe7fbe9c,0],
		[0xe7fbea0,0],
		[0xe7fbea4,0],
		[0xe7fbea8,0],
		[0xe7fbeac,0],
		[0xe7fbeb0,3105],
		[0xe7fbeb4,0],
		[0xe7fbeb8,255],
		[0xe7fbebc,24],
		[0xe7fbec0,624],
		[0xe7fbec4,10222],
		[0xe7fbec8,9],
		[0xe7fbecc,9],
		[0xe7fbed0,0],
		[0xe7fbed4,0],
		[0xe7fbed8,3],
		[0xe7fbedc,0],
		[0xe7fbee0,0],
		[0xe7fbee8,0],
		[0xe7fbef0,0],
		[0xe7fbef4,0],
		[0, 0]
]).
string_val([
		[0, 0]
]).
:- use_module(library(clpfd)).
:- use_module(reif).
:- style_check(-singleton).

isTrue([X, Y]):-
    X == 49.

isTrue([X|Tail]):-
    isTrue(Tail).

log(File_name, Name, Addr, Base):-
    Offset #= Addr - Base,
    open(File_name, append, Stream),
    write(Stream, Name),
    write(Stream, ':'),
    write(Stream, Offset),
    nl(Stream),
    close(Stream).

possible_task_struct(Base_addr) :-
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM2_addr, Pid_addr, Tgid_addr, Real_parent_addr, Parent_addr , Child_addr, 
           Group_leader_addr, Thread_group_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    %MM2_addr #> Base_addr + 1000,
    Tasks_addr #> MM2_addr - 100,
    %FS_struct_addr #< Base_addr + 4000,
    Tgid_addr #= Pid_addr + 4,
    Real_parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr - 8,
    Child_addr #= Parent_addr + 8,
    %FIXME This may be too strong
    Group_leader_addr #=< Child_addr +32,
    %Comm_addr #= Base_addr + 1656,
    %Tasks_addr #= Base_addr + 1072,
    %FS_struct_addr #= Base_addr + 2640,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    % make query after labeling
    MM2_val #> 0,
    integer(MM2_val),
    
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val,  Comm_addr, Comm_val ]),

    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_parent_addr, Real_parent_val, Group_leader_addr, Group_leader_val]),
    Real_parent_val #> 0,
    Group_leader_val #> 0,
    query_ts(Real_parent_val, Comm_offset, Tasks_offset),
    query_ts(Group_leader_val, Comm_offset, Tasks_offset),

    labeling([enum], [Cred_addr, Cred_val]),
    Cred_val #> 0,
    query_cred(Cred_val),

    labeling([enum], [FS_struct_addr, FS_struct_val]),
    FS_struct_val #> 0,
    %query_fs_struct(FS_struct_val),



    get_time(End),
    Time_past is End - Current,
    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    log("profile.txt", "tasks", Tasks_addr, Base_addr),
    log("profile.txt", "mm_struct", MM2_addr, Base_addr),
    log("profile.txt", "comm", Comm_addr, Base_addr),
    log("profile.txt", "parent", Parent_addr, Base_addr),
    log("profile.txt", "group_leader", Group_leader_addr, Base_addr),
    log("profile.txt", "cred", Cred_addr, Base_addr),

    
    print_nl('tasks offset', Tasks_offset),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).

possible_mm_struct(Current_addr) :- 
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    % TODO: ADD vm_area_struct *mmap
    Ptr_profile = [
        [Mmap_addr, Mmap_val],
        [Pgd_addr, Pgd_val]  
    ],
    Ulong_profile = [
        [Mmap_base_addr, Mmap_base_val],
        [Mmap_legacy_base_addr, Mmap_legacy_base_val],
        [Task_size_addr, Task_size_val],
        [High_vm_end_addr, High_vm_end_val],
        [Start_brk_addr, Start_brk_val],
        [Brk_addr, Brk_val],
        [Start_stack_addr, Start_stack_val],
        [ARG_start_addr, ARG_start_val]
    ],
    Mmap_addr #= Current_addr,


    Mmap_base_addr #> Mmap_addr,
    %FIXME mmap_base need more value constraint, because we removed mmap_legacy_base and highest_vm_end.
    Mmap_base_val #> 0x7f0000000000,
    %FIXME in old linux version, e.g., there is no mmap_legacy_base and highest_vm_enb
    %chain([Mmap_base_addr, Mmap_legacy_base_addr, Task_size_addr, High_vm_end_addr, Pgd_addr], #<),
    chain([Mmap_base_addr, Task_size_addr, Pgd_addr], #<),

    %FIXME: This rule may be too strong
    %High_vm_end_addr #= Mmap_base_addr + 24, 
    Pgd_addr #> Task_size_addr,
    Pgd_addr #=< Task_size_addr + 40,
    %FIXME: This rule may not be true for other mm_struct.
    Task_size_val #>= 0x7ffffffff000,

    %Mmap_base_addr #= Current_addr + 40,
    %Mmap_legacy_base_addr #= Current_addr + 40,
    %Task_size_addr #= Current_addr + 48,
    %High_vm_end_addr #= Current_addr + 72,

    Start_brk_addr #> Pgd_addr,
    Start_stack_val #> 0x7ff000000000,
    % TODO: Convert this to index comparison. 
    ARG_start_addr #< Current_addr + 500,
    chain([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr], #<),
    ARG_start_addr #= Start_brk_addr + 24,
    Brk_val #< 0x7ff000000000,
    ARG_start_val #> 0x7ff000000000,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),


    labeling([enum], [Mmap_addr, Mmap_val, Mmap_base_addr, Pgd_addr, Pgd_val]),
    Mmap_val #> 0,
    Pgd_val #> 0,
    
    process_create(path('python'),
                    ['subquery.py', Mmap_val, "vm_area_struct", 2],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    label([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr]),
    statistics(real_time, [End|_]),

    log("profile.txt", "mmap", Mmap_addr, Current_addr),
    log("profile.txt", "mmap_base", Mmap_base_addr, Current_addr),
    log("profile.txt", "pgd", Pgd_addr, Current_addr),
    log("profile.txt", "start_brk", Start_brk_addr, Current_addr),
    log("profile.txt", "brk", Brk_addr, Current_addr),
    log("profile.txt", "start_stack", Start_stack_addr, Current_addr),
    log("profile.txt", "arg_start", ARG_start_addr, Current_addr),
    log("profile.txt", "mm_struct time", End, Start).


possible_vm_area_struct(Base_addr, Level) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [VM_next_addr, VM_next_val],
        [VM_file_addr, VM_file_val]
    ],
    Ulong_profile = [
        [VM_start_addr, VM_start_val],
        [VM_end_addr, VM_end_val],
        [VM_flag_addr, VM_flag_val]
        %VM_pgoff is 0, and we do not consider 0 as ulong
        %[VM_pgoff_addr, VM_pgoff_val]
    ],
    VM_start_addr #>= Base_addr,
    chain([VM_start_addr, VM_end_addr, VM_next_addr, VM_flag_addr, VM_file_addr], #<),
    VM_end_addr #= VM_start_addr + 8,
    VM_next_addr #= VM_end_addr + 8,
    VM_next_addr #< Base_addr + 32,
    VM_file_addr #< Base_addr + 180,
    VM_pgoff_addr #= VM_file_addr - 8,
    %VM_file_addr #= Base_addr + 160,

    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    %FIXME: VM_flag may need value constraints.

    label([VM_next_addr, VM_next_val]),
    /*if_(Level = 2,
        call(check_vm_area_struct, VM_next_val, 1),
        1 = 1),*/
    %Level #> 1 #==> check_vm_area_struct(VM_next_val, 1),

    labeling([enum], [VM_start_addr, VM_end_addr, VM_flag_addr, VM_pgoff_addr, VM_file_addr, VM_file_val]),
    
    VM_file_val #> 0,
    process_create(path('python'),
                ['subquery.py', VM_file_val, "vm_file"],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    statistics(real_time, [End|_]),

    log("profile.txt", "vm_start", VM_start_addr, Base_addr),
    log("profile.txt", "vm_end", VM_end_addr, Base_addr),
    log("profile.txt", "vm_next", VM_next_addr, Base_addr),
    log("profile.txt", "vm_flag", VM_flag_addr, Base_addr),
    log("profile.txt", "vm_pgoff", VM_pgoff_addr, Base_addr),
    log("profile.txt", "vm_file", VM_file_addr, Base_addr),
    log("profile.txt", "vm_area_struct time", End, Start).

check_vm_area_struct(Base_addr, Level) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "vm_area_struct", Level],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vm_file(Base_addr) :-
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [Vfs_mount_addr, Vfs_mount_val],
        [Dentry_addr, Dentry_val]
    ],
    Vfs_mount_addr #> Base_addr,
    Dentry_addr #= Vfs_mount_addr + 8,
    Dentry_addr #< Base_addr + 40,
    tuples_in(Ptr_profile, Ptr),
    label([Vfs_mount_val, Dentry_val]),
    Vfs_mount_val #>0,
    Dentry_val #> 0,
    %FIXME seems like we do not need this, make sure the string is not addr=0
/*
    process_create(path('python'),
                    ['subquery.py', Vfs_mount_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vfs_mount(Base_addr) :-
    pointer(Ptr),
    Ptr_profile = [
        [Dentry_addr, Dentry_val]
    ],
    Dentry_addr #< Base_addr + 16,
    tuples_in(Ptr_profile, Ptr),
    label([Dentry_val]),
    Dentry_val #> 0,
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).
    
possible_dentry(Base_addr) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    string_val(Str),
    Ptr_profile = [
        [Dparent_addr, Dparent_val],
        [Dchild_addr, Dchild_val]
    ],
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    %log("profile.txt", "dentry addr", Base_addr, 0),
    Dparent_addr #> Base_addr,
    Dname_addr #> 0,
    Dname_addr #< Base_addr + 200,
    %Dname_addr #= Base_addr + 160,
    %FIXME This child rule is not applicable for old kernel version. 
    %chain([Dparent_addr, Dname_addr, Dchild_addr], #<),
    %Dchild_addr #< Base_addr + 200,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    labeling([enum], [Dparent_addr, Dparent_val, Dname_addr, Dchild_addr, Dchild_val]),
    Dname_offset #= Dname_addr - Base_addr,
    integer(Dname_offset),
    Dparent_val #> 0,
    
    %FIXME d_parent may not be initialized
    /*process_create(path('python'),
                ['subquery.py', Dparent_val, "d_entry", Dname_offset],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/

    %FIXME: may need to find another way for all list_head. 
    /*Dchild_offset #= Dchild_addr - Base_addr,
    integer(Dchild_offset),
    Dchild_base #= Dchild_val - Dchild_offset,
    integer(Dchild_base),
    Dchild_base #> 0,
    process_create(path('python'),
                ['subquery.py', Dchild_base, "d_entry", Dname_offset],
                [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    statistics(real_time, [End|_]).
/*
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    log("profile.txt", "d_parent", Dparent_addr, Base_addr),
    log("profile.txt", "d_child", Dchild_addr, Base_addr),
    log("profile.txt", "dentry time", End, Start).
*/
possible_d_entry(Base_addr, Dname_offset) :-
    current_predicate(string_val/1),
    string_val(Str),
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    Dname_addr #= Base_addr + Dname_offset,
    tuples_in(Str_profile, Str),
    label([Dname_addr]).

possible_list_head(Tasks_val, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_val, Tasks_addr]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],
    Comm_addr #= Tasks_val - Tasks_offset + Comm_offset,
    Tasks_addr #\= Tasks_val,
    tuples_in(Str_profile, Str),
    tuples_in(Ptr_profile, Ptr),
    label([Comm_addr]).

possible_ts(Base_addr, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_addr, Tasks_val]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],

    Comm_addr #= Base_addr + Comm_offset,
    Tasks_addr #= Base_addr + Tasks_offset,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),

    label([Tasks_val]),
    
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "list_head", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_cred(Base_addr) :-
    statistics(real_time, [Start|_]),

    int(Int),
    long(Ulg),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3],
        [Addr4, Val4],
        [Addr5, Val5],
        [Addr6, Val6],
        [Addr7, Val7],
        [Addr8, Val8],
        [Addr9, Val9]
    ],
    %FIXME For now, this rule is hard-coded because we do not consider 0 as a unsign long number. 
    %So that for cred whos val10 is 0, this rule does not apply.
    /*Ulong_profile = [
        [Addr10, Val10],
        [Addr11, Val11]
    ],*/
    Addr1 #> Base_addr,
    %chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9, Addr10, Addr11], #<),
    chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9], #<),
    Addr1 #= Base_addr + 4,
    Addr9 #= Addr1 + 32,
    %Addr11 #< Base_addr + 120,
    tuples_in(Int_profile, Int),
    %tuples_in(Ulong_profile, Ulg),
    statistics(real_time, [End|_]),
    labeling([enum], [Addr1, Addr2, Addr5, Addr6]),
    log("profile.txt", "cred time", End, Start),
    log('profile.txt', "uid", Addr1, Base_addr),
    log('profile.txt', "gid", Addr2, Base_addr),
    log('profile.txt', "euid", Addr5, Base_addr),
    log('profile.txt', "egid", Addr6, Base_addr).

possible_fs_struct(Base_addr) :-
    statistics(real_time, [Start|_]),
    int(Int),
    pointer(Ptr),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3]
    ],
    Ptr_profile = [
        [Root_addr, Root_val],
        [PWD_addr, PWD_val]
    ],
    Addr1 #>= Base_addr,
    chain([Addr1, Addr2, Addr3, Root_addr, PWD_addr], #<),
    PWD_addr #= Root_addr + 16,
    PWD_addr #< Base_addr + 50,
    tuples_in(Int_profile, Int),
    tuples_in(Ptr_profile, Ptr),
    label([Root_addr, Root_val]),
    
    process_create(path('python'),
                    ['subquery.py', Root_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    label([PWD_addr, PWD_val]),
    process_create(path('python'),
                    ['subquery.py', PWD_val, "dentry"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    statistics(real_time, [End|_]),
    log("profile.txt", "fs time", End, Start),
    log('profile.txt', "Root", Root_addr, Base_addr),
    log('profile.txt', "pwd", PWD_addr, Base_addr).
