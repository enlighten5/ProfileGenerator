:- use_module(library(clpfd)).
:- style_check(-singleton).
pointer([
		[0x2930330,141937192],
		[0x2930338,0],
		[0x2930340,141937224],
		[0x2930348,0],
		[0x2930350,0],
		[0x2930360,206576000],
		[0x2930378,0],
		[0x2930380,0],
		[0x2930388,0],
		[0x2930390,0],
		[0x2930398,152872336],
		[0x29303a0,152872336],
		[0x29303a8,491359592],
		[0x29303b0,0],
		[0x29303c0,0],
		[0x29303c8,0],
		[0x29303d0,0],
		[0x29303d8,0],
		[0x29303e0,0],
		[0x29303f8,411995664],
		[0x2930400,411995264],
		[0x2930408,412134561],
		[0x2930410,412131360],
		[0x2930418,412129664],
		[0x2930428,206576000],
		[0x2930440,0],
		[0x2930448,0],
		[0x2930450,0],
		[0x2930458,0],
		[0x2930460,43189344],
		[0x2930468,43189344],
		[0x2930470,0],
		[0x2930478,0],
		[0x2930488,0],
		[0x2930490,0],
		[0x2930498,0],
		[0x29304a0,0],
		[0x29304a8,0],
		[0x29304c0,43189824],
		[0x29304c8,411749104],
		[0x29304d0,43189856],
		[0x29304d8,0],
		[0x29304e0,0],
		[0x29304e8,0],
		[0x29304f0,206576000],
		[0x2930508,0],
		[0x2930510,0],
		[0x2930518,0],
		[0x2930520,0],
		[0x2930528,43189544],
		[0x2930530,43189544],
		[0x2930538,0],
		[0x2930540,0],
		[0x2930550,0],
		[0x2930558,0],
		[0x2930560,0],
		[0x2930568,0],
		[0x2930570,0],
		[0x2930588,43198416],
		[0x2930590,411750600],
		[0x2930598,43198449],
		[0x29305a0,0],
		[0x29305a8,0],
		[0x29305b0,0],
		[0x29305b8,206576000],
		[0x29305d0,0],
		[0x29305d8,0],
		[0x29305e0,0],
		[0x29305e8,0],
		[0x29305f0,152871376],
		[0x29305f8,152871376],
		[0x2930600,491356424],
		[0x2930608,0],
		[0x2930618,0],
		[0x2930620,0],
		[0x2930628,0],
		[0x2930630,0],
		[0x2930638,0],
		[0x2930650,43192024],
		[0x2930658,43189424],
		[0x2930660,43192057],
		[0x2930668,0],
		[0x2930670,43189456],
		[0x2930678,0],
		[0x2930680,206576000],
		[0x2930698,0],
		[0x29306a0,0],
		[0x29306a8,0],
		[0x29306b0,0],
		[0x29306b8,152872784],
		[0x29306c0,152872784],
		[0x29306c8,491359328],
		[0x29306d0,0],
		[0x29306e0,0],
		[0x29306e8,0],
		[0x29306f0,0],
		[0x29306f8,0],
		[0x2930700,0],
		[0x2930718,43190424],
		[0x2930720,43191224],
		[0x2930728,411753433],
		[0x2930730,43190456],
		[0x2930738,43191256],
		[0x2930740,0],
		[0x2930748,206576000],
		[0x2930760,0],
		[0x2930768,0],
		[0x2930770,0],
		[0x2930778,0],
		[0x2930780,43190144],
		[0x2930788,43190144],
		[0x2930790,0],
		[0x2930798,0],
		[0x29307a8,0],
		[0x29307b0,0],
		[0x29307b8,0],
		[0x29307c0,0],
		[0x29307c8,0],
		[0x29307e0,82245184],
		[0x29307e8,141937592],
		[0x29307f0,411748737],
		[0x29307f8,82245216],
		[0x2930800,141937624],
		[0x2930810,206576000],
		[0x2930828,0],
		[0x2930830,0],
		[0x2930838,0],
		[0x2930840,0],
		[0x2930848,152872592],
		[0x2930850,152872592],
		[0x2930858,491358096],
		[0x2930860,0],
		[0x2930870,0],
		[0x2930878,0],
		[0x2930880,0],
		[0x2930888,0],
		[0x2930890,0],
		[0x29308a8,411753400],
		[0x29308b0,43190024],
		[0x29308b8,43190057],
		[0x29308c0,0],
		[0x29308c8,0],
		[0x29308d0,0],
		[0x29308d8,206576000],
		[0x29308f0,0],
		[0x29308f8,0],
		[0x2930900,0],
		[0x2930908,0],
		[0x2930910,152874576],
		[0x2930918,152874576],
		[0x2930920,491359328],
		[0x2930928,0],
		[0x2930938,0],
		[0x2930940,0],
		[0x2930948,0],
		[0x2930950,0],
		[0x2930958,0],
		[0x2930970,43210904],
		[0x2930978,43174040],
		[0x2930980,43210937],
		[0x2930988,0],
		[0x2930990,0],
		[0x2930998,0],
		[0x29309a0,206576000],
		[0x29309b8,320305192],
		[0x29309c0,141432072],
		[0x29309c8,321159656],
		[0x29309d8,43190744],
		[0x29309e0,43190744],
		[0x29309e8,0],
		[0x29309f0,264653440],
		[0x29309f8,0],
		[0x2930a00,197204480],
		[0x2930a08,0],
		[0x2930a10,0],
		[0x2930a18,0],
		[0x2930a20,0],
		[0x2930a38,412000256],
		[0x2930a40,411887568],
		[0x2930a48,411887601],
		[0x2930a50,0],
		[0x2930a58,0],
		[0x2930a60,0],
		[0x2930a68,206579264],
		[0x2930a80,206964777],
		[0x2930a88,395228224],
		[0x2930a90,0],
		[0x2930aa0,43190944],
		[0x2930aa8,43190944],
		[0x2930ab0,0],
		[0x2930ab8,264653440],
		[0x2930ac8,415031040],
		[0x2930ad0,0],
		[0x2930ad8,0],
		[0x2930ae0,0],
		[0x2930ae8,0],
		[0x2930b00,412132528],
		[0x2930b08,290142160],
		[0x2930b10,43199849],
		[0x2930b18,411992296],
		[0x2930b20,290142192],
		[0x2930b28,0],
		[0x2930b30,206576000],
		[0x2930b48,0],
		[0x2930b50,0],
		[0x2930b58,0],
		[0x2930b60,0],
		[0x2930b68,43191144],
		[0x2930b70,43191144],
		[0x2930b78,0],
		[0x2930b80,0],
		[0x2930b90,0],
		[0x2930b98,0],
		[0x2930ba0,0],
		[0x2930ba8,0],
		[0x2930bb0,0],
		[0x2930bc8,43190024],
		[0x2930bd0,43188224],
		[0x2930bd8,43190057],
		[0x2930be0,0],
		[0x2930be8,0],
		[0x2930bf0,0],
		[0x2930bf8,206576000],
		[0x2930c10,0],
		[0x2930c18,0],
		[0x2930c20,0],
		[0x2930c28,0],
		[0x2930c30,152873488],
		[0x2930c38,152873488],
		[0x2930c40,491359328],
		[0x2930c48,0],
		[0x2930c58,0],
		[0x2930c60,0],
		[0x2930c68,0],
		[0x2930c70,0],
		[0x2930c78,0],
		[0x2930c90,411996360],
		[0x2930c98,411996960],
		[0x2930ca0,411996393],
		[0x2930ca8,0],
		[0x2930cb0,0],
		[0x2930cb8,0],
		[0x2930cc0,206576000],
		[0x2930cd8,0],
		[0x2930ce0,0],
		[0x2930ce8,0],
		[0x2930cf0,0],
		[0x2930cf8,43191544],
		[0x2930d00,43191544],
		[0x2930d08,0],
		[0x2930d10,0],
		[0x2930d20,0],
		[0x2930d28,0],
		[0x2930d30,0],
		[0x2930d38,0],
		[0x2930d40,0],
		[0x2930d58,43188224],
		[0x2930d60,43192024],
		[0x2930d68,43192057],
		[0x2930d70,0],
		[0x2930d78,0],
		[0x2930d80,0],
		[0x2930d88,206576000],
		[0x2930da0,0],
		[0x2930da8,0],
		[0x2930db0,0],
		[0x2930db8,0],
		[0x2930dc0,152873936],
		[0x2930dc8,152873936],
		[0x2930dd0,491359328],
		[0x2930dd8,0],
		[0x2930de8,0],
		[0x2930df0,0],
		[0x2930df8,0],
		[0x2930e00,0],
		[0x2930e08,0],
		[0x2930e20,411751800],
		[0x2930e28,43188624],
		[0x2930e30,43188657],
		[0x2930e38,0],
		[0x2930e40,0],
		[0x2930e48,0],
		[0x2930e50,206576000],
		[0x2930e68,0],
		[0x2930e70,0],
		[0x2930e78,0],
		[0x2930e80,0],
		[0x2930e88,43191944],
		[0x2930e90,43191944],
		[0x2930e98,0],
		[0x2930ea0,0],
		[0x2930eb0,0],
		[0x2930eb8,0],
		[0x2930ec0,0],
		[0x2930ec8,0],
		[0x2930ed0,0],
		[0x2930ee8,43191624],
		[0x2930ef0,43189824],
		[0x2930ef8,411749137],
		[0x2930f00,43191656],
		[0x2930f08,43189856],
		[0x2930f10,0],
		[0x2930f18,206576000],
		[0x2930f30,0],
		[0x2930f38,0],
		[0x2930f40,0],
		[0x2930f48,0],
		[0x2930f50,43192144],
		[0x2930f58,43192144],
		[0x2930f60,0],
		[0x2930f68,0],
		[0x2930f78,0],
		[0x2930f80,0],
		[0x2930f88,0],
		[0x2930f90,0],
		[0x2930f98,0],
		[0x2930fa0,0],
		[0x2930fa8,0],
		[0x2930fb0,0],
		[0x2930fb8,0],
		[0x2930fc0,0],
		[0x2930fc8,0],
		[0x2930fd0,0],
		[0x2930fd8,0],
		[0x2930fe0,0],
		[0x2930fe8,0],
		[0x2930ff0,0],
		[0x2930ff8,0],
		[0, 0]
]).
unknown([
		[0x2930368,9223372036854775845],
		[0x2930688,9223372036854775845],
		[0x2930818,9223372036854775845],
		[0x29308e0,9223372036854775845],
		[0x29309a8,9223372036854775845],
		[0x2930c00,9223372036854775845],
		[0x2930d90,9223372036854775845],
		[0x2931000,16565899579919558117],
		[0x2931008,16565899579919558117],
		[0x2931010,16565899579919558117],
		[0x2931018,16565899579919558117],
		[0x2931020,16565899579919558117],
		[0x2931028,16565899579919558117],
		[0x2931030,16565899579919558117],
		[0x2931038,16565899579919558117],
		[0x2931040,16565899579919558117],
		[0x2931048,16565899579919558117],
		[0x2931050,16565899579919558117],
		[0x2931058,16565899579919558117],
		[0x2931060,16565899579919558117],
		[0x2931068,16565899579919558117],
		[0x2931070,16565899579919558117],
		[0x2931078,16565899579919558117],
		[0x2931080,16565899579919558117],
		[0x2931088,16565899579919558117],
		[0x2931090,16565899579919558117],
		[0x2931098,16565899579919558117],
		[0x29310a0,16565899579919558117],
		[0x29310a8,16565899579919558117],
		[0x29310b0,16565899579919558117],
		[0x29310b8,16565899579919558117],
		[0x29310c0,16565899579919558117],
		[0x29310c8,16565899579919558117],
		[0x29310d0,16565899579919558117],
		[0x29310d8,16565899579919558117],
		[0x29310e0,16565899579919558117],
		[0x29310e8,16565899579919558117],
		[0x29310f0,16565899579919558117],
		[0x29310f8,16565899579919558117],
		[0x2931100,16565899579919558117],
		[0x2931108,16565899579919558117],
		[0x2931110,16565899579919558117],
		[0x2931118,16565899579919558117],
		[0x2931120,16565899579919558117],
		[0x2931128,16565899579919558117],
		[0x2931130,16565899579919558117],
		[0x2931138,16565899579919558117],
		[0x2931140,16565899579919558117],
		[0x2931148,16565899579919558117],
		[0x2931150,16565899579919558117],
		[0x2931158,16565899579919558117],
		[0x2931160,16565899579919558117],
		[0x2931168,16565899579919558117],
		[0x2931170,16565899579919558117],
		[0x2931178,16565899579919558117],
		[0x2931180,16565899579919558117],
		[0x2931188,16565899579919558117],
		[0x2931190,16565899579919558117],
		[0x2931198,16565899579919558117],
		[0x29311a0,16565899579919558117],
		[0x29311a8,16565899579919558117],
		[0x29311b0,16565899579919558117],
		[0x29311b8,16565899579919558117],
		[0x29311c0,16565899579919558117],
		[0x29311c8,16565899579919558117],
		[0x29311d0,16565899579919558117],
		[0x29311d8,16565899579919558117],
		[0x29311e0,16565899579919558117],
		[0x29311e8,16565899579919558117],
		[0x29311f0,16565899579919558117],
		[0x29311f8,16565899579919558117],
		[0x2931200,16565899579919558117],
		[0x2931208,16565899579919558117],
		[0x2931210,16565899579919558117],
		[0x2931218,16565899579919558117],
		[0x2931220,16565899579919558117],
		[0x2931228,16565899579919558117],
		[0x2931230,16565899579919558117],
		[0x2931238,16565899579919558117],
		[0x2931240,16565899579919558117],
		[0x2931248,16565899579919558117],
		[0x2931250,16565899579919558117],
		[0x2931258,16565899579919558117],
		[0x2931260,16565899579919558117],
		[0x2931268,16565899579919558117],
		[0x2931270,16565899579919558117],
		[0x2931278,16565899579919558117],
		[0x2931280,16565899579919558117],
		[0x2931288,16565899579919558117],
		[0x2931290,16565899579919558117],
		[0x2931298,16565899579919558117],
		[0x29312a0,16565899579919558117],
		[0x29312a8,16565899579919558117],
		[0x29312b0,16565899579919558117],
		[0x29312b8,16565899579919558117],
		[0x29312c0,16565899579919558117],
		[0x29312c8,16565899579919558117],
		[0x29312d0,16565899579919558117],
		[0x29312d8,16565899579919558117],
		[0x29312e0,16565899579919558117],
		[0x29312e8,16565899579919558117],
		[0x29312f0,16565899579919558117],
		[0x29312f8,16565899579919558117],
		[0x2931300,16565899579919558117],
		[0x2931308,16565899579919558117],
		[0x2931310,16565899579919558117],
		[0x2931318,16565899579919558117],
		[0, 0]
]).
long([
		[0x2930320,716066258944],
		[0x2930328,716067307520],
		[0x2930358,716066258944],
		[0x2930370,135266419],
		[0x29303b8,174820864],
		[0x29303e8,140322831069184],
		[0x29303f0,140322831073280],
		[0x2930430,288],
		[0x2930438,134217840],
		[0x2930480,34258503679],
		[0x29304b0,140322889789440],
		[0x29304b8,140322889793536],
		[0x29304f8,288],
		[0x2930500,134217840],
		[0x2930548,34258518015],
		[0x2930578,8578149281792],
		[0x2930580,8578149347328],
		[0x29305c8,135266421],
		[0x2930610,2094274727],
		[0x2930640,140322889793536],
		[0x2930648,140322890838016],
		[0x2930690,135266419],
		[0x29306d8,34258518016],
		[0x2930708,140322892935168],
		[0x2930710,140322892939264],
		[0x2930750,288],
		[0x2930758,134217840],
		[0x29307a0,34258518783],
		[0x29307d0,11469623132160],
		[0x29307d8,11469624180736],
		[0x2930808,3409927208960],
		[0x2930820,135266419],
		[0x2930868,2800200960],
		[0x2930898,140322892939264],
		[0x29308a0,140322893983744],
		[0x29308e8,135266419],
		[0x2930930,34258518784],
		[0x2930960,140322916077568],
		[0x2930968,140322916143104],
		[0x29309b0,134217937],
		[0x29309d0,15],
		[0x2930a28,139647413780480],
		[0x2930a30,139647413866496],
		[0x2930a78,134217845],
		[0x2930a98,28],
		[0x2930ac0,8],
		[0x2930af0,8578149511168],
		[0x2930af8,8578149543936],
		[0x2930b40,134217845],
		[0x2930b88,2094274783],
		[0x2930bb8,140322891890688],
		[0x2930bc0,140322892935168],
		[0x2930c08,135266419],
		[0x2930c50,34258518528],
		[0x2930c80,140322849665024],
		[0x2930c88,140322849669120],
		[0x2930cc8,288],
		[0x2930cd0,134217840],
		[0x2930d18,34258508219],
		[0x2930d48,140322890842112],
		[0x2930d50,140322891886592],
		[0x2930d98,135266419],
		[0x2930de0,34258518272],
		[0x2930e10,140322894503936],
		[0x2930e18,140322894508032],
		[0x2930e58,288],
		[0x2930e60,134217840],
		[0x2930ea8,34258519166],
		[0x2930ed8,140322890838016],
		[0x2930ee0,140322890842112],
		[0x2930f20,288],
		[0x2930f28,134217840],
		[0x2930f70,34258518271],
		[0, 0]
]).
int([
		[0x2930324,166],
		[0x293032c,166],
		[0x2930338,0],
		[0x293033c,0],
		[0x2930348,0],
		[0x293034c,0],
		[0x2930350,0],
		[0x2930354,0],
		[0x293035c,166],
		[0x2930368,37],
		[0x2930374,0],
		[0x2930378,0],
		[0x293037c,0],
		[0x2930380,0],
		[0x2930384,0],
		[0x2930388,0],
		[0x293038c,0],
		[0x2930390,0],
		[0x2930394,0],
		[0x29303b0,0],
		[0x29303b4,0],
		[0x29303bc,0],
		[0x29303c0,0],
		[0x29303c4,0],
		[0x29303c8,0],
		[0x29303cc,0],
		[0x29303d0,0],
		[0x29303d4,0],
		[0x29303d8,0],
		[0x29303dc,0],
		[0x29303e0,0],
		[0x29303e4,0],
		[0x29303ec,32671],
		[0x29303f4,32671],
		[0x2930420,20480],
		[0x2930424,0],
		[0x2930430,288],
		[0x2930434,0],
		[0x293043c,0],
		[0x2930440,0],
		[0x2930444,0],
		[0x2930448,0],
		[0x293044c,0],
		[0x2930450,0],
		[0x2930454,0],
		[0x2930458,0],
		[0x293045c,0],
		[0x2930470,0],
		[0x2930474,0],
		[0x2930478,0],
		[0x293047c,0],
		[0x2930484,7],
		[0x2930488,0],
		[0x293048c,0],
		[0x2930490,0],
		[0x2930494,0],
		[0x2930498,0],
		[0x293049c,0],
		[0x29304a0,0],
		[0x29304a4,0],
		[0x29304a8,0],
		[0x29304ac,0],
		[0x29304b4,32671],
		[0x29304bc,32671],
		[0x29304d8,0],
		[0x29304dc,0],
		[0x29304e0,0],
		[0x29304e4,0],
		[0x29304e8,0],
		[0x29304ec,0],
		[0x29304f8,288],
		[0x29304fc,0],
		[0x2930504,0],
		[0x2930508,0],
		[0x293050c,0],
		[0x2930510,0],
		[0x2930514,0],
		[0x2930518,0],
		[0x293051c,0],
		[0x2930520,0],
		[0x2930524,0],
		[0x2930538,0],
		[0x293053c,0],
		[0x2930540,0],
		[0x2930544,0],
		[0x293054c,7],
		[0x2930550,0],
		[0x2930554,0],
		[0x2930558,0],
		[0x293055c,0],
		[0x2930560,0],
		[0x2930564,0],
		[0x2930568,0],
		[0x293056c,0],
		[0x2930570,0],
		[0x2930574,0],
		[0x293057c,1997],
		[0x2930584,1997],
		[0x29305a0,0],
		[0x29305a4,0],
		[0x29305a8,0],
		[0x29305ac,0],
		[0x29305b0,0],
		[0x29305b4,0],
		[0x29305c0,37],
		[0x29305c4,0],
		[0x29305cc,0],
		[0x29305d0,0],
		[0x29305d4,0],
		[0x29305d8,0],
		[0x29305dc,0],
		[0x29305e0,0],
		[0x29305e4,0],
		[0x29305e8,0],
		[0x29305ec,0],
		[0x2930608,0],
		[0x293060c,0],
		[0x2930614,0],
		[0x2930618,0],
		[0x293061c,0],
		[0x2930620,0],
		[0x2930624,0],
		[0x2930628,0],
		[0x293062c,0],
		[0x2930630,0],
		[0x2930634,0],
		[0x2930638,0],
		[0x293063c,0],
		[0x2930644,32671],
		[0x293064c,32671],
		[0x2930668,0],
		[0x293066c,0],
		[0x2930678,0],
		[0x293067c,0],
		[0x2930688,37],
		[0x2930694,0],
		[0x2930698,0],
		[0x293069c,0],
		[0x29306a0,0],
		[0x29306a4,0],
		[0x29306a8,0],
		[0x29306ac,0],
		[0x29306b0,0],
		[0x29306b4,0],
		[0x29306d0,0],
		[0x29306d4,0],
		[0x29306dc,7],
		[0x29306e0,0],
		[0x29306e4,0],
		[0x29306e8,0],
		[0x29306ec,0],
		[0x29306f0,0],
		[0x29306f4,0],
		[0x29306f8,0],
		[0x29306fc,0],
		[0x2930700,0],
		[0x2930704,0],
		[0x293070c,32671],
		[0x2930714,32671],
		[0x2930740,0],
		[0x2930744,0],
		[0x2930750,288],
		[0x2930754,0],
		[0x293075c,0],
		[0x2930760,0],
		[0x2930764,0],
		[0x2930768,0],
		[0x293076c,0],
		[0x2930770,0],
		[0x2930774,0],
		[0x2930778,0],
		[0x293077c,0],
		[0x2930790,0],
		[0x2930794,0],
		[0x2930798,0],
		[0x293079c,0],
		[0x29307a4,7],
		[0x29307a8,0],
		[0x29307ac,0],
		[0x29307b0,0],
		[0x29307b4,0],
		[0x29307b8,0],
		[0x29307bc,0],
		[0x29307c0,0],
		[0x29307c4,0],
		[0x29307c8,0],
		[0x29307cc,0],
		[0x29307d4,2670],
		[0x29307dc,2670],
		[0x293080c,793],
		[0x2930818,37],
		[0x2930824,0],
		[0x2930828,0],
		[0x293082c,0],
		[0x2930830,0],
		[0x2930834,0],
		[0x2930838,0],
		[0x293083c,0],
		[0x2930840,0],
		[0x2930844,0],
		[0x2930860,0],
		[0x2930864,0],
		[0x293086c,0],
		[0x2930870,0],
		[0x2930874,0],
		[0x2930878,0],
		[0x293087c,0],
		[0x2930880,0],
		[0x2930884,0],
		[0x2930888,0],
		[0x293088c,0],
		[0x2930890,0],
		[0x2930894,0],
		[0x293089c,32671],
		[0x29308a4,32671],
		[0x29308c0,0],
		[0x29308c4,0],
		[0x29308c8,0],
		[0x29308cc,0],
		[0x29308d0,0],
		[0x29308d4,0],
		[0x29308e0,37],
		[0x29308ec,0],
		[0x29308f0,0],
		[0x29308f4,0],
		[0x29308f8,0],
		[0x29308fc,0],
		[0x2930900,0],
		[0x2930904,0],
		[0x2930908,0],
		[0x293090c,0],
		[0x2930928,0],
		[0x293092c,0],
		[0x2930934,7],
		[0x2930938,0],
		[0x293093c,0],
		[0x2930940,0],
		[0x2930944,0],
		[0x2930948,0],
		[0x293094c,0],
		[0x2930950,0],
		[0x2930954,0],
		[0x2930958,0],
		[0x293095c,0],
		[0x2930964,32671],
		[0x293096c,32671],
		[0x2930988,0],
		[0x293098c,0],
		[0x2930990,0],
		[0x2930994,0],
		[0x2930998,0],
		[0x293099c,0],
		[0x29309a8,37],
		[0x29309b4,0],
		[0x29309d0,15],
		[0x29309d4,0],
		[0x29309e8,0],
		[0x29309ec,0],
		[0x29309f8,0],
		[0x29309fc,0],
		[0x2930a08,0],
		[0x2930a0c,0],
		[0x2930a10,0],
		[0x2930a14,0],
		[0x2930a18,0],
		[0x2930a1c,0],
		[0x2930a20,0],
		[0x2930a24,0],
		[0x2930a2c,32514],
		[0x2930a34,32514],
		[0x2930a50,0],
		[0x2930a54,0],
		[0x2930a58,0],
		[0x2930a5c,0],
		[0x2930a60,0],
		[0x2930a64,0],
		[0x2930a70,37],
		[0x2930a74,0],
		[0x2930a7c,0],
		[0x2930a90,0],
		[0x2930a94,0],
		[0x2930a98,28],
		[0x2930a9c,0],
		[0x2930ab0,0],
		[0x2930ab4,0],
		[0x2930ac0,8],
		[0x2930ac4,0],
		[0x2930ad0,0],
		[0x2930ad4,0],
		[0x2930ad8,0],
		[0x2930adc,0],
		[0x2930ae0,0],
		[0x2930ae4,0],
		[0x2930ae8,0],
		[0x2930aec,0],
		[0x2930af4,1997],
		[0x2930afc,1997],
		[0x2930b28,0],
		[0x2930b2c,0],
		[0x2930b38,37],
		[0x2930b3c,0],
		[0x2930b44,0],
		[0x2930b48,0],
		[0x2930b4c,0],
		[0x2930b50,0],
		[0x2930b54,0],
		[0x2930b58,0],
		[0x2930b5c,0],
		[0x2930b60,0],
		[0x2930b64,0],
		[0x2930b78,0],
		[0x2930b7c,0],
		[0x2930b80,0],
		[0x2930b84,0],
		[0x2930b8c,0],
		[0x2930b90,0],
		[0x2930b94,0],
		[0x2930b98,0],
		[0x2930b9c,0],
		[0x2930ba0,0],
		[0x2930ba4,0],
		[0x2930ba8,0],
		[0x2930bac,0],
		[0x2930bb0,0],
		[0x2930bb4,0],
		[0x2930bbc,32671],
		[0x2930bc4,32671],
		[0x2930be0,0],
		[0x2930be4,0],
		[0x2930be8,0],
		[0x2930bec,0],
		[0x2930bf0,0],
		[0x2930bf4,0],
		[0x2930c00,37],
		[0x2930c0c,0],
		[0x2930c10,0],
		[0x2930c14,0],
		[0x2930c18,0],
		[0x2930c1c,0],
		[0x2930c20,0],
		[0x2930c24,0],
		[0x2930c28,0],
		[0x2930c2c,0],
		[0x2930c48,0],
		[0x2930c4c,0],
		[0x2930c54,7],
		[0x2930c58,0],
		[0x2930c5c,0],
		[0x2930c60,0],
		[0x2930c64,0],
		[0x2930c68,0],
		[0x2930c6c,0],
		[0x2930c70,0],
		[0x2930c74,0],
		[0x2930c78,0],
		[0x2930c7c,0],
		[0x2930c84,32671],
		[0x2930c8c,32671],
		[0x2930ca8,0],
		[0x2930cac,0],
		[0x2930cb0,0],
		[0x2930cb4,0],
		[0x2930cb8,0],
		[0x2930cbc,0],
		[0x2930cc8,288],
		[0x2930ccc,0],
		[0x2930cd4,0],
		[0x2930cd8,0],
		[0x2930cdc,0],
		[0x2930ce0,0],
		[0x2930ce4,0],
		[0x2930ce8,0],
		[0x2930cec,0],
		[0x2930cf0,0],
		[0x2930cf4,0],
		[0x2930d08,0],
		[0x2930d0c,0],
		[0x2930d10,0],
		[0x2930d14,0],
		[0x2930d1c,7],
		[0x2930d20,0],
		[0x2930d24,0],
		[0x2930d28,0],
		[0x2930d2c,0],
		[0x2930d30,0],
		[0x2930d34,0],
		[0x2930d38,0],
		[0x2930d3c,0],
		[0x2930d40,0],
		[0x2930d44,0],
		[0x2930d4c,32671],
		[0x2930d54,32671],
		[0x2930d70,0],
		[0x2930d74,0],
		[0x2930d78,0],
		[0x2930d7c,0],
		[0x2930d80,0],
		[0x2930d84,0],
		[0x2930d90,37],
		[0x2930d9c,0],
		[0x2930da0,0],
		[0x2930da4,0],
		[0x2930da8,0],
		[0x2930dac,0],
		[0x2930db0,0],
		[0x2930db4,0],
		[0x2930db8,0],
		[0x2930dbc,0],
		[0x2930dd8,0],
		[0x2930ddc,0],
		[0x2930de4,7],
		[0x2930de8,0],
		[0x2930dec,0],
		[0x2930df0,0],
		[0x2930df4,0],
		[0x2930df8,0],
		[0x2930dfc,0],
		[0x2930e00,0],
		[0x2930e04,0],
		[0x2930e08,0],
		[0x2930e0c,0],
		[0x2930e14,32671],
		[0x2930e1c,32671],
		[0x2930e38,0],
		[0x2930e3c,0],
		[0x2930e40,0],
		[0x2930e44,0],
		[0x2930e48,0],
		[0x2930e4c,0],
		[0x2930e58,288],
		[0x2930e5c,0],
		[0x2930e64,0],
		[0x2930e68,0],
		[0x2930e6c,0],
		[0x2930e70,0],
		[0x2930e74,0],
		[0x2930e78,0],
		[0x2930e7c,0],
		[0x2930e80,0],
		[0x2930e84,0],
		[0x2930e98,0],
		[0x2930e9c,0],
		[0x2930ea0,0],
		[0x2930ea4,0],
		[0x2930eac,7],
		[0x2930eb0,0],
		[0x2930eb4,0],
		[0x2930eb8,0],
		[0x2930ebc,0],
		[0x2930ec0,0],
		[0x2930ec4,0],
		[0x2930ec8,0],
		[0x2930ecc,0],
		[0x2930ed0,0],
		[0x2930ed4,0],
		[0x2930edc,32671],
		[0x2930ee4,32671],
		[0x2930f10,0],
		[0x2930f14,0],
		[0x2930f20,288],
		[0x2930f24,0],
		[0x2930f2c,0],
		[0x2930f30,0],
		[0x2930f34,0],
		[0x2930f38,0],
		[0x2930f3c,0],
		[0x2930f40,0],
		[0x2930f44,0],
		[0x2930f48,0],
		[0x2930f4c,0],
		[0x2930f60,0],
		[0x2930f64,0],
		[0x2930f68,0],
		[0x2930f6c,0],
		[0x2930f74,7],
		[0x2930f78,0],
		[0x2930f7c,0],
		[0x2930f80,0],
		[0x2930f84,0],
		[0x2930f88,0],
		[0x2930f8c,0],
		[0x2930f90,0],
		[0x2930f94,0],
		[0x2930f98,0],
		[0x2930f9c,0],
		[0x2930fa0,0],
		[0x2930fa4,0],
		[0x2930fa8,0],
		[0x2930fac,0],
		[0x2930fb0,0],
		[0x2930fb4,0],
		[0x2930fb8,0],
		[0x2930fbc,0],
		[0x2930fc0,0],
		[0x2930fc4,0],
		[0x2930fc8,0],
		[0x2930fcc,0],
		[0x2930fd0,0],
		[0x2930fd4,0],
		[0x2930fd8,0],
		[0x2930fdc,0],
		[0x2930fe0,0],
		[0x2930fe4,0],
		[0x2930fe8,0],
		[0x2930fec,0],
		[0x2930ff0,0],
		[0x2930ff4,0],
		[0x2930ff8,0],
		[0x2930ffc,0],
		[0, 0]
]).
string_val([
		[0x2930420,20480],
		[0x29305c0,37],
		[0x2930a70,37],
		[0x2930b38,37],
		[0, 0]
]).
/* This file contains recursive predicates */
:- use_module(library(clpfd)).
:- use_module(reif).
:- style_check(-singleton).

isTrue([X, Y]):-
    X == 49.

isTrue([X|Tail]):-
    isTrue(Tail).

log(File_name, Name, Addr, Base):-
    Offset #= Addr - Base,
    open(File_name, append, Stream),
    write(Stream, Name),
    write(Stream, ':'),
    write(Stream, Offset),
    nl(Stream),
    close(Stream).

possible_task_struct(Base_addr) :-
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM2_addr, Pid_addr, Tgid_addr, Real_parent_addr, Parent_addr , Child_addr, 
           Group_leader_addr, Thread_group_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    %MM2_addr #> Base_addr + 1000,
    Tasks_addr #> MM2_addr - 100,
    %FS_struct_addr #< Base_addr + 4000,
    Tgid_addr #= Pid_addr + 4,
    Real_parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr - 8,
    Child_addr #= Parent_addr + 8,
    %FIXME This may be too strong
    Group_leader_addr #=< Child_addr +32,
    %Comm_addr #= Base_addr + 1656,
    %Tasks_addr #= Base_addr + 1072,
    %FS_struct_addr #= Base_addr + 2640,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    % make query after labeling
    MM2_val #> 0,
    integer(MM2_val),
    
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val,  Comm_addr, Comm_val ]),

    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_parent_addr, Real_parent_val, Group_leader_addr, Group_leader_val]),
    Real_parent_val #> 0,
    Group_leader_val #> 0,
    query_ts(Real_parent_val, Comm_offset, Tasks_offset),
    query_ts(Group_leader_val, Comm_offset, Tasks_offset),

    labeling([enum], [Cred_addr, Cred_val]),
    Cred_val #> 0,
    query_cred(Cred_val),

    labeling([enum], [FS_struct_addr, FS_struct_val]),
    FS_struct_val #> 0,
    %query_fs_struct(FS_struct_val),



    get_time(End),
    Time_past is End - Current,
    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    log("profile.txt", "tasks", Tasks_addr, Base_addr),
    log("profile.txt", "mm_struct", MM2_addr, Base_addr),
    log("profile.txt", "comm", Comm_addr, Base_addr),
    log("profile.txt", "parent", Parent_addr, Base_addr),
    log("profile.txt", "group_leader", Group_leader_addr, Base_addr),
    log("profile.txt", "cred", Cred_addr, Base_addr),

    
    print_nl('tasks offset', Tasks_offset),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).

possible_string_pointer(Base_addr) :-
    /* Verify if this pointer points to a stirng */
    string_val(Str),
    Str_profile = [
        [Name_addr, Name_val]
    ],
    tuples_in(Str_profile, Str),
    Name_addr #= Base_addr.

query_string_pointer(Val) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "string_pointer"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_mount_struct(Base_addr, Offset) :-
    pointer(Ptr),
    Ptr_profile = ([
        [Mnt_devname_addr, Mnt_devname_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Mnt_devname_addr #= Base_addr + Offset,
    labeling([enum], [Mnt_devname_addr, Mnt_devname_val]),
    query_string_pointer(Mnt_devname_val).



possible_kernel_param(Base_addr) :-
    string_val(Str),
    Str_profile = [
        [Name_addr, Name_val]
    ],
    tuples_in(Str_profile, Str),
    Name_addr #= Base_addr.

possible_in_device(Base_addr) :-
    /* in_ifaddr remains the same across kernel versions 
       but we need this query to find ip_ptr in net_device struct
    */
    /*
        struct net_device *dev;
        int               refcnt;
        int               dead;
        struct in_ifaddr  *ifa_list;
    */
    pointer(Ptr),
    int(Int),
    Ptr_profile = ([
        [Dev_addr, Dev_val],
        [Ifa_list_addr, Ifa_list_val]
    ]),
    Int_profile = ([
        [Refcnt_addr, Refcnt_val],
        [Dead_addr, Dead_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Dead_addr #= Refcnt_addr + 4,
    chain([Dev_addr, Refcnt_addr, Dead_addr, Ifa_list_addr], #<),
    Dev_addr #= Base_addr,
    Ifa_list_addr #= Base_addr + 16,
    labeling([enum], [Ifa_list_addr, Ifa_list_val]),

    process_create(path('python'),
                    ['subquery.py', Ifa_list_val, "in_ifaddr"],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_in_ifaddr(Base_addr) :-
    /* in_ifaddr remains the same across kernel versions */
    pointer(Ptr),
    Ptr_profile = ([
        [Hash_addr, Hash_val],
        [Ifa_next_addr, Ifa_next_val],
        [Ifa_dev_addr, Ifa_dev_val],
        [Rcu_head_addr, Rcu_head_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([Hash_addr, Ifa_next_addr, Ifa_dev_addr, Rcu_head_addr], #<),
    Hash_addr #= Base_addr,
    Ifa_next_addr #= Hash_addr + 16,
    Ifa_dev_addr #= Ifa_next_addr + 8,
    Rcu_head_addr #= Ifa_dev_addr + 8,
    labeling([enum], [Hash_addr, Ifa_next_addr, Ifa_dev_addr, Rcu_head_addr]).



possible_mm_struct(Current_addr) :- 
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    % TODO: ADD vm_area_struct *mmap
    Ptr_profile = [
        [Mmap_addr, Mmap_val],
        [Pgd_addr, Pgd_val]  
    ],
    Ulong_profile = [
        [Mmap_base_addr, Mmap_base_val],
        [Mmap_legacy_base_addr, Mmap_legacy_base_val],
        [Task_size_addr, Task_size_val],
        [High_vm_end_addr, High_vm_end_val],
        [Start_brk_addr, Start_brk_val],
        [Brk_addr, Brk_val],
        [Start_stack_addr, Start_stack_val],
        [ARG_start_addr, ARG_start_val]
    ],
    Mmap_addr #= Current_addr,


    Mmap_base_addr #> Mmap_addr,
    %FIXME mmap_base need more value constraint, because we removed mmap_legacy_base and highest_vm_end.
    Mmap_base_val #> 0x7f0000000000,
    
    chain([Mmap_base_addr, Task_size_addr, Pgd_addr], #<),


    Pgd_addr #> Task_size_addr,
    Pgd_addr #=< Task_size_addr + 40,
    %FIXME: This rule may not be true for other mm_struct.
    Task_size_val #>= 0x7ffffffff000,


    Start_brk_addr #> Pgd_addr,
    Start_stack_val #> 0x7ff000000000,
    ARG_start_addr #< Current_addr + 500,
    chain([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr], #<),
    ARG_start_addr #= Start_brk_addr + 24,
    Brk_val #< 0x7ff000000000,
    ARG_start_val #> 0x7ff000000000,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),


    labeling([enum], [Mmap_addr, Mmap_val, Mmap_base_addr, Pgd_addr, Pgd_val]),
    Mmap_val #> 0,
    Pgd_val #> 0,
    
    process_create(path('python'),
                    ['subquery.py', Mmap_val, "vm_area_struct", 2],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    label([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr]),
    statistics(real_time, [End|_]),

    log("./profile/mm_struct", "mmap", Mmap_addr, Current_addr),
    log("./profile/mm_struct", "mmap_base", Mmap_base_addr, Current_addr),
    log("./profile/mm_struct", "pgd", Pgd_addr, Current_addr),
    log("./profile/mm_struct", "start_brk", Start_brk_addr, Current_addr),
    log("./profile/mm_struct", "brk", Brk_addr, Current_addr),
    log("./profile/mm_struct", "start_stack", Start_stack_addr, Current_addr),
    log("./profile/mm_struct", "arg_start", ARG_start_addr, Current_addr),
    log("./profile/mm_struct", "mm_struct", End, Start).


possible_vm_area_struct(Base_addr, Level) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [VM_next_addr, VM_next_val],
        [VM_file_addr, VM_file_val]
    ],
    Ulong_profile = [
        [VM_start_addr, VM_start_val],
        [VM_end_addr, VM_end_val],
        [VM_flag_addr, VM_flag_val]
        /*VM_pgoff is 0, and we do not consider 0 as ulong*/
        %[VM_pgoff_addr, VM_pgoff_val]
    ],
    VM_start_addr #>= Base_addr,
    chain([VM_start_addr, VM_end_addr, VM_next_addr, VM_flag_addr, VM_file_addr], #<),
    VM_end_addr #= VM_start_addr + 8,
    VM_next_addr #= VM_end_addr + 8,
    VM_next_addr #< Base_addr + 32,
    VM_file_addr #< Base_addr + 180,
    VM_pgoff_addr #= VM_file_addr - 8,
    VM_flag_val #< 0x88888888,
    VM_file_addr #< Base_addr + 200,

    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    %FIXME: VM_flag may need value constraints.

    label([VM_next_addr, VM_next_val]),
    /* vm_file maybe zero! */
    labeling([enum], [VM_start_addr, VM_end_addr, VM_flag_addr, VM_pgoff_addr, VM_file_addr, VM_file_val]),
    /*
    VM_file_val #> 0,
    
    process_create(path('python'),
                ['subquery.py', VM_file_val, "vm_file"],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    statistics(real_time, [End|_]),*/
    

    log("./profile/vm_area_struct", "vm_start", VM_start_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_end", VM_end_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_next", VM_next_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_flag", VM_flag_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_pgoff", VM_pgoff_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_file", VM_file_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_area_struct", End, Start).

check_vm_area_struct(Base_addr, Level) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "vm_area_struct", Level],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vm_file(Base_addr) :-
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [Vfs_mount_addr, Vfs_mount_val],
        [Dentry_addr, Dentry_val],
        [F_op_addr, F_op_val]
    ],
    tuples_in(Ptr_profile, Ptr),
    Vfs_mount_addr #> Base_addr,
    Dentry_addr #= Vfs_mount_addr + 8,
    Dentry_addr #< Base_addr + 40,
    Vfs_mount_val #> 0,
    Dentry_val #> 0,
    F_op_addr #= Base_addr + 40, 
    F_op_val #> 0,
    chain([Vfs_mount_addr, Dentry_addr, F_op_addr], #<),
    labeling([enum], [Vfs_mount_val, Dentry_val, F_op_addr, F_op_val]),


    process_create(path('python'),
                    ['subquery.py', Vfs_mount_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),
    

    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    

    %query_file_operation(F_op_addr),

    log("./profile/file", "vfs_mount", Vfs_mount_addr, Base_addr),
    log("./profile/file", "dentry", Dentry_addr, Base_addr),
    log("./profile/file", "f_op", F_op_addr, Base_addr).



query_file_operation(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result).

possible_name_pointer(Val, Name_offset) :-
    /* The value at val+name_offset is a string pointer */
    current_predicate(pointer/1),
    pointer(Ptr),
    Ptr_profile = ([
        [Name_addr, Name_val]
    ]),
    Name_addr #= Val + Name_offset,
    tuples_in(Ptr_profile, Ptr),
    labeling([enum], [Name_addr, Name_val]),
    query_string_pointer(Name_val).

possible_vfs_mount(Base_addr) :-
    pointer(Ptr),
    int(Int),
    Ptr_profile = [
        [Dentry_addr, Dentry_val],
        [Mnt_sb_addr, Mnt_sb_val]
    ],
    Int_profile = [
        [Mnt_flags_addr, Mnt_flags_val]
    ],
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Dentry_addr #= Base_addr,
    Dentry_val #> 0,
    Mnt_flags_addr #= Dentry_addr + 16,
    Mnt_flags_val #>= 0,
    Mnt_sb_val #> 0,
    chain([Dentry_addr, Mnt_sb_addr, Mnt_flags_addr], #<),
    label([Dentry_addr, Dentry_val, Mnt_flags_addr, Mnt_flags_val]).
 
possible_dentry(Base_addr) :-
    /*
        struct dentry *d_parent;
        struct qstr d_name -> char *name; it's a name pointer
        struct inode *d_inode;
        unsigned char d_iname[LEN];
        const struct dentry_operations *d_op;
        struct list_head d_child;
        struct list_head d_subdirs;
        union {
	        struct hlist_node d_alias;
	        struct rcu_head d_rcu;
        } d_u;
    */
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    string_val(Str),
    Ptr_profile = [
        [Dparent_addr, Dparent_val],
        [Dname_addr, Dname_val],
        [D_inode_addr, D_inode_val],
        [D_op_addr, D_op_val],
        [Dchild_addr, Dchild_val],
        [D_subdirs_addr, D_subdirs_val]
    ],
    Str_profile = [
        [D_iname_addr, D_iname_val]
    ],
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    Dparent_addr #> Base_addr,
    chain([Dparent_addr, Dname_addr, D_inode_addr, D_iname_addr, 
            D_op_addr, Dchild_addr, D_subdirs_addr], #<),
    D_subdirs_addr #= Dchild_addr + 16,
    D_subdirs_addr #< Base_addr + 200,
    Dparent_val #> 0,
    labeling([enum], [Dname_addr, Dname_val]),
    query_string_pointer(Dname_val),
    labeling([enum], [D_iname_addr, D_iname_val]),
    D_iname_offset #= D_iname_addr - Base_addr,
    Dname_offset #= Dname_addr - Base_addr,
    labeling([enum], [Dparent_addr, Dparent_val]),
    Parent_dname #= Dparent_val + Dname_offset,
    process_create(path('python'),
                    ['subquery.py', Parent_dname, "name_pointer", Dname_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    labeling([enum], [D_inode_addr, D_inode_val]),
    query_inode(D_inode_val),

    labeling([enum], [Dchild_addr, Dchild_val]),
    Dchild_offset #= Dchild_addr - Base_addr,
    Dchild_init #= Dchild_val - Dchild_offset,
    query_name_pointer(Dchild_init, Dname_offset),

    /* This can be hardcoded as d_child_addr + 16 */
    labeling([enum], [D_subdirs_addr, D_subdirs_val]),
    Dsubdirs_offset #= D_subdirs_addr - Base_addr,
    D_subdirs_init #= D_subdirs_val - Dsubdirs_offset,
    query_name_pointer(D_subdirs_init, Dname_offset),

    statistics(real_time, [End|_]),

    log("./profile/dentry", "parent", Dparent_addr, Base_addr),
    log("./profile/dentry", "inode", D_inode_val, Base_addr),
    log("./profile/dentry", "d_iname", D_iname_addr, Base_addr),
    log("./profile/dentry", "dchild", Dchild_addr, Base_addr),
    log("./profile/dentry", "d_subdirs", D_subdirs_addr, Base_addr),
    log("./profile/dentry", "dentry", End, Start).

query_inode(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_inode(Base_addr) :-
    /*
        struct inode_operations *i_op;
        struct super_block      *i_sb;
        struct address_space    *i_mapping;
    */
    statistics(real_time, [Start|_]),

    pointer(Ptr),
    long(Ulg),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [I_op_addr, I_op_val],
        [I_sb_addr, I_sb_val],
        [I_mapping_addr, I_mapping_val],
        [I_fop_addr, I_fop_val]
    ]),
    Ulong_profile = ([
        /* i_mode is actually not long type. */
        [I_mode_addr, I_mode_val],
        [I_ino_addr, I_ino_val],
        [I_size_addr, I_size_val],
        [I_atime_addr, I_atime_val],
        [_I_atime_addr, _I_atime_val],
        [I_mtime_addr, I_mtime_val],
        [I_ctime_addr, I_ctime_val],
        [_I_ctime_addr, _I_ctime_val]
    ]),
    Int_profile = ([
        [I_uid_addr, I_uid_val],
        [I_gid_addr, I_gid_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    tuples_in(Int_profile, Int),

    chain([I_mode_addr, I_uid_addr, I_gid_addr, I_op_addr, I_sb_addr, I_mapping_addr, I_ino_addr,
           I_size_addr, I_atime_addr, _I_atime_addr, I_mtime_addr, I_ctime_addr, _I_ctime_addr, I_fop_addr], #<),

    I_mode_addr #= Base_addr,
    I_mode_val #> 0,
    I_gid_addr #= I_mode_addr + 8,
    %I_op_addr #= Base_addr + 32,
    I_op_addr #=< Base_addr + 32,
    I_op_val #> 0,
    labeling([enum], [I_op_addr, I_op_val]),
    query_inode_operations(I_op_val),

    I_sb_addr #= I_op_addr + 8,
    I_mapping_addr #= I_sb_addr + 8,
    I_atime_addr #= I_size_addr + 8,
    I_mtime_addr #= I_atime_addr + 16,
    I_ctime_addr #= I_mtime_addr + 16,
    _I_ctime_addr #= I_ctime_addr + 8,
    I_size_val #> 0,
    I_atime_val #> 4096,
    I_mtime_val #> 4096,
    I_ctime_val #> 4096,
    I_fop_addr #< Base_addr + 400,
    labeling([enum], [I_sb_addr, I_mapping_addr, I_atime_addr, I_mtime_addr, I_ctime_addr]),


    labeling([enum], [I_fop_addr, I_fop_val]),
    I_fop_val #> 0,
    query_inode_operations(I_fop_val),
    statistics(real_time, [End|_]),


    log("./profile/inode", "I_mode_addr", I_mode_addr, Base_addr),
    log("./profile/inode", "I_uid_addr", I_uid_addr, Base_addr),
    log("./profile/inode", "I_gid_addr", I_gid_addr, Base_addr),
    log("./profile/inode", "I_op_addr", I_op_addr, Base_addr),
    log("./profile/inode", "I_sb_addr", I_sb_addr, Base_addr),
    log("./profile/inode", "I_mapping_addr", I_mapping_addr, Base_addr),
    log("./profile/inode", "I_size_addr", I_size_addr, Base_addr),
    log("./profile/inode", "I_atime_addr", I_atime_addr, Base_addr),
    log("./profile/inode", "I_mtime_addr", I_mtime_addr, Base_addr),
    log("./profile/inode", "I_ctime_addr", I_ctime_addr, Base_addr),
    log("./profile/inode", "I_fop_addr", I_fop_addr, Base_addr),
    log("./profile/inode", "inode", End, Start).


query_inode_operations(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_name_pointer(Base_addr, Offset) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "name_pointer", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_inode_operations(Base_addr) :-
    /* a bunch of function pointers. */
    pointer(Ptr),
    Ptr_profile = ([
        [_L1_addr, _L1_val],
        [_L2_addr, _L2_val],
        [_L3_addr, _L3_val],
        [_L4_addr, _L4_val],
        [_L5_addr, _L5_val],
        [_L6_addr, _L6_val],
        [_L7_addr, _L7_val],
        [_L8_addr, _L8_val],
        [_L9_addr, _L9_val],
        [_L10_addr, _L10_val],
        [_L11_addr, _L11_val],
        [_L12_addr, _L12_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([_L1_addr, _L2_addr, _L3_addr, _L4_addr, _L5_addr, _L6_addr, _L7_addr,
           _L8_addr, _L9_addr, _L10_addr, _L11_addr, _L12_addr], #<),
    _L1_addr #= Base_addr,
    _L12_addr #= Base_addr + 88.




possible_nothing() :-

    %log("profile.txt", "dentry addr", Base_addr, 0),
    Dparent_addr #> Base_addr,
    Dname_addr #> 0,
    Dname_addr #< Base_addr + 200,
    %Dname_addr #= Base_addr + 160,
    %FIXME This child rule is not applicable for old kernel version. 
    %chain([Dparent_addr, Dname_addr, Dchild_addr], #<),
    %Dchild_addr #< Base_addr + 200,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    labeling([enum], [Dparent_addr, Dparent_val, Dname_addr, Dchild_addr, Dchild_val]),
    Dname_offset #= Dname_addr - Base_addr,
    integer(Dname_offset),
    Dparent_val #> 0,
    
    %FIXME d_parent may not be initialized
    /*process_create(path('python'),
                ['subquery.py', Dparent_val, "d_entry", Dname_offset],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/

    %FIXME: may need to find another way for all list_head. 
    /*Dchild_offset #= Dchild_addr - Base_addr,
    integer(Dchild_offset),
    Dchild_base #= Dchild_val - Dchild_offset,
    integer(Dchild_base),
    Dchild_base #> 0,
    process_create(path('python'),
                ['subquery.py', Dchild_base, "d_entry", Dname_offset],
                [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    statistics(real_time, [End|_]).
/*
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    log("profile.txt", "d_parent", Dparent_addr, Base_addr),
    log("profile.txt", "d_child", Dchild_addr, Base_addr),
    log("profile.txt", "dentry time", End, Start).
*/
possible_d_entry(Base_addr, Dname_offset) :-
    current_predicate(string_val/1),
    string_val(Str),
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    Dname_addr #= Base_addr + Dname_offset,
    tuples_in(Str_profile, Str),
    label([Dname_addr]).

possible_list_head(Tasks_val, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_val, Tasks_addr]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],
    Comm_addr #= Tasks_val - Tasks_offset + Comm_offset,
    Tasks_addr #\= Tasks_val,
    tuples_in(Str_profile, Str),
    tuples_in(Ptr_profile, Ptr),
    label([Comm_addr]).

possible_ts(Base_addr, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_addr, Tasks_val]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],

    Comm_addr #= Base_addr + Comm_offset,
    Tasks_addr #= Base_addr + Tasks_offset,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),

    label([Tasks_val]),
    
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "list_head", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_cred(Base_addr) :-
    statistics(real_time, [Start|_]),

    int(Int),
    long(Ulg),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3],
        [Addr4, Val4],
        [Addr5, Val5],
        [Addr6, Val6],
        [Addr7, Val7],
        [Addr8, Val8],
        [Addr9, Val9]
    ],
    %FIXME For now, this rule is hard-coded because we do not consider 0 as a unsign long number. 
    %So that for cred whos val10 is 0, this rule does not apply.
    /*Ulong_profile = [
        [Addr10, Val10],
        [Addr11, Val11]
    ],*/
    Addr1 #> Base_addr,
    %chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9, Addr10, Addr11], #<),
    chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9], #<),
    Addr1 #= Base_addr + 4,
    Addr9 #= Addr1 + 32,
    %Addr11 #< Base_addr + 120,
    tuples_in(Int_profile, Int),
    %tuples_in(Ulong_profile, Ulg),
    statistics(real_time, [End|_]),
    labeling([enum], [Addr1, Addr2, Addr5, Addr6]),
    log("./profile/cred", "cred", End, Start),
    log('./profile/cred', "uid", Addr1, Base_addr),
    log('./profile/cred', "gid", Addr2, Base_addr),
    log('./profile/cred', "euid", Addr5, Base_addr),
    log('./profile/cred', "egid", Addr6, Base_addr).

possible_fs_struct(Base_addr) :-
    statistics(real_time, [Start|_]),
    int(Int),
    pointer(Ptr),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3]
    ],
    Ptr_profile = [
        [Root_addr, Root_val],
        [PWD_addr, PWD_val]
    ],
    Addr1 #>= Base_addr,
    chain([Addr1, Addr2, Addr3, Root_addr, PWD_addr], #<),
    PWD_addr #= Root_addr + 16,
    PWD_addr #< Base_addr + 50,
    tuples_in(Int_profile, Int),
    tuples_in(Ptr_profile, Ptr),
    Root_val #> 0,
    PWD_val #> 0,
    label([Root_addr, Root_val]),
    /* some times the dentry fields are zero, use vfs_mount instead */
    process_create(path('python'),
                    ['subquery.py', Root_val, "vfs_mount"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    label([PWD_addr, PWD_val]),
    process_create(path('python'),
                    ['subquery.py', PWD_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    statistics(real_time, [End|_]),
    log("profile.txt", "fs time", End, Start),
    log('profile.txt', "Root", Root_addr, Base_addr),
    log('profile.txt', "pwd", PWD_addr, Base_addr),
    log('profile.txt', "fs_struct", End, Start).

possible_mount(Base_addr) :-
    /* struct hlist_head mnt_hash;
       struct mount *mnt_parent; 
       struct vfsmount mnt;
       struct list_head mnt_mounts;
       struct list_head mnt_child;
       struct list_head mnt_instance;
       const char *mnt_devname;
       struct list_head mnt_list;
    */
    statistics(real_time, [Start|_]),
    %get_time(Current),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Mnt_hash_addr, Mnt_hash_val],
        [Mnt_parent_addr, Mnt_parent_val],
        [Vfsmount_addr, Vfsmount_val],
        [Mnt_child_addr, Mnt_child_val],
        [Mnt_devname_addr, Mnt_devname_val],
        [Mnt_list_addr, Mnt_list_val]
    ]),
    Int_profile = ([
        [Mnt_flags_addr, Mnt_flags_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    /* Order Invariants */
    chain([Mnt_hash_addr, Mnt_parent_addr, Vfsmount_addr, Mnt_flags_addr,
            Mnt_child_addr, Mnt_devname_addr, Mnt_list_addr], #<),
    Mnt_hash_addr #= Base_addr,
    /* mnt_hash_addr is a list_head */
    Mnt_parent_addr #> Base_addr + 8,
    Mnt_list_addr - Base_addr #< 200,
    labeling([enum], [Mnt_devname_addr, Mnt_devname_val]),
    query_string_pointer(Mnt_devname_val),
    Mnt_devname_offset #= Mnt_devname_addr - Base_addr,
    /* the offset from mnt_mounts to mnt_list remains the same, so it's safe to use fixed offsets. */
    Mnt_child_addr #= Mnt_devname_addr - 32,
    Mnt_list_addr #= Mnt_devname_addr + 8,
    Mnt_flags_addr #= Vfsmount_addr + 16,
    labeling([enum], [Mnt_child_addr, Mnt_list_addr, Vfsmount_addr, Vfsmount_val]),
    /* Seems unnecessary 
    Mnt_list_offset #= Mnt_list_addr - Base_addr,
    Mnt_list #= Mnt_list_val - Mnt_list_offset,
    Mnt_list #> 0,
    query_mount_struct(Mnt_list, Mnt_devname_offset),
    */
    Vfsmount_val #>= 0,
    /* Here we can infer layout of dentry structure 
       Maybe need to infer using another dentry, somehow it may not be initialized. 
    */
    Vfsmount_addr #> 0,
    %query_dentry(Vfsmount_addr),

    labeling([enum], [Mnt_parent_addr, Mnt_parent_val]),
    /* To verify another mount struct, only one-level query, so it does not direct call query_mount recursively */
    
    query_mount_struct(Mnt_parent_val, Mnt_devname_offset),
    

    %get_time(End),
    %Time_past is End - Current,
    statistics(real_time, [End|_]),
    log("./profile/mount", "mnt_hash", Mnt_hash_addr, Base_addr),
    log("./profile/mount", "mnt_parent", Mnt_parent_addr, Base_addr),
    log("./profile/mount", "mnt_child", Mnt_child_addr, Base_addr),
    log("./profile/mount", "mnt_devname", Mnt_devname_addr, Base_addr),
    log("./profile/mount", "mnt_list", Mnt_list_addr, Base_addr),
    log("./profile/mount", "mount", End, Start).


possible_neigh_hash_table(Base_addr) :-
    /* neighbour **hash_buckets */
    pointer(Ptr),
    Ptr_profile = ([
        [Hash_buckest_addr, Hash_buckets_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Hash_buckest_addr #= Base_addr,
    labeling([enum], [Hash_buckest_addr, Hash_buckets_val]),
    process_create(path('python'),
                    ['subquery.py', Hash_buckets_val, "hash_buckets"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_hash_buckets(Base_addr) :-
    /* hash_buckets is an array of neighbour pointer 
       note that not all element are non-zero
    */
    pointer(Ptr),
    Ptr_profile = ([
        [Neighbour_addr, Neighbour_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Neighbour_addr #< Base_addr + 32,
    Neighbour_val #> 0,
    labeling([enum], [Neighbour_addr, Neighbour_val]),
    process_create(path('python'),
                    ['subquery.py', Neighbour_val, "neighbour"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_neighbour(Base_addr) :-
    /* net_device *dev at offset 464 */
    pointer(Ptr),
    Ptr_profile = ([
        [Dev_addr, Dev_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Dev_addr #>= Base_addr + 360,
    Dev_addr #=< Base_addr + 376,
    labeling([enum], [Dev_addr, Dev_val]),
    process_create(path('python'),
                    ['subquery.py', Dev_val, "net_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).


possible_net_device(Base_addr) :- 
    /*
        char             name[NAMSIZ];
        struct list_head dev_list;
        unsigned char    addr_len;
        unsigned int     promiscuity;
        struct in_device *ip_ptr;
    */
    statistics(real_time, [Start|_]),
    %get_time(Current),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Dev_list_addr, Dev_list_val],
        [IP_ptr_addr, IP_ptr_val]
    ]),
    Str_profile = ([
        [Name_addr, Name_val]
    ]),
    Int_profile = ([
        [Promisc_addr, Promisc_val],
        [Addr_len_addr, Addr_len_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),
    /* Hard to determine offsets for addr_len and promisc */
    chain([Name_addr, Dev_list_addr, Addr_len_addr, Promisc_addr, IP_ptr_addr], #<),
    Name_addr #>= Base_addr,
    Name_offset #= Name_addr - Base_addr,
    IP_ptr_addr #< Base_addr + 1000,
    /* dev_list offset can be hardcoded since it remains the same */
    Dev_list_addr #= Base_addr + 80,
    labeling([enum], [Name_addr, Dev_list_addr, Dev_list_val]),
    /* do not have a good constrain to narrow down ip_ptr, use its rough offset
       to reduce the search space. 
     */
    IP_ptr_addr #> Base_addr + 700,
    IP_ptr_val #> 0,
    labeling([enum], [IP_ptr_addr, IP_ptr_val]),
    query_in_device(IP_ptr_val),

    %get_time(End),
    %Time_past is End - Current,
    statistics(real_time, [End|_]),

    log("./profile/net_device", "name", Name_addr, Base_addr),
    log("./profile/net_device", "ip_ptr", IP_ptr_addr, Base_addr),
    log("./profile/net_device", "dev_list", Dev_list_addr, Base_addr),
    log("./profile/net_device", "net_device", End, Start).

query_in_device(IP_ptr_val) :-
    process_create(path('python'),
                    ['subquery.py', IP_ptr_val, "in_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).


query_mount_struct(Val, Offset) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "mount_struct", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).
