:- use_module(library(clpfd)).
:- style_check(-singleton).
pointer([
		[0x1eff0800,519978176],
		[0x1eff0808,519211296],
		[0x1eff0818,425930320],
		[0x1eff0850,462024704],
		[0x1eff0878,0],
		[0x1eff0880,520030336],
		[0x1eff0888,520030336],
		[0x1eff0890,0],
		[0x1eff08a0,441521792],
		[0x1eff08a8,518320288],
		[0x1eff08c8,0],
		[0x1eff08d0,0],
		[0x1eff08f0,0],
		[0x1eff09d8,0],
		[0x1eff09f8,0],
		[0x1eff0a08,0],
		[0x1eff0a18,0],
		[0x1eff0a28,0],
		[0x1eff0a38,0],
		[0x1eff0a58,0],
		[0x1eff0a80,0],
		[0x1eff0a88,0],
		[0x1eff0a90,0],
		[0x1eff0a98,0],
		[0x1eff0aa0,0],
		[0x1eff0aa8,0],
		[0x1eff0ab0,0],
		[0x1eff0ab8,0],
		[0x1eff0ad8,0],
		[0x1eff0ae0,441686528],
		[0x1eff0ae8,520031104],
		[0x1eff0af0,0],
		[0x1eff0af8,0],
		[0x1eff0b00,0],
		[0x1eff0b08,0],
		[0x1eff0b10,520030992],
		[0x1eff0b18,520030992],
		[0x1eff0b28,436212576],
		[0x1eff0b30,0],
		[0x1eff0b48,0],
		[0x1eff0b50,0],
		[0x1eff0b58,0],
		[0x1eff0b60,472077568],
		[0x1eff0b68,440733696],
		[0x1eff0b70,365918464],
		[0x1eff0b78,0],
		[0x1eff0b80,0],
		[0x1eff0b88,0],
		[0x1eff0b90,0],
		[0x1eff0b98,0],
		[0x1eff0ba0,0],
		[0x1eff0ba8,0],
		[0x1eff0bb0,0],
		[0x1eff0bb8,0],
		[0x1eff0bc0,0],
		[0x1eff0bc8,0],
		[0x1eff0bd0,0],
		[0x1eff0bd8,0],
		[0x1eff0be0,0],
		[0x1eff0be8,0],
		[0x1eff0bf0,0],
		[0x1eff0bf8,0],
		[0x1eff0c00,0],
		[0x1eff0c08,0],
		[0x1eff0c10,0],
		[0x1eff0c18,0],
		[0x1eff0c20,0],
		[0x1eff0c28,0],
		[0x1eff0c30,0],
		[0x1eff0c38,0],
		[0x1eff0c40,0],
		[0x1eff0c48,0],
		[0x1eff0c50,0],
		[0x1eff0c58,0],
		[0x1eff0c60,0],
		[0x1eff0c68,0],
		[0x1eff0c70,0],
		[0x1eff0c78,0],
		[0x1eff0c80,0],
		[0x1eff0c88,0],
		[0x1eff0c90,0],
		[0x1eff0c98,0],
		[0x1eff0ca0,0],
		[0x1eff0ca8,0],
		[0x1eff0cb0,0],
		[0x1eff0cb8,0],
		[0x1eff0cc0,0],
		[0x1eff0cc8,0],
		[0x1eff0cd0,0],
		[0x1eff0cd8,0],
		[0x1eff0ce0,0],
		[0x1eff0ce8,0],
		[0x1eff0cf0,0],
		[0x1eff0cf8,0],
		[0x1eff0d00,0],
		[0x1eff0d08,0],
		[0x1eff0d10,0],
		[0x1eff0d18,0],
		[0x1eff0d20,0],
		[0x1eff0d28,0],
		[0x1eff0d30,0],
		[0x1eff0d38,0],
		[0x1eff0d40,0],
		[0x1eff0d48,0],
		[0x1eff0d50,0],
		[0x1eff0d58,0],
		[0x1eff0d60,0],
		[0x1eff0d68,0],
		[0x1eff0d70,0],
		[0x1eff0d78,0],
		[0x1eff0d80,0],
		[0x1eff0d88,0],
		[0x1eff0d90,0],
		[0x1eff0d98,0],
		[0x1eff0da0,0],
		[0x1eff0da8,0],
		[0x1eff0db0,0],
		[0x1eff0db8,0],
		[0x1eff0dc0,0],
		[0x1eff0dc8,0],
		[0x1eff0dd0,0],
		[0x1eff0dd8,0],
		[0x1eff0de0,0],
		[0x1eff0de8,0],
		[0x1eff0df0,0],
		[0x1eff0df8,0],
		[0x1eff0e00,0],
		[0x1eff0e08,0],
		[0x1eff0e10,0],
		[0x1eff0e18,0],
		[0x1eff0e20,0],
		[0x1eff0e28,0],
		[0x1eff0e30,0],
		[0x1eff0e38,0],
		[0x1eff0e40,0],
		[0x1eff0e48,0],
		[0x1eff0e50,0],
		[0x1eff0e58,0],
		[0x1eff0e60,0],
		[0x1eff0e68,0],
		[0x1eff0e70,0],
		[0x1eff0e78,0],
		[0x1eff0e80,0],
		[0x1eff0e88,0],
		[0x1eff0e90,0],
		[0x1eff0e98,0],
		[0x1eff0ea0,0],
		[0x1eff0ea8,0],
		[0x1eff0eb0,0],
		[0x1eff0eb8,0],
		[0x1eff0ec0,0],
		[0x1eff0ec8,0],
		[0x1eff0ed0,0],
		[0x1eff0ed8,0],
		[0x1eff0ee0,0],
		[0x1eff0ee8,0],
		[0x1eff0ef0,0],
		[0x1eff0ef8,0],
		[0x1eff0f00,0],
		[0x1eff0f08,0],
		[0x1eff0f10,0],
		[0x1eff0f18,0],
		[0x1eff0f20,0],
		[0x1eff0f28,0],
		[0x1eff0f30,0],
		[0x1eff0f38,0],
		[0x1eff0f40,0],
		[0x1eff0f48,0],
		[0x1eff0f50,0],
		[0x1eff0f58,0],
		[0x1eff0f60,0],
		[0x1eff0f68,0],
		[0x1eff0f70,0],
		[0x1eff0f78,0],
		[0x1eff0f88,0],
		[0x1eff0f90,0],
		[0x1eff0f98,0],
		[0x1eff0fa0,0],
		[0x1eff0fa8,0],
		[0x1eff0fb0,0],
		[0x1eff0fb8,0],
		[0x1eff0fc0,0],
		[0x1eff1000,334086528],
		[0x1eff1008,334057696],
		[0x1eff1018,425930320],
		[0x1eff1050,333971456],
		[0x1eff1078,0],
		[0x1eff1080,520032384],
		[0x1eff1088,520032384],
		[0x1eff1090,0],
		[0x1eff10a0,520032416],
		[0x1eff10a8,520032416],
		[0x1eff10c8,0],
		[0x1eff10d0,0],
		[0x1eff10f0,0],
		[0x1eff11d8,0],
		[0x1eff1238,0],
		[0x1eff1258,0],
		[0x1eff1280,0],
		[0x1eff1288,0],
		[0x1eff1290,0],
		[0x1eff1298,0],
		[0x1eff12a0,0],
		[0x1eff12a8,0],
		[0x1eff12b0,0],
		[0x1eff12b8,0],
		[0x1eff12d0,0],
		[0x1eff12d8,0],
		[0x1eff12e0,441686528],
		[0x1eff12e8,520033152],
		[0x1eff12f0,0],
		[0x1eff12f8,0],
		[0x1eff1300,0],
		[0x1eff1308,0],
		[0x1eff1310,520033040],
		[0x1eff1318,520033040],
		[0x1eff1328,436212576],
		[0x1eff1330,0],
		[0x1eff1348,0],
		[0x1eff1350,0],
		[0x1eff1358,0],
		[0x1eff1360,348427584],
		[0x1eff1368,440733696],
		[0x1eff1370,333582592],
		[0x1eff1378,0],
		[0x1eff1388,0],
		[0x1eff1390,0],
		[0x1eff1398,0],
		[0x1eff13a0,0],
		[0x1eff13a8,0],
		[0x1eff13b0,0],
		[0x1eff13b8,0],
		[0x1eff13c0,0],
		[0x1eff13c8,0],
		[0x1eff13d0,0],
		[0x1eff13d8,0],
		[0x1eff13e0,0],
		[0x1eff13e8,0],
		[0x1eff13f0,0],
		[0x1eff13f8,0],
		[0x1eff1400,0],
		[0x1eff1408,0],
		[0x1eff1410,0],
		[0x1eff1418,0],
		[0x1eff1420,0],
		[0x1eff1428,0],
		[0x1eff1430,0],
		[0x1eff1438,0],
		[0x1eff1440,0],
		[0x1eff1448,0],
		[0x1eff1450,0],
		[0x1eff1458,0],
		[0x1eff1460,0],
		[0x1eff1468,0],
		[0x1eff1470,0],
		[0x1eff1478,0],
		[0x1eff1480,0],
		[0x1eff1488,0],
		[0x1eff1490,0],
		[0x1eff1498,0],
		[0x1eff14a0,0],
		[0x1eff14a8,0],
		[0x1eff14b0,0],
		[0x1eff14b8,0],
		[0x1eff14c0,0],
		[0x1eff14c8,0],
		[0x1eff14d0,0],
		[0x1eff14d8,0],
		[0x1eff14e0,0],
		[0x1eff14e8,0],
		[0x1eff14f0,0],
		[0x1eff14f8,0],
		[0x1eff1500,0],
		[0x1eff1508,0],
		[0x1eff1510,0],
		[0x1eff1518,0],
		[0x1eff1520,0],
		[0x1eff1528,0],
		[0x1eff1530,0],
		[0x1eff1538,0],
		[0x1eff1540,0],
		[0x1eff1548,0],
		[0x1eff1550,0],
		[0x1eff1558,0],
		[0x1eff1560,0],
		[0x1eff1568,0],
		[0x1eff1570,0],
		[0x1eff1578,0],
		[0x1eff1580,0],
		[0x1eff1588,0],
		[0x1eff1590,0],
		[0x1eff1598,0],
		[0x1eff15a0,0],
		[0x1eff15a8,0],
		[0x1eff15b0,0],
		[0x1eff15b8,0],
		[0x1eff15c0,0],
		[0x1eff15c8,0],
		[0x1eff15d0,0],
		[0x1eff15d8,0],
		[0x1eff15e0,0],
		[0x1eff15e8,0],
		[0x1eff15f0,0],
		[0x1eff15f8,0],
		[0x1eff1600,0],
		[0x1eff1608,0],
		[0x1eff1610,0],
		[0x1eff1618,0],
		[0x1eff1620,0],
		[0x1eff1628,0],
		[0x1eff1630,0],
		[0x1eff1638,0],
		[0x1eff1640,0],
		[0x1eff1648,0],
		[0x1eff1650,0],
		[0x1eff1658,0],
		[0x1eff1660,0],
		[0x1eff1668,0],
		[0x1eff1670,0],
		[0x1eff1678,0],
		[0x1eff1680,0],
		[0x1eff1688,0],
		[0x1eff1690,0],
		[0x1eff1698,0],
		[0x1eff16a0,0],
		[0x1eff16a8,0],
		[0x1eff16b0,0],
		[0x1eff16b8,0],
		[0x1eff16c0,0],
		[0x1eff16c8,0],
		[0x1eff16d0,0],
		[0x1eff16d8,0],
		[0x1eff16e0,0],
		[0x1eff16e8,0],
		[0x1eff16f0,0],
		[0x1eff16f8,0],
		[0x1eff1700,0],
		[0x1eff1708,0],
		[0x1eff1710,0],
		[0x1eff1718,0],
		[0x1eff1720,0],
		[0x1eff1728,0],
		[0x1eff1730,0],
		[0x1eff1738,0],
		[0x1eff1740,0],
		[0x1eff1748,0],
		[0x1eff1750,0],
		[0x1eff1758,0],
		[0x1eff1760,0],
		[0x1eff1768,0],
		[0x1eff1770,0],
		[0x1eff1778,0],
		[0x1eff1780,0],
		[0x1eff1788,0],
		[0x1eff1790,0],
		[0x1eff1798,0],
		[0x1eff17a0,0],
		[0x1eff17a8,0],
		[0x1eff17b0,0],
		[0x1eff17b8,0],
		[0x1eff17c0,0],
		[0, 0]
]).
unknown([
		[0x1eff0fc8,14757395258967641292],
		[0x1eff0fd0,14757395258967641292],
		[0x1eff0fd8,14757395258967641292],
		[0x1eff0fe0,14757395258967641292],
		[0x1eff0fe8,14757395258967641292],
		[0x1eff0ff0,14757395258967641292],
		[0x1eff0ff8,14757395258967641292],
		[0x1eff17c8,14757395258967641292],
		[0x1eff17d0,14757395258967641292],
		[0x1eff17d8,14757395258967641292],
		[0x1eff17e0,14757395258967641292],
		[0x1eff17e8,14757395258967641292],
		[0x1eff17f0,14757395258967641292],
		[0x1eff17f8,14757395258967641292],
		[0, 0]
]).
long([
		[0x1eff0810,40],
		[0x1eff0820,140202603565056],
		[0x1eff0828,47430066823168],
		[0x1eff0830,4151902208],
		[0x1eff0838,1432109056],
		[0x1eff0840,140737488351232],
		[0x1eff0848,140735671881728],
		[0x1eff0858,4294967297],
		[0x1eff0860,23],
		[0x1eff0868,3],
		[0x1eff0870,79],
		[0x1eff0898,1],
		[0x1eff08b0,1429],
		[0x1eff08b8,9793],
		[0x1eff08c0,9391],
		[0x1eff08d8,342],
		[0x1eff08e0,1266],
		[0x1eff08e8,33],
		[0x1eff08f8,94775534587904],
		[0x1eff0900,94775536012800],
		[0x1eff0908,94775536020608],
		[0x1eff0910,94775536166632],
		[0x1eff0918,94775552380928],
		[0x1eff0920,94775553568768],
		[0x1eff0928,140735671302304],
		[0x1eff0930,140735671303998],
		[0x1eff0938,140735671304016],
		[0x1eff0940,140735671304016],
		[0x1eff0948,140735671304173],
		[0x1eff0950,33],
		[0x1eff0958,140735671873536],
		[0x1eff0960,16],
		[0x1eff0968,126548989],
		[0x1eff0970,6],
		[0x1eff0978,4096],
		[0x1eff0980,17],
		[0x1eff0988,100],
		[0x1eff0990,3],
		[0x1eff0998,94775534587968],
		[0x1eff09a0,4],
		[0x1eff09a8,56],
		[0x1eff09b0,5],
		[0x1eff09b8,10],
		[0x1eff09c0,7],
		[0x1eff09c8,140202601304064],
		[0x1eff09d0,8],
		[0x1eff09e0,9],
		[0x1eff09e8,94775534784144],
		[0x1eff09f0,11],
		[0x1eff0a00,12],
		[0x1eff0a10,13],
		[0x1eff0a20,14],
		[0x1eff0a30,23],
		[0x1eff0a40,25],
		[0x1eff0a48,140735671302745],
		[0x1eff0a50,26],
		[0x1eff0a60,31],
		[0x1eff0a68,140735671304173],
		[0x1eff0a70,15],
		[0x1eff0a78,140735671302761],
		[0x1eff0ac0,977],
		[0x1eff0ac8,324],
		[0x1eff0ad0,91],
		[0x1eff0b20,140735671873536],
		[0x1eff0b40,205],
		[0x1eff0f80,4294897996],
		[0x1eff1010,11],
		[0x1eff1020,140264610631680],
		[0x1eff1028,47385239621632],
		[0x1eff1030,4159922176],
		[0x1eff1038,1432473600],
		[0x1eff1040,140737488351232],
		[0x1eff1048,140737488351232],
		[0x1eff1058,8589934593],
		[0x1eff1060,13],
		[0x1eff1068,3],
		[0x1eff1070,38],
		[0x1eff1098,1],
		[0x1eff10b0,271],
		[0x1eff10b8,4373],
		[0x1eff10c0,4165],
		[0x1eff10d8,140],
		[0x1eff10e0,686],
		[0x1eff10e8,33],
		[0x1eff10f8,4194304],
		[0x1eff1100,4315748],
		[0x1eff1108,6413824],
		[0x1eff1110,6415872],
		[0x1eff1118,6422528],
		[0x1eff1120,6893568],
		[0x1eff1128,140737488347664],
		[0x1eff1130,140737488348411],
		[0x1eff1138,140737488348430],
		[0x1eff1140,140737488348430],
		[0x1eff1148,140737488351216],
		[0x1eff1150,33],
		[0x1eff1158,140264610611200],
		[0x1eff1160,16],
		[0x1eff1168,126548989],
		[0x1eff1170,6],
		[0x1eff1178,4096],
		[0x1eff1180,17],
		[0x1eff1188,100],
		[0x1eff1190,3],
		[0x1eff1198,4194368],
		[0x1eff11a0,4],
		[0x1eff11a8,56],
		[0x1eff11b0,5],
		[0x1eff11b8,9],
		[0x1eff11c0,7],
		[0x1eff11c8,140264608370688],
		[0x1eff11d0,8],
		[0x1eff11e0,9],
		[0x1eff11e8,4213152],
		[0x1eff11f0,11],
		[0x1eff11f8,1000],
		[0x1eff1200,12],
		[0x1eff1208,1000],
		[0x1eff1210,13],
		[0x1eff1218,1000],
		[0x1eff1220,14],
		[0x1eff1228,1000],
		[0x1eff1230,23],
		[0x1eff1240,25],
		[0x1eff1248,140737488348377],
		[0x1eff1250,26],
		[0x1eff1260,31],
		[0x1eff1268,140737488351216],
		[0x1eff1270,15],
		[0x1eff1278,140737488348393],
		[0x1eff12c0,530],
		[0x1eff12c8,63],
		[0x1eff1320,140264610611200],
		[0x1eff1340,205],
		[0x1eff1380,1],
		[0, 0]
]).
int([
		[0x1eff0810,40],
		[0x1eff0814,0],
		[0x1eff0824,32643],
		[0x1eff082c,11043],
		[0x1eff0834,0],
		[0x1eff083c,0],
		[0x1eff0858,1],
		[0x1eff085c,1],
		[0x1eff0860,23],
		[0x1eff0864,0],
		[0x1eff0868,3],
		[0x1eff086c,0],
		[0x1eff0870,79],
		[0x1eff0874,0],
		[0x1eff0878,0],
		[0x1eff087c,0],
		[0x1eff0890,0],
		[0x1eff0894,0],
		[0x1eff0898,1],
		[0x1eff089c,0],
		[0x1eff08b0,1429],
		[0x1eff08b4,0],
		[0x1eff08b8,9793],
		[0x1eff08bc,0],
		[0x1eff08c0,9391],
		[0x1eff08c4,0],
		[0x1eff08c8,0],
		[0x1eff08cc,0],
		[0x1eff08d0,0],
		[0x1eff08d4,0],
		[0x1eff08d8,342],
		[0x1eff08dc,0],
		[0x1eff08e0,1266],
		[0x1eff08e4,0],
		[0x1eff08e8,33],
		[0x1eff08ec,0],
		[0x1eff08f0,0],
		[0x1eff08f4,0],
		[0x1eff08fc,22066],
		[0x1eff0904,22066],
		[0x1eff090c,22066],
		[0x1eff0914,22066],
		[0x1eff091c,22066],
		[0x1eff0924,22066],
		[0x1eff0950,33],
		[0x1eff0954,0],
		[0x1eff0960,16],
		[0x1eff0964,0],
		[0x1eff096c,0],
		[0x1eff0970,6],
		[0x1eff0974,0],
		[0x1eff0978,4096],
		[0x1eff097c,0],
		[0x1eff0980,17],
		[0x1eff0984,0],
		[0x1eff0988,100],
		[0x1eff098c,0],
		[0x1eff0990,3],
		[0x1eff0994,0],
		[0x1eff099c,22066],
		[0x1eff09a0,4],
		[0x1eff09a4,0],
		[0x1eff09a8,56],
		[0x1eff09ac,0],
		[0x1eff09b0,5],
		[0x1eff09b4,0],
		[0x1eff09b8,10],
		[0x1eff09bc,0],
		[0x1eff09c0,7],
		[0x1eff09c4,0],
		[0x1eff09cc,32643],
		[0x1eff09d0,8],
		[0x1eff09d4,0],
		[0x1eff09d8,0],
		[0x1eff09dc,0],
		[0x1eff09e0,9],
		[0x1eff09e4,0],
		[0x1eff09ec,22066],
		[0x1eff09f0,11],
		[0x1eff09f4,0],
		[0x1eff09f8,0],
		[0x1eff09fc,0],
		[0x1eff0a00,12],
		[0x1eff0a04,0],
		[0x1eff0a08,0],
		[0x1eff0a0c,0],
		[0x1eff0a10,13],
		[0x1eff0a14,0],
		[0x1eff0a18,0],
		[0x1eff0a1c,0],
		[0x1eff0a20,14],
		[0x1eff0a24,0],
		[0x1eff0a28,0],
		[0x1eff0a2c,0],
		[0x1eff0a30,23],
		[0x1eff0a34,0],
		[0x1eff0a38,0],
		[0x1eff0a3c,0],
		[0x1eff0a40,25],
		[0x1eff0a44,0],
		[0x1eff0a50,26],
		[0x1eff0a54,0],
		[0x1eff0a58,0],
		[0x1eff0a5c,0],
		[0x1eff0a60,31],
		[0x1eff0a64,0],
		[0x1eff0a70,15],
		[0x1eff0a74,0],
		[0x1eff0a80,0],
		[0x1eff0a84,0],
		[0x1eff0a88,0],
		[0x1eff0a8c,0],
		[0x1eff0a90,0],
		[0x1eff0a94,0],
		[0x1eff0a98,0],
		[0x1eff0a9c,0],
		[0x1eff0aa0,0],
		[0x1eff0aa4,0],
		[0x1eff0aa8,0],
		[0x1eff0aac,0],
		[0x1eff0ab0,0],
		[0x1eff0ab4,0],
		[0x1eff0ab8,0],
		[0x1eff0abc,0],
		[0x1eff0ac0,977],
		[0x1eff0ac4,0],
		[0x1eff0ac8,324],
		[0x1eff0acc,0],
		[0x1eff0ad0,91],
		[0x1eff0ad4,0],
		[0x1eff0ad8,0],
		[0x1eff0adc,0],
		[0x1eff0af0,0],
		[0x1eff0af4,0],
		[0x1eff0af8,0],
		[0x1eff0afc,0],
		[0x1eff0b00,0],
		[0x1eff0b04,0],
		[0x1eff0b08,0],
		[0x1eff0b0c,0],
		[0x1eff0b30,0],
		[0x1eff0b34,0],
		[0x1eff0b40,205],
		[0x1eff0b44,0],
		[0x1eff0b48,0],
		[0x1eff0b4c,0],
		[0x1eff0b50,0],
		[0x1eff0b54,0],
		[0x1eff0b58,0],
		[0x1eff0b5c,0],
		[0x1eff0b78,0],
		[0x1eff0b7c,0],
		[0x1eff0b80,0],
		[0x1eff0b84,0],
		[0x1eff0b88,0],
		[0x1eff0b8c,0],
		[0x1eff0b90,0],
		[0x1eff0b94,0],
		[0x1eff0b98,0],
		[0x1eff0b9c,0],
		[0x1eff0ba0,0],
		[0x1eff0ba4,0],
		[0x1eff0ba8,0],
		[0x1eff0bac,0],
		[0x1eff0bb0,0],
		[0x1eff0bb4,0],
		[0x1eff0bb8,0],
		[0x1eff0bbc,0],
		[0x1eff0bc0,0],
		[0x1eff0bc4,0],
		[0x1eff0bc8,0],
		[0x1eff0bcc,0],
		[0x1eff0bd0,0],
		[0x1eff0bd4,0],
		[0x1eff0bd8,0],
		[0x1eff0bdc,0],
		[0x1eff0be0,0],
		[0x1eff0be4,0],
		[0x1eff0be8,0],
		[0x1eff0bec,0],
		[0x1eff0bf0,0],
		[0x1eff0bf4,0],
		[0x1eff0bf8,0],
		[0x1eff0bfc,0],
		[0x1eff0c00,0],
		[0x1eff0c04,0],
		[0x1eff0c08,0],
		[0x1eff0c0c,0],
		[0x1eff0c10,0],
		[0x1eff0c14,0],
		[0x1eff0c18,0],
		[0x1eff0c1c,0],
		[0x1eff0c20,0],
		[0x1eff0c24,0],
		[0x1eff0c28,0],
		[0x1eff0c2c,0],
		[0x1eff0c30,0],
		[0x1eff0c34,0],
		[0x1eff0c38,0],
		[0x1eff0c3c,0],
		[0x1eff0c40,0],
		[0x1eff0c44,0],
		[0x1eff0c48,0],
		[0x1eff0c4c,0],
		[0x1eff0c50,0],
		[0x1eff0c54,0],
		[0x1eff0c58,0],
		[0x1eff0c5c,0],
		[0x1eff0c60,0],
		[0x1eff0c64,0],
		[0x1eff0c68,0],
		[0x1eff0c6c,0],
		[0x1eff0c70,0],
		[0x1eff0c74,0],
		[0x1eff0c78,0],
		[0x1eff0c7c,0],
		[0x1eff0c80,0],
		[0x1eff0c84,0],
		[0x1eff0c88,0],
		[0x1eff0c8c,0],
		[0x1eff0c90,0],
		[0x1eff0c94,0],
		[0x1eff0c98,0],
		[0x1eff0c9c,0],
		[0x1eff0ca0,0],
		[0x1eff0ca4,0],
		[0x1eff0ca8,0],
		[0x1eff0cac,0],
		[0x1eff0cb0,0],
		[0x1eff0cb4,0],
		[0x1eff0cb8,0],
		[0x1eff0cbc,0],
		[0x1eff0cc0,0],
		[0x1eff0cc4,0],
		[0x1eff0cc8,0],
		[0x1eff0ccc,0],
		[0x1eff0cd0,0],
		[0x1eff0cd4,0],
		[0x1eff0cd8,0],
		[0x1eff0cdc,0],
		[0x1eff0ce0,0],
		[0x1eff0ce4,0],
		[0x1eff0ce8,0],
		[0x1eff0cec,0],
		[0x1eff0cf0,0],
		[0x1eff0cf4,0],
		[0x1eff0cf8,0],
		[0x1eff0cfc,0],
		[0x1eff0d00,0],
		[0x1eff0d04,0],
		[0x1eff0d08,0],
		[0x1eff0d0c,0],
		[0x1eff0d10,0],
		[0x1eff0d14,0],
		[0x1eff0d18,0],
		[0x1eff0d1c,0],
		[0x1eff0d20,0],
		[0x1eff0d24,0],
		[0x1eff0d28,0],
		[0x1eff0d2c,0],
		[0x1eff0d30,0],
		[0x1eff0d34,0],
		[0x1eff0d38,0],
		[0x1eff0d3c,0],
		[0x1eff0d40,0],
		[0x1eff0d44,0],
		[0x1eff0d48,0],
		[0x1eff0d4c,0],
		[0x1eff0d50,0],
		[0x1eff0d54,0],
		[0x1eff0d58,0],
		[0x1eff0d5c,0],
		[0x1eff0d60,0],
		[0x1eff0d64,0],
		[0x1eff0d68,0],
		[0x1eff0d6c,0],
		[0x1eff0d70,0],
		[0x1eff0d74,0],
		[0x1eff0d78,0],
		[0x1eff0d7c,0],
		[0x1eff0d80,0],
		[0x1eff0d84,0],
		[0x1eff0d88,0],
		[0x1eff0d8c,0],
		[0x1eff0d90,0],
		[0x1eff0d94,0],
		[0x1eff0d98,0],
		[0x1eff0d9c,0],
		[0x1eff0da0,0],
		[0x1eff0da4,0],
		[0x1eff0da8,0],
		[0x1eff0dac,0],
		[0x1eff0db0,0],
		[0x1eff0db4,0],
		[0x1eff0db8,0],
		[0x1eff0dbc,0],
		[0x1eff0dc0,0],
		[0x1eff0dc4,0],
		[0x1eff0dc8,0],
		[0x1eff0dcc,0],
		[0x1eff0dd0,0],
		[0x1eff0dd4,0],
		[0x1eff0dd8,0],
		[0x1eff0ddc,0],
		[0x1eff0de0,0],
		[0x1eff0de4,0],
		[0x1eff0de8,0],
		[0x1eff0dec,0],
		[0x1eff0df0,0],
		[0x1eff0df4,0],
		[0x1eff0df8,0],
		[0x1eff0dfc,0],
		[0x1eff0e00,0],
		[0x1eff0e04,0],
		[0x1eff0e08,0],
		[0x1eff0e0c,0],
		[0x1eff0e10,0],
		[0x1eff0e14,0],
		[0x1eff0e18,0],
		[0x1eff0e1c,0],
		[0x1eff0e20,0],
		[0x1eff0e24,0],
		[0x1eff0e28,0],
		[0x1eff0e2c,0],
		[0x1eff0e30,0],
		[0x1eff0e34,0],
		[0x1eff0e38,0],
		[0x1eff0e3c,0],
		[0x1eff0e40,0],
		[0x1eff0e44,0],
		[0x1eff0e48,0],
		[0x1eff0e4c,0],
		[0x1eff0e50,0],
		[0x1eff0e54,0],
		[0x1eff0e58,0],
		[0x1eff0e5c,0],
		[0x1eff0e60,0],
		[0x1eff0e64,0],
		[0x1eff0e68,0],
		[0x1eff0e6c,0],
		[0x1eff0e70,0],
		[0x1eff0e74,0],
		[0x1eff0e78,0],
		[0x1eff0e7c,0],
		[0x1eff0e80,0],
		[0x1eff0e84,0],
		[0x1eff0e88,0],
		[0x1eff0e8c,0],
		[0x1eff0e90,0],
		[0x1eff0e94,0],
		[0x1eff0e98,0],
		[0x1eff0e9c,0],
		[0x1eff0ea0,0],
		[0x1eff0ea4,0],
		[0x1eff0ea8,0],
		[0x1eff0eac,0],
		[0x1eff0eb0,0],
		[0x1eff0eb4,0],
		[0x1eff0eb8,0],
		[0x1eff0ebc,0],
		[0x1eff0ec0,0],
		[0x1eff0ec4,0],
		[0x1eff0ec8,0],
		[0x1eff0ecc,0],
		[0x1eff0ed0,0],
		[0x1eff0ed4,0],
		[0x1eff0ed8,0],
		[0x1eff0edc,0],
		[0x1eff0ee0,0],
		[0x1eff0ee4,0],
		[0x1eff0ee8,0],
		[0x1eff0eec,0],
		[0x1eff0ef0,0],
		[0x1eff0ef4,0],
		[0x1eff0ef8,0],
		[0x1eff0efc,0],
		[0x1eff0f00,0],
		[0x1eff0f04,0],
		[0x1eff0f08,0],
		[0x1eff0f0c,0],
		[0x1eff0f10,0],
		[0x1eff0f14,0],
		[0x1eff0f18,0],
		[0x1eff0f1c,0],
		[0x1eff0f20,0],
		[0x1eff0f24,0],
		[0x1eff0f28,0],
		[0x1eff0f2c,0],
		[0x1eff0f30,0],
		[0x1eff0f34,0],
		[0x1eff0f38,0],
		[0x1eff0f3c,0],
		[0x1eff0f40,0],
		[0x1eff0f44,0],
		[0x1eff0f48,0],
		[0x1eff0f4c,0],
		[0x1eff0f50,0],
		[0x1eff0f54,0],
		[0x1eff0f58,0],
		[0x1eff0f5c,0],
		[0x1eff0f60,0],
		[0x1eff0f64,0],
		[0x1eff0f68,0],
		[0x1eff0f6c,0],
		[0x1eff0f70,0],
		[0x1eff0f74,0],
		[0x1eff0f78,0],
		[0x1eff0f7c,0],
		[0x1eff0f84,0],
		[0x1eff0f88,0],
		[0x1eff0f8c,0],
		[0x1eff0f90,0],
		[0x1eff0f94,0],
		[0x1eff0f98,0],
		[0x1eff0f9c,0],
		[0x1eff0fa0,0],
		[0x1eff0fa4,0],
		[0x1eff0fa8,0],
		[0x1eff0fac,0],
		[0x1eff0fb0,0],
		[0x1eff0fb4,0],
		[0x1eff0fb8,0],
		[0x1eff0fbc,0],
		[0x1eff0fc0,0],
		[0x1eff0fc4,0],
		[0x1eff1010,11],
		[0x1eff1014,0],
		[0x1eff1024,32657],
		[0x1eff102c,11032],
		[0x1eff1034,0],
		[0x1eff103c,0],
		[0x1eff1058,1],
		[0x1eff105c,2],
		[0x1eff1060,13],
		[0x1eff1064,0],
		[0x1eff1068,3],
		[0x1eff106c,0],
		[0x1eff1070,38],
		[0x1eff1074,0],
		[0x1eff1078,0],
		[0x1eff107c,0],
		[0x1eff1090,0],
		[0x1eff1094,0],
		[0x1eff1098,1],
		[0x1eff109c,0],
		[0x1eff10b0,271],
		[0x1eff10b4,0],
		[0x1eff10b8,4373],
		[0x1eff10bc,0],
		[0x1eff10c0,4165],
		[0x1eff10c4,0],
		[0x1eff10c8,0],
		[0x1eff10cc,0],
		[0x1eff10d0,0],
		[0x1eff10d4,0],
		[0x1eff10d8,140],
		[0x1eff10dc,0],
		[0x1eff10e0,686],
		[0x1eff10e4,0],
		[0x1eff10e8,33],
		[0x1eff10ec,0],
		[0x1eff10f0,0],
		[0x1eff10f4,0],
		[0x1eff10fc,0],
		[0x1eff1104,0],
		[0x1eff110c,0],
		[0x1eff1114,0],
		[0x1eff111c,0],
		[0x1eff1124,0],
		[0x1eff1150,33],
		[0x1eff1154,0],
		[0x1eff115c,32657],
		[0x1eff1160,16],
		[0x1eff1164,0],
		[0x1eff116c,0],
		[0x1eff1170,6],
		[0x1eff1174,0],
		[0x1eff1178,4096],
		[0x1eff117c,0],
		[0x1eff1180,17],
		[0x1eff1184,0],
		[0x1eff1188,100],
		[0x1eff118c,0],
		[0x1eff1190,3],
		[0x1eff1194,0],
		[0x1eff119c,0],
		[0x1eff11a0,4],
		[0x1eff11a4,0],
		[0x1eff11a8,56],
		[0x1eff11ac,0],
		[0x1eff11b0,5],
		[0x1eff11b4,0],
		[0x1eff11b8,9],
		[0x1eff11bc,0],
		[0x1eff11c0,7],
		[0x1eff11c4,0],
		[0x1eff11cc,32657],
		[0x1eff11d0,8],
		[0x1eff11d4,0],
		[0x1eff11d8,0],
		[0x1eff11dc,0],
		[0x1eff11e0,9],
		[0x1eff11e4,0],
		[0x1eff11ec,0],
		[0x1eff11f0,11],
		[0x1eff11f4,0],
		[0x1eff11f8,1000],
		[0x1eff11fc,0],
		[0x1eff1200,12],
		[0x1eff1204,0],
		[0x1eff1208,1000],
		[0x1eff120c,0],
		[0x1eff1210,13],
		[0x1eff1214,0],
		[0x1eff1218,1000],
		[0x1eff121c,0],
		[0x1eff1220,14],
		[0x1eff1224,0],
		[0x1eff1228,1000],
		[0x1eff122c,0],
		[0x1eff1230,23],
		[0x1eff1234,0],
		[0x1eff1238,0],
		[0x1eff123c,0],
		[0x1eff1240,25],
		[0x1eff1244,0],
		[0x1eff1250,26],
		[0x1eff1254,0],
		[0x1eff1258,0],
		[0x1eff125c,0],
		[0x1eff1260,31],
		[0x1eff1264,0],
		[0x1eff1270,15],
		[0x1eff1274,0],
		[0x1eff1280,0],
		[0x1eff1284,0],
		[0x1eff1288,0],
		[0x1eff128c,0],
		[0x1eff1290,0],
		[0x1eff1294,0],
		[0x1eff1298,0],
		[0x1eff129c,0],
		[0x1eff12a0,0],
		[0x1eff12a4,0],
		[0x1eff12a8,0],
		[0x1eff12ac,0],
		[0x1eff12b0,0],
		[0x1eff12b4,0],
		[0x1eff12b8,0],
		[0x1eff12bc,0],
		[0x1eff12c0,530],
		[0x1eff12c4,0],
		[0x1eff12c8,63],
		[0x1eff12cc,0],
		[0x1eff12d0,0],
		[0x1eff12d4,0],
		[0x1eff12d8,0],
		[0x1eff12dc,0],
		[0x1eff12f0,0],
		[0x1eff12f4,0],
		[0x1eff12f8,0],
		[0x1eff12fc,0],
		[0x1eff1300,0],
		[0x1eff1304,0],
		[0x1eff1308,0],
		[0x1eff130c,0],
		[0x1eff1324,32657],
		[0x1eff1330,0],
		[0x1eff1334,0],
		[0x1eff1340,205],
		[0x1eff1344,0],
		[0x1eff1348,0],
		[0x1eff134c,0],
		[0x1eff1350,0],
		[0x1eff1354,0],
		[0x1eff1358,0],
		[0x1eff135c,0],
		[0x1eff1378,0],
		[0x1eff137c,0],
		[0x1eff1380,1],
		[0x1eff1384,0],
		[0x1eff1388,0],
		[0x1eff138c,0],
		[0x1eff1390,0],
		[0x1eff1394,0],
		[0x1eff1398,0],
		[0x1eff139c,0],
		[0x1eff13a0,0],
		[0x1eff13a4,0],
		[0x1eff13a8,0],
		[0x1eff13ac,0],
		[0x1eff13b0,0],
		[0x1eff13b4,0],
		[0x1eff13b8,0],
		[0x1eff13bc,0],
		[0x1eff13c0,0],
		[0x1eff13c4,0],
		[0x1eff13c8,0],
		[0x1eff13cc,0],
		[0x1eff13d0,0],
		[0x1eff13d4,0],
		[0x1eff13d8,0],
		[0x1eff13dc,0],
		[0x1eff13e0,0],
		[0x1eff13e4,0],
		[0x1eff13e8,0],
		[0x1eff13ec,0],
		[0x1eff13f0,0],
		[0x1eff13f4,0],
		[0x1eff13f8,0],
		[0x1eff13fc,0],
		[0x1eff1400,0],
		[0x1eff1404,0],
		[0x1eff1408,0],
		[0x1eff140c,0],
		[0x1eff1410,0],
		[0x1eff1414,0],
		[0x1eff1418,0],
		[0x1eff141c,0],
		[0x1eff1420,0],
		[0x1eff1424,0],
		[0x1eff1428,0],
		[0x1eff142c,0],
		[0x1eff1430,0],
		[0x1eff1434,0],
		[0x1eff1438,0],
		[0x1eff143c,0],
		[0x1eff1440,0],
		[0x1eff1444,0],
		[0x1eff1448,0],
		[0x1eff144c,0],
		[0x1eff1450,0],
		[0x1eff1454,0],
		[0x1eff1458,0],
		[0x1eff145c,0],
		[0x1eff1460,0],
		[0x1eff1464,0],
		[0x1eff1468,0],
		[0x1eff146c,0],
		[0x1eff1470,0],
		[0x1eff1474,0],
		[0x1eff1478,0],
		[0x1eff147c,0],
		[0x1eff1480,0],
		[0x1eff1484,0],
		[0x1eff1488,0],
		[0x1eff148c,0],
		[0x1eff1490,0],
		[0x1eff1494,0],
		[0x1eff1498,0],
		[0x1eff149c,0],
		[0x1eff14a0,0],
		[0x1eff14a4,0],
		[0x1eff14a8,0],
		[0x1eff14ac,0],
		[0x1eff14b0,0],
		[0x1eff14b4,0],
		[0x1eff14b8,0],
		[0x1eff14bc,0],
		[0x1eff14c0,0],
		[0x1eff14c4,0],
		[0x1eff14c8,0],
		[0x1eff14cc,0],
		[0x1eff14d0,0],
		[0x1eff14d4,0],
		[0x1eff14d8,0],
		[0x1eff14dc,0],
		[0x1eff14e0,0],
		[0x1eff14e4,0],
		[0x1eff14e8,0],
		[0x1eff14ec,0],
		[0x1eff14f0,0],
		[0x1eff14f4,0],
		[0x1eff14f8,0],
		[0x1eff14fc,0],
		[0x1eff1500,0],
		[0x1eff1504,0],
		[0x1eff1508,0],
		[0x1eff150c,0],
		[0x1eff1510,0],
		[0x1eff1514,0],
		[0x1eff1518,0],
		[0x1eff151c,0],
		[0x1eff1520,0],
		[0x1eff1524,0],
		[0x1eff1528,0],
		[0x1eff152c,0],
		[0x1eff1530,0],
		[0x1eff1534,0],
		[0x1eff1538,0],
		[0x1eff153c,0],
		[0x1eff1540,0],
		[0x1eff1544,0],
		[0x1eff1548,0],
		[0x1eff154c,0],
		[0x1eff1550,0],
		[0x1eff1554,0],
		[0x1eff1558,0],
		[0x1eff155c,0],
		[0x1eff1560,0],
		[0x1eff1564,0],
		[0x1eff1568,0],
		[0x1eff156c,0],
		[0x1eff1570,0],
		[0x1eff1574,0],
		[0x1eff1578,0],
		[0x1eff157c,0],
		[0x1eff1580,0],
		[0x1eff1584,0],
		[0x1eff1588,0],
		[0x1eff158c,0],
		[0x1eff1590,0],
		[0x1eff1594,0],
		[0x1eff1598,0],
		[0x1eff159c,0],
		[0x1eff15a0,0],
		[0x1eff15a4,0],
		[0x1eff15a8,0],
		[0x1eff15ac,0],
		[0x1eff15b0,0],
		[0x1eff15b4,0],
		[0x1eff15b8,0],
		[0x1eff15bc,0],
		[0x1eff15c0,0],
		[0x1eff15c4,0],
		[0x1eff15c8,0],
		[0x1eff15cc,0],
		[0x1eff15d0,0],
		[0x1eff15d4,0],
		[0x1eff15d8,0],
		[0x1eff15dc,0],
		[0x1eff15e0,0],
		[0x1eff15e4,0],
		[0x1eff15e8,0],
		[0x1eff15ec,0],
		[0x1eff15f0,0],
		[0x1eff15f4,0],
		[0x1eff15f8,0],
		[0x1eff15fc,0],
		[0x1eff1600,0],
		[0x1eff1604,0],
		[0x1eff1608,0],
		[0x1eff160c,0],
		[0x1eff1610,0],
		[0x1eff1614,0],
		[0x1eff1618,0],
		[0x1eff161c,0],
		[0x1eff1620,0],
		[0x1eff1624,0],
		[0x1eff1628,0],
		[0x1eff162c,0],
		[0x1eff1630,0],
		[0x1eff1634,0],
		[0x1eff1638,0],
		[0x1eff163c,0],
		[0x1eff1640,0],
		[0x1eff1644,0],
		[0x1eff1648,0],
		[0x1eff164c,0],
		[0x1eff1650,0],
		[0x1eff1654,0],
		[0x1eff1658,0],
		[0x1eff165c,0],
		[0x1eff1660,0],
		[0x1eff1664,0],
		[0x1eff1668,0],
		[0x1eff166c,0],
		[0x1eff1670,0],
		[0x1eff1674,0],
		[0x1eff1678,0],
		[0x1eff167c,0],
		[0x1eff1680,0],
		[0x1eff1684,0],
		[0x1eff1688,0],
		[0x1eff168c,0],
		[0x1eff1690,0],
		[0x1eff1694,0],
		[0x1eff1698,0],
		[0x1eff169c,0],
		[0x1eff16a0,0],
		[0x1eff16a4,0],
		[0x1eff16a8,0],
		[0x1eff16ac,0],
		[0x1eff16b0,0],
		[0x1eff16b4,0],
		[0x1eff16b8,0],
		[0x1eff16bc,0],
		[0x1eff16c0,0],
		[0x1eff16c4,0],
		[0x1eff16c8,0],
		[0x1eff16cc,0],
		[0x1eff16d0,0],
		[0x1eff16d4,0],
		[0x1eff16d8,0],
		[0x1eff16dc,0],
		[0x1eff16e0,0],
		[0x1eff16e4,0],
		[0x1eff16e8,0],
		[0x1eff16ec,0],
		[0x1eff16f0,0],
		[0x1eff16f4,0],
		[0x1eff16f8,0],
		[0x1eff16fc,0],
		[0x1eff1700,0],
		[0x1eff1704,0],
		[0x1eff1708,0],
		[0x1eff170c,0],
		[0x1eff1710,0],
		[0x1eff1714,0],
		[0x1eff1718,0],
		[0x1eff171c,0],
		[0x1eff1720,0],
		[0x1eff1724,0],
		[0x1eff1728,0],
		[0x1eff172c,0],
		[0x1eff1730,0],
		[0x1eff1734,0],
		[0x1eff1738,0],
		[0x1eff173c,0],
		[0x1eff1740,0],
		[0x1eff1744,0],
		[0x1eff1748,0],
		[0x1eff174c,0],
		[0x1eff1750,0],
		[0x1eff1754,0],
		[0x1eff1758,0],
		[0x1eff175c,0],
		[0x1eff1760,0],
		[0x1eff1764,0],
		[0x1eff1768,0],
		[0x1eff176c,0],
		[0x1eff1770,0],
		[0x1eff1774,0],
		[0x1eff1778,0],
		[0x1eff177c,0],
		[0x1eff1780,0],
		[0x1eff1784,0],
		[0x1eff1788,0],
		[0x1eff178c,0],
		[0x1eff1790,0],
		[0x1eff1794,0],
		[0x1eff1798,0],
		[0x1eff179c,0],
		[0x1eff17a0,0],
		[0x1eff17a4,0],
		[0x1eff17a8,0],
		[0x1eff17ac,0],
		[0x1eff17b0,0],
		[0x1eff17b4,0],
		[0x1eff17b8,0],
		[0x1eff17bc,0],
		[0x1eff17c0,0],
		[0x1eff17c4,0],
		[0, 0]
]).
string_val([
		[0, 0]
]).
:- use_module(library(clpfd)).
:- use_module(reif).
:- style_check(-singleton).

isTrue([X, Y]):-
    X == 49.

isTrue([X|Tail]):-
    isTrue(Tail).

log(File_name, Name, Addr, Base):-
    Offset #= Addr - Base,
    open(File_name, append, Stream),
    write(Stream, Name),
    write(Stream, ':'),
    write(Stream, Offset),
    nl(Stream),
    close(Stream).

possible_task_struct(Base_addr) :-
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM2_addr, Pid_addr, Tgid_addr, Real_parent_addr, Parent_addr , Child_addr, 
           Group_leader_addr, Thread_group_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    %MM2_addr #> Base_addr + 1000,
    Tasks_addr #> MM2_addr - 100,
    %FS_struct_addr #< Base_addr + 4000,
    Tgid_addr #= Pid_addr + 4,
    Real_parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr - 8,
    Child_addr #= Parent_addr + 8,
    %FIXME This may be too strong
    Group_leader_addr #=< Child_addr +32,
    %Comm_addr #= Base_addr + 1656,
    %Tasks_addr #= Base_addr + 1072,
    %FS_struct_addr #= Base_addr + 2640,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    % make query after labeling
    MM2_val #> 0,
    integer(MM2_val),
    
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val,  Comm_addr, Comm_val ]),

    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_parent_addr, Real_parent_val, Group_leader_addr, Group_leader_val]),
    Real_parent_val #> 0,
    Group_leader_val #> 0,
    query_ts(Real_parent_val, Comm_offset, Tasks_offset),
    query_ts(Group_leader_val, Comm_offset, Tasks_offset),

    labeling([enum], [Cred_addr, Cred_val]),
    Cred_val #> 0,
    query_cred(Cred_val),

    labeling([enum], [FS_struct_addr, FS_struct_val]),
    FS_struct_val #> 0,
    %query_fs_struct(FS_struct_val),



    get_time(End),
    Time_past is End - Current,
    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    log("profile.txt", "tasks", Tasks_addr, Base_addr),
    log("profile.txt", "mm_struct", MM2_addr, Base_addr),
    log("profile.txt", "comm", Comm_addr, Base_addr),
    log("profile.txt", "parent", Parent_addr, Base_addr),
    log("profile.txt", "group_leader", Group_leader_addr, Base_addr),
    log("profile.txt", "cred", Cred_addr, Base_addr),

    
    print_nl('tasks offset', Tasks_offset),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).

possible_mm_struct(Current_addr) :- 
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    % TODO: ADD vm_area_struct *mmap
    Ptr_profile = [
        [Mmap_addr, Mmap_val],
        [Pgd_addr, Pgd_val]  
    ],
    Ulong_profile = [
        [Mmap_base_addr, Mmap_base_val],
        [Mmap_legacy_base_addr, Mmap_legacy_base_val],
        [Task_size_addr, Task_size_val],
        [High_vm_end_addr, High_vm_end_val],
        [Start_brk_addr, Start_brk_val],
        [Brk_addr, Brk_val],
        [Start_stack_addr, Start_stack_val],
        [ARG_start_addr, ARG_start_val]
    ],
    Mmap_addr #= Current_addr,


    Mmap_base_addr #> Mmap_addr,
    %FIXME mmap_base need more value constraint, because we removed mmap_legacy_base and highest_vm_end.
    Mmap_base_val #> 0x7f0000000000,
    %FIXME in old linux version, e.g., there is no mmap_legacy_base and highest_vm_enb
    %chain([Mmap_base_addr, Mmap_legacy_base_addr, Task_size_addr, High_vm_end_addr, Pgd_addr], #<),
    chain([Mmap_base_addr, Task_size_addr, Pgd_addr], #<),

    %FIXME: This rule may be too strong
    %High_vm_end_addr #= Mmap_base_addr + 24, 
    Pgd_addr #> Task_size_addr,
    Pgd_addr #=< Task_size_addr + 40,
    %FIXME: This rule may not be true for other mm_struct.
    Task_size_val #>= 0x7ffffffff000,

    %Mmap_base_addr #= Current_addr + 40,
    %Mmap_legacy_base_addr #= Current_addr + 40,
    %Task_size_addr #= Current_addr + 48,
    %High_vm_end_addr #= Current_addr + 72,

    Start_brk_addr #> Pgd_addr,
    Start_stack_val #> 0x7ff000000000,
    % TODO: Convert this to index comparison. 
    ARG_start_addr #< Current_addr + 500,
    chain([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr], #<),
    ARG_start_addr #= Start_brk_addr + 24,
    Brk_val #< 0x7ff000000000,
    ARG_start_val #> 0x7ff000000000,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),


    labeling([enum], [Mmap_addr, Mmap_val, Mmap_base_addr, Pgd_addr, Pgd_val]),
    Mmap_val #> 0,
    Pgd_val #> 0,
    
    process_create(path('python'),
                    ['subquery.py', Mmap_val, "vm_area_struct", 2],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    label([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr]),
    statistics(real_time, [End|_]),

    log("profile.txt", "mmap", Mmap_addr, Current_addr),
    log("profile.txt", "mmap_base", Mmap_base_addr, Current_addr),
    log("profile.txt", "pgd", Pgd_addr, Current_addr),
    log("profile.txt", "start_brk", Start_brk_addr, Current_addr),
    log("profile.txt", "brk", Brk_addr, Current_addr),
    log("profile.txt", "start_stack", Start_stack_addr, Current_addr),
    log("profile.txt", "arg_start", ARG_start_addr, Current_addr),
    log("profile.txt", "mm_struct time", End, Start).


possible_vm_area_struct(Base_addr, Level) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [VM_next_addr, VM_next_val],
        [VM_file_addr, VM_file_val]
    ],
    Ulong_profile = [
        [VM_start_addr, VM_start_val],
        [VM_end_addr, VM_end_val],
        [VM_flag_addr, VM_flag_val]
        %VM_pgoff is 0, and we do not consider 0 as ulong
        %[VM_pgoff_addr, VM_pgoff_val]
    ],
    VM_start_addr #>= Base_addr,
    chain([VM_start_addr, VM_end_addr, VM_next_addr, VM_flag_addr, VM_file_addr], #<),
    VM_end_addr #= VM_start_addr + 8,
    VM_next_addr #= VM_end_addr + 8,
    VM_next_addr #< Base_addr + 32,
    VM_file_addr #< Base_addr + 180,
    VM_pgoff_addr #= VM_file_addr - 8,
    %VM_file_addr #= Base_addr + 160,

    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    %FIXME: VM_flag may need value constraints.

    label([VM_next_addr, VM_next_val]),
    /*if_(Level = 2,
        call(check_vm_area_struct, VM_next_val, 1),
        1 = 1),*/
    %Level #> 1 #==> check_vm_area_struct(VM_next_val, 1),

    labeling([enum], [VM_start_addr, VM_end_addr, VM_flag_addr, VM_pgoff_addr, VM_file_addr, VM_file_val]),
    
    VM_file_val #> 0,
    process_create(path('python'),
                ['subquery.py', VM_file_val, "vm_file"],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    statistics(real_time, [End|_]),

    log("profile.txt", "vm_start", VM_start_addr, Base_addr),
    log("profile.txt", "vm_end", VM_end_addr, Base_addr),
    log("profile.txt", "vm_next", VM_next_addr, Base_addr),
    log("profile.txt", "vm_flag", VM_flag_addr, Base_addr),
    log("profile.txt", "vm_pgoff", VM_pgoff_addr, Base_addr),
    log("profile.txt", "vm_file", VM_file_addr, Base_addr),
    log("profile.txt", "vm_area_struct time", End, Start).

check_vm_area_struct(Base_addr, Level) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "vm_area_struct", Level],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vm_file(Base_addr) :-
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [Vfs_mount_addr, Vfs_mount_val],
        [Dentry_addr, Dentry_val]
    ],
    Vfs_mount_addr #> Base_addr,
    Dentry_addr #= Vfs_mount_addr + 8,
    Dentry_addr #< Base_addr + 40,
    tuples_in(Ptr_profile, Ptr),
    label([Vfs_mount_val, Dentry_val]),
    Vfs_mount_val #>0,
    Dentry_val #> 0,
    %FIXME seems like we do not need this, make sure the string is not addr=0
/*
    process_create(path('python'),
                    ['subquery.py', Vfs_mount_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vfs_mount(Base_addr) :-
    pointer(Ptr),
    Ptr_profile = [
        [Dentry_addr, Dentry_val]
    ],
    Dentry_addr #< Base_addr + 16,
    tuples_in(Ptr_profile, Ptr),
    label([Dentry_val]),
    Dentry_val #> 0,
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).
    
possible_dentry(Base_addr) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    string_val(Str),
    Ptr_profile = [
        [Dparent_addr, Dparent_val],
        [Dchild_addr, Dchild_val]
    ],
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    %log("profile.txt", "dentry addr", Base_addr, 0),
    Dparent_addr #> Base_addr,
    Dname_addr #> 0,
    Dname_addr #< Base_addr + 200,
    %Dname_addr #= Base_addr + 160,
    %FIXME This child rule is not applicable for old kernel version. 
    %chain([Dparent_addr, Dname_addr, Dchild_addr], #<),
    %Dchild_addr #< Base_addr + 200,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    labeling([enum], [Dparent_addr, Dparent_val, Dname_addr, Dchild_addr, Dchild_val]),
    Dname_offset #= Dname_addr - Base_addr,
    integer(Dname_offset),
    Dparent_val #> 0,
    
    %FIXME d_parent may not be initialized
    /*process_create(path('python'),
                ['subquery.py', Dparent_val, "d_entry", Dname_offset],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/

    %FIXME: may need to find another way for all list_head. 
    /*Dchild_offset #= Dchild_addr - Base_addr,
    integer(Dchild_offset),
    Dchild_base #= Dchild_val - Dchild_offset,
    integer(Dchild_base),
    Dchild_base #> 0,
    process_create(path('python'),
                ['subquery.py', Dchild_base, "d_entry", Dname_offset],
                [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    statistics(real_time, [End|_]).
/*
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    log("profile.txt", "d_parent", Dparent_addr, Base_addr),
    log("profile.txt", "d_child", Dchild_addr, Base_addr),
    log("profile.txt", "dentry time", End, Start).
*/
possible_d_entry(Base_addr, Dname_offset) :-
    current_predicate(string_val/1),
    string_val(Str),
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    Dname_addr #= Base_addr + Dname_offset,
    tuples_in(Str_profile, Str),
    label([Dname_addr]).

possible_list_head(Tasks_val, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_val, Tasks_addr]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],
    Comm_addr #= Tasks_val - Tasks_offset + Comm_offset,
    Tasks_addr #\= Tasks_val,
    tuples_in(Str_profile, Str),
    tuples_in(Ptr_profile, Ptr),
    label([Comm_addr]).

possible_ts(Base_addr, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_addr, Tasks_val]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],

    Comm_addr #= Base_addr + Comm_offset,
    Tasks_addr #= Base_addr + Tasks_offset,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),

    label([Tasks_val]),
    
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "list_head", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_cred(Base_addr) :-
    statistics(real_time, [Start|_]),

    int(Int),
    long(Ulg),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3],
        [Addr4, Val4],
        [Addr5, Val5],
        [Addr6, Val6],
        [Addr7, Val7],
        [Addr8, Val8],
        [Addr9, Val9]
    ],
    %FIXME For now, this rule is hard-coded because we do not consider 0 as a unsign long number. 
    %So that for cred whos val10 is 0, this rule does not apply.
    /*Ulong_profile = [
        [Addr10, Val10],
        [Addr11, Val11]
    ],*/
    Addr1 #> Base_addr,
    %chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9, Addr10, Addr11], #<),
    chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9], #<),
    Addr1 #= Base_addr + 4,
    Addr9 #= Addr1 + 32,
    %Addr11 #< Base_addr + 120,
    tuples_in(Int_profile, Int),
    %tuples_in(Ulong_profile, Ulg),
    statistics(real_time, [End|_]),
    labeling([enum], [Addr1, Addr2, Addr5, Addr6]),
    log("profile.txt", "cred time", End, Start),
    log('profile.txt', "uid", Addr1, Base_addr),
    log('profile.txt', "gid", Addr2, Base_addr),
    log('profile.txt', "euid", Addr5, Base_addr),
    log('profile.txt', "egid", Addr6, Base_addr).

possible_fs_struct(Base_addr) :-
    statistics(real_time, [Start|_]),
    int(Int),
    pointer(Ptr),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3]
    ],
    Ptr_profile = [
        [Root_addr, Root_val],
        [PWD_addr, PWD_val]
    ],
    Addr1 #>= Base_addr,
    chain([Addr1, Addr2, Addr3, Root_addr, PWD_addr], #<),
    PWD_addr #= Root_addr + 16,
    PWD_addr #< Base_addr + 50,
    tuples_in(Int_profile, Int),
    tuples_in(Ptr_profile, Ptr),
    label([Root_addr, Root_val]),
    
    process_create(path('python'),
                    ['subquery.py', Root_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    label([PWD_addr, PWD_val]),
    process_create(path('python'),
                    ['subquery.py', PWD_val, "dentry"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    statistics(real_time, [End|_]),
    log("profile.txt", "fs time", End, Start),
    log('profile.txt', "Root", Root_addr, Base_addr),
    log('profile.txt', "pwd", PWD_addr, Base_addr).
