:- use_module(library(clpfd)).
:- style_check(-singleton).
pointer([
		[0x10ec31a0,512788352],
		[0x10ec31a8,504590336],
		[0x10ec31b8,0],
		[0x10ec31c0,0],
		[0x10ec31d0,283915104],
		[0x10ec31d8,283915872],
		[0x10ec31e0,459360976],
		[0x10ec31e8,459360976],
		[0x10ec31f0,509138544],
		[0x10ec31f8,504590528],
		[0x10ec3200,503868576],
		[0x10ec3208,283915528],
		[0x10ec3210,283916680],
		[0x10ec3218,283914776],
		[0x10ec3220,283914776],
		[0x10ec3228,283914792],
		[0x10ec3230,283914792],
		[0x10ec3238,394911944],
		[0x10ec3240,509138632],
		[0x10ec3248,283914824],
		[0x10ec3250,283914824],
		[0x10ec3258,0],
		[0x10ec3260,458310784],
		[0x10ec3268,459750528],
		[0x10ec3270,459361520],
		[0x10ec3278,509138672],
		[0x10ec3280,283914880],
		[0x10ec3288,283914880],
		[0x10ec3290,0],
		[0x10ec32a8,0],
		[0x10ec32b0,0],
		[0x10ec32b8,283914936],
		[0x10ec32c0,283914936],
		[0x10ec32c8,0],
		[0x10ec32d0,0],
		[0x10ec32d8,0],
		[0x10ec32e0,0],
		[0x10ec32e8,0],
		[0x10ec32f0,193699200],
		[0x10ec32f8,0],
		[0x10ec3300,0],
		[0x10ec3308,459342816],
		[0x10ec3310,283914624],
		[0x10ec3318,512659200],
		[0x10ec3320,453012288],
		[0x10ec3328,459413504],
		[0x10ec3338,0],
		[0x10ec3340,0],
		[0x10ec3350,283917024],
		[0x10ec3358,450371040],
		[0x10ec3360,283916640],
		[0x10ec3368,283914704],
		[0x10ec3370,509137776],
		[0x10ec3378,459361392],
		[0x10ec3380,508836704],
		[0x10ec3388,283917064],
		[0x10ec3390,283915912],
		[0x10ec3398,283915160],
		[0x10ec33a0,283915160],
		[0x10ec33a8,283915176],
		[0x10ec33b0,283915176],
		[0x10ec33b8,414023240],
		[0x10ec33c0,509137864],
		[0x10ec33c8,283915208],
		[0x10ec33d0,283915208],
		[0x10ec33d8,0],
		[0x10ec33e0,458310784],
		[0x10ec33e8,509645120],
		[0x10ec33f0,0],
		[0x10ec33f8,509137904],
		[0x10ec3400,283915264],
		[0x10ec3408,283915264],
		[0x10ec3410,0],
		[0x10ec3428,0],
		[0x10ec3430,0],
		[0x10ec3438,283915320],
		[0x10ec3440,283915320],
		[0x10ec3448,0],
		[0x10ec3450,0],
		[0x10ec3458,0],
		[0x10ec3460,0],
		[0x10ec3468,0],
		[0x10ec3470,193699200],
		[0x10ec3478,0],
		[0x10ec3480,0],
		[0x10ec3488,459340536],
		[0x10ec3490,283914240],
		[0x10ec3498,448609664],
		[0x10ec34a0,453011712],
		[0x10ec34a8,459407360],
		[0x10ec34b8,0],
		[0x10ec34c0,0],
		[0x10ec34d0,283915472],
		[0x10ec34d8,283915472],
		[0x10ec34e0,450108128],
		[0x10ec34e8,283914320],
		[0x10ec34f0,509137008],
		[0x10ec34f8,461306608],
		[0x10ec3500,503867888],
		[0x10ec3508,283917832],
		[0x10ec3510,283914760],
		[0x10ec3518,283915544],
		[0x10ec3520,283915544],
		[0x10ec3528,283915560],
		[0x10ec3530,283915560],
		[0x10ec3538,451678408],
		[0x10ec3540,509137096],
		[0x10ec3548,283915592],
		[0x10ec3550,283915592],
		[0x10ec3558,0],
		[0x10ec3560,458310784],
		[0x10ec3568,509646464],
		[0x10ec3570,0],
		[0x10ec3578,509137136],
		[0x10ec3580,283915648],
		[0x10ec3588,283915648],
		[0x10ec3590,0],
		[0x10ec35a8,0],
		[0x10ec35b0,0],
		[0x10ec35b8,283915704],
		[0x10ec35c0,283915704],
		[0x10ec35c8,0],
		[0x10ec35d0,0],
		[0x10ec35d8,0],
		[0x10ec35e0,0],
		[0x10ec35e8,0],
		[0x10ec35f0,193699200],
		[0x10ec35f8,0],
		[0x10ec3600,0],
		[0x10ec3608,459339360],
		[0x10ec3610,283914624],
		[0x10ec3618,512631552],
		[0x10ec3620,453009792],
		[0x10ec3628,459415552],
		[0x10ec3638,0],
		[0x10ec3640,0],
		[0x10ec3650,450368736],
		[0x10ec3658,450368736],
		[0x10ec3660,283914704],
		[0x10ec3668,283914336],
		[0x10ec3670,412508272],
		[0x10ec3678,459359472],
		[0x10ec3680,508835896],
		[0x10ec3688,283915144],
		[0x10ec3690,283914376],
		[0x10ec3698,283915928],
		[0x10ec36a0,283915928],
		[0x10ec36a8,283915944],
		[0x10ec36b0,283915944],
		[0x10ec36b8,451689288],
		[0x10ec36c0,412508360],
		[0x10ec36c8,283915976],
		[0x10ec36d0,283915976],
		[0x10ec36d8,0],
		[0x10ec36e0,458310784],
		[0x10ec36e8,509648832],
		[0x10ec36f0,0],
		[0x10ec36f8,412508400],
		[0x10ec3700,283916032],
		[0x10ec3708,283916032],
		[0x10ec3710,0],
		[0x10ec3728,0],
		[0x10ec3730,0],
		[0x10ec3738,283916088],
		[0x10ec3740,283916088],
		[0x10ec3748,0],
		[0x10ec3750,0],
		[0x10ec3758,0],
		[0x10ec3760,0],
		[0x10ec3768,0],
		[0x10ec3770,193699200],
		[0x10ec3778,0],
		[0x10ec3780,0],
		[0x10ec3788,459345760],
		[0x10ec3790,283916544],
		[0x10ec3798,435096384],
		[0x10ec37a0,435097152],
		[0x10ec37a8,510115840],
		[0x10ec37b8,0],
		[0x10ec37c0,0],
		[0x10ec37d0,283916240],
		[0x10ec37d8,283916240],
		[0x10ec37e0,504549856],
		[0x10ec37e8,283916624],
		[0x10ec37f0,509140464],
		[0x10ec37f8,510116032],
		[0x10ec3800,508834552],
		[0x10ec3808,450108168],
		[0x10ec3810,283917832],
		[0x10ec3818,283916312],
		[0x10ec3820,283916312],
		[0x10ec3828,283916328],
		[0x10ec3830,283916328],
		[0x10ec3838,451681864],
		[0x10ec3840,509140552],
		[0x10ec3848,283916360],
		[0x10ec3850,283916360],
		[0x10ec3858,0],
		[0x10ec3860,458310784],
		[0x10ec3868,509647232],
		[0x10ec3870,0],
		[0x10ec3878,509140592],
		[0x10ec3880,283916416],
		[0x10ec3888,283916416],
		[0x10ec3890,0],
		[0x10ec38a8,0],
		[0x10ec38b0,0],
		[0x10ec38b8,283916472],
		[0x10ec38c0,283916472],
		[0x10ec38c8,0],
		[0x10ec38d0,0],
		[0x10ec38d8,0],
		[0x10ec38e0,0],
		[0x10ec38e8,0],
		[0x10ec38f0,193699200],
		[0x10ec38f8,0],
		[0x10ec3900,0],
		[0x10ec3908,459339672],
		[0x10ec3910,283914624],
		[0x10ec3918,512634048],
		[0x10ec3920,435312896],
		[0x10ec3928,509214720],
		[0x10ec3938,0],
		[0x10ec3940,0],
		[0x10ec3950,283916256],
		[0x10ec3958,504549856],
		[0x10ec3960,283914336],
		[0x10ec3968,283915104],
		[0x10ec3970,509138928],
		[0x10ec3978,509214912],
		[0x10ec3980,508837296],
		[0x10ec3988,283914760],
		[0x10ec3990,283917064],
		[0x10ec3998,283916696],
		[0x10ec39a0,283916696],
		[0x10ec39a8,283916712],
		[0x10ec39b0,283916712],
		[0x10ec39b8,451680328],
		[0x10ec39c0,509139016],
		[0x10ec39c8,283916744],
		[0x10ec39d0,283916744],
		[0x10ec39d8,0],
		[0x10ec39e0,458310784],
		[0x10ec39e8,509647360],
		[0x10ec39f0,0],
		[0x10ec39f8,509139056],
		[0x10ec3a00,283916800],
		[0x10ec3a08,283916800],
		[0x10ec3a10,0],
		[0x10ec3a28,0],
		[0x10ec3a30,0],
		[0x10ec3a38,283916856],
		[0x10ec3a40,283916856],
		[0x10ec3a48,0],
		[0x10ec3a50,0],
		[0x10ec3a58,0],
		[0x10ec3a60,0],
		[0x10ec3a68,0],
		[0x10ec3a70,193699200],
		[0x10ec3a78,0],
		[0x10ec3a80,0],
		[0x10ec3a88,459340960],
		[0x10ec3a90,283915008],
		[0x10ec3a98,435321472],
		[0x10ec3aa0,435321088],
		[0x10ec3aa8,509220864],
		[0x10ec3ab8,0],
		[0x10ec3ac0,0],
		[0x10ec3ad0,283917008],
		[0x10ec3ad8,283917008],
		[0x10ec3ae0,283917792],
		[0x10ec3ae8,283915088],
		[0x10ec3af0,509139696],
		[0x10ec3af8,509221056],
		[0x10ec3b00,508837216],
		[0x10ec3b08,283916680],
		[0x10ec3b10,283915144],
		[0x10ec3b18,283917080],
		[0x10ec3b20,283917080],
		[0x10ec3b28,283917096],
		[0x10ec3b30,283917096],
		[0x10ec3b38,451687752],
		[0x10ec3b40,509139784],
		[0x10ec3b48,283917128],
		[0x10ec3b50,283917128],
		[0x10ec3b58,0],
		[0x10ec3b60,458310784],
		[0x10ec3b68,508643328],
		[0x10ec3b70,0],
		[0x10ec3b78,509139824],
		[0x10ec3b80,283917184],
		[0x10ec3b88,283917184],
		[0x10ec3b90,0],
		[0x10ec3ba8,0],
		[0x10ec3bb0,0],
		[0x10ec3bb8,283917240],
		[0x10ec3bc0,283917240],
		[0x10ec3bc8,0],
		[0x10ec3bd0,0],
		[0x10ec3bd8,0],
		[0x10ec3be0,0],
		[0x10ec3be8,0],
		[0x10ec3bf0,193699200],
		[0x10ec3bf8,0],
		[0x10ec3c00,0],
		[0x10ec3c08,0],
		[0x10ec3c10,283917312],
		[0x10ec3c18,435121536],
		[0x10ec3c20,435121536],
		[0x10ec3c28,283377664],
		[0x10ec3c38,0],
		[0x10ec3c40,0],
		[0x10ec3c50,283917392],
		[0x10ec3c58,283917392],
		[0x10ec3c60,283917408],
		[0x10ec3c68,283917408],
		[0x10ec3c70,412509040],
		[0x10ec3c78,283377856],
		[0x10ec3c80,208735003],
		[0x10ec3c88,283917448],
		[0x10ec3c90,283917448],
		[0x10ec3c98,283917464],
		[0x10ec3ca0,283917464],
		[0x10ec3ca8,283917480],
		[0x10ec3cb0,283917480],
		[0x10ec3cb8,283917496],
		[0x10ec3cc0,283917496],
		[0x10ec3cc8,283917512],
		[0x10ec3cd0,283917512],
		[0x10ec3cd8,0],
		[0x10ec3ce0,0],
		[0x10ec3ce8,0],
		[0x10ec3cf0,0],
		[0x10ec3cf8,0],
		[0x10ec3d00,283917568],
		[0x10ec3d08,283917568],
		[0x10ec3d10,0],
		[0x10ec3d20,0],
		[0x10ec3d28,0],
		[0x10ec3d30,0],
		[0x10ec3d38,283917624],
		[0x10ec3d40,283917624],
		[0x10ec3d48,0],
		[0x10ec3d50,0],
		[0x10ec3d58,0],
		[0x10ec3d60,0],
		[0x10ec3d68,0],
		[0x10ec3d70,193699200],
		[0x10ec3d78,0],
		[0x10ec3d80,0],
		[0x10ec3d88,459345232],
		[0x10ec3d90,283915008],
		[0x10ec3d98,435093696],
		[0x10ec3da0,435096000],
		[0x10ec3da8,510126080],
		[0x10ec3db8,0],
		[0x10ec3dc0,0],
		[0x10ec3dd0,283917776],
		[0x10ec3dd8,283917776],
		[0x10ec3de0,450369504],
		[0x10ec3de8,283917024],
		[0x10ec3df0,509139312],
		[0x10ec3df8,510126272],
		[0x10ec3e00,508837192],
		[0x10ec3e08,283916296],
		[0x10ec3e10,283915528],
		[0x10ec3e18,283917848],
		[0x10ec3e20,283917848],
		[0x10ec3e28,283917864],
		[0x10ec3e30,283917864],
		[0x10ec3e38,504545864],
		[0x10ec3e40,509139400],
		[0x10ec3e48,283917896],
		[0x10ec3e50,283917896],
		[0x10ec3e58,0],
		[0x10ec3e60,458310784],
		[0x10ec3e68,509645888],
		[0x10ec3e70,0],
		[0x10ec3e78,509139440],
		[0x10ec3e80,283917952],
		[0x10ec3e88,283917952],
		[0x10ec3e90,0],
		[0x10ec3ea8,0],
		[0x10ec3eb0,0],
		[0x10ec3eb8,283918008],
		[0x10ec3ec0,283918008],
		[0x10ec3ec8,0],
		[0x10ec3ed0,0],
		[0x10ec3ed8,0],
		[0x10ec3ee0,0],
		[0x10ec3ee8,0],
		[0x10ec3ef0,193699200],
		[0x10ec3ef8,0],
		[0x10ec3f00,0],
		[0x10ec3f08,0],
		[0x10ec3f10,0],
		[0x10ec3f18,0],
		[0x10ec3f20,0],
		[0x10ec3f28,0],
		[0x10ec3f30,0],
		[0x10ec3f38,0],
		[0x10ec3f40,0],
		[0x10ec3f48,0],
		[0x10ec3f50,0],
		[0x10ec3f58,0],
		[0x10ec3f60,0],
		[0x10ec3f68,0],
		[0x10ec3f70,0],
		[0x10ec3f78,0],
		[0x10ec3f80,0],
		[0x10ec3f88,0],
		[0x10ec3f90,0],
		[0x10ec3f98,0],
		[0x10ec3fa0,0],
		[0x10ec3fa8,0],
		[0x10ec3fb0,0],
		[0x10ec3fb8,0],
		[0x10ec3fc0,0],
		[0x10ec3fc8,0],
		[0x10ec3fd0,0],
		[0x10ec3fd8,0],
		[0x10ec3fe0,0],
		[0x10ec3fe8,0],
		[0x10ec3ff0,0],
		[0x10ec3ff8,0],
		[0x10ec4008,283920104],
		[0x10ec4010,208893439],
		[0x10ec4020,283919992],
		[0x10ec4028,283919312],
		[0x10ec4030,0],
		[0x10ec4040,205820512],
		[0x10ec4048,0],
		[0x10ec4058,0],
		[0x10ec4060,213374048],
		[0x10ec4078,0],
		[0x10ec4090,283920104],
		[0x10ec4098,209091670],
		[0x10ec40a0,283919992],
		[0x10ec40a8,0],
		[0x10ec40b0,0],
		[0x10ec40b8,0],
		[0x10ec40c8,205820512],
		[0x10ec40d0,0],
		[0x10ec40e0,0],
		[0x10ec40e8,213577504],
		[0x10ec4100,0],
		[0x10ec4118,283921872],
		[0x10ec4120,208893439],
		[0x10ec4130,283919720],
		[0x10ec4138,283920808],
		[0x10ec4140,0],
		[0x10ec4150,205820512],
		[0x10ec4158,0],
		[0x10ec4168,0],
		[0x10ec4170,213374048],
		[0x10ec4188,0],
		[0, 0]
]).
unknown([
		[0x10ec4080,1511546431263326920],
		[0x10ec4108,1511546431263329936],
		[0x10ec4190,1511546431263326440],
		[0, 0]
]).
long([
		[0x10ec31b0,4128],
		[0x10ec31c8,60284697848616],
		[0x10ec3298,111669149696],
		[0x10ec32a0,1],
		[0x10ec3330,4129],
		[0x10ec3348,60284697844368],
		[0x10ec3418,98784247808],
		[0x10ec3420,2],
		[0x10ec34b0,4135],
		[0x10ec34c8,60284697848664],
		[0x10ec3598,115964116992],
		[0x10ec35a0,8],
		[0x10ec3630,4135],
		[0x10ec3648,60284697844360],
		[0x10ec3718,94489280512],
		[0x10ec3720,13],
		[0x10ec37b0,4135],
		[0x10ec37c8,60284697849284],
		[0x10ec3898,124554051584],
		[0x10ec38a0,6],
		[0x10ec3930,4133],
		[0x10ec3948,60284697844624],
		[0x10ec3a18,107374182400],
		[0x10ec3a20,5],
		[0x10ec3ab0,4133],
		[0x10ec3ac8,60284697844376],
		[0x10ec3b98,103079215104],
		[0x10ec3ba0,3],
		[0x10ec3c48,180408],
		[0x10ec3d18,85899345920],
		[0x10ec3db0,4099],
		[0x10ec3dc8,60284697848672],
		[0x10ec3e98,120259084288],
		[0x10ec3ea0,4],
		[0x10ec4000,1],
		[0x10ec4018,1],
		[0x10ec4038,278974834],
		[0x10ec4050,4096],
		[0x10ec4068,4294977387],
		[0x10ec4070,2155872338],
		[0x10ec4088,1],
		[0x10ec40c0,1226189142],
		[0x10ec40d8,4096],
		[0x10ec40f0,4294977389],
		[0x10ec40f8,2155872338],
		[0x10ec4110,1],
		[0x10ec4128,1],
		[0x10ec4148,278974834],
		[0x10ec4160,4096],
		[0x10ec4178,4294977393],
		[0x10ec4180,2155872338],
		[0x10ec4198,1],
		[0, 0]
]).
int([
		[0x10ec31b0,4128],
		[0x10ec31b4,0],
		[0x10ec31b8,0],
		[0x10ec31bc,0],
		[0x10ec31c0,0],
		[0x10ec31c4,0],
		[0x10ec31cc,14036],
		[0x10ec3258,0],
		[0x10ec325c,0],
		[0x10ec3290,0],
		[0x10ec3294,0],
		[0x10ec3298,0],
		[0x10ec329c,26],
		[0x10ec32a0,1],
		[0x10ec32a4,0],
		[0x10ec32a8,0],
		[0x10ec32ac,0],
		[0x10ec32b0,0],
		[0x10ec32b4,0],
		[0x10ec32c8,0],
		[0x10ec32cc,0],
		[0x10ec32d0,0],
		[0x10ec32d4,0],
		[0x10ec32d8,0],
		[0x10ec32dc,0],
		[0x10ec32e0,0],
		[0x10ec32e4,0],
		[0x10ec32e8,0],
		[0x10ec32ec,0],
		[0x10ec32f8,0],
		[0x10ec32fc,0],
		[0x10ec3300,0],
		[0x10ec3304,0],
		[0x10ec3330,4129],
		[0x10ec3334,0],
		[0x10ec3338,0],
		[0x10ec333c,0],
		[0x10ec3340,0],
		[0x10ec3344,0],
		[0x10ec334c,14036],
		[0x10ec33d8,0],
		[0x10ec33dc,0],
		[0x10ec33f0,0],
		[0x10ec33f4,0],
		[0x10ec3410,0],
		[0x10ec3414,0],
		[0x10ec3418,0],
		[0x10ec341c,23],
		[0x10ec3420,2],
		[0x10ec3424,0],
		[0x10ec3428,0],
		[0x10ec342c,0],
		[0x10ec3430,0],
		[0x10ec3434,0],
		[0x10ec3448,0],
		[0x10ec344c,0],
		[0x10ec3450,0],
		[0x10ec3454,0],
		[0x10ec3458,0],
		[0x10ec345c,0],
		[0x10ec3460,0],
		[0x10ec3464,0],
		[0x10ec3468,0],
		[0x10ec346c,0],
		[0x10ec3478,0],
		[0x10ec347c,0],
		[0x10ec3480,0],
		[0x10ec3484,0],
		[0x10ec34b0,4135],
		[0x10ec34b4,0],
		[0x10ec34b8,0],
		[0x10ec34bc,0],
		[0x10ec34c0,0],
		[0x10ec34c4,0],
		[0x10ec34cc,14036],
		[0x10ec3558,0],
		[0x10ec355c,0],
		[0x10ec3570,0],
		[0x10ec3574,0],
		[0x10ec3590,0],
		[0x10ec3594,0],
		[0x10ec3598,0],
		[0x10ec359c,27],
		[0x10ec35a0,8],
		[0x10ec35a4,0],
		[0x10ec35a8,0],
		[0x10ec35ac,0],
		[0x10ec35b0,0],
		[0x10ec35b4,0],
		[0x10ec35c8,0],
		[0x10ec35cc,0],
		[0x10ec35d0,0],
		[0x10ec35d4,0],
		[0x10ec35d8,0],
		[0x10ec35dc,0],
		[0x10ec35e0,0],
		[0x10ec35e4,0],
		[0x10ec35e8,0],
		[0x10ec35ec,0],
		[0x10ec35f8,0],
		[0x10ec35fc,0],
		[0x10ec3600,0],
		[0x10ec3604,0],
		[0x10ec3630,4135],
		[0x10ec3634,0],
		[0x10ec3638,0],
		[0x10ec363c,0],
		[0x10ec3640,0],
		[0x10ec3644,0],
		[0x10ec364c,14036],
		[0x10ec36d8,0],
		[0x10ec36dc,0],
		[0x10ec36f0,0],
		[0x10ec36f4,0],
		[0x10ec3710,0],
		[0x10ec3714,0],
		[0x10ec3718,0],
		[0x10ec371c,22],
		[0x10ec3720,13],
		[0x10ec3724,0],
		[0x10ec3728,0],
		[0x10ec372c,0],
		[0x10ec3730,0],
		[0x10ec3734,0],
		[0x10ec3748,0],
		[0x10ec374c,0],
		[0x10ec3750,0],
		[0x10ec3754,0],
		[0x10ec3758,0],
		[0x10ec375c,0],
		[0x10ec3760,0],
		[0x10ec3764,0],
		[0x10ec3768,0],
		[0x10ec376c,0],
		[0x10ec3778,0],
		[0x10ec377c,0],
		[0x10ec3780,0],
		[0x10ec3784,0],
		[0x10ec37b0,4135],
		[0x10ec37b4,0],
		[0x10ec37b8,0],
		[0x10ec37bc,0],
		[0x10ec37c0,0],
		[0x10ec37c4,0],
		[0x10ec37cc,14036],
		[0x10ec3858,0],
		[0x10ec385c,0],
		[0x10ec3870,0],
		[0x10ec3874,0],
		[0x10ec3890,0],
		[0x10ec3894,0],
		[0x10ec3898,0],
		[0x10ec389c,29],
		[0x10ec38a0,6],
		[0x10ec38a4,0],
		[0x10ec38a8,0],
		[0x10ec38ac,0],
		[0x10ec38b0,0],
		[0x10ec38b4,0],
		[0x10ec38c8,0],
		[0x10ec38cc,0],
		[0x10ec38d0,0],
		[0x10ec38d4,0],
		[0x10ec38d8,0],
		[0x10ec38dc,0],
		[0x10ec38e0,0],
		[0x10ec38e4,0],
		[0x10ec38e8,0],
		[0x10ec38ec,0],
		[0x10ec38f8,0],
		[0x10ec38fc,0],
		[0x10ec3900,0],
		[0x10ec3904,0],
		[0x10ec3930,4133],
		[0x10ec3934,0],
		[0x10ec3938,0],
		[0x10ec393c,0],
		[0x10ec3940,0],
		[0x10ec3944,0],
		[0x10ec394c,14036],
		[0x10ec39d8,0],
		[0x10ec39dc,0],
		[0x10ec39f0,0],
		[0x10ec39f4,0],
		[0x10ec3a10,0],
		[0x10ec3a14,0],
		[0x10ec3a18,0],
		[0x10ec3a1c,25],
		[0x10ec3a20,5],
		[0x10ec3a24,0],
		[0x10ec3a28,0],
		[0x10ec3a2c,0],
		[0x10ec3a30,0],
		[0x10ec3a34,0],
		[0x10ec3a48,0],
		[0x10ec3a4c,0],
		[0x10ec3a50,0],
		[0x10ec3a54,0],
		[0x10ec3a58,0],
		[0x10ec3a5c,0],
		[0x10ec3a60,0],
		[0x10ec3a64,0],
		[0x10ec3a68,0],
		[0x10ec3a6c,0],
		[0x10ec3a78,0],
		[0x10ec3a7c,0],
		[0x10ec3a80,0],
		[0x10ec3a84,0],
		[0x10ec3ab0,4133],
		[0x10ec3ab4,0],
		[0x10ec3ab8,0],
		[0x10ec3abc,0],
		[0x10ec3ac0,0],
		[0x10ec3ac4,0],
		[0x10ec3acc,14036],
		[0x10ec3b58,0],
		[0x10ec3b5c,0],
		[0x10ec3b70,0],
		[0x10ec3b74,0],
		[0x10ec3b90,0],
		[0x10ec3b94,0],
		[0x10ec3b98,0],
		[0x10ec3b9c,24],
		[0x10ec3ba0,3],
		[0x10ec3ba4,0],
		[0x10ec3ba8,0],
		[0x10ec3bac,0],
		[0x10ec3bb0,0],
		[0x10ec3bb4,0],
		[0x10ec3bc8,0],
		[0x10ec3bcc,0],
		[0x10ec3bd0,0],
		[0x10ec3bd4,0],
		[0x10ec3bd8,0],
		[0x10ec3bdc,0],
		[0x10ec3be0,0],
		[0x10ec3be4,0],
		[0x10ec3be8,0],
		[0x10ec3bec,0],
		[0x10ec3bf8,0],
		[0x10ec3bfc,0],
		[0x10ec3c00,0],
		[0x10ec3c04,0],
		[0x10ec3c08,0],
		[0x10ec3c0c,0],
		[0x10ec3c30,16384],
		[0x10ec3c34,0],
		[0x10ec3c38,0],
		[0x10ec3c3c,0],
		[0x10ec3c40,0],
		[0x10ec3c44,0],
		[0x10ec3c4c,0],
		[0x10ec3cd8,0],
		[0x10ec3cdc,0],
		[0x10ec3ce0,0],
		[0x10ec3ce4,0],
		[0x10ec3ce8,0],
		[0x10ec3cec,0],
		[0x10ec3cf0,0],
		[0x10ec3cf4,0],
		[0x10ec3cf8,0],
		[0x10ec3cfc,0],
		[0x10ec3d10,0],
		[0x10ec3d14,0],
		[0x10ec3d18,0],
		[0x10ec3d1c,20],
		[0x10ec3d20,0],
		[0x10ec3d24,0],
		[0x10ec3d28,0],
		[0x10ec3d2c,0],
		[0x10ec3d30,0],
		[0x10ec3d34,0],
		[0x10ec3d48,0],
		[0x10ec3d4c,0],
		[0x10ec3d50,0],
		[0x10ec3d54,0],
		[0x10ec3d58,0],
		[0x10ec3d5c,0],
		[0x10ec3d60,0],
		[0x10ec3d64,0],
		[0x10ec3d68,0],
		[0x10ec3d6c,0],
		[0x10ec3d78,0],
		[0x10ec3d7c,0],
		[0x10ec3d80,0],
		[0x10ec3d84,0],
		[0x10ec3db0,4099],
		[0x10ec3db4,0],
		[0x10ec3db8,0],
		[0x10ec3dbc,0],
		[0x10ec3dc0,0],
		[0x10ec3dc4,0],
		[0x10ec3dcc,14036],
		[0x10ec3e58,0],
		[0x10ec3e5c,0],
		[0x10ec3e70,0],
		[0x10ec3e74,0],
		[0x10ec3e90,0],
		[0x10ec3e94,0],
		[0x10ec3e98,0],
		[0x10ec3e9c,28],
		[0x10ec3ea0,4],
		[0x10ec3ea4,0],
		[0x10ec3ea8,0],
		[0x10ec3eac,0],
		[0x10ec3eb0,0],
		[0x10ec3eb4,0],
		[0x10ec3ec8,0],
		[0x10ec3ecc,0],
		[0x10ec3ed0,0],
		[0x10ec3ed4,0],
		[0x10ec3ed8,0],
		[0x10ec3edc,0],
		[0x10ec3ee0,0],
		[0x10ec3ee4,0],
		[0x10ec3ee8,0],
		[0x10ec3eec,0],
		[0x10ec3ef8,0],
		[0x10ec3efc,0],
		[0x10ec3f00,0],
		[0x10ec3f04,0],
		[0x10ec3f08,0],
		[0x10ec3f0c,0],
		[0x10ec3f10,0],
		[0x10ec3f14,0],
		[0x10ec3f18,0],
		[0x10ec3f1c,0],
		[0x10ec3f20,0],
		[0x10ec3f24,0],
		[0x10ec3f28,0],
		[0x10ec3f2c,0],
		[0x10ec3f30,0],
		[0x10ec3f34,0],
		[0x10ec3f38,0],
		[0x10ec3f3c,0],
		[0x10ec3f40,0],
		[0x10ec3f44,0],
		[0x10ec3f48,0],
		[0x10ec3f4c,0],
		[0x10ec3f50,0],
		[0x10ec3f54,0],
		[0x10ec3f58,0],
		[0x10ec3f5c,0],
		[0x10ec3f60,0],
		[0x10ec3f64,0],
		[0x10ec3f68,0],
		[0x10ec3f6c,0],
		[0x10ec3f70,0],
		[0x10ec3f74,0],
		[0x10ec3f78,0],
		[0x10ec3f7c,0],
		[0x10ec3f80,0],
		[0x10ec3f84,0],
		[0x10ec3f88,0],
		[0x10ec3f8c,0],
		[0x10ec3f90,0],
		[0x10ec3f94,0],
		[0x10ec3f98,0],
		[0x10ec3f9c,0],
		[0x10ec3fa0,0],
		[0x10ec3fa4,0],
		[0x10ec3fa8,0],
		[0x10ec3fac,0],
		[0x10ec3fb0,0],
		[0x10ec3fb4,0],
		[0x10ec3fb8,0],
		[0x10ec3fbc,0],
		[0x10ec3fc0,0],
		[0x10ec3fc4,0],
		[0x10ec3fc8,0],
		[0x10ec3fcc,0],
		[0x10ec3fd0,0],
		[0x10ec3fd4,0],
		[0x10ec3fd8,0],
		[0x10ec3fdc,0],
		[0x10ec3fe0,0],
		[0x10ec3fe4,0],
		[0x10ec3fe8,0],
		[0x10ec3fec,0],
		[0x10ec3ff0,0],
		[0x10ec3ff4,0],
		[0x10ec3ff8,0],
		[0x10ec3ffc,0],
		[0x10ec4000,1],
		[0x10ec4004,0],
		[0x10ec4018,1],
		[0x10ec401c,0],
		[0x10ec4030,0],
		[0x10ec4034,0],
		[0x10ec403c,0],
		[0x10ec4048,0],
		[0x10ec404c,0],
		[0x10ec4050,4096],
		[0x10ec4054,0],
		[0x10ec4058,0],
		[0x10ec405c,0],
		[0x10ec4068,10091],
		[0x10ec406c,1],
		[0x10ec4074,0],
		[0x10ec4078,0],
		[0x10ec407c,0],
		[0x10ec4088,1],
		[0x10ec408c,0],
		[0x10ec40a8,0],
		[0x10ec40ac,0],
		[0x10ec40b0,0],
		[0x10ec40b4,0],
		[0x10ec40b8,0],
		[0x10ec40bc,0],
		[0x10ec40c4,0],
		[0x10ec40d0,0],
		[0x10ec40d4,0],
		[0x10ec40d8,4096],
		[0x10ec40dc,0],
		[0x10ec40e0,0],
		[0x10ec40e4,0],
		[0x10ec40f0,10093],
		[0x10ec40f4,1],
		[0x10ec40fc,0],
		[0x10ec4100,0],
		[0x10ec4104,0],
		[0x10ec4110,1],
		[0x10ec4114,0],
		[0x10ec4128,1],
		[0x10ec412c,0],
		[0x10ec4140,0],
		[0x10ec4144,0],
		[0x10ec414c,0],
		[0x10ec4158,0],
		[0x10ec415c,0],
		[0x10ec4160,4096],
		[0x10ec4164,0],
		[0x10ec4168,0],
		[0x10ec416c,0],
		[0x10ec4178,10097],
		[0x10ec417c,1],
		[0x10ec4184,0],
		[0x10ec4188,0],
		[0x10ec418c,0],
		[0x10ec4198,1],
		[0x10ec419c,0],
		[0, 0]
]).
string_val([
		[0x10ec3c30,16384],
		[0, 0]
]).
/* This file contains recursive predicates */
:- use_module(library(clpfd)).
:- use_module(reif).
:- style_check(-singleton).

isTrue([X, Y]):-
    X == 49.

isTrue([X|Tail]):-
    isTrue(Tail).

log(File_name, Name, Addr, Base):-
    Offset #= Addr - Base,
    open(File_name, append, Stream),
    write(Stream, Name),
    write(Stream, ':'),
    write(Stream, Offset),
    nl(Stream),
    close(Stream).

possible_task_struct(Base_addr) :-
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM2_addr, Pid_addr, Tgid_addr, Real_parent_addr, Parent_addr , Child_addr, 
           Group_leader_addr, Thread_group_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    %MM2_addr #> Base_addr + 1000,
    Tasks_addr #> MM2_addr - 100,
    %FS_struct_addr #< Base_addr + 4000,
    Tgid_addr #= Pid_addr + 4,
    Real_parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr - 8,
    Child_addr #= Parent_addr + 8,
    %FIXME This may be too strong
    Group_leader_addr #=< Child_addr +32,
    %Comm_addr #= Base_addr + 1656,
    %Tasks_addr #= Base_addr + 1072,
    %FS_struct_addr #= Base_addr + 2640,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    % make query after labeling
    MM2_val #> 0,
    integer(MM2_val),
    
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val,  Comm_addr, Comm_val ]),

    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_parent_addr, Real_parent_val, Group_leader_addr, Group_leader_val]),
    Real_parent_val #> 0,
    Group_leader_val #> 0,
    query_ts(Real_parent_val, Comm_offset, Tasks_offset),
    query_ts(Group_leader_val, Comm_offset, Tasks_offset),

    labeling([enum], [Cred_addr, Cred_val]),
    Cred_val #> 0,
    query_cred(Cred_val),

    labeling([enum], [FS_struct_addr, FS_struct_val]),
    FS_struct_val #> 0,
    %query_fs_struct(FS_struct_val),



    get_time(End),
    Time_past is End - Current,
    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    log("profile.txt", "tasks", Tasks_addr, Base_addr),
    log("profile.txt", "mm_struct", MM2_addr, Base_addr),
    log("profile.txt", "comm", Comm_addr, Base_addr),
    log("profile.txt", "parent", Parent_addr, Base_addr),
    log("profile.txt", "group_leader", Group_leader_addr, Base_addr),
    log("profile.txt", "cred", Cred_addr, Base_addr),

    
    print_nl('tasks offset', Tasks_offset),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).

possible_string_pointer(Base_addr) :-
    /* Verify if this pointer points to a stirng */
    string_val(Str),
    Str_profile = [
        [Name_addr, Name_val]
    ],
    tuples_in(Str_profile, Str),
    Name_addr #= Base_addr.

query_string_pointer(Val) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "string_pointer"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_mount_struct(Base_addr, Offset) :-
    pointer(Ptr),
    Ptr_profile = ([
        [Mnt_devname_addr, Mnt_devname_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Mnt_devname_addr #= Base_addr + Offset,
    labeling([enum], [Mnt_devname_addr, Mnt_devname_val]),
    query_string_pointer(Mnt_devname_val).



possible_kernel_param(Base_addr) :-
    string_val(Str),
    Str_profile = [
        [Name_addr, Name_val]
    ],
    tuples_in(Str_profile, Str),
    Name_addr #= Base_addr.

possible_in_device(Base_addr) :-
    /* in_ifaddr remains the same across kernel versions 
       but we need this query to find ip_ptr in net_device struct
    */
    /*
        struct net_device *dev;
        int               refcnt;
        int               dead;
        struct in_ifaddr  *ifa_list;
    */
    pointer(Ptr),
    int(Int),
    Ptr_profile = ([
        [Dev_addr, Dev_val],
        [Ifa_list_addr, Ifa_list_val]
    ]),
    Int_profile = ([
        [Refcnt_addr, Refcnt_val],
        [Dead_addr, Dead_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Dead_addr #= Refcnt_addr + 4,
    chain([Dev_addr, Refcnt_addr, Dead_addr, Ifa_list_addr], #<),
    Dev_addr #= Base_addr,
    Ifa_list_addr #= Base_addr + 16,
    labeling([enum], [Ifa_list_addr, Ifa_list_val]),

    process_create(path('python'),
                    ['subquery.py', Ifa_list_val, "in_ifaddr"],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_in_ifaddr(Base_addr) :-
    /* in_ifaddr remains the same across kernel versions */
    pointer(Ptr),
    Ptr_profile = ([
        [Hash_addr, Hash_val],
        [Ifa_next_addr, Ifa_next_val],
        [Ifa_dev_addr, Ifa_dev_val],
        [Rcu_head_addr, Rcu_head_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([Hash_addr, Ifa_next_addr, Ifa_dev_addr, Rcu_head_addr], #<),
    Hash_addr #= Base_addr,
    Ifa_next_addr #= Hash_addr + 16,
    Ifa_dev_addr #= Ifa_next_addr + 8,
    Rcu_head_addr #= Ifa_dev_addr + 8,
    labeling([enum], [Hash_addr, Ifa_next_addr, Ifa_dev_addr, Rcu_head_addr]).



possible_mm_struct(Current_addr) :- 
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    % TODO: ADD vm_area_struct *mmap
    Ptr_profile = [
        [Mmap_addr, Mmap_val],
        [Pgd_addr, Pgd_val]  
    ],
    Ulong_profile = [
        [Mmap_base_addr, Mmap_base_val],
        [Mmap_legacy_base_addr, Mmap_legacy_base_val],
        [Task_size_addr, Task_size_val],
        [High_vm_end_addr, High_vm_end_val],
        [Start_brk_addr, Start_brk_val],
        [Brk_addr, Brk_val],
        [Start_stack_addr, Start_stack_val],
        [ARG_start_addr, ARG_start_val]
    ],
    Mmap_addr #= Current_addr,


    Mmap_base_addr #> Mmap_addr,
    %FIXME mmap_base need more value constraint, because we removed mmap_legacy_base and highest_vm_end.
    Mmap_base_val #> 0x7f0000000000,
    %FIXME in old linux version, e.g., there is no mmap_legacy_base and highest_vm_enb
    %chain([Mmap_base_addr, Mmap_legacy_base_addr, Task_size_addr, High_vm_end_addr, Pgd_addr], #<),
    chain([Mmap_base_addr, Task_size_addr, Pgd_addr], #<),

    %FIXME: This rule may be too strong
    %High_vm_end_addr #= Mmap_base_addr + 24, 
    Pgd_addr #> Task_size_addr,
    Pgd_addr #=< Task_size_addr + 40,
    %FIXME: This rule may not be true for other mm_struct.
    Task_size_val #>= 0x7ffffffff000,

    %Mmap_base_addr #= Current_addr + 40,
    %Mmap_legacy_base_addr #= Current_addr + 40,
    %Task_size_addr #= Current_addr + 48,
    %High_vm_end_addr #= Current_addr + 72,

    Start_brk_addr #> Pgd_addr,
    Start_stack_val #> 0x7ff000000000,
    % TODO: Convert this to index comparison. 
    ARG_start_addr #< Current_addr + 500,
    chain([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr], #<),
    ARG_start_addr #= Start_brk_addr + 24,
    Brk_val #< 0x7ff000000000,
    ARG_start_val #> 0x7ff000000000,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),


    labeling([enum], [Mmap_addr, Mmap_val, Mmap_base_addr, Pgd_addr, Pgd_val]),
    Mmap_val #> 0,
    Pgd_val #> 0,
    
    process_create(path('python'),
                    ['subquery.py', Mmap_val, "vm_area_struct", 2],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    label([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr]),
    statistics(real_time, [End|_]),

    log("./profile/mm_struct", "mmap", Mmap_addr, Current_addr),
    log("./profile/mm_struct", "mmap_base", Mmap_base_addr, Current_addr),
    log("./profile/mm_struct", "pgd", Pgd_addr, Current_addr),
    log("./profile/mm_struct", "start_brk", Start_brk_addr, Current_addr),
    log("./profile/mm_struct", "brk", Brk_addr, Current_addr),
    log("./profile/mm_struct", "start_stack", Start_stack_addr, Current_addr),
    log("./profile/mm_struct", "arg_start", ARG_start_addr, Current_addr),
    log("./profile/mm_struct", "mm_struct", End, Start).


possible_vm_area_struct(Base_addr, Level) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [VM_next_addr, VM_next_val],
        [VM_file_addr, VM_file_val]
    ],
    Ulong_profile = [
        [VM_start_addr, VM_start_val],
        [VM_end_addr, VM_end_val],
        [VM_flag_addr, VM_flag_val]
        /*VM_pgoff is 0, and we do not consider 0 as ulong*/
        %[VM_pgoff_addr, VM_pgoff_val]
    ],
    VM_start_addr #>= Base_addr,
    chain([VM_start_addr, VM_end_addr, VM_next_addr, VM_flag_addr, VM_file_addr], #<),
    VM_end_addr #= VM_start_addr + 8,
    VM_next_addr #= VM_end_addr + 8,
    VM_next_addr #< Base_addr + 32,
    VM_file_addr #< Base_addr + 180,
    VM_pgoff_addr #= VM_file_addr - 8,
    VM_flag_val #< 0x88888888,
    VM_file_addr #= Base_addr + 160,

    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    %FIXME: VM_flag may need value constraints.

    label([VM_next_addr, VM_next_val]),
    /* vm_file maybe zero! */
    labeling([enum], [VM_start_addr, VM_end_addr, VM_flag_addr, VM_pgoff_addr, VM_file_addr, VM_file_val]),
    /*
    VM_file_val #> 0,
    
    process_create(path('python'),
                ['subquery.py', VM_file_val, "vm_file"],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/
    statistics(real_time, [End|_]),

    log("./profile/vm_area_struct", "vm_start", VM_start_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_end", VM_end_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_next", VM_next_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_flag", VM_flag_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_pgoff", VM_pgoff_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_file", VM_file_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_area_struct", End, Start).

check_vm_area_struct(Base_addr, Level) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "vm_area_struct", Level],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vm_file(Base_addr) :-
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [Vfs_mount_addr, Vfs_mount_val],
        [Dentry_addr, Dentry_val],
        [F_op_addr, F_op_val]
    ],
    tuples_in(Ptr_profile, Ptr),
    Vfs_mount_addr #> Base_addr,
    Dentry_addr #= Vfs_mount_addr + 8,
    Dentry_addr #< Base_addr + 40,
    Vfs_mount_val #> 0,
    Dentry_val #> 0,
    F_op_addr #= Base_addr + 40, 
    F_op_val #> 0,
    chain([Vfs_mount_addr, Dentry_addr, F_op_addr], #<),
    labeling([enum], [Vfs_mount_val, Dentry_val, F_op_addr, F_op_val]),


    process_create(path('python'),
                    ['subquery.py', Vfs_mount_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    /*
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/
    

    %query_file_operation(F_op_addr),

    log("./profile/file", "vfs_mount", Vfs_mount_addr, Base_addr),
    log("./profile/file", "dentry", Dentry_addr, Base_addr),
    log("./profile/file", "f_op", F_op_addr, Base_addr).



query_file_operation(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result).

possible_name_pointer(Val, Name_offset) :-
    /* The value at val+name_offset is a string pointer */
    current_predicate(pointer/1),
    pointer(Ptr),
    Ptr_profile = ([
        [Name_addr, Name_val]
    ]),
    Name_addr #= Val + Name_offset,
    tuples_in(Ptr_profile, Ptr),
    labeling([enum], [Name_addr, Name_val]),
    query_string_pointer(Name_val).

possible_vfs_mount(Base_addr) :-
    pointer(Ptr),
    int(Int),
    Ptr_profile = [
        [Dentry_addr, Dentry_val],
        [Mnt_sb_addr, Mnt_sb_val]
    ],
    Int_profile = [
        [Mnt_flags_addr, Mnt_flags_val]
    ],
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Dentry_addr #= Base_addr,
    Dentry_val #> 0,
    Mnt_flags_addr #= Dentry_addr + 16,
    Mnt_flags_val #>= 0,
    Mnt_sb_val #> 0,
    chain([Dentry_addr, Mnt_sb_addr, Mnt_flags_addr], #<),
    label([Dentry_addr, Dentry_val, Mnt_flags_addr, Mnt_flags_val]).
 
possible_dentry(Base_addr) :-
    /*
        struct dentry *d_parent;
        struct qstr d_name -> char *name; it's a name pointer
        struct inode *d_inode;
        unsigned char d_iname[LEN];
        const struct dentry_operations *d_op;
        struct list_head d_child;
        struct list_head d_subdirs;
        union {
	        struct hlist_node d_alias;
	        struct rcu_head d_rcu;
        } d_u;
    */
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    string_val(Str),
    Ptr_profile = [
        [Dparent_addr, Dparent_val],
        [Dname_addr, Dname_val],
        [D_inode_addr, D_inode_val],
        [D_op_addr, D_op_val],
        [Dchild_addr, Dchild_val],
        [D_subdirs_addr, D_subdirs_val]
    ],
    Str_profile = [
        [D_iname_addr, D_iname_val]
    ],
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    Dparent_addr #> Base_addr,
    chain([Dparent_addr, Dname_addr, D_inode_addr, D_iname_addr, 
            D_op_addr, Dchild_addr, D_subdirs_addr], #<),
    D_subdirs_addr #= Dchild_addr + 16,
    D_subdirs_addr #< Base_addr + 200,
    Dparent_val #> 0,
    labeling([enum], [Dname_addr, Dname_val]),
    query_string_pointer(Dname_val),
    labeling([enum], [D_iname_addr, D_iname_val]),
    D_iname_offset #= D_iname_addr - Base_addr,
    Dname_offset #= Dname_addr - Base_addr,
    labeling([enum], [Dparent_addr, Dparent_val]),
    Parent_dname #= Dparent_val + Dname_offset,
    process_create(path('python'),
                    ['subquery.py', Parent_dname, "name_pointer", Dname_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    %labeling([enum], [D_inode_addr, D_inode_val]),
    %query_inode(D_inode_val),

    labeling([enum], [Dchild_addr, Dchild_val]),
    Dchild_offset #= Dchild_addr - Base_addr,
    Dchild_init #= Dchild_val - Dchild_offset,
    query_name_pointer(Dchild_init, Dname_offset),

    /* This can be hardcoded as d_child_addr + 16 */
    labeling([enum], [D_subdirs_addr, D_subdirs_val]),
    Dsubdirs_offset #= D_subdirs_addr - Base_addr,
    D_subdirs_init #= D_subdirs_val - Dsubdirs_offset,
    query_name_pointer(D_subdirs_init, Dname_offset),

    statistics(real_time, [End|_]),

    log("./profile/dentry", "parent", Dparent_addr, Base_addr),
    log("./profile/dentry", "inode", D_inode_val, Base_addr),
    log("./profile/dentry", "d_iname", D_iname_addr, Base_addr),
    log("./profile/dentry", "dchild", Dchild_addr, Base_addr),
    log("./profile/dentry", "d_subdirs", D_subdirs_addr, Base_addr),
    log("./profile/dentry", "dentry", End, Start).

query_inode(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_inode(Base_addr) :-
    /*
        struct inode_operations *i_op;
        struct super_block      *i_sb;
        struct address_space    *i_mapping;
    */
    statistics(real_time, [Start|_]),

    pointer(Ptr),
    long(Ulg),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [I_op_addr, I_op_val],
        [I_sb_addr, I_sb_val],
        [I_mapping_addr, I_mapping_val],
        [I_fop_addr, I_fop_val]
    ]),
    Ulong_profile = ([
        /* i_mode is actually not long type. */
        [I_mode_addr, I_mode_val],
        [I_ino_addr, I_ino_val],
        [I_size_addr, I_size_val],
        [I_atime_addr, I_atime_val],
        [_I_atime_addr, _I_atime_val],
        [I_mtime_addr, I_mtime_val],
        [I_ctime_addr, I_ctime_val],
        [_I_ctime_addr, _I_ctime_val]
    ]),
    Int_profile = ([
        [I_uid_addr, I_uid_val],
        [I_gid_addr, I_gid_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    tuples_in(Int_profile, Int),

    chain([I_mode_addr, I_uid_addr, I_gid_addr, I_op_addr, I_sb_addr, I_mapping_addr, I_ino_addr,
           I_size_addr, I_atime_addr, _I_atime_addr, I_mtime_addr, I_ctime_addr, _I_ctime_addr, I_fop_addr], #<),

    I_mode_addr #= Base_addr,
    I_mode_val #> 0,
    I_gid_addr #= I_mode_addr + 8,
    %I_op_addr #= Base_addr + 32,
    I_op_addr #=< Base_addr + 32,
    I_op_val #> 0,
    labeling([enum], [I_op_addr, I_op_val]),
    query_inode_operations(I_op_val),

    I_sb_addr #= I_op_addr + 8,
    I_mapping_addr #= I_sb_addr + 8,
    I_atime_addr #= I_size_addr + 8,
    I_mtime_addr #= I_atime_addr + 16,
    I_ctime_addr #= I_mtime_addr + 16,
    _I_ctime_addr #= I_ctime_addr + 8,
    I_size_val #> 0,
    I_atime_val #> 4096,
    I_mtime_val #> 4096,
    I_ctime_val #> 4096,
    I_fop_addr #< Base_addr + 400,
    labeling([enum], [I_sb_addr, I_mapping_addr, I_atime_addr, I_mtime_addr, I_ctime_addr]),


    labeling([enum], [I_fop_addr, I_fop_val]),
    I_fop_val #> 0,
    query_inode_operations(I_fop_val),
    statistics(real_time, [End|_]),


    log("./profile/inode", "I_mode_addr", I_mode_addr, Base_addr),
    log("./profile/inode", "I_uid_addr", I_uid_addr, Base_addr),
    log("./profile/inode", "I_gid_addr", I_gid_addr, Base_addr),
    log("./profile/inode", "I_op_addr", I_op_addr, Base_addr),
    log("./profile/inode", "I_sb_addr", I_sb_addr, Base_addr),
    log("./profile/inode", "I_mapping_addr", I_mapping_addr, Base_addr),
    log("./profile/inode", "I_size_addr", I_size_addr, Base_addr),
    log("./profile/inode", "I_atime_addr", I_atime_addr, Base_addr),
    log("./profile/inode", "I_mtime_addr", I_mtime_addr, Base_addr),
    log("./profile/inode", "I_ctime_addr", I_ctime_addr, Base_addr),
    log("./profile/inode", "I_fop_addr", I_fop_addr, Base_addr),
    log("./profile/inode", "inode", End, Start).


query_inode_operations(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_name_pointer(Base_addr, Offset) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "name_pointer", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_inode_operations(Base_addr) :-
    /* a bunch of function pointers. */
    pointer(Ptr),
    Ptr_profile = ([
        [_L1_addr, _L1_val],
        [_L2_addr, _L2_val],
        [_L3_addr, _L3_val],
        [_L4_addr, _L4_val],
        [_L5_addr, _L5_val],
        [_L6_addr, _L6_val],
        [_L7_addr, _L7_val],
        [_L8_addr, _L8_val],
        [_L9_addr, _L9_val],
        [_L10_addr, _L10_val],
        [_L11_addr, _L11_val],
        [_L12_addr, _L12_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([_L1_addr, _L2_addr, _L3_addr, _L4_addr, _L5_addr, _L6_addr, _L7_addr,
           _L8_addr, _L9_addr, _L10_addr, _L11_addr, _L12_addr], #<),
    _L1_addr #= Base_addr,
    _L12_addr #= Base_addr + 88.




possible_nothing() :-

    %log("profile.txt", "dentry addr", Base_addr, 0),
    Dparent_addr #> Base_addr,
    Dname_addr #> 0,
    Dname_addr #< Base_addr + 200,
    %Dname_addr #= Base_addr + 160,
    %FIXME This child rule is not applicable for old kernel version. 
    %chain([Dparent_addr, Dname_addr, Dchild_addr], #<),
    %Dchild_addr #< Base_addr + 200,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    labeling([enum], [Dparent_addr, Dparent_val, Dname_addr, Dchild_addr, Dchild_val]),
    Dname_offset #= Dname_addr - Base_addr,
    integer(Dname_offset),
    Dparent_val #> 0,
    
    %FIXME d_parent may not be initialized
    /*process_create(path('python'),
                ['subquery.py', Dparent_val, "d_entry", Dname_offset],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/

    %FIXME: may need to find another way for all list_head. 
    /*Dchild_offset #= Dchild_addr - Base_addr,
    integer(Dchild_offset),
    Dchild_base #= Dchild_val - Dchild_offset,
    integer(Dchild_base),
    Dchild_base #> 0,
    process_create(path('python'),
                ['subquery.py', Dchild_base, "d_entry", Dname_offset],
                [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    statistics(real_time, [End|_]).
/*
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    log("profile.txt", "d_parent", Dparent_addr, Base_addr),
    log("profile.txt", "d_child", Dchild_addr, Base_addr),
    log("profile.txt", "dentry time", End, Start).
*/
possible_d_entry(Base_addr, Dname_offset) :-
    current_predicate(string_val/1),
    string_val(Str),
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    Dname_addr #= Base_addr + Dname_offset,
    tuples_in(Str_profile, Str),
    label([Dname_addr]).

possible_list_head(Tasks_val, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_val, Tasks_addr]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],
    Comm_addr #= Tasks_val - Tasks_offset + Comm_offset,
    Tasks_addr #\= Tasks_val,
    tuples_in(Str_profile, Str),
    tuples_in(Ptr_profile, Ptr),
    label([Comm_addr]).

possible_ts(Base_addr, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_addr, Tasks_val]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],

    Comm_addr #= Base_addr + Comm_offset,
    Tasks_addr #= Base_addr + Tasks_offset,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),

    label([Tasks_val]),
    
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "list_head", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_cred(Base_addr) :-
    statistics(real_time, [Start|_]),

    int(Int),
    long(Ulg),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3],
        [Addr4, Val4],
        [Addr5, Val5],
        [Addr6, Val6],
        [Addr7, Val7],
        [Addr8, Val8],
        [Addr9, Val9]
    ],
    %FIXME For now, this rule is hard-coded because we do not consider 0 as a unsign long number. 
    %So that for cred whos val10 is 0, this rule does not apply.
    /*Ulong_profile = [
        [Addr10, Val10],
        [Addr11, Val11]
    ],*/
    Addr1 #> Base_addr,
    %chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9, Addr10, Addr11], #<),
    chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9], #<),
    Addr1 #= Base_addr + 4,
    Addr9 #= Addr1 + 32,
    %Addr11 #< Base_addr + 120,
    tuples_in(Int_profile, Int),
    %tuples_in(Ulong_profile, Ulg),
    statistics(real_time, [End|_]),
    labeling([enum], [Addr1, Addr2, Addr5, Addr6]),
    log("./profile/cred", "cred", End, Start),
    log('./profile/cred', "uid", Addr1, Base_addr),
    log('./profile/cred', "gid", Addr2, Base_addr),
    log('./profile/cred', "euid", Addr5, Base_addr),
    log('./profile/cred', "egid", Addr6, Base_addr).

possible_fs_struct(Base_addr) :-
    statistics(real_time, [Start|_]),
    int(Int),
    pointer(Ptr),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3]
    ],
    Ptr_profile = [
        [Root_addr, Root_val],
        [PWD_addr, PWD_val]
    ],
    Addr1 #>= Base_addr,
    chain([Addr1, Addr2, Addr3, Root_addr, PWD_addr], #<),
    PWD_addr #= Root_addr + 16,
    PWD_addr #< Base_addr + 50,
    tuples_in(Int_profile, Int),
    tuples_in(Ptr_profile, Ptr),
    Root_val #> 0,
    PWD_val #> 0,
    label([Root_addr, Root_val]),
    
    process_create(path('python'),
                    ['subquery.py', Root_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    label([PWD_addr, PWD_val]),
    process_create(path('python'),
                    ['subquery.py', PWD_val, "dentry"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    statistics(real_time, [End|_]),
    log("profile.txt", "fs time", End, Start),
    log('profile.txt', "Root", Root_addr, Base_addr),
    log('profile.txt', "pwd", PWD_addr, Base_addr),
    log('profile.txt', "fs_struct", End, Start).

possible_mount(Base_addr) :-
    /* struct hlist_head mnt_hash;
       struct mount *mnt_parent; 
       struct vfsmount mnt;
       struct list_head mnt_mounts;
       struct list_head mnt_child;
       struct list_head mnt_instance;
       const char *mnt_devname;
       struct list_head mnt_list;
    */
    statistics(real_time, [Start|_]),
    %get_time(Current),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Mnt_hash_addr, Mnt_hash_val],
        [Mnt_parent_addr, Mnt_parent_val],
        [Vfsmount_addr, Vfsmount_val],
        [Mnt_child_addr, Mnt_child_val],
        [Mnt_devname_addr, Mnt_devname_val],
        [Mnt_list_addr, Mnt_list_val]
    ]),
    Int_profile = ([
        [Mnt_flags_addr, Mnt_flags_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    /* Order Invariants */
    chain([Mnt_hash_addr, Mnt_parent_addr, Vfsmount_addr, Mnt_flags_addr,
            Mnt_child_addr, Mnt_devname_addr, Mnt_list_addr], #<),
    Mnt_hash_addr #= Base_addr,
    /* mnt_hash_addr is a list_head */
    Mnt_parent_addr #> Base_addr + 8,
    Mnt_list_addr - Base_addr #< 200,
    labeling([enum], [Mnt_devname_addr, Mnt_devname_val]),
    query_string_pointer(Mnt_devname_val),
    Mnt_devname_offset #= Mnt_devname_addr - Base_addr,
    /* the offset from mnt_mounts to mnt_list remains the same, so it's safe to use fixed offsets. */
    Mnt_child_addr #= Mnt_devname_addr - 32,
    Mnt_list_addr #= Mnt_devname_addr + 8,
    Mnt_flags_addr #= Vfsmount_addr + 16,
    labeling([enum], [Mnt_child_addr, Mnt_list_addr, Vfsmount_addr, Vfsmount_val]),
    /* Seems unnecessary 
    Mnt_list_offset #= Mnt_list_addr - Base_addr,
    Mnt_list #= Mnt_list_val - Mnt_list_offset,
    Mnt_list #> 0,
    query_mount_struct(Mnt_list, Mnt_devname_offset),
    */
    Vfsmount_val #>= 0,
    /* Here we can infer layout of dentry structure 
       Maybe need to infer using another dentry, somehow it may not be initialized. 
    */
    Vfsmount_addr #> 0,
    %query_dentry(Vfsmount_addr),

    labeling([enum], [Mnt_parent_addr, Mnt_parent_val]),
    /* To verify another mount struct, only one-level query, so it does not direct call query_mount recursively */
    
    query_mount_struct(Mnt_parent_val, Mnt_devname_offset),
    

    %get_time(End),
    %Time_past is End - Current,
    statistics(real_time, [End|_]),
    log("./profile/mount", "mnt_hash", Mnt_hash_addr, Base_addr),
    log("./profile/mount", "mnt_parent", Mnt_parent_addr, Base_addr),
    log("./profile/mount", "mnt_child", Mnt_child_addr, Base_addr),
    log("./profile/mount", "mnt_devname", Mnt_devname_addr, Base_addr),
    log("./profile/mount", "mnt_list", Mnt_list_addr, Base_addr),
    log("./profile/mount", "mount", End, Start).


possible_neigh_hash_table(Base_addr) :-
    /* neighbour **hash_buckets */
    pointer(Ptr),
    Ptr_profile = ([
        [Hash_buckest_addr, Hash_buckets_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Hash_buckest_addr #= Base_addr,
    labeling([enum], [Hash_buckest_addr, Hash_buckets_val]),
    process_create(path('python'),
                    ['subquery.py', Hash_buckets_val, "hash_buckets"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_hash_buckets(Base_addr) :-
    /* hash_buckets is an array of neighbour pointer 
       note that not all element are non-zero
    */
    pointer(Ptr),
    Ptr_profile = ([
        [Neighbour_addr, Neighbour_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Neighbour_addr #< Base_addr + 32,
    Neighbour_val #> 0,
    labeling([enum], [Neighbour_addr, Neighbour_val]),
    process_create(path('python'),
                    ['subquery.py', Neighbour_val, "neighbour"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_neighbour(Base_addr) :-
    /* net_device *dev at offset 464 */
    pointer(Ptr),
    Ptr_profile = ([
        [Dev_addr, Dev_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Dev_addr #>= Base_addr + 368,
    Dev_addr #=< Base_addr + 376,
    labeling([enum], [Dev_addr, Dev_val]),
    process_create(path('python'),
                    ['subquery.py', Dev_val, "net_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).


possible_net_device(Base_addr) :- 
    /*
        char             name[NAMSIZ];
        struct list_head dev_list;
        unsigned char    addr_len;
        unsigned int     promiscuity;
        struct in_device *ip_ptr;
    */
    statistics(real_time, [Start|_]),
    %get_time(Current),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Dev_list_addr, Dev_list_val],
        [IP_ptr_addr, IP_ptr_val]
    ]),
    Str_profile = ([
        [Name_addr, Name_val]
    ]),
    Int_profile = ([
        [Promisc_addr, Promisc_val],
        [Addr_len_addr, Addr_len_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),
    /* Hard to determine offsets for addr_len and promisc */
    chain([Name_addr, Dev_list_addr, Addr_len_addr, Promisc_addr, IP_ptr_addr], #<),
    Name_addr #>= Base_addr,
    Name_offset #= Name_addr - Base_addr,
    IP_ptr_addr #< Base_addr + 1000,
    /* dev_list offset can be hardcoded since it remains the same */
    Dev_list_addr #= Base_addr + 80,
    labeling([enum], [Name_addr, Dev_list_addr, Dev_list_val]),
    /* do not have a good constrain to narrow down ip_ptr, use its rough offset
       to reduce the search space. 
     */
    IP_ptr_addr #> Base_addr + 700,
    IP_ptr_val #> 0,
    labeling([enum], [IP_ptr_addr, IP_ptr_val]),
    query_in_device(IP_ptr_val),

    %get_time(End),
    %Time_past is End - Current,
    statistics(real_time, [End|_]),

    log("./profile/net_device", "name", Name_addr, Base_addr),
    log("./profile/net_device", "ip_ptr", IP_ptr_addr, Base_addr),
    log("./profile/net_device", "dev_list", Dev_list_addr, Base_addr),
    log("./profile/net_device", "net_device", End, Start).

query_in_device(IP_ptr_val) :-
    process_create(path('python'),
                    ['subquery.py', IP_ptr_val, "in_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).


query_mount_struct(Val, Offset) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "mount_struct", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).
