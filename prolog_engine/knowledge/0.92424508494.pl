:- use_module(library(clpfd)).
:- style_check(-singleton).
pointer([
		[0x13e10568,333514088],
		[0x13e10570,333514088],
		[0x13e10578,0],
		[0x13e10588,0],
		[0x13e10590,0],
		[0x13e10598,0],
		[0x13e105a0,0],
		[0x13e105a8,0],
		[0x13e105b0,0],
		[0x13e105b8,0],
		[0x13e105c0,0],
		[0x13e105c8,0],
		[0x13e105d0,0],
		[0x13e105d8,0],
		[0x13e105e0,0],
		[0x13e105e8,0],
		[0x13e105f0,0],
		[0x13e105f8,0],
		[0x13e10600,0],
		[0x13e10608,0],
		[0x13e10610,0],
		[0x13e10618,0],
		[0x13e10620,0],
		[0x13e10628,0],
		[0x13e10630,0],
		[0x13e10638,0],
		[0x13e10640,0],
		[0x13e10648,0],
		[0x13e10650,0],
		[0x13e10658,0],
		[0x13e10660,0],
		[0x13e10668,0],
		[0x13e10670,0],
		[0x13e10678,0],
		[0x13e10680,0],
		[0x13e10688,0],
		[0x13e10690,532787752],
		[0x13e10698,0],
		[0x13e106a0,0],
		[0x13e106a8,0],
		[0x13e106b0,0],
		[0x13e106b8,0],
		[0x13e106c0,0],
		[0x13e106c8,0],
		[0x13e106d0,0],
		[0x13e106d8,0],
		[0x13e106e0,0],
		[0x13e106e8,0],
		[0x13e106f0,0],
		[0x13e106f8,0],
		[0x13e10700,333514496],
		[0x13e10708,333514496],
		[0x13e10710,0],
		[0x13e10718,0],
		[0x13e10728,0],
		[0x13e10730,337937984],
		[0x13e10738,333514552],
		[0x13e10740,0],
		[0x13e10748,0],
		[0x13e10750,0],
		[0x13e10758,0],
		[0x13e10760,0],
		[0x13e10768,0],
		[0x13e10770,0],
		[0x13e10778,0],
		[0x13e10780,0],
		[0x13e10788,0],
		[0x13e10790,333514640],
		[0x13e10798,0],
		[0x13e107a0,0],
		[0x13e107a8,0],
		[0x13e107b0,0],
		[0x13e107b8,319593344],
		[0x13e107c0,532759040],
		[0x13e107c8,0],
		[0x13e107d0,0],
		[0x13e107d8,0],
		[0x13e10be8,0],
		[0x13e10bf0,0],
		[0x13e10bf8,333515768],
		[0x13e10c00,333515768],
		[0x13e10c10,0],
		[0x13e10c18,0],
		[0x13e10c20,0],
		[0x13e10c28,0],
		[0x13e10c30,467273584],
		[0x13e10c38,310516912],
		[0x13e10c48,333515848],
		[0x13e10c50,333515848],
		[0x13e10c58,333515864],
		[0x13e10c60,333515864],
		[0x13e10c68,0],
		[0x13e10c70,0],
		[0x13e10c78,0],
		[0x13e10c80,0],
		[0x13e10c88,390268864],
		[0x13e10c90,0],
		[0x13e10c98,0],
		[0x13e10ca0,0],
		[0x13e10ca8,0],
		[0x13e10cb0,0],
		[0x13e10cb8,0],
		[0x13e10cc0,0],
		[0x13e10cc8,0],
		[0x13e10cd0,0],
		[0x13e10cd8,0],
		[0x13e10ce0,0],
		[0x13e10ce8,0],
		[0x13e10cf0,0],
		[0x13e10cf8,0],
		[0x13e10d00,319386352],
		[0x13e10d08,0],
		[0x13e10d10,0],
		[0x13e10d18,0],
		[0x13e10d20,0],
		[0x13e10d28,0],
		[0x13e10d30,0],
		[0x13e10d40,333513920],
		[0x13e10d48,333513920],
		[0x13e10d50,467273888],
		[0x13e10d58,467301088],
		[0x13e10d60,333516128],
		[0x13e10d68,333516128],
		[0x13e10d70,333513920],
		[0x13e10d78,333516152],
		[0x13e10d80,333516152],
		[0x13e10d88,333516168],
		[0x13e10d90,333516168],
		[0x13e10d98,0],
		[0x13e10da0,0],
		[0x13e10da8,333807552],
		[0x13e10db0,0],
		[0x13e10db8,0],
		[0x13e10dc0,333807552],
		[0x13e10dc8,0],
		[0x13e10dd0,0],
		[0x13e10dd8,333807552],
		[0x13e10de0,333516256],
		[0x13e10de8,333516256],
		[0x13e10df0,333525072],
		[0x13e10df8,333525072],
		[0x13e10e00,0],
		[0x13e10e08,0],
		[0x13e10e10,0],
		[0x13e10e18,0],
		[0x13e10e28,0],
		[0x13e10e30,0],
		[0x13e10e38,0],
		[0x13e10e40,0],
		[0x13e10e48,0],
		[0x13e10e58,0],
		[0x13e10e60,0],
		[0x13e10e68,0],
		[0x13e10e70,0],
		[0x13e10e78,0],
		[0x13e10e80,0],
		[0x13e10e88,0],
		[0x13e10e90,333516432],
		[0x13e10e98,333516432],
		[0x13e10ea0,333516448],
		[0x13e10ea8,333516448],
		[0x13e10eb0,333516464],
		[0x13e10eb8,333516464],
		[0x13e10ec0,0],
		[0x13e10ec8,333808832],
		[0x13e10ed0,333808832],
		[0x13e10ee8,0],
		[0x13e10ef0,0],
		[0x13e10ef8,0],
		[0x13e10f00,0],
		[0x13e10f08,0],
		[0x13e10f10,334202432],
		[0x13e10f18,334177472],
		[0x13e10f20,333808224],
		[0x13e10f28,333525056],
		[0x13e10f30,333522944],
		[0x13e10f38,0],
		[0x13e10f40,0],
		[0x13e10f48,0],
		[0x13e10f50,333516624],
		[0x13e10f58,333516624],
		[0x13e10f60,0],
		[0x13e10f68,0],
		[0x13e10f70,0],
		[0x13e10f78,0],
		[0x13e10f80,0],
		[0x13e10f88,0],
		[0x13e10f98,0],
		[0x13e10fa0,0],
		[0x13e10fa8,0],
		[0x13e10fb0,0],
		[0x13e10fb8,0],
		[0x13e10fc0,0],
		[0x13e10fc8,0],
		[0x13e10fd0,0],
		[0x13e10fd8,0],
		[0x13e10fe0,0],
		[0x13e10fe8,0],
		[0x13e10ff0,0],
		[0x13e10ff8,0],
		[0x13e11000,0],
		[0x13e11008,0],
		[0x13e11010,0],
		[0x13e11018,0],
		[0x13e11020,0],
		[0x13e11028,0],
		[0x13e11030,0],
		[0x13e11038,0],
		[0x13e11040,0],
		[0x13e11048,0],
		[0x13e11050,0],
		[0x13e11058,0],
		[0x13e11060,0],
		[0x13e110e8,0],
		[0x13e110f0,0],
		[0x13e110f8,334012448],
		[0x13e11100,0],
		[0x13e11108,0],
		[0x13e11110,0],
		[0x13e11118,0],
		[0x13e11120,0],
		[0x13e11128,0],
		[0x13e11130,0],
		[0x13e11138,0],
		[0x13e11140,0],
		[0x13e11148,0],
		[0x13e11150,0],
		[0x13e11158,0],
		[0x13e11160,333517152],
		[0x13e11168,333517152],
		[0x13e11170,333517168],
		[0x13e11178,333517168],
		[0x13e11180,0],
		[0x13e11188,0],
		[0x13e111a0,0],
		[0x13e111a8,0],
		[0x13e111b0,0],
		[0x13e111b8,0],
		[0x13e111c0,333517248],
		[0x13e111c8,0],
		[0x13e111d0,0],
		[0x13e111d8,0],
		[0x13e111e0,0],
		[0x13e111e8,0],
		[0x13e111f0,0],
		[0x13e111f8,0],
		[0x13e11200,0],
		[0x13e11208,0],
		[0x13e11210,0],
		[0x13e11218,0],
		[0x13e11220,0],
		[0x13e11228,0],
		[0x13e11230,0],
		[0x13e11238,0],
		[0x13e11240,0],
		[0x13e11248,0],
		[0x13e11250,0],
		[0x13e11258,0],
		[0x13e11260,0],
		[0x13e11268,0],
		[0x13e11270,0],
		[0x13e11278,0],
		[0x13e11280,0],
		[0x13e11288,0],
		[0x13e11290,0],
		[0x13e11298,0],
		[0x13e112a0,0],
		[0x13e112a8,0],
		[0x13e112b0,0],
		[0x13e112b8,0],
		[0x13e112c0,0],
		[0x13e112c8,0],
		[0x13e112d0,0],
		[0x13e112d8,0],
		[0x13e112e0,0],
		[0x13e112e8,0],
		[0x13e112f0,0],
		[0x13e112f8,0],
		[0x13e11300,0],
		[0x13e11308,0],
		[0x13e11310,0],
		[0x13e11318,0],
		[0x13e11320,0],
		[0x13e11328,0],
		[0x13e11330,0],
		[0x13e11338,0],
		[0x13e11340,0],
		[0x13e11348,0],
		[0x13e11350,0],
		[0x13e11358,0],
		[0x13e11360,0],
		[0x13e11368,0],
		[0x13e11370,0],
		[0x13e11378,0],
		[0x13e11380,0],
		[0x13e11388,0],
		[0x13e11390,0],
		[0x13e11398,0],
		[0x13e113a0,0],
		[0x13e113a8,0],
		[0x13e113b0,0],
		[0x13e113b8,0],
		[0x13e113c0,0],
		[0x13e113c8,0],
		[0x13e113d0,0],
		[0x13e113d8,0],
		[0x13e113e0,0],
		[0x13e113e8,0],
		[0x13e113f0,0],
		[0x13e113f8,0],
		[0x13e11400,0],
		[0x13e11408,0],
		[0x13e11410,0],
		[0x13e11418,0],
		[0x13e11420,0],
		[0x13e11428,0],
		[0x13e11430,0],
		[0x13e11438,0],
		[0x13e11440,0],
		[0x13e11448,0],
		[0x13e11450,0],
		[0x13e11458,0],
		[0x13e11460,0],
		[0x13e11468,0],
		[0x13e11470,0],
		[0x13e11478,0],
		[0x13e11480,0],
		[0x13e11488,0],
		[0x13e11490,0],
		[0x13e11498,0],
		[0x13e114a0,0],
		[0x13e114a8,0],
		[0x13e114b0,0],
		[0x13e114b8,0],
		[0x13e114c0,0],
		[0x13e114c8,0],
		[0x13e114d0,0],
		[0x13e114d8,0],
		[0x13e114e0,0],
		[0x13e114e8,0],
		[0x13e114f0,0],
		[0x13e114f8,0],
		[0x13e11500,0],
		[0x13e11508,0],
		[0x13e11510,0],
		[0x13e11518,0],
		[0x13e11520,0],
		[0x13e11528,0],
		[0x13e11530,0],
		[0x13e11538,0],
		[0x13e11540,0],
		[0x13e11548,0],
		[0x13e11550,0],
		[0x13e11558,0],
		[0x13e11560,0],
		[0, 0]
]).
unknown([
		[0x13e10d38,14593495508423839559],
		[0, 0]
]).
long([
		[0x13e10580,5038873],
		[0x13e10720,25],
		[0x13e107e0,1],
		[0x13e107e8,1],
		[0x13e10c08,4294967295],
		[0x13e10c40,140],
		[0x13e10e20,939610791],
		[0x13e10e50,19398],
		[0x13e11190,1000],
		[0x13e11198,4294967295],
		[0, 0]
]).
int([
		[0x13e10578,0],
		[0x13e1057c,0],
		[0x13e10584,0],
		[0x13e10588,0],
		[0x13e1058c,0],
		[0x13e10590,0],
		[0x13e10594,0],
		[0x13e10598,0],
		[0x13e1059c,0],
		[0x13e105a0,0],
		[0x13e105a4,0],
		[0x13e105a8,0],
		[0x13e105ac,0],
		[0x13e105b0,0],
		[0x13e105b4,0],
		[0x13e105b8,0],
		[0x13e105bc,0],
		[0x13e105c0,0],
		[0x13e105c4,0],
		[0x13e105c8,0],
		[0x13e105cc,0],
		[0x13e105d0,0],
		[0x13e105d4,0],
		[0x13e105d8,0],
		[0x13e105dc,0],
		[0x13e105e0,0],
		[0x13e105e4,0],
		[0x13e105e8,0],
		[0x13e105ec,0],
		[0x13e105f0,0],
		[0x13e105f4,0],
		[0x13e105f8,0],
		[0x13e105fc,0],
		[0x13e10600,0],
		[0x13e10604,0],
		[0x13e10608,0],
		[0x13e1060c,0],
		[0x13e10610,0],
		[0x13e10614,0],
		[0x13e10618,0],
		[0x13e1061c,0],
		[0x13e10620,0],
		[0x13e10624,0],
		[0x13e10628,0],
		[0x13e1062c,0],
		[0x13e10630,0],
		[0x13e10634,0],
		[0x13e10638,0],
		[0x13e1063c,0],
		[0x13e10640,0],
		[0x13e10644,0],
		[0x13e10648,0],
		[0x13e1064c,0],
		[0x13e10650,0],
		[0x13e10654,0],
		[0x13e10658,0],
		[0x13e1065c,0],
		[0x13e10660,0],
		[0x13e10664,0],
		[0x13e10668,0],
		[0x13e1066c,0],
		[0x13e10670,0],
		[0x13e10674,0],
		[0x13e10678,0],
		[0x13e1067c,0],
		[0x13e10680,0],
		[0x13e10684,0],
		[0x13e10688,0],
		[0x13e1068c,0],
		[0x13e10698,0],
		[0x13e1069c,0],
		[0x13e106a0,0],
		[0x13e106a4,0],
		[0x13e106a8,0],
		[0x13e106ac,0],
		[0x13e106b0,0],
		[0x13e106b4,0],
		[0x13e106b8,0],
		[0x13e106bc,0],
		[0x13e106c0,0],
		[0x13e106c4,0],
		[0x13e106c8,0],
		[0x13e106cc,0],
		[0x13e106d0,0],
		[0x13e106d4,0],
		[0x13e106d8,0],
		[0x13e106dc,0],
		[0x13e106e0,0],
		[0x13e106e4,0],
		[0x13e106e8,0],
		[0x13e106ec,0],
		[0x13e106f0,0],
		[0x13e106f4,0],
		[0x13e106f8,0],
		[0x13e106fc,0],
		[0x13e10710,0],
		[0x13e10714,0],
		[0x13e10718,0],
		[0x13e1071c,0],
		[0x13e10720,25],
		[0x13e10724,0],
		[0x13e10728,0],
		[0x13e1072c,0],
		[0x13e10740,0],
		[0x13e10744,0],
		[0x13e10748,0],
		[0x13e1074c,0],
		[0x13e10750,0],
		[0x13e10754,0],
		[0x13e10758,0],
		[0x13e1075c,0],
		[0x13e10760,0],
		[0x13e10764,0],
		[0x13e10768,0],
		[0x13e1076c,0],
		[0x13e10770,0],
		[0x13e10774,0],
		[0x13e10778,0],
		[0x13e1077c,0],
		[0x13e10780,0],
		[0x13e10784,0],
		[0x13e10788,0],
		[0x13e1078c,0],
		[0x13e10798,0],
		[0x13e1079c,0],
		[0x13e107a0,0],
		[0x13e107a4,0],
		[0x13e107a8,0],
		[0x13e107ac,0],
		[0x13e107b0,0],
		[0x13e107b4,0],
		[0x13e107c8,0],
		[0x13e107cc,0],
		[0x13e107d0,0],
		[0x13e107d4,0],
		[0x13e107d8,0],
		[0x13e107dc,0],
		[0x13e107e0,1],
		[0x13e107e4,0],
		[0x13e107e8,1],
		[0x13e107ec,0],
		[0x13e10be8,0],
		[0x13e10bec,0],
		[0x13e10bf0,0],
		[0x13e10bf4,0],
		[0x13e10c0c,0],
		[0x13e10c10,0],
		[0x13e10c14,0],
		[0x13e10c18,0],
		[0x13e10c1c,0],
		[0x13e10c20,0],
		[0x13e10c24,0],
		[0x13e10c28,0],
		[0x13e10c2c,0],
		[0x13e10c40,140],
		[0x13e10c44,0],
		[0x13e10c68,0],
		[0x13e10c6c,0],
		[0x13e10c70,0],
		[0x13e10c74,0],
		[0x13e10c78,0],
		[0x13e10c7c,0],
		[0x13e10c80,0],
		[0x13e10c84,0],
		[0x13e10c90,0],
		[0x13e10c94,0],
		[0x13e10c98,0],
		[0x13e10c9c,0],
		[0x13e10ca0,0],
		[0x13e10ca4,0],
		[0x13e10ca8,0],
		[0x13e10cac,0],
		[0x13e10cb0,0],
		[0x13e10cb4,0],
		[0x13e10cb8,0],
		[0x13e10cbc,0],
		[0x13e10cc0,0],
		[0x13e10cc4,0],
		[0x13e10cc8,0],
		[0x13e10ccc,0],
		[0x13e10cd0,0],
		[0x13e10cd4,0],
		[0x13e10cd8,0],
		[0x13e10cdc,0],
		[0x13e10ce0,0],
		[0x13e10ce4,0],
		[0x13e10ce8,0],
		[0x13e10cec,0],
		[0x13e10cf0,0],
		[0x13e10cf4,0],
		[0x13e10cf8,0],
		[0x13e10cfc,0],
		[0x13e10d08,0],
		[0x13e10d0c,0],
		[0x13e10d10,0],
		[0x13e10d14,0],
		[0x13e10d18,0],
		[0x13e10d1c,0],
		[0x13e10d20,0],
		[0x13e10d24,0],
		[0x13e10d28,0],
		[0x13e10d2c,0],
		[0x13e10d30,0],
		[0x13e10d34,0],
		[0x13e10d98,0],
		[0x13e10d9c,0],
		[0x13e10da0,0],
		[0x13e10da4,0],
		[0x13e10db0,0],
		[0x13e10db4,0],
		[0x13e10db8,0],
		[0x13e10dbc,0],
		[0x13e10dc8,0],
		[0x13e10dcc,0],
		[0x13e10dd0,0],
		[0x13e10dd4,0],
		[0x13e10e00,0],
		[0x13e10e04,0],
		[0x13e10e08,0],
		[0x13e10e0c,0],
		[0x13e10e10,0],
		[0x13e10e14,0],
		[0x13e10e18,0],
		[0x13e10e1c,0],
		[0x13e10e24,0],
		[0x13e10e28,0],
		[0x13e10e2c,0],
		[0x13e10e30,0],
		[0x13e10e34,0],
		[0x13e10e38,0],
		[0x13e10e3c,0],
		[0x13e10e40,0],
		[0x13e10e44,0],
		[0x13e10e48,0],
		[0x13e10e4c,0],
		[0x13e10e50,19398],
		[0x13e10e54,0],
		[0x13e10e58,0],
		[0x13e10e5c,0],
		[0x13e10e60,0],
		[0x13e10e64,0],
		[0x13e10e68,0],
		[0x13e10e6c,0],
		[0x13e10e70,0],
		[0x13e10e74,0],
		[0x13e10e78,0],
		[0x13e10e7c,0],
		[0x13e10e80,0],
		[0x13e10e84,0],
		[0x13e10e88,0],
		[0x13e10e8c,0],
		[0x13e10ec0,0],
		[0x13e10ec4,0],
		[0x13e10ee0,48],
		[0x13e10ee4,0],
		[0x13e10ee8,0],
		[0x13e10eec,0],
		[0x13e10ef0,0],
		[0x13e10ef4,0],
		[0x13e10ef8,0],
		[0x13e10efc,0],
		[0x13e10f00,0],
		[0x13e10f04,0],
		[0x13e10f08,0],
		[0x13e10f0c,0],
		[0x13e10f38,0],
		[0x13e10f3c,0],
		[0x13e10f40,0],
		[0x13e10f44,0],
		[0x13e10f48,0],
		[0x13e10f4c,0],
		[0x13e10f60,0],
		[0x13e10f64,0],
		[0x13e10f68,0],
		[0x13e10f6c,0],
		[0x13e10f70,0],
		[0x13e10f74,0],
		[0x13e10f78,0],
		[0x13e10f7c,0],
		[0x13e10f80,0],
		[0x13e10f84,0],
		[0x13e10f88,0],
		[0x13e10f8c,0],
		[0x13e10f98,0],
		[0x13e10f9c,0],
		[0x13e10fa0,0],
		[0x13e10fa4,0],
		[0x13e10fa8,0],
		[0x13e10fac,0],
		[0x13e10fb0,0],
		[0x13e10fb4,0],
		[0x13e10fb8,0],
		[0x13e10fbc,0],
		[0x13e10fc0,0],
		[0x13e10fc4,0],
		[0x13e10fc8,0],
		[0x13e10fcc,0],
		[0x13e10fd0,0],
		[0x13e10fd4,0],
		[0x13e10fd8,0],
		[0x13e10fdc,0],
		[0x13e10fe0,0],
		[0x13e10fe4,0],
		[0x13e10fe8,0],
		[0x13e10fec,0],
		[0x13e10ff0,0],
		[0x13e10ff4,0],
		[0x13e10ff8,0],
		[0x13e10ffc,0],
		[0x13e11000,0],
		[0x13e11004,0],
		[0x13e11008,0],
		[0x13e1100c,0],
		[0x13e11010,0],
		[0x13e11014,0],
		[0x13e11018,0],
		[0x13e1101c,0],
		[0x13e11020,0],
		[0x13e11024,0],
		[0x13e11028,0],
		[0x13e1102c,0],
		[0x13e11030,0],
		[0x13e11034,0],
		[0x13e11038,0],
		[0x13e1103c,0],
		[0x13e11040,0],
		[0x13e11044,0],
		[0x13e11048,0],
		[0x13e1104c,0],
		[0x13e11050,0],
		[0x13e11054,0],
		[0x13e11058,0],
		[0x13e1105c,0],
		[0x13e11060,0],
		[0x13e11064,0],
		[0x13e110e8,0],
		[0x13e110ec,0],
		[0x13e110f0,0],
		[0x13e110f4,0],
		[0x13e11100,0],
		[0x13e11104,0],
		[0x13e11108,0],
		[0x13e1110c,0],
		[0x13e11110,0],
		[0x13e11114,0],
		[0x13e11118,0],
		[0x13e1111c,0],
		[0x13e11120,0],
		[0x13e11124,0],
		[0x13e11128,0],
		[0x13e1112c,0],
		[0x13e11130,0],
		[0x13e11134,0],
		[0x13e11138,0],
		[0x13e1113c,0],
		[0x13e11140,0],
		[0x13e11144,0],
		[0x13e11148,0],
		[0x13e1114c,0],
		[0x13e11150,0],
		[0x13e11154,0],
		[0x13e11158,0],
		[0x13e1115c,0],
		[0x13e11180,0],
		[0x13e11184,0],
		[0x13e11188,0],
		[0x13e1118c,0],
		[0x13e11190,1000],
		[0x13e11194,0],
		[0x13e1119c,0],
		[0x13e111a0,0],
		[0x13e111a4,0],
		[0x13e111a8,0],
		[0x13e111ac,0],
		[0x13e111b0,0],
		[0x13e111b4,0],
		[0x13e111b8,0],
		[0x13e111bc,0],
		[0x13e111c8,0],
		[0x13e111cc,0],
		[0x13e111d0,0],
		[0x13e111d4,0],
		[0x13e111d8,0],
		[0x13e111dc,0],
		[0x13e111e0,0],
		[0x13e111e4,0],
		[0x13e111e8,0],
		[0x13e111ec,0],
		[0x13e111f0,0],
		[0x13e111f4,0],
		[0x13e111f8,0],
		[0x13e111fc,0],
		[0x13e11200,0],
		[0x13e11204,0],
		[0x13e11208,0],
		[0x13e1120c,0],
		[0x13e11210,0],
		[0x13e11214,0],
		[0x13e11218,0],
		[0x13e1121c,0],
		[0x13e11220,0],
		[0x13e11224,0],
		[0x13e11228,0],
		[0x13e1122c,0],
		[0x13e11230,0],
		[0x13e11234,0],
		[0x13e11238,0],
		[0x13e1123c,0],
		[0x13e11240,0],
		[0x13e11244,0],
		[0x13e11248,0],
		[0x13e1124c,0],
		[0x13e11250,0],
		[0x13e11254,0],
		[0x13e11258,0],
		[0x13e1125c,0],
		[0x13e11260,0],
		[0x13e11264,0],
		[0x13e11268,0],
		[0x13e1126c,0],
		[0x13e11270,0],
		[0x13e11274,0],
		[0x13e11278,0],
		[0x13e1127c,0],
		[0x13e11280,0],
		[0x13e11284,0],
		[0x13e11288,0],
		[0x13e1128c,0],
		[0x13e11290,0],
		[0x13e11294,0],
		[0x13e11298,0],
		[0x13e1129c,0],
		[0x13e112a0,0],
		[0x13e112a4,0],
		[0x13e112a8,0],
		[0x13e112ac,0],
		[0x13e112b0,0],
		[0x13e112b4,0],
		[0x13e112b8,0],
		[0x13e112bc,0],
		[0x13e112c0,0],
		[0x13e112c4,0],
		[0x13e112c8,0],
		[0x13e112cc,0],
		[0x13e112d0,0],
		[0x13e112d4,0],
		[0x13e112d8,0],
		[0x13e112dc,0],
		[0x13e112e0,0],
		[0x13e112e4,0],
		[0x13e112e8,0],
		[0x13e112ec,0],
		[0x13e112f0,0],
		[0x13e112f4,0],
		[0x13e112f8,0],
		[0x13e112fc,0],
		[0x13e11300,0],
		[0x13e11304,0],
		[0x13e11308,0],
		[0x13e1130c,0],
		[0x13e11310,0],
		[0x13e11314,0],
		[0x13e11318,0],
		[0x13e1131c,0],
		[0x13e11320,0],
		[0x13e11324,0],
		[0x13e11328,0],
		[0x13e1132c,0],
		[0x13e11330,0],
		[0x13e11334,0],
		[0x13e11338,0],
		[0x13e1133c,0],
		[0x13e11340,0],
		[0x13e11344,0],
		[0x13e11348,0],
		[0x13e1134c,0],
		[0x13e11350,0],
		[0x13e11354,0],
		[0x13e11358,0],
		[0x13e1135c,0],
		[0x13e11360,0],
		[0x13e11364,0],
		[0x13e11368,0],
		[0x13e1136c,0],
		[0x13e11370,0],
		[0x13e11374,0],
		[0x13e11378,0],
		[0x13e1137c,0],
		[0x13e11380,0],
		[0x13e11384,0],
		[0x13e11388,0],
		[0x13e1138c,0],
		[0x13e11390,0],
		[0x13e11394,0],
		[0x13e11398,0],
		[0x13e1139c,0],
		[0x13e113a0,0],
		[0x13e113a4,0],
		[0x13e113a8,0],
		[0x13e113ac,0],
		[0x13e113b0,0],
		[0x13e113b4,0],
		[0x13e113b8,0],
		[0x13e113bc,0],
		[0x13e113c0,0],
		[0x13e113c4,0],
		[0x13e113c8,0],
		[0x13e113cc,0],
		[0x13e113d0,0],
		[0x13e113d4,0],
		[0x13e113d8,0],
		[0x13e113dc,0],
		[0x13e113e0,0],
		[0x13e113e4,0],
		[0x13e113e8,0],
		[0x13e113ec,0],
		[0x13e113f0,0],
		[0x13e113f4,0],
		[0x13e113f8,0],
		[0x13e113fc,0],
		[0x13e11400,0],
		[0x13e11404,0],
		[0x13e11408,0],
		[0x13e1140c,0],
		[0x13e11410,0],
		[0x13e11414,0],
		[0x13e11418,0],
		[0x13e1141c,0],
		[0x13e11420,0],
		[0x13e11424,0],
		[0x13e11428,0],
		[0x13e1142c,0],
		[0x13e11430,0],
		[0x13e11434,0],
		[0x13e11438,0],
		[0x13e1143c,0],
		[0x13e11440,0],
		[0x13e11444,0],
		[0x13e11448,0],
		[0x13e1144c,0],
		[0x13e11450,0],
		[0x13e11454,0],
		[0x13e11458,0],
		[0x13e1145c,0],
		[0x13e11460,0],
		[0x13e11464,0],
		[0x13e11468,0],
		[0x13e1146c,0],
		[0x13e11470,0],
		[0x13e11474,0],
		[0x13e11478,0],
		[0x13e1147c,0],
		[0x13e11480,0],
		[0x13e11484,0],
		[0x13e11488,0],
		[0x13e1148c,0],
		[0x13e11490,0],
		[0x13e11494,0],
		[0x13e11498,0],
		[0x13e1149c,0],
		[0x13e114a0,0],
		[0x13e114a4,0],
		[0x13e114a8,0],
		[0x13e114ac,0],
		[0x13e114b0,0],
		[0x13e114b4,0],
		[0x13e114b8,0],
		[0x13e114bc,0],
		[0x13e114c0,0],
		[0x13e114c4,0],
		[0x13e114c8,0],
		[0x13e114cc,0],
		[0x13e114d0,0],
		[0x13e114d4,0],
		[0x13e114d8,0],
		[0x13e114dc,0],
		[0x13e114e0,0],
		[0x13e114e4,0],
		[0x13e114e8,0],
		[0x13e114ec,0],
		[0x13e114f0,0],
		[0x13e114f4,0],
		[0x13e114f8,0],
		[0x13e114fc,0],
		[0x13e11500,0],
		[0x13e11504,0],
		[0x13e11508,0],
		[0x13e1150c,0],
		[0x13e11510,0],
		[0x13e11514,0],
		[0x13e11518,0],
		[0x13e1151c,0],
		[0x13e11520,0],
		[0x13e11524,0],
		[0x13e11528,0],
		[0x13e1152c,0],
		[0x13e11530,0],
		[0x13e11534,0],
		[0x13e11538,0],
		[0x13e1153c,0],
		[0x13e11540,0],
		[0x13e11544,0],
		[0x13e11548,0],
		[0x13e1154c,0],
		[0x13e11550,0],
		[0x13e11554,0],
		[0x13e11558,0],
		[0x13e1155c,0],
		[0x13e11560,0],
		[0x13e11564,0],
		[0, 0]
]).
string_val([
		[0x13e10ed8,3418906600723806067],
		[0x13e10ee0,48],
		[0, 0]
]).
/* This file contains recursive predicates */
:- use_module(library(clpfd)).
:- use_module(reif).
:- style_check(-singleton).

isTrue([X, Y]):-
    X == 49.

isTrue([X|Tail]):-
    isTrue(Tail).

log(File_name, Name, Addr, Base):-
    Offset #= Addr - Base,
    open(File_name, append, Stream),
    write(Stream, Name),
    write(Stream, ':'),
    write(Stream, Offset),
    nl(Stream),
    close(Stream).

possible_task_struct(Base_addr) :-
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM2_addr, Pid_addr, Tgid_addr, Real_parent_addr, Parent_addr , Child_addr, 
           Group_leader_addr, Thread_group_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    %MM2_addr #> Base_addr + 1000,
    Tasks_addr #> MM2_addr - 100,
    %FS_struct_addr #< Base_addr + 4000,
    Tgid_addr #= Pid_addr + 4,
    Real_parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr - 8,
    Child_addr #= Parent_addr + 8,
    %FIXME This may be too strong
    Group_leader_addr #=< Child_addr +32,
    %Comm_addr #= Base_addr + 1656,
    %Tasks_addr #= Base_addr + 1072,
    %FS_struct_addr #= Base_addr + 2640,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    % make query after labeling
    MM2_val #> 0,
    integer(MM2_val),
    
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val,  Comm_addr, Comm_val ]),

    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_parent_addr, Real_parent_val, Group_leader_addr, Group_leader_val]),
    Real_parent_val #> 0,
    Group_leader_val #> 0,
    query_ts(Real_parent_val, Comm_offset, Tasks_offset),
    query_ts(Group_leader_val, Comm_offset, Tasks_offset),

    labeling([enum], [Cred_addr, Cred_val]),
    Cred_val #> 0,
    query_cred(Cred_val),

    labeling([enum], [FS_struct_addr, FS_struct_val]),
    FS_struct_val #> 0,
    %query_fs_struct(FS_struct_val),



    get_time(End),
    Time_past is End - Current,
    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    log("profile.txt", "tasks", Tasks_addr, Base_addr),
    log("profile.txt", "mm_struct", MM2_addr, Base_addr),
    log("profile.txt", "comm", Comm_addr, Base_addr),
    log("profile.txt", "parent", Parent_addr, Base_addr),
    log("profile.txt", "group_leader", Group_leader_addr, Base_addr),
    log("profile.txt", "cred", Cred_addr, Base_addr),

    
    print_nl('tasks offset', Tasks_offset),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).

possible_string_pointer(Base_addr) :-
    /* Verify if this pointer points to a stirng */
    string_val(Str),
    Str_profile = [
        [Name_addr, Name_val]
    ],
    tuples_in(Str_profile, Str),
    Name_addr #= Base_addr.

query_string_pointer(Val) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "string_pointer"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_mount_struct(Base_addr, Offset) :-
    pointer(Ptr),
    Ptr_profile = ([
        [Mnt_devname_addr, Mnt_devname_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Mnt_devname_addr #= Base_addr + Offset,
    labeling([enum], [Mnt_devname_addr, Mnt_devname_val]),
    query_string_pointer(Mnt_devname_val).



possible_kernel_param(Base_addr) :-
    string_val(Str),
    Str_profile = [
        [Name_addr, Name_val]
    ],
    tuples_in(Str_profile, Str),
    Name_addr #= Base_addr.

possible_in_device(Base_addr) :-
    /* in_ifaddr remains the same across kernel versions 
       but we need this query to find ip_ptr in net_device struct
    */
    /*
        struct net_device *dev;
        int               refcnt;
        int               dead;
        struct in_ifaddr  *ifa_list;
    */
    pointer(Ptr),
    int(Int),
    Ptr_profile = ([
        [Dev_addr, Dev_val],
        [Ifa_list_addr, Ifa_list_val]
    ]),
    Int_profile = ([
        [Refcnt_addr, Refcnt_val],
        [Dead_addr, Dead_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Dead_addr #= Refcnt_addr + 4,
    chain([Dev_addr, Refcnt_addr, Dead_addr, Ifa_list_addr], #<),
    Dev_addr #= Base_addr,
    Ifa_list_addr #= Base_addr + 16,
    labeling([enum], [Ifa_list_addr, Ifa_list_val]),

    process_create(path('python'),
                    ['subquery.py', Ifa_list_val, "in_ifaddr"],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_in_ifaddr(Base_addr) :-
    /* in_ifaddr remains the same across kernel versions */
    pointer(Ptr),
    Ptr_profile = ([
        [Hash_addr, Hash_val],
        [Ifa_next_addr, Ifa_next_val],
        [Ifa_dev_addr, Ifa_dev_val],
        [Rcu_head_addr, Rcu_head_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([Hash_addr, Ifa_next_addr, Ifa_dev_addr, Rcu_head_addr], #<),
    Hash_addr #= Base_addr,
    Ifa_next_addr #= Hash_addr + 16,
    Ifa_dev_addr #= Ifa_next_addr + 8,
    Rcu_head_addr #= Ifa_dev_addr + 8,
    labeling([enum], [Hash_addr, Ifa_next_addr, Ifa_dev_addr, Rcu_head_addr]).



possible_mm_struct(Current_addr) :- 
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),

    Ptr_profile = [
        [Mmap_addr, Mmap_val],
        [Pgd_addr, Pgd_val]  
    ],
    Ulong_profile = [
        [Mmap_base_addr, Mmap_base_val],
        [Mmap_legacy_base_addr, Mmap_legacy_base_val],
        [Task_size_addr, Task_size_val],
        [High_vm_end_addr, High_vm_end_val],
        [Start_brk_addr, Start_brk_val],
        [Brk_addr, Brk_val],
        [Start_stack_addr, Start_stack_val],
        [ARG_start_addr, ARG_start_val]
    ],
    Mmap_addr #= Current_addr,


    Mmap_base_addr #> Mmap_addr,
    %FIXME mmap_base need more value constraint, because we removed mmap_legacy_base and highest_vm_end.
    Mmap_base_val #> 0x7f0000000000,
    High_vm_end_addr #= Mmap_base_addr + 24,
    
    chain([Mmap_base_addr, Mmap_legacy_base_addr, Task_size_addr, High_vm_end_addr, Pgd_addr], #<),


    Pgd_addr #> Task_size_addr,
    Pgd_addr #=< Task_size_addr + 40,
    %FIXME: This rule may not be true for other mm_struct.
    Task_size_val #>= 0x7ffffffff000,


    Start_brk_addr #> Pgd_addr,
    Start_stack_val #> 0x7ff000000000,
    ARG_start_addr #< Current_addr + 500,
    chain([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr], #<),
    ARG_start_addr #= Start_brk_addr + 24,
    Brk_val #< 0x7ff000000000,
    ARG_start_val #> 0x7ff000000000,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),


    labeling([enum], [Mmap_addr, Mmap_val, Mmap_base_addr, Pgd_addr, Pgd_val]),
    Mmap_val #> 0,
    Pgd_val #> 0,
    
    process_create(path('python'),
                    ['subquery.py', Mmap_val, "vm_area_struct", Current_addr],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    label([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr]),
    statistics(real_time, [End|_]),

    log("./profile/mm_struct", "mmap", Mmap_addr, Current_addr),
    log("./profile/mm_struct", "mmap_base", Mmap_base_addr, Current_addr),
    log("./profile/mm_struct", "pgd", Pgd_addr, Current_addr),
    log("./profile/mm_struct", "start_brk", Start_brk_addr, Current_addr),
    log("./profile/mm_struct", "brk", Brk_addr, Current_addr),
    log("./profile/mm_struct", "start_stack", Start_stack_addr, Current_addr),
    log("./profile/mm_struct", "arg_start", ARG_start_addr, Current_addr).
    %log("./profile/mm_struct", "mm_struct", End, Start).


possible_vm_area_struct(Base_addr, MM_addr) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [VM_next_addr, VM_next_val],
        [Vm_mm_addr, Vm_mm_val],
        [VM_file_addr, VM_file_val]
    ],
    Ulong_profile = [
        [VM_start_addr, VM_start_val],
        [VM_end_addr, VM_end_val],
        [VM_flag_addr, VM_flag_val]
        /*VM_pgoff is 0, and we do not consider 0 as ulong*/
        %[VM_pgoff_addr, VM_pgoff_val]
    ],
    VM_start_addr #>= Base_addr,
    chain([VM_start_addr, VM_end_addr, VM_next_addr, Vm_mm_addr, VM_flag_addr, VM_file_addr], #<),
    VM_end_addr #= VM_start_addr + 8,
    VM_next_addr #= VM_end_addr + 8,
    VM_next_addr #< Base_addr + 32,

    Vm_mm_val #= MM_addr,
    VM_file_addr #< Base_addr + 180,
    VM_pgoff_addr #= VM_file_addr - 8,
    VM_flag_val #< 0x88888888,
    VM_file_addr #< Base_addr + 200,

    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    %FIXME: VM_flag may need value constraints.

    label([VM_next_addr, VM_next_val]),
    /* vm_file maybe zero! */
    labeling([enum], [VM_start_addr, VM_end_addr, Vm_mm_addr, Vm_mm_val, VM_flag_addr, VM_pgoff_addr, VM_file_addr, VM_file_val]),
    
    VM_file_val #> 0,
    
    process_create(path('python'),
                ['subquery.py', VM_file_val, "vm_file"],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    statistics(real_time, [End|_]),
    

    log("./profile/vm_area_struct", "vm_start", VM_start_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_end", VM_end_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_next", VM_next_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_mm", Vm_mm_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_flag", VM_flag_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_pgoff", VM_pgoff_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_file", VM_file_addr, Base_addr).
    %log("./profile/vm_area_struct", "vm_area_struct", End, Start).

check_vm_area_struct(Base_addr, Level) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "vm_area_struct", Level],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vm_file(Base_addr) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [Vfs_mount_addr, Vfs_mount_val],
        [Dentry_addr, Dentry_val],
        [F_op_addr, F_op_val]
    ],
    tuples_in(Ptr_profile, Ptr),
    Vfs_mount_addr #> Base_addr,
    Dentry_addr #= Vfs_mount_addr + 8,
    Dentry_addr #< Base_addr + 40,
    Vfs_mount_val #> 0,
    Dentry_val #> 0,
    F_op_addr #= Base_addr + 40, 
    F_op_val #> 0,
    chain([Vfs_mount_addr, Dentry_addr, F_op_addr], #<),
    labeling([enum], [Vfs_mount_val, Dentry_val, F_op_addr, F_op_val]),


    process_create(path('python'),
                    ['subquery.py', Vfs_mount_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),
/*
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/
    query_file_operation(F_op_val),
    statistics(real_time, [End|_]),

    log("./profile/file", "f_path", Vfs_mount_addr, Base_addr),
    log("./profile/file", "f_op", F_op_addr, Base_addr).
    %log("./profile/file", "file", End, Start).



query_file_operation(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result).

possible_name_pointer(Val, Name_offset) :-
    /* The value at val+name_offset is a string pointer */
    current_predicate(pointer/1),
    pointer(Ptr),
    Ptr_profile = ([
        [Name_addr, Name_val]
    ]),
    Name_addr #= Val + Name_offset,
    tuples_in(Ptr_profile, Ptr),
    labeling([enum], [Name_addr, Name_val]),
    query_string_pointer(Name_val).

possible_vfs_mount(Base_addr) :-
    pointer(Ptr),
    int(Int),
    Ptr_profile = [
        [Dentry_addr, Dentry_val],
        [Mnt_sb_addr, Mnt_sb_val]
    ],
    Int_profile = [
        [Mnt_flags_addr, Mnt_flags_val]
    ],
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Dentry_addr #= Base_addr,
    Dentry_val #> 0,
    Mnt_flags_addr #= Dentry_addr + 16,
    Mnt_flags_val #>= 0,
    Mnt_sb_val #> 0,
    chain([Dentry_addr, Mnt_sb_addr, Mnt_flags_addr], #<),
    label([Dentry_addr, Dentry_val, Mnt_flags_addr, Mnt_flags_val]).
 
possible_dentry(Base_addr) :-
    /*
        struct dentry *d_parent;
        struct qstr d_name contains char *name; it's a name pointer
        struct inode *d_inode;
        unsigned char d_iname[LEN];
        const struct dentry_operations *d_op;
        struct list_head d_child;
        struct list_head d_subdirs;
        union {
	        struct hlist_node d_alias;
	        struct rcu_head d_rcu;
        } d_u;
    */
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    string_val(Str),
    Ptr_profile = [
        [Dparent_addr, Dparent_val],
        [Dname_addr, Dname_val],
        [D_inode_addr, D_inode_val],
        [D_op_addr, D_op_val],
        [Dchild_addr, Dchild_val],
        [D_subdirs_addr, D_subdirs_val]
    ],
    Str_profile = [
        [D_iname_addr, D_iname_val]
    ],
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    Dparent_addr #> Base_addr,
    chain([Dparent_addr, Dname_addr, D_inode_addr, D_iname_addr, 
            D_op_addr, Dchild_addr, D_subdirs_addr], #<),
    D_subdirs_addr #= Dchild_addr + 16,
    D_subdirs_addr #< Base_addr + 200,
    Dparent_val #> 0,
    labeling([enum], [Dname_addr, Dname_val]),
    query_string_pointer(Dname_val),
    labeling([enum], [D_iname_addr, D_iname_val]),
    D_iname_offset #= D_iname_addr - Base_addr,
    Dname_offset #= Dname_addr - Base_addr,
    labeling([enum], [Dparent_addr, Dparent_val]),
    Parent_dname #= Dparent_val + Dname_offset,
    process_create(path('python'),
                    ['subquery.py', Parent_dname, "name_pointer", Dname_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    labeling([enum], [D_inode_addr, D_inode_val]),
    query_inode(D_inode_val),
    /* d_op might be zero! */
    labeling([enum], [D_op_addr, D_op_val]),
    %query_file_operation(D_op_val),

    labeling([enum], [Dchild_addr, Dchild_val]),
    Dchild_offset #= Dchild_addr - Base_addr,
    Dchild_init #= Dchild_val - Dchild_offset,
    query_name_pointer(Dchild_init, Dname_offset),

    /* This can be hardcoded as d_child_addr + 16 */
    labeling([enum], [D_subdirs_addr, D_subdirs_val]),
    Dsubdirs_offset #= D_subdirs_addr - Base_addr,
    D_subdirs_init #= D_subdirs_val - Dsubdirs_offset,
    query_name_pointer(D_subdirs_init, Dname_offset),

    _Name_addr #= Dname_addr - 8,

    statistics(real_time, [End|_]),

    log("./profile/dentry", "parent", Dparent_addr, Base_addr),
    log("./profile/dentry", "d_name", _Name_addr, Base_addr),
    log("./profile/dentry", "d_inode", D_inode_addr, Base_addr),
    log("./profile/dentry", "d_iname", D_iname_addr, Base_addr),
    log("./profile/dentry", "dchild", Dchild_addr, Base_addr),
    log("./profile/dentry", "d_subdirs", D_subdirs_addr, Base_addr).
    %log("./profile/dentry", "dentry", End, Start).

query_inode(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_inode(Base_addr) :-
    /*
        struct inode_operations *i_op;
        struct super_block      *i_sb;
        struct address_space    *i_mapping;
    */
    statistics(real_time, [Start|_]),

    pointer(Ptr),
    long(Ulg),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [I_op_addr, I_op_val],
        [I_sb_addr, I_sb_val],
        [I_mapping_addr, I_mapping_val],
        [I_fop_addr, I_fop_val]
    ]),
    Ulong_profile = ([
        /* i_mode is actually not long type. */
        [I_mode_addr, I_mode_val],
        [I_ino_addr, I_ino_val],
        [I_size_addr, I_size_val],
        [I_atime_addr, I_atime_val],
        [_I_atime_addr, _I_atime_val],
        [I_mtime_addr, I_mtime_val],
        [I_ctime_addr, I_ctime_val],
        [_I_ctime_addr, _I_ctime_val]
    ]),
    Int_profile = ([
        [I_uid_addr, I_uid_val],
        [I_gid_addr, I_gid_val],
        [_atomic_t_addr, _atomic_t_val],
        [_atomic_t2_addr, _atomic_t2_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    tuples_in(Int_profile, Int),

    chain([I_mode_addr, I_uid_addr, I_gid_addr, I_op_addr, I_sb_addr, I_mapping_addr, I_ino_addr,
           I_size_addr, I_atime_addr, _I_atime_addr, I_mtime_addr, I_ctime_addr, _I_ctime_addr, 
           _atomic_t_addr, _atomic_t2_addr, I_fop_addr], #<),

    I_mode_addr #= Base_addr,
    I_mode_val #> 0,
    I_gid_addr #= I_mode_addr + 8,
    %I_op_addr #= Base_addr + 32,
    I_op_addr #=< Base_addr + 32,
    I_op_val #> 0,
    labeling([enum], [I_op_addr, I_op_val]),
    query_inode_operations(I_op_val),

    I_sb_addr #= I_op_addr + 8,
    I_mapping_addr #= I_sb_addr + 8,
    I_atime_addr #= I_size_addr + 8,
    I_mtime_addr #= I_atime_addr + 16,
    I_ctime_addr #= I_mtime_addr + 16,
    _I_ctime_addr #= I_ctime_addr + 8,
    I_size_val #> 0,
    I_atime_val #> 4096,
    I_mtime_val #> 4096,
    I_ctime_val #> 4096,
    I_fop_addr #< Base_addr + 400,
    labeling([enum], [I_sb_addr, I_mapping_addr, I_atime_addr, I_mtime_addr, I_ctime_addr]),
    I_fop_addr #= _atomic_t_addr + 8,
    labeling([enum], [I_fop_addr, I_fop_val]),
    I_fop_val #> 0,
    query_inode_operations(I_fop_val),

    statistics(real_time, [End|_]),
    log("./profile/inode", "I_mode_addr", I_mode_addr, Base_addr),
    log("./profile/inode", "I_uid_addr", I_uid_addr, Base_addr),
    log("./profile/inode", "I_gid_addr", I_gid_addr, Base_addr),
    log("./profile/inode", "I_op_addr", I_op_addr, Base_addr),
    log("./profile/inode", "I_sb_addr", I_sb_addr, Base_addr),
    log("./profile/inode", "I_mapping_addr", I_mapping_addr, Base_addr),
    log("./profile/inode", "I_size_addr", I_size_addr, Base_addr),
    log("./profile/inode", "I_atime_addr", I_atime_addr, Base_addr),
    log("./profile/inode", "I_mtime_addr", I_mtime_addr, Base_addr),
    log("./profile/inode", "I_ctime_addr", I_ctime_addr, Base_addr),
    log("./profile/inode", "I_fop_addr", I_fop_addr, Base_addr).
    %log("./profile/inode", "inode", End, Start).


query_inode_operations(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_name_pointer(Base_addr, Offset) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "name_pointer", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_inode_operations(Base_addr) :-
    /* a bunch of function pointers. */
    pointer(Ptr),
    Ptr_profile = ([
        [_L1_addr, _L1_val],
        [_L2_addr, _L2_val],
        [_L3_addr, _L3_val],
        [_L4_addr, _L4_val],
        [_L5_addr, _L5_val],
        [_L6_addr, _L6_val],
        [_L7_addr, _L7_val],
        [_L8_addr, _L8_val],
        [_L9_addr, _L9_val],
        [_L10_addr, _L10_val],
        [_L11_addr, _L11_val],
        [_L12_addr, _L12_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([_L1_addr, _L2_addr, _L3_addr, _L4_addr, _L5_addr, _L6_addr, _L7_addr,
           _L8_addr, _L9_addr, _L10_addr, _L11_addr, _L12_addr], #<),
    _L1_addr #= Base_addr,
    _L12_addr #= Base_addr + 88.




possible_nothing() :-

    %log("profile.txt", "dentry addr", Base_addr, 0),
    Dparent_addr #> Base_addr,
    Dname_addr #> 0,
    Dname_addr #< Base_addr + 200,
    %Dname_addr #= Base_addr + 160,
    %FIXME This child rule is not applicable for old kernel version. 
    %chain([Dparent_addr, Dname_addr, Dchild_addr], #<),
    %Dchild_addr #< Base_addr + 200,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    labeling([enum], [Dparent_addr, Dparent_val, Dname_addr, Dchild_addr, Dchild_val]),
    Dname_offset #= Dname_addr - Base_addr,
    integer(Dname_offset),
    Dparent_val #> 0,
    
    %FIXME d_parent may not be initialized
    /*process_create(path('python'),
                ['subquery.py', Dparent_val, "d_entry", Dname_offset],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/

    %FIXME: may need to find another way for all list_head. 
    /*Dchild_offset #= Dchild_addr - Base_addr,
    integer(Dchild_offset),
    Dchild_base #= Dchild_val - Dchild_offset,
    integer(Dchild_base),
    Dchild_base #> 0,
    process_create(path('python'),
                ['subquery.py', Dchild_base, "d_entry", Dname_offset],
                [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    statistics(real_time, [End|_]).
/*
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    log("profile.txt", "d_parent", Dparent_addr, Base_addr),
    log("profile.txt", "d_child", Dchild_addr, Base_addr),
    log("profile.txt", "dentry time", End, Start).
*/
possible_d_entry(Base_addr, Dname_offset) :-
    current_predicate(string_val/1),
    string_val(Str),
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    Dname_addr #= Base_addr + Dname_offset,
    tuples_in(Str_profile, Str),
    label([Dname_addr]).

possible_list_head(Tasks_val, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_val, Tasks_addr]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],
    Comm_addr #= Tasks_val - Tasks_offset + Comm_offset,
    Tasks_addr #\= Tasks_val,
    tuples_in(Str_profile, Str),
    tuples_in(Ptr_profile, Ptr),
    label([Comm_addr]).

possible_ts(Base_addr, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_addr, Tasks_val]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],

    Comm_addr #= Base_addr + Comm_offset,
    Tasks_addr #= Base_addr + Tasks_offset,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),

    label([Tasks_val]),
    
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "list_head", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_cred(Base_addr) :-
    statistics(real_time, [Start|_]),

    int(Int),
    long(Ulg),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3],
        [Addr4, Val4],
        [Addr5, Val5],
        [Addr6, Val6],
        [Addr7, Val7],
        [Addr8, Val8],
        [Addr9, Val9]
    ],
    %FIXME For now, this rule is hard-coded because we do not consider 0 as a unsign long number. 
    %So that for cred whos val10 is 0, this rule does not apply.
    /*Ulong_profile = [
        [Addr10, Val10],
        [Addr11, Val11]
    ],*/
    Addr1 #> Base_addr,
    %chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9, Addr10, Addr11], #<),
    chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9], #<),
    Addr1 #= Base_addr + 4,
    Addr9 #= Addr1 + 32,
    %Addr11 #< Base_addr + 120,
    tuples_in(Int_profile, Int),
    %tuples_in(Ulong_profile, Ulg),
    statistics(real_time, [End|_]),
    labeling([enum], [Addr1, Addr2, Addr5, Addr6]),
    log("./profile/cred", "cred", End, Start),
    log('./profile/cred', "uid", Addr1, Base_addr),
    log('./profile/cred', "gid", Addr2, Base_addr),
    log('./profile/cred', "euid", Addr5, Base_addr),
    log('./profile/cred', "egid", Addr6, Base_addr).

possible_fs_struct(Base_addr) :-
    statistics(real_time, [Start|_]),
    int(Int),
    pointer(Ptr),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3]
    ],
    Ptr_profile = [
        [Root_addr, Root_val],
        [Root_dentry_addr, Root_dentry_val],
        [PWD_addr, PWD_val]
    ],
    Addr1 #>= Base_addr,
    Root_dentry_addr #= Root_addr + 8,
    chain([Addr1, Addr2, Addr3, Root_addr, Root_dentry_addr, PWD_addr], #<),
    PWD_addr #= Root_addr + 16,
    PWD_addr #< Base_addr + 50,
    tuples_in(Int_profile, Int),
    tuples_in(Ptr_profile, Ptr),
    Root_val #> 0,
    PWD_val #> 0,
    label([Root_addr, Root_val, Root_dentry_addr, Root_dentry_val]),
    /* some times the dentry fields are zero, use vfs_mount instead */
    process_create(path('python'),
                    ['subquery.py', Root_val, "vfs_mount"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    query_dentry(Root_dentry_val),

    label([PWD_addr, PWD_val]),
    process_create(path('python'),
                    ['subquery.py', PWD_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    statistics(real_time, [End|_]),
    log("./profile/fs_struct", "fs time", End, Start),
    log('./profile/fs_struct', "Root", Root_addr, Base_addr),
    log('./profile/fs_struct', "pwd", PWD_addr, Base_addr),
    log('./profile/fs_struct', "fs_struct", End, Start).

possible_mount(Base_addr) :-
    /* struct hlist_head mnt_hash;
       struct mount *mnt_parent; 
       struct vfsmount mnt;
       struct list_head mnt_mounts;
       struct list_head mnt_child;
       struct list_head mnt_instance;
       const char *mnt_devname;
       struct list_head mnt_list;
    */
    statistics(real_time, [Start|_]),
    %get_time(Current),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Mnt_hash_addr, Mnt_hash_val],
        [Mnt_parent_addr, Mnt_parent_val],
        [Vfsmount_addr, Vfsmount_val],
        [Mnt_child_addr, Mnt_child_val],
        [Mnt_devname_addr, Mnt_devname_val],
        [Mnt_list_addr, Mnt_list_val]
    ]),
    Int_profile = ([
        [Mnt_flags_addr, Mnt_flags_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    /* Order Invariants */
    chain([Mnt_hash_addr, Mnt_parent_addr, Vfsmount_addr, Mnt_flags_addr,
            Mnt_child_addr, Mnt_devname_addr, Mnt_list_addr], #<),
    Mnt_hash_addr #= Base_addr,
    /* mnt_hash_addr is a list_head */
    Mnt_parent_addr #> Base_addr + 8,
    Mnt_list_addr - Base_addr #< 200,
    labeling([enum], [Mnt_devname_addr, Mnt_devname_val]),
    query_string_pointer(Mnt_devname_val),
    Mnt_devname_offset #= Mnt_devname_addr - Base_addr,
    /* the offset from mnt_mounts to mnt_list remains the same, so it's safe to use fixed offsets. */
    Mnt_child_addr #= Mnt_devname_addr - 32,
    Mnt_list_addr #= Mnt_devname_addr + 8,
    Mnt_flags_addr #= Vfsmount_addr + 16,
    labeling([enum], [Mnt_child_addr, Mnt_list_addr, Vfsmount_addr, Vfsmount_val]),
    /* Seems unnecessary 
    Mnt_list_offset #= Mnt_list_addr - Base_addr,
    Mnt_list #= Mnt_list_val - Mnt_list_offset,
    Mnt_list #> 0,
    query_mount_struct(Mnt_list, Mnt_devname_offset),
    */
    Vfsmount_val #>= 0,
    /* Here we can infer layout of dentry structure 
       Maybe need to infer using another dentry, somehow it may not be initialized. 
    */
    Vfsmount_addr #> 0,
    %query_dentry(Vfsmount_addr),

    labeling([enum], [Mnt_parent_addr, Mnt_parent_val]),
    /* To verify another mount struct, only one-level query, so it does not direct call query_mount recursively */
    
    query_mount_struct(Mnt_parent_val, Mnt_devname_offset),
    

    %get_time(End),
    %Time_past is End - Current,
    statistics(real_time, [End|_]),
    log("./profile/mount", "mnt_hash", Mnt_hash_addr, Base_addr),
    log("./profile/mount", "mnt_parent", Mnt_parent_addr, Base_addr),
    log("./profile/mount", "mnt_child", Mnt_child_addr, Base_addr),
    log("./profile/mount", "mnt_devname", Mnt_devname_addr, Base_addr),
    log("./profile/mount", "mnt_list", Mnt_list_addr, Base_addr),
    log("./profile/mount", "mount", End, Start).


possible_neigh_hash_table(Base_addr) :-
    /* neighbour **hash_buckets */
    pointer(Ptr),
    Ptr_profile = ([
        [Hash_buckest_addr, Hash_buckets_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Hash_buckest_addr #= Base_addr,
    labeling([enum], [Hash_buckest_addr, Hash_buckets_val]),
    process_create(path('python'),
                    ['subquery.py', Hash_buckets_val, "hash_buckets"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_hash_buckets(Base_addr) :-
    /* hash_buckets is an array of neighbour pointer 
       note that not all element are non-zero
    */
    pointer(Ptr),
    Ptr_profile = ([
        [Neighbour_addr, Neighbour_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Neighbour_addr #< Base_addr + 32,
    Neighbour_val #> 0,
    labeling([enum], [Neighbour_addr, Neighbour_val]),
    process_create(path('python'),
                    ['subquery.py', Neighbour_val, "neighbour"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_neighbour(Base_addr) :-
    /* net_device *dev at offset 464 */
    pointer(Ptr),
    Ptr_profile = ([
        [Dev_addr, Dev_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Dev_addr #>= Base_addr + 360,
    Dev_addr #=< Base_addr + 376,
    labeling([enum], [Dev_addr, Dev_val]),
    process_create(path('python'),
                    ['subquery.py', Dev_val, "net_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).


possible_net_device(Base_addr) :- 
    /*
        char             name[NAMSIZ];
        struct list_head dev_list;
        unsigned char    addr_len;
        unsigned int     promiscuity;
        struct in_device *ip_ptr;
    */
    statistics(real_time, [Start|_]),

    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Dev_list_addr, Dev_list_val],
        [_atalk_ptr_addr, _atalk_ptr_val],
        [IP_ptr_addr, IP_ptr_val],
        [_dn_ptr_addr, _dn_ptr_val],
        [_ip6_ptr_addr, _ip6_ptr_val],
        [Dev_addr_addr, Dev_addr_val]
    ]),
    Str_profile = ([
        [Name_addr, Name_val],
        [Broad_cast_addr, Broad_cast_val]
    ]),
    Int_profile = ([
        [Promisc_addr, Promisc_val],
        [Addr_len_addr, Addr_len_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),
    /* Hard to determine offsets for addr_len and promisc */
    chain([Name_addr, Dev_list_addr, Addr_len_addr, Promisc_addr, 
           _atalk_ptr_addr, IP_ptr_addr, _dn_ptr_addr, _ip6_ptr_addr, Dev_addr_addr, Broad_cast_addr], #<),
    Name_addr #= Base_addr,
    Name_offset #= Name_addr - Base_addr,
    IP_ptr_addr #= _atalk_ptr_addr + 8,
    IP_ptr_addr #< Base_addr + 1000,
    _ip6_ptr_addr #= IP_ptr_addr + 16,


    /* dev_list offset can be hardcoded since it remains the same */
    Dev_list_addr #= Base_addr + 80,
    labeling([enum], [Name_addr, Dev_list_addr, Dev_list_val]),
    /* do not have a good constrain to narrow down ip_ptr, use its rough offset
       to reduce the search space. 
     */
    IP_ptr_addr #> Base_addr + 700,
    IP_ptr_val #> 0,
    labeling([enum], [IP_ptr_addr, IP_ptr_val]),
    query_in_device(IP_ptr_val),

    %labeling([enum], [Dev_addr_addr, Dev_addr_val]),
    %query_string_pointer(Dev_addr_val),

    statistics(real_time, [End|_]),

    log("./profile/net_device", "name", Name_addr, Base_addr),
    log("./profile/net_device", "ip_ptr", IP_ptr_addr, Base_addr),
    log("./profile/net_device", "dev_list", Dev_list_addr, Base_addr),
    log("./profile/net_device", "net_device", End, Start).

query_in_device(IP_ptr_val) :-
    process_create(path('python'),
                    ['subquery.py', IP_ptr_val, "in_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).


query_mount_struct(Val, Offset) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "mount_struct", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_dentry(Dentry_val) :-
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).
