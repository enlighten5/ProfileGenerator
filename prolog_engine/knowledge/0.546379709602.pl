:- use_module(library(clpfd)).
:- style_check(-singleton).
pointer([
		[0x1ad32c00,516818432],
		[0x1ad32c08,459341920],
		[0x1ad32c10,516817664],
		[0x1ad32c18,448568704],
		[0x1ad32c20,434522176],
		[0x1ad32c28,521644032],
		[0x1ad32c38,0],
		[0x1ad32c40,0],
		[0x1ad32c50,450047056],
		[0x1ad32c58,450047056],
		[0x1ad32c60,450047456],
		[0x1ad32c68,450045920],
		[0x1ad32c70,522844144],
		[0x1ad32c78,521644224],
		[0x1ad32c80,519429440],
		[0x1ad32c88,450047496],
		[0x1ad32c90,450045960],
		[0x1ad32c98,450047128],
		[0x1ad32ca0,450047128],
		[0x1ad32ca8,450047144],
		[0x1ad32cb0,450047144],
		[0x1ad32cb8,522844232],
		[0x1ad32cc0,522844232],
		[0x1ad32cc8,450047176],
		[0x1ad32cd0,450047176],
		[0x1ad32cd8,0],
		[0x1ad32ce0,458287232],
		[0x1ad32ce8,460052352],
		[0x1ad32cf0,0],
		[0x1ad32cf8,522844272],
		[0x1ad32d00,450047232],
		[0x1ad32d08,450047232],
		[0x1ad32d10,0],
		[0x1ad32d28,0],
		[0x1ad32d30,0],
		[0x1ad32d38,450047288],
		[0x1ad32d40,450047288],
		[0x1ad32d48,0],
		[0x1ad32d50,0],
		[0x1ad32d58,0],
		[0x1ad32d60,0],
		[0x1ad32d68,0],
		[0x1ad32d70,321513552],
		[0x1ad32d78,0],
		[0x1ad32d80,0],
		[0x1ad32d88,459347704],
		[0x1ad32d90,516817664],
		[0x1ad32d98,448549440],
		[0x1ad32da0,434204864],
		[0x1ad32da8,516143104],
		[0x1ad32db8,0],
		[0x1ad32dc0,0],
		[0x1ad32dd0,450047440],
		[0x1ad32dd8,450047440],
		[0x1ad32de0,516817744],
		[0x1ad32de8,450047072],
		[0x1ad32df0,522845296],
		[0x1ad32df8,516819312],
		[0x1ad32e00,520728288],
		[0x1ad32e08,354609160],
		[0x1ad32e10,450047112],
		[0x1ad32e18,450047512],
		[0x1ad32e20,450047512],
		[0x1ad32e28,450047528],
		[0x1ad32e30,450047528],
		[0x1ad32e38,522845384],
		[0x1ad32e40,522845384],
		[0x1ad32e48,450047560],
		[0x1ad32e50,450047560],
		[0x1ad32e58,0],
		[0x1ad32e60,458287232],
		[0x1ad32e68,519828096],
		[0x1ad32e70,0],
		[0x1ad32e78,522845424],
		[0x1ad32e80,450047616],
		[0x1ad32e88,450047616],
		[0x1ad32e90,0],
		[0x1ad32ea8,0],
		[0x1ad32eb0,0],
		[0x1ad32eb8,450047672],
		[0x1ad32ec0,450047672],
		[0x1ad32ec8,0],
		[0x1ad32ed0,0],
		[0x1ad32ed8,0],
		[0x1ad32ee0,0],
		[0x1ad32ee8,0],
		[0x1ad32ef0,321513552],
		[0x1ad32ef8,0],
		[0x1ad32f00,0],
		[0x1ad32f08,0],
		[0x1ad32f10,0],
		[0x1ad32f18,0],
		[0x1ad32f20,0],
		[0x1ad32f28,0],
		[0x1ad32f30,0],
		[0x1ad32f38,0],
		[0x1ad32f40,0],
		[0x1ad32f48,0],
		[0x1ad32f50,0],
		[0x1ad32f58,0],
		[0x1ad32f60,0],
		[0x1ad32f68,0],
		[0x1ad32f70,0],
		[0x1ad32f78,0],
		[0x1ad32f80,0],
		[0x1ad32f88,0],
		[0x1ad32f90,0],
		[0x1ad32f98,0],
		[0x1ad32fa0,0],
		[0x1ad32fa8,0],
		[0x1ad32fb0,0],
		[0x1ad32fb8,0],
		[0x1ad32fc0,0],
		[0x1ad32fc8,0],
		[0x1ad32fd0,0],
		[0x1ad32fd8,0],
		[0x1ad32fe0,0],
		[0x1ad32fe8,0],
		[0x1ad32ff0,0],
		[0x1ad32ff8,0],
		[0x1ad33008,450171424],
		[0x1ad33010,520034400],
		[0x1ad33018,450049929],
		[0x1ad33020,450051424],
		[0x1ad33028,450050200],
		[0x1ad33030,0],
		[0x1ad33040,340703968],
		[0x1ad33048,0],
		[0x1ad33050,0],
		[0x1ad33058,0],
		[0x1ad33060,341216336],
		[0x1ad33078,0],
		[0x1ad33090,450171424],
		[0x1ad33098,519493664],
		[0x1ad330a0,450049113],
		[0x1ad330a8,0],
		[0x1ad330b0,450048704],
		[0x1ad330b8,0],
		[0x1ad330c8,340703968],
		[0x1ad330d0,0],
		[0x1ad330d8,0],
		[0x1ad330e0,0],
		[0x1ad330e8,341211968],
		[0x1ad33100,0],
		[0x1ad33118,450171424],
		[0x1ad33120,460053888],
		[0x1ad33128,450050064],
		[0x1ad33130,0],
		[0x1ad33138,0],
		[0x1ad33140,0],
		[0x1ad33150,340703968],
		[0x1ad33158,0],
		[0x1ad33160,0],
		[0x1ad33168,0],
		[0x1ad33170,341219456],
		[0x1ad33188,0],
		[0x1ad331a0,450171424],
		[0x1ad331a8,520033152],
		[0x1ad331b0,450049113],
		[0x1ad331b8,0],
		[0x1ad331c0,0],
		[0x1ad331c8,0],
		[0x1ad331d8,340703968],
		[0x1ad331e0,0],
		[0x1ad331e8,0],
		[0x1ad331f0,0],
		[0x1ad331f8,341217584],
		[0x1ad33210,0],
		[0x1ad33228,450171424],
		[0x1ad33230,519493536],
		[0x1ad33238,450050609],
		[0x1ad33240,450050880],
		[0x1ad33248,0],
		[0x1ad33250,0],
		[0x1ad33260,340703968],
		[0x1ad33268,0],
		[0x1ad33270,0],
		[0x1ad33278,0],
		[0x1ad33280,341212800],
		[0x1ad33298,0],
		[0x1ad332b0,450171424],
		[0x1ad332b8,519492928],
		[0x1ad332c0,450048160],
		[0x1ad332c8,0],
		[0x1ad332d0,0],
		[0x1ad332d8,0],
		[0x1ad332e8,340703968],
		[0x1ad332f0,0],
		[0x1ad332f8,0],
		[0x1ad33300,0],
		[0x1ad33308,341219040],
		[0x1ad33320,0],
		[0x1ad33338,450171424],
		[0x1ad33340,520034288],
		[0x1ad33348,450051968],
		[0x1ad33350,0],
		[0x1ad33358,0],
		[0x1ad33360,0],
		[0x1ad33370,340703968],
		[0x1ad33378,0],
		[0x1ad33380,0],
		[0x1ad33388,0],
		[0x1ad33390,341218832],
		[0x1ad333a8,0],
		[0x1ad333c0,450171424],
		[0x1ad333c8,460051968],
		[0x1ad333d0,450051152],
		[0x1ad333d8,450051696],
		[0x1ad333e0,450051968],
		[0x1ad333e8,0],
		[0x1ad333f8,340703968],
		[0x1ad33400,0],
		[0x1ad33408,0],
		[0x1ad33410,0],
		[0x1ad33418,341212592],
		[0x1ad33430,0],
		[0x1ad33448,450171424],
		[0x1ad33450,519493824],
		[0x1ad33458,450051152],
		[0x1ad33460,450048160],
		[0x1ad33468,450048432],
		[0x1ad33470,0],
		[0x1ad33480,340703968],
		[0x1ad33488,0],
		[0x1ad33490,0],
		[0x1ad33498,0],
		[0x1ad334a0,341218000],
		[0x1ad334b8,0],
		[0x1ad334d0,450171424],
		[0x1ad334d8,520032880],
		[0x1ad334e0,450049929],
		[0x1ad334e8,450049792],
		[0x1ad334f0,450050608],
		[0x1ad334f8,0],
		[0x1ad33508,340703872],
		[0x1ad33510,0],
		[0x1ad33518,0],
		[0x1ad33520,0],
		[0x1ad33528,340712768],
		[0x1ad33540,0],
		[0x1ad33558,450171424],
		[0x1ad33560,519493216],
		[0x1ad33568,450049793],
		[0x1ad33570,0],
		[0x1ad33578,0],
		[0x1ad33580,0],
		[0x1ad33590,340703968],
		[0x1ad33598,0],
		[0x1ad335a0,0],
		[0x1ad335a8,0],
		[0x1ad335b0,340713184],
		[0x1ad335c8,0],
		[0x1ad335e0,450171424],
		[0x1ad335e8,519494944],
		[0x1ad335f0,518754328],
		[0x1ad335f8,0],
		[0x1ad33600,0],
		[0x1ad33608,0],
		[0x1ad33618,340703968],
		[0x1ad33620,0],
		[0x1ad33628,0],
		[0x1ad33630,0],
		[0x1ad33638,341218208],
		[0x1ad33650,0],
		[0x1ad33668,450171424],
		[0x1ad33670,460054400],
		[0x1ad33678,450049793],
		[0x1ad33680,0],
		[0x1ad33688,518758272],
		[0x1ad33690,0],
		[0x1ad336a0,340703968],
		[0x1ad336a8,0],
		[0x1ad336b0,0],
		[0x1ad336b8,0],
		[0x1ad336c0,341213008],
		[0x1ad336d8,0],
		[0x1ad336f0,450171424],
		[0x1ad336f8,519492544],
		[0x1ad33700,450049248],
		[0x1ad33708,450049384],
		[0x1ad33710,450049656],
		[0x1ad33718,0],
		[0x1ad33728,340703968],
		[0x1ad33730,0],
		[0x1ad33738,0],
		[0x1ad33740,0],
		[0x1ad33748,341212384],
		[0x1ad33760,0],
		[0x1ad33778,450171424],
		[0x1ad33780,519430096],
		[0x1ad33788,450051288],
		[0x1ad33790,450049248],
		[0x1ad33798,450048024],
		[0x1ad337a0,0],
		[0x1ad337b0,340703872],
		[0x1ad337b8,0],
		[0x1ad337c0,0],
		[0x1ad337c8,0],
		[0x1ad337d0,340713392],
		[0x1ad337e8,0],
		[0x1ad33800,450171424],
		[0x1ad33808,519493056],
		[0x1ad33810,450051561],
		[0x1ad33818,0],
		[0x1ad33820,450048296],
		[0x1ad33828,0],
		[0x1ad33838,340703968],
		[0x1ad33840,0],
		[0x1ad33848,0],
		[0x1ad33850,0],
		[0x1ad33858,341218416],
		[0x1ad33870,0],
		[0x1ad33888,450171424],
		[0x1ad33890,519492384],
		[0x1ad33898,450048025],
		[0x1ad338a0,0],
		[0x1ad338a8,518757048],
		[0x1ad338b0,0],
		[0x1ad338c0,340703968],
		[0x1ad338c8,0],
		[0x1ad338d0,0],
		[0x1ad338d8,0],
		[0x1ad338e0,341217168],
		[0x1ad338f8,0],
		[0x1ad33910,450171424],
		[0x1ad33918,520033024],
		[0x1ad33920,450051561],
		[0x1ad33928,0],
		[0x1ad33930,0],
		[0x1ad33938,0],
		[0x1ad33948,458302688],
		[0x1ad33950,0],
		[0x1ad33958,0],
		[0x1ad33960,0],
		[0x1ad33968,340713808],
		[0x1ad33980,0],
		[0x1ad33998,450171424],
		[0x1ad339a0,519494176],
		[0x1ad339a8,450051288],
		[0x1ad339b0,450051560],
		[0x1ad339b8,450051152],
		[0x1ad339c0,0],
		[0x1ad339d0,340703968],
		[0x1ad339d8,0],
		[0x1ad339e0,0],
		[0x1ad339e8,0],
		[0x1ad339f0,340712976],
		[0x1ad33a08,0],
		[0x1ad33a20,450171424],
		[0x1ad33a28,519495136],
		[0x1ad33a30,450049248],
		[0x1ad33a38,518754328],
		[0x1ad33a40,450048568],
		[0x1ad33a48,0],
		[0x1ad33a58,340703968],
		[0x1ad33a60,0],
		[0x1ad33a68,0],
		[0x1ad33a70,0],
		[0x1ad33a78,340713600],
		[0x1ad33a90,0],
		[0x1ad33aa8,450171424],
		[0x1ad33ab0,460053696],
		[0x1ad33ab8,450051425],
		[0x1ad33ac0,518757184],
		[0x1ad33ac8,0],
		[0x1ad33ad0,0],
		[0x1ad33ae0,340703968],
		[0x1ad33ae8,0],
		[0x1ad33af0,0],
		[0x1ad33af8,0],
		[0x1ad33b00,341213424],
		[0x1ad33b18,0],
		[0x1ad33b30,450171424],
		[0x1ad33b38,519495456],
		[0x1ad33b40,450048568],
		[0x1ad33b48,0],
		[0x1ad33b50,0],
		[0x1ad33b58,0],
		[0x1ad33b68,340703968],
		[0x1ad33b70,0],
		[0x1ad33b78,0],
		[0x1ad33b80,0],
		[0x1ad33b88,341213216],
		[0x1ad33ba0,0],
		[0x1ad33bb8,450171424],
		[0x1ad33bc0,519492992],
		[0x1ad33bc8,450051425],
		[0x1ad33bd0,0],
		[0x1ad33bd8,518757320],
		[0x1ad33be0,0],
		[0x1ad33bf0,340703968],
		[0x1ad33bf8,0],
		[0, 0]
]).
unknown([
		[0x1ad33080,5836144650154568396],
		[0x1ad33108,5836144650154568908],
		[0x1ad33190,12610556023360540780],
		[0x1ad33218,5836144650154569388],
		[0x1ad332a0,5836144650154566972],
		[0x1ad33328,5836144650154569236],
		[0x1ad333b0,5836144650154565860],
		[0x1ad33438,5836144650154567652],
		[0x1ad334c0,5836144650154565860],
		[0x1ad33548,5836144650154568996],
		[0x1ad335d0,5836144650154566492],
		[0x1ad33658,5836144650154565724],
		[0x1ad336e0,5836144650154568756],
		[0x1ad33768,5836144650154566956],
		[0x1ad337f0,5836144650154568724],
		[0x1ad33878,5836144650154567644],
		[0x1ad33900,5836144650154566956],
		[0x1ad33988,5836144650154567316],
		[0x1ad33a10,5836144650154569404],
		[0x1ad33a98,5836144650154566252],
		[0x1ad33b20,5836144650154567092],
		[0x1ad33ba8,5836144650154565876],
		[0, 0]
]).
long([
		[0x1ad32c30,4128],
		[0x1ad32c48,71292699029400],
		[0x1ad32d18,206158430208],
		[0x1ad32d20,28],
		[0x1ad32db0,4128],
		[0x1ad32dc8,71292699029596],
		[0x1ad32e98,210453397504],
		[0x1ad32ea0,29],
		[0x1ad33000,1],
		[0x1ad33038,765765880],
		[0x1ad33068,4294967314],
		[0x1ad33070,2175017042],
		[0x1ad33088,1],
		[0x1ad330c0,149117328],
		[0x1ad330f0,4294967305],
		[0x1ad330f8,2175017042],
		[0x1ad33110,1],
		[0x1ad33148,608745384],
		[0x1ad33178,4294967327],
		[0x1ad33180,2166628434],
		[0x1ad33198,1],
		[0x1ad331d0,29723370],
		[0x1ad33200,4294967318],
		[0x1ad33208,2166628434],
		[0x1ad33220,1],
		[0x1ad33258,1440217864],
		[0x1ad33288,4294967309],
		[0x1ad33290,2166628434],
		[0x1ad332a8,1],
		[0x1ad332e0,130780587],
		[0x1ad33310,4294967325],
		[0x1ad33318,2166628434],
		[0x1ad33330,1],
		[0x1ad33368,514933782],
		[0x1ad33398,4294967324],
		[0x1ad333a0,2166628434],
		[0x1ad333b8,1],
		[0x1ad333f0,533407172],
		[0x1ad33420,4294967308],
		[0x1ad33428,2175017042],
		[0x1ad33440,1],
		[0x1ad33478,68625560],
		[0x1ad334a8,4294967320],
		[0x1ad334b0,2166628434],
		[0x1ad334c8,2],
		[0x1ad33500,1818306480],
		[0x1ad33530,4294967298],
		[0x1ad33538,2175017042],
		[0x1ad33550,1],
		[0x1ad33588,2143284883],
		[0x1ad335b8,4294967300],
		[0x1ad335c0,2166628434],
		[0x1ad335d8,1],
		[0x1ad33610,1656025090],
		[0x1ad33640,4294967321],
		[0x1ad33648,2166628434],
		[0x1ad33660,1],
		[0x1ad33698,1998755904],
		[0x1ad336c8,4294967310],
		[0x1ad336d0,2166628434],
		[0x1ad336e8,1],
		[0x1ad33720,2119777058],
		[0x1ad33750,4294967307],
		[0x1ad33758,2175017042],
		[0x1ad33770,1],
		[0x1ad337a8,1407594253],
		[0x1ad337d8,4294967301],
		[0x1ad337e0,2175017042],
		[0x1ad337f8,1],
		[0x1ad33830,684955579],
		[0x1ad33860,4294967322],
		[0x1ad33868,2166628434],
		[0x1ad33880,1],
		[0x1ad338b8,755480745],
		[0x1ad338e8,4294967316],
		[0x1ad338f0,2175017042],
		[0x1ad33908,1],
		[0x1ad33940,583541792],
		[0x1ad33970,4294967303],
		[0x1ad33978,2175017042],
		[0x1ad33990,1],
		[0x1ad339c8,581505739],
		[0x1ad339f8,4294967299],
		[0x1ad33a00,2175017042],
		[0x1ad33a18,1],
		[0x1ad33a50,1554370434],
		[0x1ad33a80,4294967302],
		[0x1ad33a88,2175017042],
		[0x1ad33aa0,1],
		[0x1ad33ad8,916895384],
		[0x1ad33b08,4294967312],
		[0x1ad33b10,2166628434],
		[0x1ad33b28,1],
		[0x1ad33b60,1549374752],
		[0x1ad33b90,4294967311],
		[0x1ad33b98,2166628434],
		[0x1ad33bb0,1],
		[0x1ad33be8,1253369795],
		[0, 0]
]).
int([
		[0x1ad32c30,4128],
		[0x1ad32c34,0],
		[0x1ad32c38,0],
		[0x1ad32c3c,0],
		[0x1ad32c40,0],
		[0x1ad32c44,0],
		[0x1ad32c4c,16599],
		[0x1ad32cd8,0],
		[0x1ad32cdc,0],
		[0x1ad32cf0,0],
		[0x1ad32cf4,0],
		[0x1ad32d10,0],
		[0x1ad32d14,0],
		[0x1ad32d18,0],
		[0x1ad32d1c,48],
		[0x1ad32d20,28],
		[0x1ad32d24,0],
		[0x1ad32d28,0],
		[0x1ad32d2c,0],
		[0x1ad32d30,0],
		[0x1ad32d34,0],
		[0x1ad32d48,0],
		[0x1ad32d4c,0],
		[0x1ad32d50,0],
		[0x1ad32d54,0],
		[0x1ad32d58,0],
		[0x1ad32d5c,0],
		[0x1ad32d60,0],
		[0x1ad32d64,0],
		[0x1ad32d68,0],
		[0x1ad32d6c,0],
		[0x1ad32d78,0],
		[0x1ad32d7c,0],
		[0x1ad32d80,0],
		[0x1ad32d84,0],
		[0x1ad32db0,4128],
		[0x1ad32db4,0],
		[0x1ad32db8,0],
		[0x1ad32dbc,0],
		[0x1ad32dc0,0],
		[0x1ad32dc4,0],
		[0x1ad32dcc,16599],
		[0x1ad32e58,0],
		[0x1ad32e5c,0],
		[0x1ad32e70,0],
		[0x1ad32e74,0],
		[0x1ad32e90,0],
		[0x1ad32e94,0],
		[0x1ad32e98,0],
		[0x1ad32e9c,49],
		[0x1ad32ea0,29],
		[0x1ad32ea4,0],
		[0x1ad32ea8,0],
		[0x1ad32eac,0],
		[0x1ad32eb0,0],
		[0x1ad32eb4,0],
		[0x1ad32ec8,0],
		[0x1ad32ecc,0],
		[0x1ad32ed0,0],
		[0x1ad32ed4,0],
		[0x1ad32ed8,0],
		[0x1ad32edc,0],
		[0x1ad32ee0,0],
		[0x1ad32ee4,0],
		[0x1ad32ee8,0],
		[0x1ad32eec,0],
		[0x1ad32ef8,0],
		[0x1ad32efc,0],
		[0x1ad32f00,0],
		[0x1ad32f04,0],
		[0x1ad32f08,0],
		[0x1ad32f0c,0],
		[0x1ad32f10,0],
		[0x1ad32f14,0],
		[0x1ad32f18,0],
		[0x1ad32f1c,0],
		[0x1ad32f20,0],
		[0x1ad32f24,0],
		[0x1ad32f28,0],
		[0x1ad32f2c,0],
		[0x1ad32f30,0],
		[0x1ad32f34,0],
		[0x1ad32f38,0],
		[0x1ad32f3c,0],
		[0x1ad32f40,0],
		[0x1ad32f44,0],
		[0x1ad32f48,0],
		[0x1ad32f4c,0],
		[0x1ad32f50,0],
		[0x1ad32f54,0],
		[0x1ad32f58,0],
		[0x1ad32f5c,0],
		[0x1ad32f60,0],
		[0x1ad32f64,0],
		[0x1ad32f68,0],
		[0x1ad32f6c,0],
		[0x1ad32f70,0],
		[0x1ad32f74,0],
		[0x1ad32f78,0],
		[0x1ad32f7c,0],
		[0x1ad32f80,0],
		[0x1ad32f84,0],
		[0x1ad32f88,0],
		[0x1ad32f8c,0],
		[0x1ad32f90,0],
		[0x1ad32f94,0],
		[0x1ad32f98,0],
		[0x1ad32f9c,0],
		[0x1ad32fa0,0],
		[0x1ad32fa4,0],
		[0x1ad32fa8,0],
		[0x1ad32fac,0],
		[0x1ad32fb0,0],
		[0x1ad32fb4,0],
		[0x1ad32fb8,0],
		[0x1ad32fbc,0],
		[0x1ad32fc0,0],
		[0x1ad32fc4,0],
		[0x1ad32fc8,0],
		[0x1ad32fcc,0],
		[0x1ad32fd0,0],
		[0x1ad32fd4,0],
		[0x1ad32fd8,0],
		[0x1ad32fdc,0],
		[0x1ad32fe0,0],
		[0x1ad32fe4,0],
		[0x1ad32fe8,0],
		[0x1ad32fec,0],
		[0x1ad32ff0,0],
		[0x1ad32ff4,0],
		[0x1ad32ff8,0],
		[0x1ad32ffc,0],
		[0x1ad33000,1],
		[0x1ad33004,0],
		[0x1ad33030,0],
		[0x1ad33034,0],
		[0x1ad3303c,0],
		[0x1ad33048,0],
		[0x1ad3304c,0],
		[0x1ad33050,0],
		[0x1ad33054,0],
		[0x1ad33058,0],
		[0x1ad3305c,0],
		[0x1ad33068,18],
		[0x1ad3306c,1],
		[0x1ad33074,0],
		[0x1ad33078,0],
		[0x1ad3307c,0],
		[0x1ad33088,1],
		[0x1ad3308c,0],
		[0x1ad330a8,0],
		[0x1ad330ac,0],
		[0x1ad330b8,0],
		[0x1ad330bc,0],
		[0x1ad330c4,0],
		[0x1ad330d0,0],
		[0x1ad330d4,0],
		[0x1ad330d8,0],
		[0x1ad330dc,0],
		[0x1ad330e0,0],
		[0x1ad330e4,0],
		[0x1ad330f0,9],
		[0x1ad330f4,1],
		[0x1ad330fc,0],
		[0x1ad33100,0],
		[0x1ad33104,0],
		[0x1ad33110,1],
		[0x1ad33114,0],
		[0x1ad33130,0],
		[0x1ad33134,0],
		[0x1ad33138,0],
		[0x1ad3313c,0],
		[0x1ad33140,0],
		[0x1ad33144,0],
		[0x1ad3314c,0],
		[0x1ad33158,0],
		[0x1ad3315c,0],
		[0x1ad33160,0],
		[0x1ad33164,0],
		[0x1ad33168,0],
		[0x1ad3316c,0],
		[0x1ad33178,31],
		[0x1ad3317c,1],
		[0x1ad33184,0],
		[0x1ad33188,0],
		[0x1ad3318c,0],
		[0x1ad33198,1],
		[0x1ad3319c,0],
		[0x1ad331b8,0],
		[0x1ad331bc,0],
		[0x1ad331c0,0],
		[0x1ad331c4,0],
		[0x1ad331c8,0],
		[0x1ad331cc,0],
		[0x1ad331d4,0],
		[0x1ad331e0,0],
		[0x1ad331e4,0],
		[0x1ad331e8,0],
		[0x1ad331ec,0],
		[0x1ad331f0,0],
		[0x1ad331f4,0],
		[0x1ad33200,22],
		[0x1ad33204,1],
		[0x1ad3320c,0],
		[0x1ad33210,0],
		[0x1ad33214,0],
		[0x1ad33220,1],
		[0x1ad33224,0],
		[0x1ad33248,0],
		[0x1ad3324c,0],
		[0x1ad33250,0],
		[0x1ad33254,0],
		[0x1ad3325c,0],
		[0x1ad33268,0],
		[0x1ad3326c,0],
		[0x1ad33270,0],
		[0x1ad33274,0],
		[0x1ad33278,0],
		[0x1ad3327c,0],
		[0x1ad33288,13],
		[0x1ad3328c,1],
		[0x1ad33294,0],
		[0x1ad33298,0],
		[0x1ad3329c,0],
		[0x1ad332a8,1],
		[0x1ad332ac,0],
		[0x1ad332c8,0],
		[0x1ad332cc,0],
		[0x1ad332d0,0],
		[0x1ad332d4,0],
		[0x1ad332d8,0],
		[0x1ad332dc,0],
		[0x1ad332e4,0],
		[0x1ad332f0,0],
		[0x1ad332f4,0],
		[0x1ad332f8,0],
		[0x1ad332fc,0],
		[0x1ad33300,0],
		[0x1ad33304,0],
		[0x1ad33310,29],
		[0x1ad33314,1],
		[0x1ad3331c,0],
		[0x1ad33320,0],
		[0x1ad33324,0],
		[0x1ad33330,1],
		[0x1ad33334,0],
		[0x1ad33350,0],
		[0x1ad33354,0],
		[0x1ad33358,0],
		[0x1ad3335c,0],
		[0x1ad33360,0],
		[0x1ad33364,0],
		[0x1ad3336c,0],
		[0x1ad33378,0],
		[0x1ad3337c,0],
		[0x1ad33380,0],
		[0x1ad33384,0],
		[0x1ad33388,0],
		[0x1ad3338c,0],
		[0x1ad33398,28],
		[0x1ad3339c,1],
		[0x1ad333a4,0],
		[0x1ad333a8,0],
		[0x1ad333ac,0],
		[0x1ad333b8,1],
		[0x1ad333bc,0],
		[0x1ad333e8,0],
		[0x1ad333ec,0],
		[0x1ad333f4,0],
		[0x1ad33400,0],
		[0x1ad33404,0],
		[0x1ad33408,0],
		[0x1ad3340c,0],
		[0x1ad33410,0],
		[0x1ad33414,0],
		[0x1ad33420,12],
		[0x1ad33424,1],
		[0x1ad3342c,0],
		[0x1ad33430,0],
		[0x1ad33434,0],
		[0x1ad33440,1],
		[0x1ad33444,0],
		[0x1ad33470,0],
		[0x1ad33474,0],
		[0x1ad3347c,0],
		[0x1ad33488,0],
		[0x1ad3348c,0],
		[0x1ad33490,0],
		[0x1ad33494,0],
		[0x1ad33498,0],
		[0x1ad3349c,0],
		[0x1ad334a8,24],
		[0x1ad334ac,1],
		[0x1ad334b4,0],
		[0x1ad334b8,0],
		[0x1ad334bc,0],
		[0x1ad334c8,2],
		[0x1ad334cc,0],
		[0x1ad334f8,0],
		[0x1ad334fc,0],
		[0x1ad33504,0],
		[0x1ad33510,0],
		[0x1ad33514,0],
		[0x1ad33518,0],
		[0x1ad3351c,0],
		[0x1ad33520,0],
		[0x1ad33524,0],
		[0x1ad33530,2],
		[0x1ad33534,1],
		[0x1ad3353c,0],
		[0x1ad33540,0],
		[0x1ad33544,0],
		[0x1ad33550,1],
		[0x1ad33554,0],
		[0x1ad33570,0],
		[0x1ad33574,0],
		[0x1ad33578,0],
		[0x1ad3357c,0],
		[0x1ad33580,0],
		[0x1ad33584,0],
		[0x1ad3358c,0],
		[0x1ad33598,0],
		[0x1ad3359c,0],
		[0x1ad335a0,0],
		[0x1ad335a4,0],
		[0x1ad335a8,0],
		[0x1ad335ac,0],
		[0x1ad335b8,4],
		[0x1ad335bc,1],
		[0x1ad335c4,0],
		[0x1ad335c8,0],
		[0x1ad335cc,0],
		[0x1ad335d8,1],
		[0x1ad335dc,0],
		[0x1ad335f8,0],
		[0x1ad335fc,0],
		[0x1ad33600,0],
		[0x1ad33604,0],
		[0x1ad33608,0],
		[0x1ad3360c,0],
		[0x1ad33614,0],
		[0x1ad33620,0],
		[0x1ad33624,0],
		[0x1ad33628,0],
		[0x1ad3362c,0],
		[0x1ad33630,0],
		[0x1ad33634,0],
		[0x1ad33640,25],
		[0x1ad33644,1],
		[0x1ad3364c,0],
		[0x1ad33650,0],
		[0x1ad33654,0],
		[0x1ad33660,1],
		[0x1ad33664,0],
		[0x1ad33680,0],
		[0x1ad33684,0],
		[0x1ad33690,0],
		[0x1ad33694,0],
		[0x1ad3369c,0],
		[0x1ad336a8,0],
		[0x1ad336ac,0],
		[0x1ad336b0,0],
		[0x1ad336b4,0],
		[0x1ad336b8,0],
		[0x1ad336bc,0],
		[0x1ad336c8,14],
		[0x1ad336cc,1],
		[0x1ad336d4,0],
		[0x1ad336d8,0],
		[0x1ad336dc,0],
		[0x1ad336e8,1],
		[0x1ad336ec,0],
		[0x1ad33718,0],
		[0x1ad3371c,0],
		[0x1ad33724,0],
		[0x1ad33730,0],
		[0x1ad33734,0],
		[0x1ad33738,0],
		[0x1ad3373c,0],
		[0x1ad33740,0],
		[0x1ad33744,0],
		[0x1ad33750,11],
		[0x1ad33754,1],
		[0x1ad3375c,0],
		[0x1ad33760,0],
		[0x1ad33764,0],
		[0x1ad33770,1],
		[0x1ad33774,0],
		[0x1ad337a0,0],
		[0x1ad337a4,0],
		[0x1ad337ac,0],
		[0x1ad337b8,0],
		[0x1ad337bc,0],
		[0x1ad337c0,0],
		[0x1ad337c4,0],
		[0x1ad337c8,0],
		[0x1ad337cc,0],
		[0x1ad337d8,5],
		[0x1ad337dc,1],
		[0x1ad337e4,0],
		[0x1ad337e8,0],
		[0x1ad337ec,0],
		[0x1ad337f8,1],
		[0x1ad337fc,0],
		[0x1ad33818,0],
		[0x1ad3381c,0],
		[0x1ad33828,0],
		[0x1ad3382c,0],
		[0x1ad33834,0],
		[0x1ad33840,0],
		[0x1ad33844,0],
		[0x1ad33848,0],
		[0x1ad3384c,0],
		[0x1ad33850,0],
		[0x1ad33854,0],
		[0x1ad33860,26],
		[0x1ad33864,1],
		[0x1ad3386c,0],
		[0x1ad33870,0],
		[0x1ad33874,0],
		[0x1ad33880,1],
		[0x1ad33884,0],
		[0x1ad338a0,0],
		[0x1ad338a4,0],
		[0x1ad338b0,0],
		[0x1ad338b4,0],
		[0x1ad338bc,0],
		[0x1ad338c8,0],
		[0x1ad338cc,0],
		[0x1ad338d0,0],
		[0x1ad338d4,0],
		[0x1ad338d8,0],
		[0x1ad338dc,0],
		[0x1ad338e8,20],
		[0x1ad338ec,1],
		[0x1ad338f4,0],
		[0x1ad338f8,0],
		[0x1ad338fc,0],
		[0x1ad33908,1],
		[0x1ad3390c,0],
		[0x1ad33928,0],
		[0x1ad3392c,0],
		[0x1ad33930,0],
		[0x1ad33934,0],
		[0x1ad33938,0],
		[0x1ad3393c,0],
		[0x1ad33944,0],
		[0x1ad33950,0],
		[0x1ad33954,0],
		[0x1ad33958,0],
		[0x1ad3395c,0],
		[0x1ad33960,0],
		[0x1ad33964,0],
		[0x1ad33970,7],
		[0x1ad33974,1],
		[0x1ad3397c,0],
		[0x1ad33980,0],
		[0x1ad33984,0],
		[0x1ad33990,1],
		[0x1ad33994,0],
		[0x1ad339c0,0],
		[0x1ad339c4,0],
		[0x1ad339cc,0],
		[0x1ad339d8,0],
		[0x1ad339dc,0],
		[0x1ad339e0,0],
		[0x1ad339e4,0],
		[0x1ad339e8,0],
		[0x1ad339ec,0],
		[0x1ad339f8,3],
		[0x1ad339fc,1],
		[0x1ad33a04,0],
		[0x1ad33a08,0],
		[0x1ad33a0c,0],
		[0x1ad33a18,1],
		[0x1ad33a1c,0],
		[0x1ad33a48,0],
		[0x1ad33a4c,0],
		[0x1ad33a54,0],
		[0x1ad33a60,0],
		[0x1ad33a64,0],
		[0x1ad33a68,0],
		[0x1ad33a6c,0],
		[0x1ad33a70,0],
		[0x1ad33a74,0],
		[0x1ad33a80,6],
		[0x1ad33a84,1],
		[0x1ad33a8c,0],
		[0x1ad33a90,0],
		[0x1ad33a94,0],
		[0x1ad33aa0,1],
		[0x1ad33aa4,0],
		[0x1ad33ac8,0],
		[0x1ad33acc,0],
		[0x1ad33ad0,0],
		[0x1ad33ad4,0],
		[0x1ad33adc,0],
		[0x1ad33ae8,0],
		[0x1ad33aec,0],
		[0x1ad33af0,0],
		[0x1ad33af4,0],
		[0x1ad33af8,0],
		[0x1ad33afc,0],
		[0x1ad33b08,16],
		[0x1ad33b0c,1],
		[0x1ad33b14,0],
		[0x1ad33b18,0],
		[0x1ad33b1c,0],
		[0x1ad33b28,1],
		[0x1ad33b2c,0],
		[0x1ad33b48,0],
		[0x1ad33b4c,0],
		[0x1ad33b50,0],
		[0x1ad33b54,0],
		[0x1ad33b58,0],
		[0x1ad33b5c,0],
		[0x1ad33b64,0],
		[0x1ad33b70,0],
		[0x1ad33b74,0],
		[0x1ad33b78,0],
		[0x1ad33b7c,0],
		[0x1ad33b80,0],
		[0x1ad33b84,0],
		[0x1ad33b90,15],
		[0x1ad33b94,1],
		[0x1ad33b9c,0],
		[0x1ad33ba0,0],
		[0x1ad33ba4,0],
		[0x1ad33bb0,1],
		[0x1ad33bb4,0],
		[0x1ad33bd0,0],
		[0x1ad33bd4,0],
		[0x1ad33be0,0],
		[0x1ad33be4,0],
		[0x1ad33bec,0],
		[0x1ad33bf8,0],
		[0x1ad33bfc,0],
		[0, 0]
]).
string_val([
		[0, 0]
]).
/* This file contains recursive predicates */
:- use_module(library(clpfd)).
:- use_module(reif).
:- style_check(-singleton).

isTrue([X, Y]):-
    X == 49.

isTrue([X|Tail]):-
    isTrue(Tail).

log(File_name, Name, Addr, Base):-
    Offset #= Addr - Base,
    open(File_name, append, Stream),
    write(Stream, Name),
    write(Stream, ':'),
    write(Stream, Offset),
    nl(Stream),
    close(Stream).

possible_task_struct(Base_addr) :-
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM2_addr, Pid_addr, Tgid_addr, Real_parent_addr, Parent_addr , Child_addr, 
           Group_leader_addr, Thread_group_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    %MM2_addr #> Base_addr + 1000,
    Tasks_addr #> MM2_addr - 100,
    %FS_struct_addr #< Base_addr + 4000,
    Tgid_addr #= Pid_addr + 4,
    Real_parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr - 8,
    Child_addr #= Parent_addr + 8,
    %FIXME This may be too strong
    Group_leader_addr #=< Child_addr +32,
    %Comm_addr #= Base_addr + 1656,
    %Tasks_addr #= Base_addr + 1072,
    %FS_struct_addr #= Base_addr + 2640,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    % make query after labeling
    MM2_val #> 0,
    integer(MM2_val),
    
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val,  Comm_addr, Comm_val ]),

    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_parent_addr, Real_parent_val, Group_leader_addr, Group_leader_val]),
    Real_parent_val #> 0,
    Group_leader_val #> 0,
    query_ts(Real_parent_val, Comm_offset, Tasks_offset),
    query_ts(Group_leader_val, Comm_offset, Tasks_offset),

    labeling([enum], [Cred_addr, Cred_val]),
    Cred_val #> 0,
    query_cred(Cred_val),

    labeling([enum], [FS_struct_addr, FS_struct_val]),
    FS_struct_val #> 0,
    %query_fs_struct(FS_struct_val),



    get_time(End),
    Time_past is End - Current,
    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    log("profile.txt", "tasks", Tasks_addr, Base_addr),
    log("profile.txt", "mm_struct", MM2_addr, Base_addr),
    log("profile.txt", "comm", Comm_addr, Base_addr),
    log("profile.txt", "parent", Parent_addr, Base_addr),
    log("profile.txt", "group_leader", Group_leader_addr, Base_addr),
    log("profile.txt", "cred", Cred_addr, Base_addr),

    
    print_nl('tasks offset', Tasks_offset),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).

possible_string_pointer(Base_addr) :-
    /* Verify if this pointer points to a stirng */
    string_val(Str),
    Str_profile = [
        [Name_addr, Name_val]
    ],
    tuples_in(Str_profile, Str),
    Name_addr #= Base_addr.

query_string_pointer(Val) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "string_pointer"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_mount_struct(Base_addr, Offset) :-
    pointer(Ptr),
    Ptr_profile = ([
        [Mnt_devname_addr, Mnt_devname_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Mnt_devname_addr #= Base_addr + Offset,
    labeling([enum], [Mnt_devname_addr, Mnt_devname_val]),
    query_string_pointer(Mnt_devname_val).



possible_kernel_param(Base_addr) :-
    string_val(Str),
    Str_profile = [
        [Name_addr, Name_val]
    ],
    tuples_in(Str_profile, Str),
    Name_addr #= Base_addr.

possible_in_device(Base_addr) :-
    /* in_ifaddr remains the same across kernel versions 
       but we need this query to find ip_ptr in net_device struct
    */
    /*
        struct net_device *dev;
        int               refcnt;
        int               dead;
        struct in_ifaddr  *ifa_list;
    */
    pointer(Ptr),
    int(Int),
    Ptr_profile = ([
        [Dev_addr, Dev_val],
        [Ifa_list_addr, Ifa_list_val]
    ]),
    Int_profile = ([
        [Refcnt_addr, Refcnt_val],
        [Dead_addr, Dead_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Dead_addr #= Refcnt_addr + 4,
    chain([Dev_addr, Refcnt_addr, Dead_addr, Ifa_list_addr], #<),
    Dev_addr #= Base_addr,
    Ifa_list_addr #= Base_addr + 16,
    labeling([enum], [Ifa_list_addr, Ifa_list_val]),

    process_create(path('python'),
                    ['subquery.py', Ifa_list_val, "in_ifaddr"],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_in_ifaddr(Base_addr) :-
    /* in_ifaddr remains the same across kernel versions */
    pointer(Ptr),
    Ptr_profile = ([
        [Hash_addr, Hash_val],
        [Ifa_next_addr, Ifa_next_val],
        [Ifa_dev_addr, Ifa_dev_val],
        [Rcu_head_addr, Rcu_head_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([Hash_addr, Ifa_next_addr, Ifa_dev_addr, Rcu_head_addr], #<),
    Hash_addr #= Base_addr,
    Ifa_next_addr #= Hash_addr + 16,
    Ifa_dev_addr #= Ifa_next_addr + 8,
    Rcu_head_addr #= Ifa_dev_addr + 8,
    labeling([enum], [Hash_addr, Ifa_next_addr, Ifa_dev_addr, Rcu_head_addr]).



possible_mm_struct(Current_addr) :- 
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    % TODO: ADD vm_area_struct *mmap
    Ptr_profile = [
        [Mmap_addr, Mmap_val],
        [Pgd_addr, Pgd_val]  
    ],
    Ulong_profile = [
        [Mmap_base_addr, Mmap_base_val],
        [Mmap_legacy_base_addr, Mmap_legacy_base_val],
        [Task_size_addr, Task_size_val],
        [High_vm_end_addr, High_vm_end_val],
        [Start_brk_addr, Start_brk_val],
        [Brk_addr, Brk_val],
        [Start_stack_addr, Start_stack_val],
        [ARG_start_addr, ARG_start_val]
    ],
    Mmap_addr #= Current_addr,


    Mmap_base_addr #> Mmap_addr,
    %FIXME mmap_base need more value constraint, because we removed mmap_legacy_base and highest_vm_end.
    Mmap_base_val #> 0x7f0000000000,
    %FIXME in old linux version, e.g., there is no mmap_legacy_base and highest_vm_enb
    %chain([Mmap_base_addr, Mmap_legacy_base_addr, Task_size_addr, High_vm_end_addr, Pgd_addr], #<),
    chain([Mmap_base_addr, Task_size_addr, Pgd_addr], #<),

    %FIXME: This rule may be too strong
    %High_vm_end_addr #= Mmap_base_addr + 24, 
    Pgd_addr #> Task_size_addr,
    Pgd_addr #=< Task_size_addr + 40,
    %FIXME: This rule may not be true for other mm_struct.
    Task_size_val #>= 0x7ffffffff000,

    %Mmap_base_addr #= Current_addr + 40,
    %Mmap_legacy_base_addr #= Current_addr + 40,
    %Task_size_addr #= Current_addr + 48,
    %High_vm_end_addr #= Current_addr + 72,

    Start_brk_addr #> Pgd_addr,
    Start_stack_val #> 0x7ff000000000,
    % TODO: Convert this to index comparison. 
    ARG_start_addr #< Current_addr + 500,
    chain([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr], #<),
    ARG_start_addr #= Start_brk_addr + 24,
    Brk_val #< 0x7ff000000000,
    ARG_start_val #> 0x7ff000000000,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),


    labeling([enum], [Mmap_addr, Mmap_val, Mmap_base_addr, Pgd_addr, Pgd_val]),
    Mmap_val #> 0,
    Pgd_val #> 0,
    
    process_create(path('python'),
                    ['subquery.py', Mmap_val, "vm_area_struct", 2],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    label([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr]),
    statistics(real_time, [End|_]),

    log("./profile/mm_struct", "mmap", Mmap_addr, Current_addr),
    log("./profile/mm_struct", "mmap_base", Mmap_base_addr, Current_addr),
    log("./profile/mm_struct", "pgd", Pgd_addr, Current_addr),
    log("./profile/mm_struct", "start_brk", Start_brk_addr, Current_addr),
    log("./profile/mm_struct", "brk", Brk_addr, Current_addr),
    log("./profile/mm_struct", "start_stack", Start_stack_addr, Current_addr),
    log("./profile/mm_struct", "arg_start", ARG_start_addr, Current_addr),
    log("./profile/mm_struct", "mm_struct", End, Start).


possible_vm_area_struct(Base_addr, Level) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [VM_next_addr, VM_next_val],
        [VM_file_addr, VM_file_val]
    ],
    Ulong_profile = [
        [VM_start_addr, VM_start_val],
        [VM_end_addr, VM_end_val],
        [VM_flag_addr, VM_flag_val]
        /*VM_pgoff is 0, and we do not consider 0 as ulong*/
        %[VM_pgoff_addr, VM_pgoff_val]
    ],
    VM_start_addr #>= Base_addr,
    chain([VM_start_addr, VM_end_addr, VM_next_addr, VM_flag_addr, VM_file_addr], #<),
    VM_end_addr #= VM_start_addr + 8,
    VM_next_addr #= VM_end_addr + 8,
    VM_next_addr #< Base_addr + 32,
    VM_file_addr #< Base_addr + 180,
    VM_pgoff_addr #= VM_file_addr - 8,
    VM_flag_val #< 0x88888888,
    VM_file_addr #= Base_addr + 160,

    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    %FIXME: VM_flag may need value constraints.

    label([VM_next_addr, VM_next_val]),
    /* vm_file maybe zero! */
    labeling([enum], [VM_start_addr, VM_end_addr, VM_flag_addr, VM_pgoff_addr, VM_file_addr, VM_file_val]),
    
    VM_file_val #> 0,
    /*
    process_create(path('python'),
                ['subquery.py', VM_file_val, "vm_file"],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    statistics(real_time, [End|_]),
    */

    log("./profile/vm_area_struct", "vm_start", VM_start_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_end", VM_end_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_next", VM_next_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_flag", VM_flag_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_pgoff", VM_pgoff_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_file", VM_file_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_area_struct", End, Start).

check_vm_area_struct(Base_addr, Level) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "vm_area_struct", Level],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vm_file(Base_addr) :-
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [Vfs_mount_addr, Vfs_mount_val],
        [Dentry_addr, Dentry_val],
        [F_op_addr, F_op_val]
    ],
    tuples_in(Ptr_profile, Ptr),
    Vfs_mount_addr #> Base_addr,
    Dentry_addr #= Vfs_mount_addr + 8,
    Dentry_addr #< Base_addr + 40,
    Vfs_mount_val #> 0,
    Dentry_val #> 0,
    F_op_addr #= Base_addr + 40, 
    F_op_val #> 0,
    chain([Vfs_mount_addr, Dentry_addr, F_op_addr], #<),
    labeling([enum], [Vfs_mount_val, Dentry_val, F_op_addr, F_op_val]),


    process_create(path('python'),
                    ['subquery.py', Vfs_mount_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    /*
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/
    

    %query_file_operation(F_op_addr),

    log("./profile/file", "vfs_mount", Vfs_mount_addr, Base_addr),
    log("./profile/file", "dentry", Dentry_addr, Base_addr),
    log("./profile/file", "f_op", F_op_addr, Base_addr).



query_file_operation(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result).

possible_name_pointer(Val, Name_offset) :-
    /* The value at val+name_offset is a string pointer */
    current_predicate(pointer/1),
    pointer(Ptr),
    Ptr_profile = ([
        [Name_addr, Name_val]
    ]),
    Name_addr #= Val + Name_offset,
    tuples_in(Ptr_profile, Ptr),
    labeling([enum], [Name_addr, Name_val]),
    query_string_pointer(Name_val).

possible_vfs_mount(Base_addr) :-
    pointer(Ptr),
    int(Int),
    Ptr_profile = [
        [Dentry_addr, Dentry_val],
        [Mnt_sb_addr, Mnt_sb_val]
    ],
    Int_profile = [
        [Mnt_flags_addr, Mnt_flags_val]
    ],
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Dentry_addr #= Base_addr,
    Dentry_val #> 0,
    Mnt_flags_addr #= Dentry_addr + 16,
    Mnt_flags_val #>= 0,
    Mnt_sb_val #> 0,
    chain([Dentry_addr, Mnt_sb_addr, Mnt_flags_addr], #<),
    label([Dentry_addr, Dentry_val, Mnt_flags_addr, Mnt_flags_val]).
 
possible_dentry(Base_addr) :-
    /*
        struct dentry *d_parent;
        struct qstr d_name -> char *name; it's a name pointer
        struct inode *d_inode;
        unsigned char d_iname[LEN];
        const struct dentry_operations *d_op;
        struct list_head d_child;
        struct list_head d_subdirs;
        union {
	        struct hlist_node d_alias;
	        struct rcu_head d_rcu;
        } d_u;
    */
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    string_val(Str),
    Ptr_profile = [
        [Dparent_addr, Dparent_val],
        [Dname_addr, Dname_val],
        [D_inode_addr, D_inode_val],
        [D_op_addr, D_op_val],
        [Dchild_addr, Dchild_val],
        [D_subdirs_addr, D_subdirs_val]
    ],
    Str_profile = [
        [D_iname_addr, D_iname_val]
    ],
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    Dparent_addr #> Base_addr,
    chain([Dparent_addr, Dname_addr, D_inode_addr, D_iname_addr, 
            D_op_addr, Dchild_addr, D_subdirs_addr], #<),
    D_subdirs_addr #= Dchild_addr + 16,
    D_subdirs_addr #< Base_addr + 200,
    Dparent_val #> 0,
    labeling([enum], [Dname_addr, Dname_val]),
    query_string_pointer(Dname_val),
    labeling([enum], [D_iname_addr, D_iname_val]),
    D_iname_offset #= D_iname_addr - Base_addr,
    Dname_offset #= Dname_addr - Base_addr,
    labeling([enum], [Dparent_addr, Dparent_val]),
    Parent_dname #= Dparent_val + Dname_offset,
    process_create(path('python'),
                    ['subquery.py', Parent_dname, "name_pointer", Dname_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    %labeling([enum], [D_inode_addr, D_inode_val]),
    %query_inode(D_inode_val),

    labeling([enum], [Dchild_addr, Dchild_val]),
    Dchild_offset #= Dchild_addr - Base_addr,
    Dchild_init #= Dchild_val - Dchild_offset,
    query_name_pointer(Dchild_init, Dname_offset),

    /* This can be hardcoded as d_child_addr + 16 */
    labeling([enum], [D_subdirs_addr, D_subdirs_val]),
    Dsubdirs_offset #= D_subdirs_addr - Base_addr,
    D_subdirs_init #= D_subdirs_val - Dsubdirs_offset,
    query_name_pointer(D_subdirs_init, Dname_offset),

    statistics(real_time, [End|_]),

    log("./profile/dentry", "parent", Dparent_addr, Base_addr),
    log("./profile/dentry", "inode", D_inode_val, Base_addr),
    log("./profile/dentry", "d_iname", D_iname_addr, Base_addr),
    log("./profile/dentry", "dchild", Dchild_addr, Base_addr),
    log("./profile/dentry", "d_subdirs", D_subdirs_addr, Base_addr),
    log("./profile/dentry", "dentry", End, Start).

query_inode(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_inode(Base_addr) :-
    /*
        struct inode_operations *i_op;
        struct super_block      *i_sb;
        struct address_space    *i_mapping;
    */
    statistics(real_time, [Start|_]),

    pointer(Ptr),
    long(Ulg),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [I_op_addr, I_op_val],
        [I_sb_addr, I_sb_val],
        [I_mapping_addr, I_mapping_val],
        [I_fop_addr, I_fop_val]
    ]),
    Ulong_profile = ([
        /* i_mode is actually not long type. */
        [I_mode_addr, I_mode_val],
        [I_ino_addr, I_ino_val],
        [I_size_addr, I_size_val],
        [I_atime_addr, I_atime_val],
        [_I_atime_addr, _I_atime_val],
        [I_mtime_addr, I_mtime_val],
        [I_ctime_addr, I_ctime_val],
        [_I_ctime_addr, _I_ctime_val]
    ]),
    Int_profile = ([
        [I_uid_addr, I_uid_val],
        [I_gid_addr, I_gid_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    tuples_in(Int_profile, Int),

    chain([I_mode_addr, I_uid_addr, I_gid_addr, I_op_addr, I_sb_addr, I_mapping_addr, I_ino_addr,
           I_size_addr, I_atime_addr, _I_atime_addr, I_mtime_addr, I_ctime_addr, _I_ctime_addr, I_fop_addr], #<),

    I_mode_addr #= Base_addr,
    I_mode_val #> 0,
    I_gid_addr #= I_mode_addr + 8,
    %I_op_addr #= Base_addr + 32,
    I_op_addr #=< Base_addr + 32,
    I_op_val #> 0,
    labeling([enum], [I_op_addr, I_op_val]),
    query_inode_operations(I_op_val),

    I_sb_addr #= I_op_addr + 8,
    I_mapping_addr #= I_sb_addr + 8,
    I_atime_addr #= I_size_addr + 8,
    I_mtime_addr #= I_atime_addr + 16,
    I_ctime_addr #= I_mtime_addr + 16,
    _I_ctime_addr #= I_ctime_addr + 8,
    I_size_val #> 0,
    I_atime_val #> 4096,
    I_mtime_val #> 4096,
    I_ctime_val #> 4096,
    I_fop_addr #< Base_addr + 400,
    labeling([enum], [I_sb_addr, I_mapping_addr, I_atime_addr, I_mtime_addr, I_ctime_addr]),


    labeling([enum], [I_fop_addr, I_fop_val]),
    I_fop_val #> 0,
    query_inode_operations(I_fop_val),
    statistics(real_time, [End|_]),


    log("./profile/inode", "I_mode_addr", I_mode_addr, Base_addr),
    log("./profile/inode", "I_uid_addr", I_uid_addr, Base_addr),
    log("./profile/inode", "I_gid_addr", I_gid_addr, Base_addr),
    log("./profile/inode", "I_op_addr", I_op_addr, Base_addr),
    log("./profile/inode", "I_sb_addr", I_sb_addr, Base_addr),
    log("./profile/inode", "I_mapping_addr", I_mapping_addr, Base_addr),
    log("./profile/inode", "I_size_addr", I_size_addr, Base_addr),
    log("./profile/inode", "I_atime_addr", I_atime_addr, Base_addr),
    log("./profile/inode", "I_mtime_addr", I_mtime_addr, Base_addr),
    log("./profile/inode", "I_ctime_addr", I_ctime_addr, Base_addr),
    log("./profile/inode", "I_fop_addr", I_fop_addr, Base_addr),
    log("./profile/inode", "inode", End, Start).


query_inode_operations(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_name_pointer(Base_addr, Offset) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "name_pointer", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_inode_operations(Base_addr) :-
    /* a bunch of function pointers. */
    pointer(Ptr),
    Ptr_profile = ([
        [_L1_addr, _L1_val],
        [_L2_addr, _L2_val],
        [_L3_addr, _L3_val],
        [_L4_addr, _L4_val],
        [_L5_addr, _L5_val],
        [_L6_addr, _L6_val],
        [_L7_addr, _L7_val],
        [_L8_addr, _L8_val],
        [_L9_addr, _L9_val],
        [_L10_addr, _L10_val],
        [_L11_addr, _L11_val],
        [_L12_addr, _L12_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([_L1_addr, _L2_addr, _L3_addr, _L4_addr, _L5_addr, _L6_addr, _L7_addr,
           _L8_addr, _L9_addr, _L10_addr, _L11_addr, _L12_addr], #<),
    _L1_addr #= Base_addr,
    _L12_addr #= Base_addr + 88.




possible_nothing() :-

    %log("profile.txt", "dentry addr", Base_addr, 0),
    Dparent_addr #> Base_addr,
    Dname_addr #> 0,
    Dname_addr #< Base_addr + 200,
    %Dname_addr #= Base_addr + 160,
    %FIXME This child rule is not applicable for old kernel version. 
    %chain([Dparent_addr, Dname_addr, Dchild_addr], #<),
    %Dchild_addr #< Base_addr + 200,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    labeling([enum], [Dparent_addr, Dparent_val, Dname_addr, Dchild_addr, Dchild_val]),
    Dname_offset #= Dname_addr - Base_addr,
    integer(Dname_offset),
    Dparent_val #> 0,
    
    %FIXME d_parent may not be initialized
    /*process_create(path('python'),
                ['subquery.py', Dparent_val, "d_entry", Dname_offset],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/

    %FIXME: may need to find another way for all list_head. 
    /*Dchild_offset #= Dchild_addr - Base_addr,
    integer(Dchild_offset),
    Dchild_base #= Dchild_val - Dchild_offset,
    integer(Dchild_base),
    Dchild_base #> 0,
    process_create(path('python'),
                ['subquery.py', Dchild_base, "d_entry", Dname_offset],
                [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    statistics(real_time, [End|_]).
/*
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    log("profile.txt", "d_parent", Dparent_addr, Base_addr),
    log("profile.txt", "d_child", Dchild_addr, Base_addr),
    log("profile.txt", "dentry time", End, Start).
*/
possible_d_entry(Base_addr, Dname_offset) :-
    current_predicate(string_val/1),
    string_val(Str),
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    Dname_addr #= Base_addr + Dname_offset,
    tuples_in(Str_profile, Str),
    label([Dname_addr]).

possible_list_head(Tasks_val, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_val, Tasks_addr]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],
    Comm_addr #= Tasks_val - Tasks_offset + Comm_offset,
    Tasks_addr #\= Tasks_val,
    tuples_in(Str_profile, Str),
    tuples_in(Ptr_profile, Ptr),
    label([Comm_addr]).

possible_ts(Base_addr, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_addr, Tasks_val]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],

    Comm_addr #= Base_addr + Comm_offset,
    Tasks_addr #= Base_addr + Tasks_offset,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),

    label([Tasks_val]),
    
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "list_head", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_cred(Base_addr) :-
    statistics(real_time, [Start|_]),

    int(Int),
    long(Ulg),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3],
        [Addr4, Val4],
        [Addr5, Val5],
        [Addr6, Val6],
        [Addr7, Val7],
        [Addr8, Val8],
        [Addr9, Val9]
    ],
    %FIXME For now, this rule is hard-coded because we do not consider 0 as a unsign long number. 
    %So that for cred whos val10 is 0, this rule does not apply.
    /*Ulong_profile = [
        [Addr10, Val10],
        [Addr11, Val11]
    ],*/
    Addr1 #> Base_addr,
    %chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9, Addr10, Addr11], #<),
    chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9], #<),
    Addr1 #= Base_addr + 4,
    Addr9 #= Addr1 + 32,
    %Addr11 #< Base_addr + 120,
    tuples_in(Int_profile, Int),
    %tuples_in(Ulong_profile, Ulg),
    statistics(real_time, [End|_]),
    labeling([enum], [Addr1, Addr2, Addr5, Addr6]),
    log("./profile/cred", "cred", End, Start),
    log('./profile/cred', "uid", Addr1, Base_addr),
    log('./profile/cred', "gid", Addr2, Base_addr),
    log('./profile/cred', "euid", Addr5, Base_addr),
    log('./profile/cred', "egid", Addr6, Base_addr).

possible_fs_struct(Base_addr) :-
    statistics(real_time, [Start|_]),
    int(Int),
    pointer(Ptr),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3]
    ],
    Ptr_profile = [
        [Root_addr, Root_val],
        [PWD_addr, PWD_val]
    ],
    Addr1 #>= Base_addr,
    chain([Addr1, Addr2, Addr3, Root_addr, PWD_addr], #<),
    PWD_addr #= Root_addr + 16,
    PWD_addr #< Base_addr + 50,
    tuples_in(Int_profile, Int),
    tuples_in(Ptr_profile, Ptr),
    Root_val #> 0,
    PWD_val #> 0,
    label([Root_addr, Root_val]),
    /* some times the dentry fields are zero, use vfs_mount instead */
    process_create(path('python'),
                    ['subquery.py', Root_val, "vfs_mount"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    label([PWD_addr, PWD_val]),
    process_create(path('python'),
                    ['subquery.py', PWD_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    statistics(real_time, [End|_]),
    log("profile.txt", "fs time", End, Start),
    log('profile.txt', "Root", Root_addr, Base_addr),
    log('profile.txt', "pwd", PWD_addr, Base_addr),
    log('profile.txt', "fs_struct", End, Start).

possible_mount(Base_addr) :-
    /* struct hlist_head mnt_hash;
       struct mount *mnt_parent; 
       struct vfsmount mnt;
       struct list_head mnt_mounts;
       struct list_head mnt_child;
       struct list_head mnt_instance;
       const char *mnt_devname;
       struct list_head mnt_list;
    */
    statistics(real_time, [Start|_]),
    %get_time(Current),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Mnt_hash_addr, Mnt_hash_val],
        [Mnt_parent_addr, Mnt_parent_val],
        [Vfsmount_addr, Vfsmount_val],
        [Mnt_child_addr, Mnt_child_val],
        [Mnt_devname_addr, Mnt_devname_val],
        [Mnt_list_addr, Mnt_list_val]
    ]),
    Int_profile = ([
        [Mnt_flags_addr, Mnt_flags_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    /* Order Invariants */
    chain([Mnt_hash_addr, Mnt_parent_addr, Vfsmount_addr, Mnt_flags_addr,
            Mnt_child_addr, Mnt_devname_addr, Mnt_list_addr], #<),
    Mnt_hash_addr #= Base_addr,
    /* mnt_hash_addr is a list_head */
    Mnt_parent_addr #> Base_addr + 8,
    Mnt_list_addr - Base_addr #< 200,
    labeling([enum], [Mnt_devname_addr, Mnt_devname_val]),
    query_string_pointer(Mnt_devname_val),
    Mnt_devname_offset #= Mnt_devname_addr - Base_addr,
    /* the offset from mnt_mounts to mnt_list remains the same, so it's safe to use fixed offsets. */
    Mnt_child_addr #= Mnt_devname_addr - 32,
    Mnt_list_addr #= Mnt_devname_addr + 8,
    Mnt_flags_addr #= Vfsmount_addr + 16,
    labeling([enum], [Mnt_child_addr, Mnt_list_addr, Vfsmount_addr, Vfsmount_val]),
    /* Seems unnecessary 
    Mnt_list_offset #= Mnt_list_addr - Base_addr,
    Mnt_list #= Mnt_list_val - Mnt_list_offset,
    Mnt_list #> 0,
    query_mount_struct(Mnt_list, Mnt_devname_offset),
    */
    Vfsmount_val #>= 0,
    /* Here we can infer layout of dentry structure 
       Maybe need to infer using another dentry, somehow it may not be initialized. 
    */
    Vfsmount_addr #> 0,
    %query_dentry(Vfsmount_addr),

    labeling([enum], [Mnt_parent_addr, Mnt_parent_val]),
    /* To verify another mount struct, only one-level query, so it does not direct call query_mount recursively */
    
    query_mount_struct(Mnt_parent_val, Mnt_devname_offset),
    

    %get_time(End),
    %Time_past is End - Current,
    statistics(real_time, [End|_]),
    log("./profile/mount", "mnt_hash", Mnt_hash_addr, Base_addr),
    log("./profile/mount", "mnt_parent", Mnt_parent_addr, Base_addr),
    log("./profile/mount", "mnt_child", Mnt_child_addr, Base_addr),
    log("./profile/mount", "mnt_devname", Mnt_devname_addr, Base_addr),
    log("./profile/mount", "mnt_list", Mnt_list_addr, Base_addr),
    log("./profile/mount", "mount", End, Start).


possible_neigh_hash_table(Base_addr) :-
    /* neighbour **hash_buckets */
    pointer(Ptr),
    Ptr_profile = ([
        [Hash_buckest_addr, Hash_buckets_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Hash_buckest_addr #= Base_addr,
    labeling([enum], [Hash_buckest_addr, Hash_buckets_val]),
    process_create(path('python'),
                    ['subquery.py', Hash_buckets_val, "hash_buckets"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_hash_buckets(Base_addr) :-
    /* hash_buckets is an array of neighbour pointer 
       note that not all element are non-zero
    */
    pointer(Ptr),
    Ptr_profile = ([
        [Neighbour_addr, Neighbour_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Neighbour_addr #< Base_addr + 32,
    Neighbour_val #> 0,
    labeling([enum], [Neighbour_addr, Neighbour_val]),
    process_create(path('python'),
                    ['subquery.py', Neighbour_val, "neighbour"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_neighbour(Base_addr) :-
    /* net_device *dev at offset 464 */
    pointer(Ptr),
    Ptr_profile = ([
        [Dev_addr, Dev_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Dev_addr #>= Base_addr + 360,
    Dev_addr #=< Base_addr + 376,
    labeling([enum], [Dev_addr, Dev_val]),
    process_create(path('python'),
                    ['subquery.py', Dev_val, "net_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).


possible_net_device(Base_addr) :- 
    /*
        char             name[NAMSIZ];
        struct list_head dev_list;
        unsigned char    addr_len;
        unsigned int     promiscuity;
        struct in_device *ip_ptr;
    */
    statistics(real_time, [Start|_]),
    %get_time(Current),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Dev_list_addr, Dev_list_val],
        [IP_ptr_addr, IP_ptr_val]
    ]),
    Str_profile = ([
        [Name_addr, Name_val]
    ]),
    Int_profile = ([
        [Promisc_addr, Promisc_val],
        [Addr_len_addr, Addr_len_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),
    /* Hard to determine offsets for addr_len and promisc */
    chain([Name_addr, Dev_list_addr, Addr_len_addr, Promisc_addr, IP_ptr_addr], #<),
    Name_addr #>= Base_addr,
    Name_offset #= Name_addr - Base_addr,
    IP_ptr_addr #< Base_addr + 1000,
    /* dev_list offset can be hardcoded since it remains the same */
    Dev_list_addr #= Base_addr + 80,
    labeling([enum], [Name_addr, Dev_list_addr, Dev_list_val]),
    /* do not have a good constrain to narrow down ip_ptr, use its rough offset
       to reduce the search space. 
     */
    IP_ptr_addr #> Base_addr + 700,
    IP_ptr_val #> 0,
    labeling([enum], [IP_ptr_addr, IP_ptr_val]),
    query_in_device(IP_ptr_val),

    %get_time(End),
    %Time_past is End - Current,
    statistics(real_time, [End|_]),

    log("./profile/net_device", "name", Name_addr, Base_addr),
    log("./profile/net_device", "ip_ptr", IP_ptr_addr, Base_addr),
    log("./profile/net_device", "dev_list", Dev_list_addr, Base_addr),
    log("./profile/net_device", "net_device", End, Start).

query_in_device(IP_ptr_val) :-
    process_create(path('python'),
                    ['subquery.py', IP_ptr_val, "in_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).


query_mount_struct(Val, Offset) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "mount_struct", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).
