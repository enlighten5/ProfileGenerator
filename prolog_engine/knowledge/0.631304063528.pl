:- use_module(library(clpfd)).
:- style_check(-singleton).
pointer([
		[0x1f0f4800,523809920],
		[0x1f0f4808,521538400],
		[0x1f0f4818,356723040],
		[0x1f0f4850,457867264],
		[0x1f0f4878,0],
		[0x1f0f4880,521095296],
		[0x1f0f4888,521095296],
		[0x1f0f4890,0],
		[0x1f0f48a0,372250464],
		[0x1f0f48a8,309639328],
		[0x1f0f48c8,0],
		[0x1f0f48d0,0],
		[0x1f0f48f0,0],
		[0x1f0f49d8,0],
		[0x1f0f49f8,0],
		[0x1f0f4a08,0],
		[0x1f0f4a18,0],
		[0x1f0f4a28,0],
		[0x1f0f4a38,0],
		[0x1f0f4a58,0],
		[0x1f0f4a80,0],
		[0x1f0f4a88,0],
		[0x1f0f4a90,0],
		[0x1f0f4a98,0],
		[0x1f0f4aa0,0],
		[0x1f0f4aa8,0],
		[0x1f0f4ab0,0],
		[0x1f0f4ab8,0],
		[0x1f0f4ad8,0],
		[0x1f0f4ae0,372415392],
		[0x1f0f4ae8,521096064],
		[0x1f0f4af0,0],
		[0x1f0f4af8,0],
		[0x1f0f4b00,0],
		[0x1f0f4b08,0],
		[0x1f0f4b10,521095952],
		[0x1f0f4b18,521095952],
		[0x1f0f4b28,367006560],
		[0x1f0f4b30,0],
		[0x1f0f4b48,0],
		[0x1f0f4b50,0],
		[0x1f0f4b58,0],
		[0x1f0f4b60,467878400],
		[0x1f0f4b68,371525600],
		[0x1f0f4b70,520215808],
		[0x1f0f4b78,0],
		[0x1f0f4b80,0],
		[0x1f0f4b88,0],
		[0x1f0f4b90,0],
		[0x1f0f4b98,0],
		[0x1f0f4ba0,0],
		[0x1f0f4ba8,0],
		[0x1f0f4bb0,0],
		[0x1f0f4bb8,0],
		[0x1f0f4bc0,0],
		[0x1f0f4bc8,0],
		[0x1f0f4bd0,0],
		[0x1f0f4bd8,0],
		[0x1f0f4be0,0],
		[0x1f0f4be8,0],
		[0x1f0f4bf0,0],
		[0x1f0f4bf8,0],
		[0x1f0f4c00,0],
		[0x1f0f4c08,0],
		[0x1f0f4c10,0],
		[0x1f0f4c18,0],
		[0x1f0f4c20,0],
		[0x1f0f4c28,0],
		[0x1f0f4c30,0],
		[0x1f0f4c38,0],
		[0x1f0f4c40,0],
		[0x1f0f4c48,0],
		[0x1f0f4c50,0],
		[0x1f0f4c58,0],
		[0x1f0f4c60,0],
		[0x1f0f4c68,0],
		[0x1f0f4c70,0],
		[0x1f0f4c78,0],
		[0x1f0f4c80,0],
		[0x1f0f4c88,0],
		[0x1f0f4c90,0],
		[0x1f0f4c98,0],
		[0x1f0f4ca0,0],
		[0x1f0f4ca8,0],
		[0x1f0f4cb0,0],
		[0x1f0f4cb8,0],
		[0x1f0f4cc0,0],
		[0x1f0f4cc8,0],
		[0x1f0f4cd0,0],
		[0x1f0f4cd8,0],
		[0x1f0f4ce0,0],
		[0x1f0f4ce8,0],
		[0x1f0f4cf0,0],
		[0x1f0f4cf8,0],
		[0x1f0f4d00,0],
		[0x1f0f4d08,0],
		[0x1f0f4d10,0],
		[0x1f0f4d18,0],
		[0x1f0f4d20,0],
		[0x1f0f4d28,0],
		[0x1f0f4d30,0],
		[0x1f0f4d38,0],
		[0x1f0f4d40,0],
		[0x1f0f4d48,0],
		[0x1f0f4d50,0],
		[0x1f0f4d58,0],
		[0x1f0f4d60,0],
		[0x1f0f4d68,0],
		[0x1f0f4d70,0],
		[0x1f0f4d78,0],
		[0x1f0f4d80,0],
		[0x1f0f4d88,0],
		[0x1f0f4d90,0],
		[0x1f0f4d98,0],
		[0x1f0f4da0,0],
		[0x1f0f4da8,0],
		[0x1f0f4db0,0],
		[0x1f0f4db8,0],
		[0x1f0f4dc0,0],
		[0x1f0f4dc8,0],
		[0x1f0f4dd0,0],
		[0x1f0f4dd8,0],
		[0x1f0f4de0,0],
		[0x1f0f4de8,0],
		[0x1f0f4df0,0],
		[0x1f0f4df8,0],
		[0x1f0f4e00,0],
		[0x1f0f4e08,0],
		[0x1f0f4e10,0],
		[0x1f0f4e18,0],
		[0x1f0f4e20,0],
		[0x1f0f4e28,0],
		[0x1f0f4e30,0],
		[0x1f0f4e38,0],
		[0x1f0f4e40,0],
		[0x1f0f4e48,0],
		[0x1f0f4e50,0],
		[0x1f0f4e58,0],
		[0x1f0f4e60,0],
		[0x1f0f4e68,0],
		[0x1f0f4e70,0],
		[0x1f0f4e78,0],
		[0x1f0f4e80,0],
		[0x1f0f4e88,0],
		[0x1f0f4e90,0],
		[0x1f0f4e98,0],
		[0x1f0f4ea0,0],
		[0x1f0f4ea8,0],
		[0x1f0f4eb0,0],
		[0x1f0f4eb8,0],
		[0x1f0f4ec0,0],
		[0x1f0f4ec8,0],
		[0x1f0f4ed0,0],
		[0x1f0f4ed8,0],
		[0x1f0f4ee0,0],
		[0x1f0f4ee8,0],
		[0x1f0f4ef0,0],
		[0x1f0f4ef8,0],
		[0x1f0f4f00,0],
		[0x1f0f4f08,0],
		[0x1f0f4f10,0],
		[0x1f0f4f18,0],
		[0x1f0f4f20,0],
		[0x1f0f4f28,0],
		[0x1f0f4f30,0],
		[0x1f0f4f38,0],
		[0x1f0f4f40,0],
		[0x1f0f4f48,0],
		[0x1f0f4f50,0],
		[0x1f0f4f58,0],
		[0x1f0f4f60,0],
		[0x1f0f4f68,0],
		[0x1f0f4f70,0],
		[0x1f0f4f78,0],
		[0x1f0f4f88,0],
		[0x1f0f4f90,0],
		[0x1f0f4f98,0],
		[0x1f0f4fa0,0],
		[0x1f0f4fa8,0],
		[0x1f0f4fb0,0],
		[0x1f0f4fb8,0],
		[0x1f0f4fc0,0],
		[0x1f0f4fc8,0],
		[0x1f0f5000,333557504],
		[0x1f0f5008,322289056],
		[0x1f0f5018,356723040],
		[0x1f0f5050,322334720],
		[0x1f0f5078,0],
		[0x1f0f5080,521097344],
		[0x1f0f5088,521097344],
		[0x1f0f5090,0],
		[0x1f0f50a0,521097376],
		[0x1f0f50a8,521097376],
		[0x1f0f50c8,0],
		[0x1f0f50d0,0],
		[0x1f0f50f0,0],
		[0x1f0f51d8,0],
		[0x1f0f51f8,0],
		[0x1f0f5208,0],
		[0x1f0f5218,0],
		[0x1f0f5228,0],
		[0x1f0f5238,0],
		[0x1f0f5258,0],
		[0x1f0f5280,0],
		[0x1f0f5288,0],
		[0x1f0f5290,0],
		[0x1f0f5298,0],
		[0x1f0f52a0,0],
		[0x1f0f52a8,0],
		[0x1f0f52b0,0],
		[0x1f0f52b8,0],
		[0x1f0f52d0,0],
		[0x1f0f52d8,0],
		[0x1f0f52e0,372415392],
		[0x1f0f52e8,521098112],
		[0x1f0f52f0,0],
		[0x1f0f52f8,0],
		[0x1f0f5300,0],
		[0x1f0f5308,0],
		[0x1f0f5310,521098000],
		[0x1f0f5318,521098000],
		[0x1f0f5328,367006560],
		[0x1f0f5330,0],
		[0x1f0f5348,0],
		[0x1f0f5350,0],
		[0x1f0f5358,0],
		[0x1f0f5360,322257408],
		[0x1f0f5368,371525600],
		[0x1f0f5370,521192192],
		[0x1f0f5378,0],
		[0x1f0f5380,0],
		[0x1f0f5388,0],
		[0x1f0f5390,0],
		[0x1f0f5398,0],
		[0x1f0f53a0,0],
		[0x1f0f53a8,0],
		[0x1f0f53b0,0],
		[0x1f0f53b8,0],
		[0x1f0f53c0,0],
		[0x1f0f53c8,0],
		[0x1f0f53d0,0],
		[0x1f0f53d8,0],
		[0x1f0f53e0,0],
		[0x1f0f53e8,0],
		[0x1f0f53f0,0],
		[0x1f0f53f8,0],
		[0x1f0f5400,0],
		[0x1f0f5408,0],
		[0x1f0f5410,0],
		[0x1f0f5418,0],
		[0x1f0f5420,0],
		[0x1f0f5428,0],
		[0x1f0f5430,0],
		[0x1f0f5438,0],
		[0x1f0f5440,0],
		[0x1f0f5448,0],
		[0x1f0f5450,0],
		[0x1f0f5458,0],
		[0x1f0f5460,0],
		[0x1f0f5468,0],
		[0x1f0f5470,0],
		[0x1f0f5478,0],
		[0x1f0f5480,0],
		[0x1f0f5488,0],
		[0x1f0f5490,0],
		[0x1f0f5498,0],
		[0x1f0f54a0,0],
		[0x1f0f54a8,0],
		[0x1f0f54b0,0],
		[0x1f0f54b8,0],
		[0x1f0f54c0,0],
		[0x1f0f54c8,0],
		[0x1f0f54d0,0],
		[0x1f0f54d8,0],
		[0x1f0f54e0,0],
		[0x1f0f54e8,0],
		[0x1f0f54f0,0],
		[0x1f0f54f8,0],
		[0x1f0f5500,0],
		[0x1f0f5508,0],
		[0x1f0f5510,0],
		[0x1f0f5518,0],
		[0x1f0f5520,0],
		[0x1f0f5528,0],
		[0x1f0f5530,0],
		[0x1f0f5538,0],
		[0x1f0f5540,0],
		[0x1f0f5548,0],
		[0x1f0f5550,0],
		[0x1f0f5558,0],
		[0x1f0f5560,0],
		[0x1f0f5568,0],
		[0x1f0f5570,0],
		[0x1f0f5578,0],
		[0x1f0f5580,0],
		[0x1f0f5588,0],
		[0x1f0f5590,0],
		[0x1f0f5598,0],
		[0x1f0f55a0,0],
		[0x1f0f55a8,0],
		[0x1f0f55b0,0],
		[0x1f0f55b8,0],
		[0x1f0f55c0,0],
		[0x1f0f55c8,0],
		[0x1f0f55d0,0],
		[0x1f0f55d8,0],
		[0x1f0f55e0,0],
		[0x1f0f55e8,0],
		[0x1f0f55f0,0],
		[0x1f0f55f8,0],
		[0x1f0f5600,0],
		[0x1f0f5608,0],
		[0x1f0f5610,0],
		[0x1f0f5618,0],
		[0x1f0f5620,0],
		[0x1f0f5628,0],
		[0x1f0f5630,0],
		[0x1f0f5638,0],
		[0x1f0f5640,0],
		[0x1f0f5648,0],
		[0x1f0f5650,0],
		[0x1f0f5658,0],
		[0x1f0f5660,0],
		[0x1f0f5668,0],
		[0x1f0f5670,0],
		[0x1f0f5678,0],
		[0x1f0f5680,0],
		[0x1f0f5688,0],
		[0x1f0f5690,0],
		[0x1f0f5698,0],
		[0x1f0f56a0,0],
		[0x1f0f56a8,0],
		[0x1f0f56b0,0],
		[0x1f0f56b8,0],
		[0x1f0f56c0,0],
		[0x1f0f56c8,0],
		[0x1f0f56d0,0],
		[0x1f0f56d8,0],
		[0x1f0f56e0,0],
		[0x1f0f56e8,0],
		[0x1f0f56f0,0],
		[0x1f0f56f8,0],
		[0x1f0f5700,0],
		[0x1f0f5708,0],
		[0x1f0f5710,0],
		[0x1f0f5718,0],
		[0x1f0f5720,0],
		[0x1f0f5728,0],
		[0x1f0f5730,0],
		[0x1f0f5738,0],
		[0x1f0f5740,0],
		[0x1f0f5748,0],
		[0x1f0f5750,0],
		[0x1f0f5758,0],
		[0x1f0f5760,0],
		[0x1f0f5768,0],
		[0x1f0f5770,0],
		[0x1f0f5778,0],
		[0x1f0f5788,0],
		[0x1f0f5790,0],
		[0x1f0f5798,0],
		[0x1f0f57a0,0],
		[0x1f0f57a8,0],
		[0x1f0f57b0,0],
		[0x1f0f57b8,0],
		[0x1f0f57c0,0],
		[0x1f0f57c8,0],
		[0, 0]
]).
unknown([
		[0x1f0f4fd0,14757395258967641292],
		[0x1f0f4fd8,14757395258967641292],
		[0x1f0f4fe0,14757395258967641292],
		[0x1f0f4fe8,14757395258967641292],
		[0x1f0f4ff0,14757395258967641292],
		[0x1f0f4ff8,14757395258967641292],
		[0x1f0f57d0,14757395258967641292],
		[0x1f0f57d8,14757395258967641292],
		[0x1f0f57e0,14757395258967641292],
		[0x1f0f57e8,14757395258967641292],
		[0x1f0f57f0,14757395258967641292],
		[0x1f0f57f8,14757395258967641292],
		[0, 0]
]).
long([
		[0x1f0f4810,43],
		[0x1f0f4820,140188951965696],
		[0x1f0f4828,47443843203072],
		[0x1f0f4830,4159811584],
		[0x1f0f4838,1432584192],
		[0x1f0f4840,140737488351232],
		[0x1f0f4848,140737141936128],
		[0x1f0f4858,4294967297],
		[0x1f0f4860,25],
		[0x1f0f4868,4],
		[0x1f0f4870,87],
		[0x1f0f4898,1],
		[0x1f0f48b0,1439],
		[0x1f0f48b8,62632],
		[0x1f0f48c0,46248],
		[0x1f0f48d8,4511],
		[0x1f0f48e0,1266],
		[0x1f0f48e8,33],
		[0x1f0f48f8,94837724053504],
		[0x1f0f4900,94837725478400],
		[0x1f0f4908,94837725486208],
		[0x1f0f4910,94837725632232],
		[0x1f0f4918,94837745893376],
		[0x1f0f4920,94837747044352],
		[0x1f0f4928,140737140768512],
		[0x1f0f4930,140737140772670],
		[0x1f0f4938,140737140772688],
		[0x1f0f4940,140737140772688],
		[0x1f0f4948,140737140772845],
		[0x1f0f4950,33],
		[0x1f0f4958,140737141927936],
		[0x1f0f4960,16],
		[0x1f0f4968,126548989],
		[0x1f0f4970,6],
		[0x1f0f4978,4096],
		[0x1f0f4980,17],
		[0x1f0f4988,100],
		[0x1f0f4990,3],
		[0x1f0f4998,94837724053568],
		[0x1f0f49a0,4],
		[0x1f0f49a8,56],
		[0x1f0f49b0,5],
		[0x1f0f49b8,10],
		[0x1f0f49c0,7],
		[0x1f0f49c8,140188949704704],
		[0x1f0f49d0,8],
		[0x1f0f49e0,9],
		[0x1f0f49e8,94837724249744],
		[0x1f0f49f0,11],
		[0x1f0f4a00,12],
		[0x1f0f4a10,13],
		[0x1f0f4a20,14],
		[0x1f0f4a30,23],
		[0x1f0f4a40,25],
		[0x1f0f4a48,140737140768953],
		[0x1f0f4a50,26],
		[0x1f0f4a60,31],
		[0x1f0f4a68,140737140772845],
		[0x1f0f4a70,15],
		[0x1f0f4a78,140737140768969],
		[0x1f0f4ac0,913],
		[0x1f0f4ac8,288],
		[0x1f0f4ad0,129],
		[0x1f0f4b20,140737141927936],
		[0x1f0f4b40,205],
		[0x1f0f4f80,4294901031],
		[0x1f0f5010,16],
		[0x1f0f5020,140737354133504],
		[0x1f0f5028,46912496119808],
		[0x1f0f5030,4160741376],
		[0x1f0f5038,1431654400],
		[0x1f0f5040,140737488351232],
		[0x1f0f5048,140737488351232],
		[0x1f0f5058,4294967297],
		[0x1f0f5060,12],
		[0x1f0f5068,2],
		[0x1f0f5070,35],
		[0x1f0f5098,1],
		[0x1f0f50b0,878],
		[0x1f0f50b8,4032],
		[0x1f0f50c0,4031],
		[0x1f0f50d8,244],
		[0x1f0f50e0,1184],
		[0x1f0f50e8,33],
		[0x1f0f50f8,93824992231424],
		[0x1f0f5100,93824992704268],
		[0x1f0f5108,93824994801760],
		[0x1f0f5110,93824994813800],
		[0x1f0f5118,93824994856960],
		[0x1f0f5120,93824995123200],
		[0x1f0f5128,140737488350368],
		[0x1f0f5130,140737488350876],
		[0x1f0f5138,140737488351108],
		[0x1f0f5140,140737488351108],
		[0x1f0f5148,140737488351209],
		[0x1f0f5150,33],
		[0x1f0f5158,140737354113024],
		[0x1f0f5160,16],
		[0x1f0f5168,126548989],
		[0x1f0f5170,6],
		[0x1f0f5178,4096],
		[0x1f0f5180,17],
		[0x1f0f5188,100],
		[0x1f0f5190,3],
		[0x1f0f5198,93824992231488],
		[0x1f0f51a0,4],
		[0x1f0f51a8,56],
		[0x1f0f51b0,5],
		[0x1f0f51b8,9],
		[0x1f0f51c0,7],
		[0x1f0f51c8,140737351872512],
		[0x1f0f51d0,8],
		[0x1f0f51e0,9],
		[0x1f0f51e8,93824992281344],
		[0x1f0f51f0,11],
		[0x1f0f5200,12],
		[0x1f0f5210,13],
		[0x1f0f5220,14],
		[0x1f0f5230,23],
		[0x1f0f5240,25],
		[0x1f0f5248,140737488350841],
		[0x1f0f5250,26],
		[0x1f0f5260,31],
		[0x1f0f5268,140737488351209],
		[0x1f0f5270,15],
		[0x1f0f5278,140737488350857],
		[0x1f0f52c0,674],
		[0x1f0f52c8,213],
		[0x1f0f5320,140737354113024],
		[0x1f0f5340,205],
		[0x1f0f5780,4294893796],
		[0, 0]
]).
int([
		[0x1f0f4810,43],
		[0x1f0f4814,0],
		[0x1f0f4824,32640],
		[0x1f0f482c,11046],
		[0x1f0f4834,0],
		[0x1f0f483c,0],
		[0x1f0f4858,1],
		[0x1f0f485c,1],
		[0x1f0f4860,25],
		[0x1f0f4864,0],
		[0x1f0f4868,4],
		[0x1f0f486c,0],
		[0x1f0f4870,87],
		[0x1f0f4874,0],
		[0x1f0f4878,0],
		[0x1f0f487c,0],
		[0x1f0f4890,0],
		[0x1f0f4894,0],
		[0x1f0f4898,1],
		[0x1f0f489c,0],
		[0x1f0f48b0,1439],
		[0x1f0f48b4,0],
		[0x1f0f48bc,0],
		[0x1f0f48c4,0],
		[0x1f0f48c8,0],
		[0x1f0f48cc,0],
		[0x1f0f48d0,0],
		[0x1f0f48d4,0],
		[0x1f0f48d8,4511],
		[0x1f0f48dc,0],
		[0x1f0f48e0,1266],
		[0x1f0f48e4,0],
		[0x1f0f48e8,33],
		[0x1f0f48ec,0],
		[0x1f0f48f0,0],
		[0x1f0f48f4,0],
		[0x1f0f48fc,22081],
		[0x1f0f4904,22081],
		[0x1f0f490c,22081],
		[0x1f0f4914,22081],
		[0x1f0f491c,22081],
		[0x1f0f4924,22081],
		[0x1f0f4950,33],
		[0x1f0f4954,0],
		[0x1f0f4960,16],
		[0x1f0f4964,0],
		[0x1f0f496c,0],
		[0x1f0f4970,6],
		[0x1f0f4974,0],
		[0x1f0f4978,4096],
		[0x1f0f497c,0],
		[0x1f0f4980,17],
		[0x1f0f4984,0],
		[0x1f0f4988,100],
		[0x1f0f498c,0],
		[0x1f0f4990,3],
		[0x1f0f4994,0],
		[0x1f0f499c,22081],
		[0x1f0f49a0,4],
		[0x1f0f49a4,0],
		[0x1f0f49a8,56],
		[0x1f0f49ac,0],
		[0x1f0f49b0,5],
		[0x1f0f49b4,0],
		[0x1f0f49b8,10],
		[0x1f0f49bc,0],
		[0x1f0f49c0,7],
		[0x1f0f49c4,0],
		[0x1f0f49cc,32640],
		[0x1f0f49d0,8],
		[0x1f0f49d4,0],
		[0x1f0f49d8,0],
		[0x1f0f49dc,0],
		[0x1f0f49e0,9],
		[0x1f0f49e4,0],
		[0x1f0f49ec,22081],
		[0x1f0f49f0,11],
		[0x1f0f49f4,0],
		[0x1f0f49f8,0],
		[0x1f0f49fc,0],
		[0x1f0f4a00,12],
		[0x1f0f4a04,0],
		[0x1f0f4a08,0],
		[0x1f0f4a0c,0],
		[0x1f0f4a10,13],
		[0x1f0f4a14,0],
		[0x1f0f4a18,0],
		[0x1f0f4a1c,0],
		[0x1f0f4a20,14],
		[0x1f0f4a24,0],
		[0x1f0f4a28,0],
		[0x1f0f4a2c,0],
		[0x1f0f4a30,23],
		[0x1f0f4a34,0],
		[0x1f0f4a38,0],
		[0x1f0f4a3c,0],
		[0x1f0f4a40,25],
		[0x1f0f4a44,0],
		[0x1f0f4a50,26],
		[0x1f0f4a54,0],
		[0x1f0f4a58,0],
		[0x1f0f4a5c,0],
		[0x1f0f4a60,31],
		[0x1f0f4a64,0],
		[0x1f0f4a70,15],
		[0x1f0f4a74,0],
		[0x1f0f4a80,0],
		[0x1f0f4a84,0],
		[0x1f0f4a88,0],
		[0x1f0f4a8c,0],
		[0x1f0f4a90,0],
		[0x1f0f4a94,0],
		[0x1f0f4a98,0],
		[0x1f0f4a9c,0],
		[0x1f0f4aa0,0],
		[0x1f0f4aa4,0],
		[0x1f0f4aa8,0],
		[0x1f0f4aac,0],
		[0x1f0f4ab0,0],
		[0x1f0f4ab4,0],
		[0x1f0f4ab8,0],
		[0x1f0f4abc,0],
		[0x1f0f4ac0,913],
		[0x1f0f4ac4,0],
		[0x1f0f4ac8,288],
		[0x1f0f4acc,0],
		[0x1f0f4ad0,129],
		[0x1f0f4ad4,0],
		[0x1f0f4ad8,0],
		[0x1f0f4adc,0],
		[0x1f0f4af0,0],
		[0x1f0f4af4,0],
		[0x1f0f4af8,0],
		[0x1f0f4afc,0],
		[0x1f0f4b00,0],
		[0x1f0f4b04,0],
		[0x1f0f4b08,0],
		[0x1f0f4b0c,0],
		[0x1f0f4b30,0],
		[0x1f0f4b34,0],
		[0x1f0f4b40,205],
		[0x1f0f4b44,0],
		[0x1f0f4b48,0],
		[0x1f0f4b4c,0],
		[0x1f0f4b50,0],
		[0x1f0f4b54,0],
		[0x1f0f4b58,0],
		[0x1f0f4b5c,0],
		[0x1f0f4b78,0],
		[0x1f0f4b7c,0],
		[0x1f0f4b80,0],
		[0x1f0f4b84,0],
		[0x1f0f4b88,0],
		[0x1f0f4b8c,0],
		[0x1f0f4b90,0],
		[0x1f0f4b94,0],
		[0x1f0f4b98,0],
		[0x1f0f4b9c,0],
		[0x1f0f4ba0,0],
		[0x1f0f4ba4,0],
		[0x1f0f4ba8,0],
		[0x1f0f4bac,0],
		[0x1f0f4bb0,0],
		[0x1f0f4bb4,0],
		[0x1f0f4bb8,0],
		[0x1f0f4bbc,0],
		[0x1f0f4bc0,0],
		[0x1f0f4bc4,0],
		[0x1f0f4bc8,0],
		[0x1f0f4bcc,0],
		[0x1f0f4bd0,0],
		[0x1f0f4bd4,0],
		[0x1f0f4bd8,0],
		[0x1f0f4bdc,0],
		[0x1f0f4be0,0],
		[0x1f0f4be4,0],
		[0x1f0f4be8,0],
		[0x1f0f4bec,0],
		[0x1f0f4bf0,0],
		[0x1f0f4bf4,0],
		[0x1f0f4bf8,0],
		[0x1f0f4bfc,0],
		[0x1f0f4c00,0],
		[0x1f0f4c04,0],
		[0x1f0f4c08,0],
		[0x1f0f4c0c,0],
		[0x1f0f4c10,0],
		[0x1f0f4c14,0],
		[0x1f0f4c18,0],
		[0x1f0f4c1c,0],
		[0x1f0f4c20,0],
		[0x1f0f4c24,0],
		[0x1f0f4c28,0],
		[0x1f0f4c2c,0],
		[0x1f0f4c30,0],
		[0x1f0f4c34,0],
		[0x1f0f4c38,0],
		[0x1f0f4c3c,0],
		[0x1f0f4c40,0],
		[0x1f0f4c44,0],
		[0x1f0f4c48,0],
		[0x1f0f4c4c,0],
		[0x1f0f4c50,0],
		[0x1f0f4c54,0],
		[0x1f0f4c58,0],
		[0x1f0f4c5c,0],
		[0x1f0f4c60,0],
		[0x1f0f4c64,0],
		[0x1f0f4c68,0],
		[0x1f0f4c6c,0],
		[0x1f0f4c70,0],
		[0x1f0f4c74,0],
		[0x1f0f4c78,0],
		[0x1f0f4c7c,0],
		[0x1f0f4c80,0],
		[0x1f0f4c84,0],
		[0x1f0f4c88,0],
		[0x1f0f4c8c,0],
		[0x1f0f4c90,0],
		[0x1f0f4c94,0],
		[0x1f0f4c98,0],
		[0x1f0f4c9c,0],
		[0x1f0f4ca0,0],
		[0x1f0f4ca4,0],
		[0x1f0f4ca8,0],
		[0x1f0f4cac,0],
		[0x1f0f4cb0,0],
		[0x1f0f4cb4,0],
		[0x1f0f4cb8,0],
		[0x1f0f4cbc,0],
		[0x1f0f4cc0,0],
		[0x1f0f4cc4,0],
		[0x1f0f4cc8,0],
		[0x1f0f4ccc,0],
		[0x1f0f4cd0,0],
		[0x1f0f4cd4,0],
		[0x1f0f4cd8,0],
		[0x1f0f4cdc,0],
		[0x1f0f4ce0,0],
		[0x1f0f4ce4,0],
		[0x1f0f4ce8,0],
		[0x1f0f4cec,0],
		[0x1f0f4cf0,0],
		[0x1f0f4cf4,0],
		[0x1f0f4cf8,0],
		[0x1f0f4cfc,0],
		[0x1f0f4d00,0],
		[0x1f0f4d04,0],
		[0x1f0f4d08,0],
		[0x1f0f4d0c,0],
		[0x1f0f4d10,0],
		[0x1f0f4d14,0],
		[0x1f0f4d18,0],
		[0x1f0f4d1c,0],
		[0x1f0f4d20,0],
		[0x1f0f4d24,0],
		[0x1f0f4d28,0],
		[0x1f0f4d2c,0],
		[0x1f0f4d30,0],
		[0x1f0f4d34,0],
		[0x1f0f4d38,0],
		[0x1f0f4d3c,0],
		[0x1f0f4d40,0],
		[0x1f0f4d44,0],
		[0x1f0f4d48,0],
		[0x1f0f4d4c,0],
		[0x1f0f4d50,0],
		[0x1f0f4d54,0],
		[0x1f0f4d58,0],
		[0x1f0f4d5c,0],
		[0x1f0f4d60,0],
		[0x1f0f4d64,0],
		[0x1f0f4d68,0],
		[0x1f0f4d6c,0],
		[0x1f0f4d70,0],
		[0x1f0f4d74,0],
		[0x1f0f4d78,0],
		[0x1f0f4d7c,0],
		[0x1f0f4d80,0],
		[0x1f0f4d84,0],
		[0x1f0f4d88,0],
		[0x1f0f4d8c,0],
		[0x1f0f4d90,0],
		[0x1f0f4d94,0],
		[0x1f0f4d98,0],
		[0x1f0f4d9c,0],
		[0x1f0f4da0,0],
		[0x1f0f4da4,0],
		[0x1f0f4da8,0],
		[0x1f0f4dac,0],
		[0x1f0f4db0,0],
		[0x1f0f4db4,0],
		[0x1f0f4db8,0],
		[0x1f0f4dbc,0],
		[0x1f0f4dc0,0],
		[0x1f0f4dc4,0],
		[0x1f0f4dc8,0],
		[0x1f0f4dcc,0],
		[0x1f0f4dd0,0],
		[0x1f0f4dd4,0],
		[0x1f0f4dd8,0],
		[0x1f0f4ddc,0],
		[0x1f0f4de0,0],
		[0x1f0f4de4,0],
		[0x1f0f4de8,0],
		[0x1f0f4dec,0],
		[0x1f0f4df0,0],
		[0x1f0f4df4,0],
		[0x1f0f4df8,0],
		[0x1f0f4dfc,0],
		[0x1f0f4e00,0],
		[0x1f0f4e04,0],
		[0x1f0f4e08,0],
		[0x1f0f4e0c,0],
		[0x1f0f4e10,0],
		[0x1f0f4e14,0],
		[0x1f0f4e18,0],
		[0x1f0f4e1c,0],
		[0x1f0f4e20,0],
		[0x1f0f4e24,0],
		[0x1f0f4e28,0],
		[0x1f0f4e2c,0],
		[0x1f0f4e30,0],
		[0x1f0f4e34,0],
		[0x1f0f4e38,0],
		[0x1f0f4e3c,0],
		[0x1f0f4e40,0],
		[0x1f0f4e44,0],
		[0x1f0f4e48,0],
		[0x1f0f4e4c,0],
		[0x1f0f4e50,0],
		[0x1f0f4e54,0],
		[0x1f0f4e58,0],
		[0x1f0f4e5c,0],
		[0x1f0f4e60,0],
		[0x1f0f4e64,0],
		[0x1f0f4e68,0],
		[0x1f0f4e6c,0],
		[0x1f0f4e70,0],
		[0x1f0f4e74,0],
		[0x1f0f4e78,0],
		[0x1f0f4e7c,0],
		[0x1f0f4e80,0],
		[0x1f0f4e84,0],
		[0x1f0f4e88,0],
		[0x1f0f4e8c,0],
		[0x1f0f4e90,0],
		[0x1f0f4e94,0],
		[0x1f0f4e98,0],
		[0x1f0f4e9c,0],
		[0x1f0f4ea0,0],
		[0x1f0f4ea4,0],
		[0x1f0f4ea8,0],
		[0x1f0f4eac,0],
		[0x1f0f4eb0,0],
		[0x1f0f4eb4,0],
		[0x1f0f4eb8,0],
		[0x1f0f4ebc,0],
		[0x1f0f4ec0,0],
		[0x1f0f4ec4,0],
		[0x1f0f4ec8,0],
		[0x1f0f4ecc,0],
		[0x1f0f4ed0,0],
		[0x1f0f4ed4,0],
		[0x1f0f4ed8,0],
		[0x1f0f4edc,0],
		[0x1f0f4ee0,0],
		[0x1f0f4ee4,0],
		[0x1f0f4ee8,0],
		[0x1f0f4eec,0],
		[0x1f0f4ef0,0],
		[0x1f0f4ef4,0],
		[0x1f0f4ef8,0],
		[0x1f0f4efc,0],
		[0x1f0f4f00,0],
		[0x1f0f4f04,0],
		[0x1f0f4f08,0],
		[0x1f0f4f0c,0],
		[0x1f0f4f10,0],
		[0x1f0f4f14,0],
		[0x1f0f4f18,0],
		[0x1f0f4f1c,0],
		[0x1f0f4f20,0],
		[0x1f0f4f24,0],
		[0x1f0f4f28,0],
		[0x1f0f4f2c,0],
		[0x1f0f4f30,0],
		[0x1f0f4f34,0],
		[0x1f0f4f38,0],
		[0x1f0f4f3c,0],
		[0x1f0f4f40,0],
		[0x1f0f4f44,0],
		[0x1f0f4f48,0],
		[0x1f0f4f4c,0],
		[0x1f0f4f50,0],
		[0x1f0f4f54,0],
		[0x1f0f4f58,0],
		[0x1f0f4f5c,0],
		[0x1f0f4f60,0],
		[0x1f0f4f64,0],
		[0x1f0f4f68,0],
		[0x1f0f4f6c,0],
		[0x1f0f4f70,0],
		[0x1f0f4f74,0],
		[0x1f0f4f78,0],
		[0x1f0f4f7c,0],
		[0x1f0f4f84,0],
		[0x1f0f4f88,0],
		[0x1f0f4f8c,0],
		[0x1f0f4f90,0],
		[0x1f0f4f94,0],
		[0x1f0f4f98,0],
		[0x1f0f4f9c,0],
		[0x1f0f4fa0,0],
		[0x1f0f4fa4,0],
		[0x1f0f4fa8,0],
		[0x1f0f4fac,0],
		[0x1f0f4fb0,0],
		[0x1f0f4fb4,0],
		[0x1f0f4fb8,0],
		[0x1f0f4fbc,0],
		[0x1f0f4fc0,0],
		[0x1f0f4fc4,0],
		[0x1f0f4fc8,0],
		[0x1f0f4fcc,0],
		[0x1f0f5010,16],
		[0x1f0f5014,0],
		[0x1f0f502c,10922],
		[0x1f0f5034,0],
		[0x1f0f503c,0],
		[0x1f0f5058,1],
		[0x1f0f505c,1],
		[0x1f0f5060,12],
		[0x1f0f5064,0],
		[0x1f0f5068,2],
		[0x1f0f506c,0],
		[0x1f0f5070,35],
		[0x1f0f5074,0],
		[0x1f0f5078,0],
		[0x1f0f507c,0],
		[0x1f0f5090,0],
		[0x1f0f5094,0],
		[0x1f0f5098,1],
		[0x1f0f509c,0],
		[0x1f0f50b0,878],
		[0x1f0f50b4,0],
		[0x1f0f50b8,4032],
		[0x1f0f50bc,0],
		[0x1f0f50c0,4031],
		[0x1f0f50c4,0],
		[0x1f0f50c8,0],
		[0x1f0f50cc,0],
		[0x1f0f50d0,0],
		[0x1f0f50d4,0],
		[0x1f0f50d8,244],
		[0x1f0f50dc,0],
		[0x1f0f50e0,1184],
		[0x1f0f50e4,0],
		[0x1f0f50e8,33],
		[0x1f0f50ec,0],
		[0x1f0f50f0,0],
		[0x1f0f50f4,0],
		[0x1f0f50fc,21845],
		[0x1f0f5104,21845],
		[0x1f0f510c,21845],
		[0x1f0f5114,21845],
		[0x1f0f511c,21845],
		[0x1f0f5124,21845],
		[0x1f0f5150,33],
		[0x1f0f5154,0],
		[0x1f0f5160,16],
		[0x1f0f5164,0],
		[0x1f0f516c,0],
		[0x1f0f5170,6],
		[0x1f0f5174,0],
		[0x1f0f5178,4096],
		[0x1f0f517c,0],
		[0x1f0f5180,17],
		[0x1f0f5184,0],
		[0x1f0f5188,100],
		[0x1f0f518c,0],
		[0x1f0f5190,3],
		[0x1f0f5194,0],
		[0x1f0f519c,21845],
		[0x1f0f51a0,4],
		[0x1f0f51a4,0],
		[0x1f0f51a8,56],
		[0x1f0f51ac,0],
		[0x1f0f51b0,5],
		[0x1f0f51b4,0],
		[0x1f0f51b8,9],
		[0x1f0f51bc,0],
		[0x1f0f51c0,7],
		[0x1f0f51c4,0],
		[0x1f0f51d0,8],
		[0x1f0f51d4,0],
		[0x1f0f51d8,0],
		[0x1f0f51dc,0],
		[0x1f0f51e0,9],
		[0x1f0f51e4,0],
		[0x1f0f51ec,21845],
		[0x1f0f51f0,11],
		[0x1f0f51f4,0],
		[0x1f0f51f8,0],
		[0x1f0f51fc,0],
		[0x1f0f5200,12],
		[0x1f0f5204,0],
		[0x1f0f5208,0],
		[0x1f0f520c,0],
		[0x1f0f5210,13],
		[0x1f0f5214,0],
		[0x1f0f5218,0],
		[0x1f0f521c,0],
		[0x1f0f5220,14],
		[0x1f0f5224,0],
		[0x1f0f5228,0],
		[0x1f0f522c,0],
		[0x1f0f5230,23],
		[0x1f0f5234,0],
		[0x1f0f5238,0],
		[0x1f0f523c,0],
		[0x1f0f5240,25],
		[0x1f0f5244,0],
		[0x1f0f5250,26],
		[0x1f0f5254,0],
		[0x1f0f5258,0],
		[0x1f0f525c,0],
		[0x1f0f5260,31],
		[0x1f0f5264,0],
		[0x1f0f5270,15],
		[0x1f0f5274,0],
		[0x1f0f5280,0],
		[0x1f0f5284,0],
		[0x1f0f5288,0],
		[0x1f0f528c,0],
		[0x1f0f5290,0],
		[0x1f0f5294,0],
		[0x1f0f5298,0],
		[0x1f0f529c,0],
		[0x1f0f52a0,0],
		[0x1f0f52a4,0],
		[0x1f0f52a8,0],
		[0x1f0f52ac,0],
		[0x1f0f52b0,0],
		[0x1f0f52b4,0],
		[0x1f0f52b8,0],
		[0x1f0f52bc,0],
		[0x1f0f52c0,674],
		[0x1f0f52c4,0],
		[0x1f0f52c8,213],
		[0x1f0f52cc,0],
		[0x1f0f52d0,0],
		[0x1f0f52d4,0],
		[0x1f0f52d8,0],
		[0x1f0f52dc,0],
		[0x1f0f52f0,0],
		[0x1f0f52f4,0],
		[0x1f0f52f8,0],
		[0x1f0f52fc,0],
		[0x1f0f5300,0],
		[0x1f0f5304,0],
		[0x1f0f5308,0],
		[0x1f0f530c,0],
		[0x1f0f5330,0],
		[0x1f0f5334,0],
		[0x1f0f5340,205],
		[0x1f0f5344,0],
		[0x1f0f5348,0],
		[0x1f0f534c,0],
		[0x1f0f5350,0],
		[0x1f0f5354,0],
		[0x1f0f5358,0],
		[0x1f0f535c,0],
		[0x1f0f5378,0],
		[0x1f0f537c,0],
		[0x1f0f5380,0],
		[0x1f0f5384,0],
		[0x1f0f5388,0],
		[0x1f0f538c,0],
		[0x1f0f5390,0],
		[0x1f0f5394,0],
		[0x1f0f5398,0],
		[0x1f0f539c,0],
		[0x1f0f53a0,0],
		[0x1f0f53a4,0],
		[0x1f0f53a8,0],
		[0x1f0f53ac,0],
		[0x1f0f53b0,0],
		[0x1f0f53b4,0],
		[0x1f0f53b8,0],
		[0x1f0f53bc,0],
		[0x1f0f53c0,0],
		[0x1f0f53c4,0],
		[0x1f0f53c8,0],
		[0x1f0f53cc,0],
		[0x1f0f53d0,0],
		[0x1f0f53d4,0],
		[0x1f0f53d8,0],
		[0x1f0f53dc,0],
		[0x1f0f53e0,0],
		[0x1f0f53e4,0],
		[0x1f0f53e8,0],
		[0x1f0f53ec,0],
		[0x1f0f53f0,0],
		[0x1f0f53f4,0],
		[0x1f0f53f8,0],
		[0x1f0f53fc,0],
		[0x1f0f5400,0],
		[0x1f0f5404,0],
		[0x1f0f5408,0],
		[0x1f0f540c,0],
		[0x1f0f5410,0],
		[0x1f0f5414,0],
		[0x1f0f5418,0],
		[0x1f0f541c,0],
		[0x1f0f5420,0],
		[0x1f0f5424,0],
		[0x1f0f5428,0],
		[0x1f0f542c,0],
		[0x1f0f5430,0],
		[0x1f0f5434,0],
		[0x1f0f5438,0],
		[0x1f0f543c,0],
		[0x1f0f5440,0],
		[0x1f0f5444,0],
		[0x1f0f5448,0],
		[0x1f0f544c,0],
		[0x1f0f5450,0],
		[0x1f0f5454,0],
		[0x1f0f5458,0],
		[0x1f0f545c,0],
		[0x1f0f5460,0],
		[0x1f0f5464,0],
		[0x1f0f5468,0],
		[0x1f0f546c,0],
		[0x1f0f5470,0],
		[0x1f0f5474,0],
		[0x1f0f5478,0],
		[0x1f0f547c,0],
		[0x1f0f5480,0],
		[0x1f0f5484,0],
		[0x1f0f5488,0],
		[0x1f0f548c,0],
		[0x1f0f5490,0],
		[0x1f0f5494,0],
		[0x1f0f5498,0],
		[0x1f0f549c,0],
		[0x1f0f54a0,0],
		[0x1f0f54a4,0],
		[0x1f0f54a8,0],
		[0x1f0f54ac,0],
		[0x1f0f54b0,0],
		[0x1f0f54b4,0],
		[0x1f0f54b8,0],
		[0x1f0f54bc,0],
		[0x1f0f54c0,0],
		[0x1f0f54c4,0],
		[0x1f0f54c8,0],
		[0x1f0f54cc,0],
		[0x1f0f54d0,0],
		[0x1f0f54d4,0],
		[0x1f0f54d8,0],
		[0x1f0f54dc,0],
		[0x1f0f54e0,0],
		[0x1f0f54e4,0],
		[0x1f0f54e8,0],
		[0x1f0f54ec,0],
		[0x1f0f54f0,0],
		[0x1f0f54f4,0],
		[0x1f0f54f8,0],
		[0x1f0f54fc,0],
		[0x1f0f5500,0],
		[0x1f0f5504,0],
		[0x1f0f5508,0],
		[0x1f0f550c,0],
		[0x1f0f5510,0],
		[0x1f0f5514,0],
		[0x1f0f5518,0],
		[0x1f0f551c,0],
		[0x1f0f5520,0],
		[0x1f0f5524,0],
		[0x1f0f5528,0],
		[0x1f0f552c,0],
		[0x1f0f5530,0],
		[0x1f0f5534,0],
		[0x1f0f5538,0],
		[0x1f0f553c,0],
		[0x1f0f5540,0],
		[0x1f0f5544,0],
		[0x1f0f5548,0],
		[0x1f0f554c,0],
		[0x1f0f5550,0],
		[0x1f0f5554,0],
		[0x1f0f5558,0],
		[0x1f0f555c,0],
		[0x1f0f5560,0],
		[0x1f0f5564,0],
		[0x1f0f5568,0],
		[0x1f0f556c,0],
		[0x1f0f5570,0],
		[0x1f0f5574,0],
		[0x1f0f5578,0],
		[0x1f0f557c,0],
		[0x1f0f5580,0],
		[0x1f0f5584,0],
		[0x1f0f5588,0],
		[0x1f0f558c,0],
		[0x1f0f5590,0],
		[0x1f0f5594,0],
		[0x1f0f5598,0],
		[0x1f0f559c,0],
		[0x1f0f55a0,0],
		[0x1f0f55a4,0],
		[0x1f0f55a8,0],
		[0x1f0f55ac,0],
		[0x1f0f55b0,0],
		[0x1f0f55b4,0],
		[0x1f0f55b8,0],
		[0x1f0f55bc,0],
		[0x1f0f55c0,0],
		[0x1f0f55c4,0],
		[0x1f0f55c8,0],
		[0x1f0f55cc,0],
		[0x1f0f55d0,0],
		[0x1f0f55d4,0],
		[0x1f0f55d8,0],
		[0x1f0f55dc,0],
		[0x1f0f55e0,0],
		[0x1f0f55e4,0],
		[0x1f0f55e8,0],
		[0x1f0f55ec,0],
		[0x1f0f55f0,0],
		[0x1f0f55f4,0],
		[0x1f0f55f8,0],
		[0x1f0f55fc,0],
		[0x1f0f5600,0],
		[0x1f0f5604,0],
		[0x1f0f5608,0],
		[0x1f0f560c,0],
		[0x1f0f5610,0],
		[0x1f0f5614,0],
		[0x1f0f5618,0],
		[0x1f0f561c,0],
		[0x1f0f5620,0],
		[0x1f0f5624,0],
		[0x1f0f5628,0],
		[0x1f0f562c,0],
		[0x1f0f5630,0],
		[0x1f0f5634,0],
		[0x1f0f5638,0],
		[0x1f0f563c,0],
		[0x1f0f5640,0],
		[0x1f0f5644,0],
		[0x1f0f5648,0],
		[0x1f0f564c,0],
		[0x1f0f5650,0],
		[0x1f0f5654,0],
		[0x1f0f5658,0],
		[0x1f0f565c,0],
		[0x1f0f5660,0],
		[0x1f0f5664,0],
		[0x1f0f5668,0],
		[0x1f0f566c,0],
		[0x1f0f5670,0],
		[0x1f0f5674,0],
		[0x1f0f5678,0],
		[0x1f0f567c,0],
		[0x1f0f5680,0],
		[0x1f0f5684,0],
		[0x1f0f5688,0],
		[0x1f0f568c,0],
		[0x1f0f5690,0],
		[0x1f0f5694,0],
		[0x1f0f5698,0],
		[0x1f0f569c,0],
		[0x1f0f56a0,0],
		[0x1f0f56a4,0],
		[0x1f0f56a8,0],
		[0x1f0f56ac,0],
		[0x1f0f56b0,0],
		[0x1f0f56b4,0],
		[0x1f0f56b8,0],
		[0x1f0f56bc,0],
		[0x1f0f56c0,0],
		[0x1f0f56c4,0],
		[0x1f0f56c8,0],
		[0x1f0f56cc,0],
		[0x1f0f56d0,0],
		[0x1f0f56d4,0],
		[0x1f0f56d8,0],
		[0x1f0f56dc,0],
		[0x1f0f56e0,0],
		[0x1f0f56e4,0],
		[0x1f0f56e8,0],
		[0x1f0f56ec,0],
		[0x1f0f56f0,0],
		[0x1f0f56f4,0],
		[0x1f0f56f8,0],
		[0x1f0f56fc,0],
		[0x1f0f5700,0],
		[0x1f0f5704,0],
		[0x1f0f5708,0],
		[0x1f0f570c,0],
		[0x1f0f5710,0],
		[0x1f0f5714,0],
		[0x1f0f5718,0],
		[0x1f0f571c,0],
		[0x1f0f5720,0],
		[0x1f0f5724,0],
		[0x1f0f5728,0],
		[0x1f0f572c,0],
		[0x1f0f5730,0],
		[0x1f0f5734,0],
		[0x1f0f5738,0],
		[0x1f0f573c,0],
		[0x1f0f5740,0],
		[0x1f0f5744,0],
		[0x1f0f5748,0],
		[0x1f0f574c,0],
		[0x1f0f5750,0],
		[0x1f0f5754,0],
		[0x1f0f5758,0],
		[0x1f0f575c,0],
		[0x1f0f5760,0],
		[0x1f0f5764,0],
		[0x1f0f5768,0],
		[0x1f0f576c,0],
		[0x1f0f5770,0],
		[0x1f0f5774,0],
		[0x1f0f5778,0],
		[0x1f0f577c,0],
		[0x1f0f5784,0],
		[0x1f0f5788,0],
		[0x1f0f578c,0],
		[0x1f0f5790,0],
		[0x1f0f5794,0],
		[0x1f0f5798,0],
		[0x1f0f579c,0],
		[0x1f0f57a0,0],
		[0x1f0f57a4,0],
		[0x1f0f57a8,0],
		[0x1f0f57ac,0],
		[0x1f0f57b0,0],
		[0x1f0f57b4,0],
		[0x1f0f57b8,0],
		[0x1f0f57bc,0],
		[0x1f0f57c0,0],
		[0x1f0f57c4,0],
		[0x1f0f57c8,0],
		[0x1f0f57cc,0],
		[0, 0]
]).
string_val([
		[0x1f0f50f8,93824992231424],
		[0x1f0f5198,93824992231488],
		[0, 0]
]).
:- use_module(library(clpfd)).
:- use_module(reif).
:- style_check(-singleton).

isTrue([X, Y]):-
    X == 49.

isTrue([X|Tail]):-
    isTrue(Tail).

log(File_name, Name, Addr, Base):-
    Offset #= Addr - Base,
    open(File_name, append, Stream),
    write(Stream, Name),
    write(Stream, ':'),
    write(Stream, Offset),
    nl(Stream),
    close(Stream).

possible_task_struct(Base_addr) :-
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM2_addr, Pid_addr, Tgid_addr, Real_parent_addr, Parent_addr , Child_addr, 
           Group_leader_addr, Thread_group_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    %MM2_addr #> Base_addr + 1000,
    Tasks_addr #> MM2_addr - 100,
    %FS_struct_addr #< Base_addr + 4000,
    Tgid_addr #= Pid_addr + 4,
    Real_parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr - 8,
    Child_addr #= Parent_addr + 8,
    %FIXME This may be too strong
    Group_leader_addr #=< Child_addr +32,
    %Comm_addr #= Base_addr + 1656,
    %Tasks_addr #= Base_addr + 1072,
    %FS_struct_addr #= Base_addr + 2640,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    % make query after labeling
    MM2_val #> 0,
    integer(MM2_val),
    
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val,  Comm_addr, Comm_val ]),

    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_parent_addr, Real_parent_val, Group_leader_addr, Group_leader_val]),
    Real_parent_val #> 0,
    Group_leader_val #> 0,
    query_ts(Real_parent_val, Comm_offset, Tasks_offset),
    query_ts(Group_leader_val, Comm_offset, Tasks_offset),

    labeling([enum], [Cred_addr, Cred_val]),
    Cred_val #> 0,
    query_cred(Cred_val),

    labeling([enum], [FS_struct_addr, FS_struct_val]),
    FS_struct_val #> 0,
    %query_fs_struct(FS_struct_val),



    get_time(End),
    Time_past is End - Current,
    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    log("profile.txt", "tasks", Tasks_addr, Base_addr),
    log("profile.txt", "mm_struct", MM2_addr, Base_addr),
    log("profile.txt", "comm", Comm_addr, Base_addr),
    log("profile.txt", "parent", Parent_addr, Base_addr),
    log("profile.txt", "group_leader", Group_leader_addr, Base_addr),
    log("profile.txt", "cred", Cred_addr, Base_addr),

    
    print_nl('tasks offset', Tasks_offset),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).

possible_mm_struct(Current_addr) :- 
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    % TODO: ADD vm_area_struct *mmap
    Ptr_profile = [
        [Mmap_addr, Mmap_val],
        [Pgd_addr, Pgd_val]  
    ],
    Ulong_profile = [
        [Mmap_base_addr, Mmap_base_val],
        [Mmap_legacy_base_addr, Mmap_legacy_base_val],
        [Task_size_addr, Task_size_val],
        [High_vm_end_addr, High_vm_end_val],
        [Start_brk_addr, Start_brk_val],
        [Brk_addr, Brk_val],
        [Start_stack_addr, Start_stack_val],
        [ARG_start_addr, ARG_start_val]
    ],
    Mmap_addr #= Current_addr,


    Mmap_base_addr #> Mmap_addr,
    %FIXME mmap_base need more value constraint, because we removed mmap_legacy_base and highest_vm_end.
    Mmap_base_val #> 0x7f0000000000,
    %FIXME in old linux version, e.g., there is no mmap_legacy_base and highest_vm_enb
    %chain([Mmap_base_addr, Mmap_legacy_base_addr, Task_size_addr, High_vm_end_addr, Pgd_addr], #<),
    chain([Mmap_base_addr, Task_size_addr, Pgd_addr], #<),

    %FIXME: This rule may be too strong
    %High_vm_end_addr #= Mmap_base_addr + 24, 
    Pgd_addr #> Task_size_addr,
    Pgd_addr #=< Task_size_addr + 40,
    %FIXME: This rule may not be true for other mm_struct.
    Task_size_val #>= 0x7ffffffff000,

    %Mmap_base_addr #= Current_addr + 40,
    %Mmap_legacy_base_addr #= Current_addr + 40,
    %Task_size_addr #= Current_addr + 48,
    %High_vm_end_addr #= Current_addr + 72,

    Start_brk_addr #> Pgd_addr,
    Start_stack_val #> 0x7ff000000000,
    % TODO: Convert this to index comparison. 
    ARG_start_addr #< Current_addr + 500,
    chain([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr], #<),
    ARG_start_addr #= Start_brk_addr + 24,
    Brk_val #< 0x7ff000000000,
    ARG_start_val #> 0x7ff000000000,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),


    labeling([enum], [Mmap_addr, Mmap_val, Mmap_base_addr, Pgd_addr, Pgd_val]),
    Mmap_val #> 0,
    Pgd_val #> 0,
    
    process_create(path('python'),
                    ['subquery.py', Mmap_val, "vm_area_struct", 2],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    label([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr]),
    statistics(real_time, [End|_]),

    log("profile.txt", "mmap", Mmap_addr, Current_addr),
    log("profile.txt", "mmap_base", Mmap_base_addr, Current_addr),
    log("profile.txt", "pgd", Pgd_addr, Current_addr),
    log("profile.txt", "start_brk", Start_brk_addr, Current_addr),
    log("profile.txt", "brk", Brk_addr, Current_addr),
    log("profile.txt", "start_stack", Start_stack_addr, Current_addr),
    log("profile.txt", "arg_start", ARG_start_addr, Current_addr),
    log("profile.txt", "mm_struct time", End, Start).


possible_vm_area_struct(Base_addr, Level) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [VM_next_addr, VM_next_val],
        [VM_file_addr, VM_file_val]
    ],
    Ulong_profile = [
        [VM_start_addr, VM_start_val],
        [VM_end_addr, VM_end_val],
        [VM_flag_addr, VM_flag_val]
        %VM_pgoff is 0, and we do not consider 0 as ulong
        %[VM_pgoff_addr, VM_pgoff_val]
    ],
    VM_start_addr #>= Base_addr,
    chain([VM_start_addr, VM_end_addr, VM_next_addr, VM_flag_addr, VM_file_addr], #<),
    VM_end_addr #= VM_start_addr + 8,
    VM_next_addr #= VM_end_addr + 8,
    VM_next_addr #< Base_addr + 32,
    VM_file_addr #< Base_addr + 180,
    VM_pgoff_addr #= VM_file_addr - 8,
    %VM_file_addr #= Base_addr + 160,

    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    %FIXME: VM_flag may need value constraints.

    label([VM_next_addr, VM_next_val]),
    /*if_(Level = 2,
        call(check_vm_area_struct, VM_next_val, 1),
        1 = 1),*/
    %Level #> 1 #==> check_vm_area_struct(VM_next_val, 1),

    labeling([enum], [VM_start_addr, VM_end_addr, VM_flag_addr, VM_pgoff_addr, VM_file_addr, VM_file_val]),
    
    VM_file_val #> 0,
    process_create(path('python'),
                ['subquery.py', VM_file_val, "vm_file"],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    statistics(real_time, [End|_]),

    log("profile.txt", "vm_start", VM_start_addr, Base_addr),
    log("profile.txt", "vm_end", VM_end_addr, Base_addr),
    log("profile.txt", "vm_next", VM_next_addr, Base_addr),
    log("profile.txt", "vm_flag", VM_flag_addr, Base_addr),
    log("profile.txt", "vm_pgoff", VM_pgoff_addr, Base_addr),
    log("profile.txt", "vm_file", VM_file_addr, Base_addr),
    log("profile.txt", "vm_area_struct time", End, Start).

check_vm_area_struct(Base_addr, Level) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "vm_area_struct", Level],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vm_file(Base_addr) :-
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [Vfs_mount_addr, Vfs_mount_val],
        [Dentry_addr, Dentry_val]
    ],
    Vfs_mount_addr #> Base_addr,
    Dentry_addr #= Vfs_mount_addr + 8,
    Dentry_addr #< Base_addr + 40,
    tuples_in(Ptr_profile, Ptr),
    label([Vfs_mount_val, Dentry_val]),
    Vfs_mount_val #>0,
    Dentry_val #> 0,
    %FIXME seems like we do not need this, make sure the string is not addr=0
/*
    process_create(path('python'),
                    ['subquery.py', Vfs_mount_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vfs_mount(Base_addr) :-
    pointer(Ptr),
    Ptr_profile = [
        [Dentry_addr, Dentry_val]
    ],
    Dentry_addr #< Base_addr + 16,
    tuples_in(Ptr_profile, Ptr),
    label([Dentry_val]),
    Dentry_val #> 0,
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).
    
possible_dentry(Base_addr) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    string_val(Str),
    Ptr_profile = [
        [Dparent_addr, Dparent_val],
        [Dchild_addr, Dchild_val]
    ],
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    %log("profile.txt", "dentry addr", Base_addr, 0),
    Dparent_addr #> Base_addr,
    Dname_addr #> 0,
    Dname_addr #< Base_addr + 200,
    %Dname_addr #= Base_addr + 160,
    %FIXME This child rule is not applicable for old kernel version. 
    %chain([Dparent_addr, Dname_addr, Dchild_addr], #<),
    %Dchild_addr #< Base_addr + 200,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    labeling([enum], [Dparent_addr, Dparent_val, Dname_addr, Dchild_addr, Dchild_val]),
    Dname_offset #= Dname_addr - Base_addr,
    integer(Dname_offset),
    Dparent_val #> 0,
    
    %FIXME d_parent may not be initialized
    /*process_create(path('python'),
                ['subquery.py', Dparent_val, "d_entry", Dname_offset],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/

    %FIXME: may need to find another way for all list_head. 
    /*Dchild_offset #= Dchild_addr - Base_addr,
    integer(Dchild_offset),
    Dchild_base #= Dchild_val - Dchild_offset,
    integer(Dchild_base),
    Dchild_base #> 0,
    process_create(path('python'),
                ['subquery.py', Dchild_base, "d_entry", Dname_offset],
                [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    statistics(real_time, [End|_]).
/*
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    log("profile.txt", "d_parent", Dparent_addr, Base_addr),
    log("profile.txt", "d_child", Dchild_addr, Base_addr),
    log("profile.txt", "dentry time", End, Start).
*/
possible_d_entry(Base_addr, Dname_offset) :-
    current_predicate(string_val/1),
    string_val(Str),
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    Dname_addr #= Base_addr + Dname_offset,
    tuples_in(Str_profile, Str),
    label([Dname_addr]).

possible_list_head(Tasks_val, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_val, Tasks_addr]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],
    Comm_addr #= Tasks_val - Tasks_offset + Comm_offset,
    Tasks_addr #\= Tasks_val,
    tuples_in(Str_profile, Str),
    tuples_in(Ptr_profile, Ptr),
    label([Comm_addr]).

possible_ts(Base_addr, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_addr, Tasks_val]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],

    Comm_addr #= Base_addr + Comm_offset,
    Tasks_addr #= Base_addr + Tasks_offset,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),

    label([Tasks_val]),
    
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "list_head", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_cred(Base_addr) :-
    statistics(real_time, [Start|_]),

    int(Int),
    long(Ulg),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3],
        [Addr4, Val4],
        [Addr5, Val5],
        [Addr6, Val6],
        [Addr7, Val7],
        [Addr8, Val8],
        [Addr9, Val9]
    ],
    %FIXME For now, this rule is hard-coded because we do not consider 0 as a unsign long number. 
    %So that for cred whos val10 is 0, this rule does not apply.
    /*Ulong_profile = [
        [Addr10, Val10],
        [Addr11, Val11]
    ],*/
    Addr1 #> Base_addr,
    %chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9, Addr10, Addr11], #<),
    chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9], #<),
    Addr1 #= Base_addr + 4,
    Addr9 #= Addr1 + 32,
    %Addr11 #< Base_addr + 120,
    tuples_in(Int_profile, Int),
    %tuples_in(Ulong_profile, Ulg),
    statistics(real_time, [End|_]),
    labeling([enum], [Addr1, Addr2, Addr5, Addr6]),
    log("profile.txt", "cred time", End, Start),
    log('profile.txt', "uid", Addr1, Base_addr),
    log('profile.txt', "gid", Addr2, Base_addr),
    log('profile.txt', "euid", Addr5, Base_addr),
    log('profile.txt', "egid", Addr6, Base_addr).

possible_fs_struct(Base_addr) :-
    statistics(real_time, [Start|_]),
    int(Int),
    pointer(Ptr),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3]
    ],
    Ptr_profile = [
        [Root_addr, Root_val],
        [PWD_addr, PWD_val]
    ],
    Addr1 #>= Base_addr,
    chain([Addr1, Addr2, Addr3, Root_addr, PWD_addr], #<),
    PWD_addr #= Root_addr + 16,
    PWD_addr #< Base_addr + 50,
    tuples_in(Int_profile, Int),
    tuples_in(Ptr_profile, Ptr),
    label([Root_addr, Root_val]),
    
    process_create(path('python'),
                    ['subquery.py', Root_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    label([PWD_addr, PWD_val]),
    process_create(path('python'),
                    ['subquery.py', PWD_val, "dentry"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    statistics(real_time, [End|_]),
    log("profile.txt", "fs time", End, Start),
    log('profile.txt', "Root", Root_addr, Base_addr),
    log('profile.txt', "pwd", PWD_addr, Base_addr).
