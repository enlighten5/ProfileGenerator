:- use_module(library(clpfd)).
:- style_check(-singleton).
pointer([
		[0x3ca07000,958541568],
		[0x3ca07008,958537952],
		[0x3ca07018,377695824],
		[0x3ca07050,958562304],
		[0x3ca07078,0],
		[0x3ca07080,1017147520],
		[0x3ca07088,1017147520],
		[0x3ca07090,0],
		[0x3ca070a0,1017147552],
		[0x3ca070a8,1017147552],
		[0x3ca070c8,0],
		[0x3ca070d0,0],
		[0x3ca070f0,0],
		[0x3ca071d8,0],
		[0x3ca07238,0],
		[0x3ca07258,0],
		[0x3ca07280,0],
		[0x3ca07288,0],
		[0x3ca07290,0],
		[0x3ca07298,0],
		[0x3ca072a0,0],
		[0x3ca072a8,0],
		[0x3ca072b0,0],
		[0x3ca072b8,0],
		[0x3ca072d0,0],
		[0x3ca072e0,393452032],
		[0x3ca072e8,1017148288],
		[0x3ca072f0,0],
		[0x3ca072f8,0],
		[0x3ca07300,0],
		[0x3ca07308,0],
		[0x3ca07310,1017148176],
		[0x3ca07318,1017148176],
		[0x3ca07328,387978080],
		[0x3ca07330,0],
		[0x3ca07348,0],
		[0x3ca07350,0],
		[0x3ca07358,0],
		[0x3ca07360,958518528],
		[0x3ca07368,392499200],
		[0x3ca07370,987693824],
		[0x3ca07378,0],
		[0x3ca07380,0],
		[0x3ca07388,0],
		[0x3ca07390,0],
		[0x3ca07398,0],
		[0x3ca073a0,0],
		[0x3ca073a8,0],
		[0x3ca073b0,0],
		[0x3ca073b8,0],
		[0x3ca073c0,0],
		[0x3ca073c8,0],
		[0x3ca073d0,0],
		[0x3ca073d8,0],
		[0x3ca073e0,0],
		[0x3ca073e8,0],
		[0x3ca073f0,0],
		[0x3ca073f8,0],
		[0x3ca07400,0],
		[0x3ca07408,0],
		[0x3ca07410,0],
		[0x3ca07418,0],
		[0x3ca07420,0],
		[0x3ca07428,0],
		[0x3ca07430,0],
		[0x3ca07438,0],
		[0x3ca07440,0],
		[0x3ca07448,0],
		[0x3ca07450,0],
		[0x3ca07458,0],
		[0x3ca07460,0],
		[0x3ca07468,0],
		[0x3ca07470,0],
		[0x3ca07478,0],
		[0x3ca07480,0],
		[0x3ca07488,0],
		[0x3ca07490,0],
		[0x3ca07498,0],
		[0x3ca074a0,0],
		[0x3ca074a8,0],
		[0x3ca074b0,0],
		[0x3ca074b8,0],
		[0x3ca074c0,0],
		[0x3ca074c8,0],
		[0x3ca074d0,0],
		[0x3ca074d8,0],
		[0x3ca074e0,0],
		[0x3ca074e8,0],
		[0x3ca074f0,0],
		[0x3ca074f8,0],
		[0x3ca07500,0],
		[0x3ca07508,0],
		[0x3ca07510,0],
		[0x3ca07518,0],
		[0x3ca07520,0],
		[0x3ca07528,0],
		[0x3ca07530,0],
		[0x3ca07538,0],
		[0x3ca07540,0],
		[0x3ca07548,0],
		[0x3ca07550,0],
		[0x3ca07558,0],
		[0x3ca07560,0],
		[0x3ca07568,0],
		[0x3ca07570,0],
		[0x3ca07578,0],
		[0x3ca07580,0],
		[0x3ca07588,0],
		[0x3ca07590,0],
		[0x3ca07598,0],
		[0x3ca075a0,0],
		[0x3ca075a8,0],
		[0x3ca075b0,0],
		[0x3ca075b8,0],
		[0x3ca075c0,0],
		[0x3ca075c8,0],
		[0x3ca075d0,0],
		[0x3ca075d8,0],
		[0x3ca075e0,0],
		[0x3ca075e8,0],
		[0x3ca075f0,0],
		[0x3ca075f8,0],
		[0x3ca07600,0],
		[0x3ca07608,0],
		[0x3ca07610,0],
		[0x3ca07618,0],
		[0x3ca07620,0],
		[0x3ca07628,0],
		[0x3ca07630,0],
		[0x3ca07638,0],
		[0x3ca07640,0],
		[0x3ca07648,0],
		[0x3ca07650,0],
		[0x3ca07658,0],
		[0x3ca07660,0],
		[0x3ca07668,0],
		[0x3ca07670,0],
		[0x3ca07678,0],
		[0x3ca07680,0],
		[0x3ca07688,0],
		[0x3ca07690,0],
		[0x3ca07698,0],
		[0x3ca076a0,0],
		[0x3ca076a8,0],
		[0x3ca076b0,0],
		[0x3ca076b8,0],
		[0x3ca076c0,0],
		[0x3ca076c8,0],
		[0x3ca076d0,0],
		[0x3ca076d8,0],
		[0x3ca076e0,0],
		[0x3ca076e8,0],
		[0x3ca076f0,0],
		[0x3ca076f8,0],
		[0x3ca07700,0],
		[0x3ca07708,0],
		[0x3ca07710,0],
		[0x3ca07718,0],
		[0x3ca07720,0],
		[0x3ca07728,0],
		[0x3ca07730,0],
		[0x3ca07738,0],
		[0x3ca07740,0],
		[0x3ca07748,0],
		[0x3ca07750,0],
		[0x3ca07758,0],
		[0x3ca07760,0],
		[0x3ca07768,0],
		[0x3ca07770,0],
		[0x3ca07778,0],
		[0x3ca07788,0],
		[0x3ca07790,0],
		[0x3ca07798,0],
		[0x3ca077a0,0],
		[0x3ca077a8,0],
		[0x3ca077b0,0],
		[0x3ca077b8,0],
		[0x3ca077c0,0],
		[0x3ca077c8,0],
		[0x3ca077d0,0],
		[0x3ca077d8,0],
		[0x3ca077e0,0],
		[0x3ca077e8,0],
		[0x3ca077f0,0],
		[0x3ca077f8,0],
		[0x3ca07800,1018027776],
		[0x3ca07808,1018005216],
		[0x3ca07818,377695824],
		[0x3ca07850,1017712640],
		[0x3ca07878,0],
		[0x3ca07880,1017149568],
		[0x3ca07888,1017149568],
		[0x3ca07890,0],
		[0x3ca078a0,1017149600],
		[0x3ca078a8,1017149600],
		[0x3ca078c8,0],
		[0x3ca078d0,0],
		[0x3ca078f0,0],
		[0x3ca079d8,0],
		[0x3ca07a38,0],
		[0x3ca07a58,0],
		[0x3ca07a80,0],
		[0x3ca07a88,0],
		[0x3ca07a90,0],
		[0x3ca07a98,0],
		[0x3ca07aa0,0],
		[0x3ca07aa8,0],
		[0x3ca07ab0,0],
		[0x3ca07ab8,0],
		[0x3ca07ad0,0],
		[0x3ca07ad8,0],
		[0x3ca07ae0,393452032],
		[0x3ca07ae8,1017150336],
		[0x3ca07af0,0],
		[0x3ca07af8,0],
		[0x3ca07b00,0],
		[0x3ca07b08,0],
		[0x3ca07b10,1017150224],
		[0x3ca07b18,1017150224],
		[0x3ca07b28,387978080],
		[0x3ca07b30,0],
		[0x3ca07b48,0],
		[0x3ca07b50,0],
		[0x3ca07b58,0],
		[0x3ca07b60,1018980928],
		[0x3ca07b68,392499200],
		[0x3ca07b70,1018461184],
		[0x3ca07b78,0],
		[0x3ca07b80,0],
		[0x3ca07b88,0],
		[0x3ca07b90,0],
		[0x3ca07b98,0],
		[0x3ca07ba0,0],
		[0x3ca07ba8,0],
		[0x3ca07bb0,0],
		[0x3ca07bb8,0],
		[0x3ca07bc0,0],
		[0x3ca07bc8,0],
		[0x3ca07bd0,0],
		[0x3ca07bd8,0],
		[0x3ca07be0,0],
		[0x3ca07be8,0],
		[0x3ca07bf0,0],
		[0x3ca07bf8,0],
		[0x3ca07c00,0],
		[0x3ca07c08,0],
		[0x3ca07c10,0],
		[0x3ca07c18,0],
		[0x3ca07c20,0],
		[0x3ca07c28,0],
		[0x3ca07c30,0],
		[0x3ca07c38,0],
		[0x3ca07c40,0],
		[0x3ca07c48,0],
		[0x3ca07c50,0],
		[0x3ca07c58,0],
		[0x3ca07c60,0],
		[0x3ca07c68,0],
		[0x3ca07c70,0],
		[0x3ca07c78,0],
		[0x3ca07c80,0],
		[0x3ca07c88,0],
		[0x3ca07c90,0],
		[0x3ca07c98,0],
		[0x3ca07ca0,0],
		[0x3ca07ca8,0],
		[0x3ca07cb0,0],
		[0x3ca07cb8,0],
		[0x3ca07cc0,0],
		[0x3ca07cc8,0],
		[0x3ca07cd0,0],
		[0x3ca07cd8,0],
		[0x3ca07ce0,0],
		[0x3ca07ce8,0],
		[0x3ca07cf0,0],
		[0x3ca07cf8,0],
		[0x3ca07d00,0],
		[0x3ca07d08,0],
		[0x3ca07d10,0],
		[0x3ca07d18,0],
		[0x3ca07d20,0],
		[0x3ca07d28,0],
		[0x3ca07d30,0],
		[0x3ca07d38,0],
		[0x3ca07d40,0],
		[0x3ca07d48,0],
		[0x3ca07d50,0],
		[0x3ca07d58,0],
		[0x3ca07d60,0],
		[0x3ca07d68,0],
		[0x3ca07d70,0],
		[0x3ca07d78,0],
		[0x3ca07d80,0],
		[0x3ca07d88,0],
		[0x3ca07d90,0],
		[0x3ca07d98,0],
		[0x3ca07da0,0],
		[0x3ca07da8,0],
		[0x3ca07db0,0],
		[0x3ca07db8,0],
		[0x3ca07dc0,0],
		[0x3ca07dc8,0],
		[0x3ca07dd0,0],
		[0x3ca07dd8,0],
		[0x3ca07de0,0],
		[0x3ca07de8,0],
		[0x3ca07df0,0],
		[0x3ca07df8,0],
		[0x3ca07e00,0],
		[0x3ca07e08,0],
		[0x3ca07e10,0],
		[0x3ca07e18,0],
		[0x3ca07e20,0],
		[0x3ca07e28,0],
		[0x3ca07e30,0],
		[0x3ca07e38,0],
		[0x3ca07e40,0],
		[0x3ca07e48,0],
		[0x3ca07e50,0],
		[0x3ca07e58,0],
		[0x3ca07e60,0],
		[0x3ca07e68,0],
		[0x3ca07e70,0],
		[0x3ca07e78,0],
		[0x3ca07e80,0],
		[0x3ca07e88,0],
		[0x3ca07e90,0],
		[0x3ca07e98,0],
		[0x3ca07ea0,0],
		[0x3ca07ea8,0],
		[0x3ca07eb0,0],
		[0x3ca07eb8,0],
		[0x3ca07ec0,0],
		[0x3ca07ec8,0],
		[0x3ca07ed0,0],
		[0x3ca07ed8,0],
		[0x3ca07ee0,0],
		[0x3ca07ee8,0],
		[0x3ca07ef0,0],
		[0x3ca07ef8,0],
		[0x3ca07f00,0],
		[0x3ca07f08,0],
		[0x3ca07f10,0],
		[0x3ca07f18,0],
		[0x3ca07f20,0],
		[0x3ca07f28,0],
		[0x3ca07f30,0],
		[0x3ca07f38,0],
		[0x3ca07f40,0],
		[0x3ca07f48,0],
		[0x3ca07f50,0],
		[0x3ca07f58,0],
		[0x3ca07f60,0],
		[0x3ca07f68,0],
		[0x3ca07f70,0],
		[0x3ca07f78,0],
		[0x3ca07f80,0],
		[0x3ca07f88,0],
		[0x3ca07f90,0],
		[0x3ca07f98,0],
		[0x3ca07fa0,0],
		[0x3ca07fa8,0],
		[0x3ca07fb0,0],
		[0x3ca07fb8,0],
		[0x3ca07fc0,0],
		[0x3ca07fc8,0],
		[0x3ca07fd0,0],
		[0x3ca07fd8,0],
		[0x3ca07fe0,0],
		[0x3ca07fe8,0],
		[0x3ca07ff0,0],
		[0x3ca07ff8,0],
		[0, 0]
]).
unknown([
		[0, 0]
]).
long([
		[0x3ca07020,140375149809664],
		[0x3ca07028,47274700443648],
		[0x3ca07030,4160393216],
		[0x3ca07038,1432002560],
		[0x3ca07040,140737488351232],
		[0x3ca07048,140737488351232],
		[0x3ca07058,4294967299],
		[0x3ca07068,3],
		[0x3ca07070,300],
		[0x3ca07098,1],
		[0x3ca070b0,5195],
		[0x3ca070b8,87581],
		[0x3ca070c0,84062],
		[0x3ca070d8,4840],
		[0x3ca070e0,12484],
		[0x3ca070e8,33],
		[0x3ca070f8,4194304],
		[0x3ca07100,4280484],
		[0x3ca07108,6380928],
		[0x3ca07110,6386114],
		[0x3ca07118,6393856],
		[0x3ca07120,8609792],
		[0x3ca07128,140737488349136],
		[0x3ca07130,140737488349836],
		[0x3ca07138,140737488349845],
		[0x3ca07140,140737488349845],
		[0x3ca07148,140737488351206],
		[0x3ca07150,33],
		[0x3ca07158,140375149789184],
		[0x3ca07160,16],
		[0x3ca07168,126614525],
		[0x3ca07170,6],
		[0x3ca07178,4096],
		[0x3ca07180,17],
		[0x3ca07190,3],
		[0x3ca07198,4194368],
		[0x3ca071a0,4],
		[0x3ca071b0,5],
		[0x3ca071b8,9],
		[0x3ca071c0,7],
		[0x3ca071c8,140375147548672],
		[0x3ca071d0,8],
		[0x3ca071e0,9],
		[0x3ca071e8,4224640],
		[0x3ca071f0,11],
		[0x3ca071f8,1000],
		[0x3ca07200,12],
		[0x3ca07208,1000],
		[0x3ca07210,13],
		[0x3ca07218,1000],
		[0x3ca07220,14],
		[0x3ca07228,1000],
		[0x3ca07230,23],
		[0x3ca07240,25],
		[0x3ca07248,140737488349801],
		[0x3ca07250,26],
		[0x3ca07260,31],
		[0x3ca07268,140737488351206],
		[0x3ca07270,15],
		[0x3ca07278,140737488349817],
		[0x3ca072c0,4342],
		[0x3ca072c8,805],
		[0x3ca07320,140375149789184],
		[0x3ca07340,205],
		[0x3ca07780,4295004975],
		[0x3ca07820,140375794524160],
		[0x3ca07828,47274055729152],
		[0x3ca07830,4160233472],
		[0x3ca07838,1432162304],
		[0x3ca07840,140737488351232],
		[0x3ca07848,140737488351232],
		[0x3ca07858,4294967297],
		[0x3ca07860,32],
		[0x3ca07868,3],
		[0x3ca07898,1],
		[0x3ca078b0,1267],
		[0x3ca078b8,15299],
		[0x3ca078c0,15291],
		[0x3ca078d8,134],
		[0x3ca078e0,2087],
		[0x3ca078e8,33],
		[0x3ca078f8,4194304],
		[0x3ca07900,4236324],
		[0x3ca07908,6335936],
		[0x3ca07910,6337840],
		[0x3ca07918,6340608],
		[0x3ca07920,6590464],
		[0x3ca07928,140737488349344],
		[0x3ca07930,140737488349996],
		[0x3ca07938,140737488350037],
		[0x3ca07940,140737488350037],
		[0x3ca07948,140737488351183],
		[0x3ca07950,33],
		[0x3ca07958,140375794503680],
		[0x3ca07960,16],
		[0x3ca07968,126614525],
		[0x3ca07970,6],
		[0x3ca07978,4096],
		[0x3ca07980,17],
		[0x3ca07990,3],
		[0x3ca07998,4194368],
		[0x3ca079a0,4],
		[0x3ca079b0,5],
		[0x3ca079b8,9],
		[0x3ca079c0,7],
		[0x3ca079c8,140375792263168],
		[0x3ca079d0,8],
		[0x3ca079e0,9],
		[0x3ca079e8,4212368],
		[0x3ca079f0,11],
		[0x3ca079f8,1000],
		[0x3ca07a00,12],
		[0x3ca07a08,1000],
		[0x3ca07a10,13],
		[0x3ca07a18,1000],
		[0x3ca07a20,14],
		[0x3ca07a28,1000],
		[0x3ca07a30,23],
		[0x3ca07a40,25],
		[0x3ca07a48,140737488349961],
		[0x3ca07a50,26],
		[0x3ca07a60,31],
		[0x3ca07a68,140737488351183],
		[0x3ca07a70,15],
		[0x3ca07a78,140737488349977],
		[0x3ca07ac0,1197],
		[0x3ca07b20,140375794503680],
		[0x3ca07b40,205],
		[0, 0]
]).
int([
		[0x3ca07010,113],
		[0x3ca07014,0],
		[0x3ca07024,32683],
		[0x3ca0702c,11006],
		[0x3ca07034,0],
		[0x3ca0703c,0],
		[0x3ca07058,3],
		[0x3ca0705c,1],
		[0x3ca07060,86],
		[0x3ca07064,0],
		[0x3ca07068,3],
		[0x3ca0706c,0],
		[0x3ca07070,300],
		[0x3ca07074,0],
		[0x3ca07078,0],
		[0x3ca0707c,0],
		[0x3ca07090,0],
		[0x3ca07094,0],
		[0x3ca07098,1],
		[0x3ca0709c,0],
		[0x3ca070b0,5195],
		[0x3ca070b4,0],
		[0x3ca070bc,0],
		[0x3ca070c4,0],
		[0x3ca070c8,0],
		[0x3ca070cc,0],
		[0x3ca070d0,0],
		[0x3ca070d4,0],
		[0x3ca070d8,4840],
		[0x3ca070dc,0],
		[0x3ca070e0,12484],
		[0x3ca070e4,0],
		[0x3ca070e8,33],
		[0x3ca070ec,0],
		[0x3ca070f0,0],
		[0x3ca070f4,0],
		[0x3ca070fc,0],
		[0x3ca07104,0],
		[0x3ca0710c,0],
		[0x3ca07114,0],
		[0x3ca0711c,0],
		[0x3ca07124,0],
		[0x3ca07150,33],
		[0x3ca07154,0],
		[0x3ca0715c,32683],
		[0x3ca07160,16],
		[0x3ca07164,0],
		[0x3ca0716c,0],
		[0x3ca07170,6],
		[0x3ca07174,0],
		[0x3ca07178,4096],
		[0x3ca0717c,0],
		[0x3ca07180,17],
		[0x3ca07184,0],
		[0x3ca07188,100],
		[0x3ca0718c,0],
		[0x3ca07190,3],
		[0x3ca07194,0],
		[0x3ca0719c,0],
		[0x3ca071a0,4],
		[0x3ca071a4,0],
		[0x3ca071a8,56],
		[0x3ca071ac,0],
		[0x3ca071b0,5],
		[0x3ca071b4,0],
		[0x3ca071b8,9],
		[0x3ca071bc,0],
		[0x3ca071c0,7],
		[0x3ca071c4,0],
		[0x3ca071cc,32683],
		[0x3ca071d0,8],
		[0x3ca071d4,0],
		[0x3ca071d8,0],
		[0x3ca071dc,0],
		[0x3ca071e0,9],
		[0x3ca071e4,0],
		[0x3ca071ec,0],
		[0x3ca071f0,11],
		[0x3ca071f4,0],
		[0x3ca071f8,1000],
		[0x3ca071fc,0],
		[0x3ca07200,12],
		[0x3ca07204,0],
		[0x3ca07208,1000],
		[0x3ca0720c,0],
		[0x3ca07210,13],
		[0x3ca07214,0],
		[0x3ca07218,1000],
		[0x3ca0721c,0],
		[0x3ca07220,14],
		[0x3ca07224,0],
		[0x3ca07228,1000],
		[0x3ca0722c,0],
		[0x3ca07230,23],
		[0x3ca07234,0],
		[0x3ca07238,0],
		[0x3ca0723c,0],
		[0x3ca07240,25],
		[0x3ca07244,0],
		[0x3ca07250,26],
		[0x3ca07254,0],
		[0x3ca07258,0],
		[0x3ca0725c,0],
		[0x3ca07260,31],
		[0x3ca07264,0],
		[0x3ca07270,15],
		[0x3ca07274,0],
		[0x3ca07280,0],
		[0x3ca07284,0],
		[0x3ca07288,0],
		[0x3ca0728c,0],
		[0x3ca07290,0],
		[0x3ca07294,0],
		[0x3ca07298,0],
		[0x3ca0729c,0],
		[0x3ca072a0,0],
		[0x3ca072a4,0],
		[0x3ca072a8,0],
		[0x3ca072ac,0],
		[0x3ca072b0,0],
		[0x3ca072b4,0],
		[0x3ca072b8,0],
		[0x3ca072bc,0],
		[0x3ca072c0,4342],
		[0x3ca072c4,0],
		[0x3ca072c8,805],
		[0x3ca072cc,0],
		[0x3ca072d0,0],
		[0x3ca072d4,0],
		[0x3ca072d8,48],
		[0x3ca072dc,0],
		[0x3ca072f0,0],
		[0x3ca072f4,0],
		[0x3ca072f8,0],
		[0x3ca072fc,0],
		[0x3ca07300,0],
		[0x3ca07304,0],
		[0x3ca07308,0],
		[0x3ca0730c,0],
		[0x3ca07324,32683],
		[0x3ca07330,0],
		[0x3ca07334,0],
		[0x3ca07340,205],
		[0x3ca07344,0],
		[0x3ca07348,0],
		[0x3ca0734c,0],
		[0x3ca07350,0],
		[0x3ca07354,0],
		[0x3ca07358,0],
		[0x3ca0735c,0],
		[0x3ca07378,0],
		[0x3ca0737c,0],
		[0x3ca07380,0],
		[0x3ca07384,0],
		[0x3ca07388,0],
		[0x3ca0738c,0],
		[0x3ca07390,0],
		[0x3ca07394,0],
		[0x3ca07398,0],
		[0x3ca0739c,0],
		[0x3ca073a0,0],
		[0x3ca073a4,0],
		[0x3ca073a8,0],
		[0x3ca073ac,0],
		[0x3ca073b0,0],
		[0x3ca073b4,0],
		[0x3ca073b8,0],
		[0x3ca073bc,0],
		[0x3ca073c0,0],
		[0x3ca073c4,0],
		[0x3ca073c8,0],
		[0x3ca073cc,0],
		[0x3ca073d0,0],
		[0x3ca073d4,0],
		[0x3ca073d8,0],
		[0x3ca073dc,0],
		[0x3ca073e0,0],
		[0x3ca073e4,0],
		[0x3ca073e8,0],
		[0x3ca073ec,0],
		[0x3ca073f0,0],
		[0x3ca073f4,0],
		[0x3ca073f8,0],
		[0x3ca073fc,0],
		[0x3ca07400,0],
		[0x3ca07404,0],
		[0x3ca07408,0],
		[0x3ca0740c,0],
		[0x3ca07410,0],
		[0x3ca07414,0],
		[0x3ca07418,0],
		[0x3ca0741c,0],
		[0x3ca07420,0],
		[0x3ca07424,0],
		[0x3ca07428,0],
		[0x3ca0742c,0],
		[0x3ca07430,0],
		[0x3ca07434,0],
		[0x3ca07438,0],
		[0x3ca0743c,0],
		[0x3ca07440,0],
		[0x3ca07444,0],
		[0x3ca07448,0],
		[0x3ca0744c,0],
		[0x3ca07450,0],
		[0x3ca07454,0],
		[0x3ca07458,0],
		[0x3ca0745c,0],
		[0x3ca07460,0],
		[0x3ca07464,0],
		[0x3ca07468,0],
		[0x3ca0746c,0],
		[0x3ca07470,0],
		[0x3ca07474,0],
		[0x3ca07478,0],
		[0x3ca0747c,0],
		[0x3ca07480,0],
		[0x3ca07484,0],
		[0x3ca07488,0],
		[0x3ca0748c,0],
		[0x3ca07490,0],
		[0x3ca07494,0],
		[0x3ca07498,0],
		[0x3ca0749c,0],
		[0x3ca074a0,0],
		[0x3ca074a4,0],
		[0x3ca074a8,0],
		[0x3ca074ac,0],
		[0x3ca074b0,0],
		[0x3ca074b4,0],
		[0x3ca074b8,0],
		[0x3ca074bc,0],
		[0x3ca074c0,0],
		[0x3ca074c4,0],
		[0x3ca074c8,0],
		[0x3ca074cc,0],
		[0x3ca074d0,0],
		[0x3ca074d4,0],
		[0x3ca074d8,0],
		[0x3ca074dc,0],
		[0x3ca074e0,0],
		[0x3ca074e4,0],
		[0x3ca074e8,0],
		[0x3ca074ec,0],
		[0x3ca074f0,0],
		[0x3ca074f4,0],
		[0x3ca074f8,0],
		[0x3ca074fc,0],
		[0x3ca07500,0],
		[0x3ca07504,0],
		[0x3ca07508,0],
		[0x3ca0750c,0],
		[0x3ca07510,0],
		[0x3ca07514,0],
		[0x3ca07518,0],
		[0x3ca0751c,0],
		[0x3ca07520,0],
		[0x3ca07524,0],
		[0x3ca07528,0],
		[0x3ca0752c,0],
		[0x3ca07530,0],
		[0x3ca07534,0],
		[0x3ca07538,0],
		[0x3ca0753c,0],
		[0x3ca07540,0],
		[0x3ca07544,0],
		[0x3ca07548,0],
		[0x3ca0754c,0],
		[0x3ca07550,0],
		[0x3ca07554,0],
		[0x3ca07558,0],
		[0x3ca0755c,0],
		[0x3ca07560,0],
		[0x3ca07564,0],
		[0x3ca07568,0],
		[0x3ca0756c,0],
		[0x3ca07570,0],
		[0x3ca07574,0],
		[0x3ca07578,0],
		[0x3ca0757c,0],
		[0x3ca07580,0],
		[0x3ca07584,0],
		[0x3ca07588,0],
		[0x3ca0758c,0],
		[0x3ca07590,0],
		[0x3ca07594,0],
		[0x3ca07598,0],
		[0x3ca0759c,0],
		[0x3ca075a0,0],
		[0x3ca075a4,0],
		[0x3ca075a8,0],
		[0x3ca075ac,0],
		[0x3ca075b0,0],
		[0x3ca075b4,0],
		[0x3ca075b8,0],
		[0x3ca075bc,0],
		[0x3ca075c0,0],
		[0x3ca075c4,0],
		[0x3ca075c8,0],
		[0x3ca075cc,0],
		[0x3ca075d0,0],
		[0x3ca075d4,0],
		[0x3ca075d8,0],
		[0x3ca075dc,0],
		[0x3ca075e0,0],
		[0x3ca075e4,0],
		[0x3ca075e8,0],
		[0x3ca075ec,0],
		[0x3ca075f0,0],
		[0x3ca075f4,0],
		[0x3ca075f8,0],
		[0x3ca075fc,0],
		[0x3ca07600,0],
		[0x3ca07604,0],
		[0x3ca07608,0],
		[0x3ca0760c,0],
		[0x3ca07610,0],
		[0x3ca07614,0],
		[0x3ca07618,0],
		[0x3ca0761c,0],
		[0x3ca07620,0],
		[0x3ca07624,0],
		[0x3ca07628,0],
		[0x3ca0762c,0],
		[0x3ca07630,0],
		[0x3ca07634,0],
		[0x3ca07638,0],
		[0x3ca0763c,0],
		[0x3ca07640,0],
		[0x3ca07644,0],
		[0x3ca07648,0],
		[0x3ca0764c,0],
		[0x3ca07650,0],
		[0x3ca07654,0],
		[0x3ca07658,0],
		[0x3ca0765c,0],
		[0x3ca07660,0],
		[0x3ca07664,0],
		[0x3ca07668,0],
		[0x3ca0766c,0],
		[0x3ca07670,0],
		[0x3ca07674,0],
		[0x3ca07678,0],
		[0x3ca0767c,0],
		[0x3ca07680,0],
		[0x3ca07684,0],
		[0x3ca07688,0],
		[0x3ca0768c,0],
		[0x3ca07690,0],
		[0x3ca07694,0],
		[0x3ca07698,0],
		[0x3ca0769c,0],
		[0x3ca076a0,0],
		[0x3ca076a4,0],
		[0x3ca076a8,0],
		[0x3ca076ac,0],
		[0x3ca076b0,0],
		[0x3ca076b4,0],
		[0x3ca076b8,0],
		[0x3ca076bc,0],
		[0x3ca076c0,0],
		[0x3ca076c4,0],
		[0x3ca076c8,0],
		[0x3ca076cc,0],
		[0x3ca076d0,0],
		[0x3ca076d4,0],
		[0x3ca076d8,0],
		[0x3ca076dc,0],
		[0x3ca076e0,0],
		[0x3ca076e4,0],
		[0x3ca076e8,0],
		[0x3ca076ec,0],
		[0x3ca076f0,0],
		[0x3ca076f4,0],
		[0x3ca076f8,0],
		[0x3ca076fc,0],
		[0x3ca07700,0],
		[0x3ca07704,0],
		[0x3ca07708,0],
		[0x3ca0770c,0],
		[0x3ca07710,0],
		[0x3ca07714,0],
		[0x3ca07718,0],
		[0x3ca0771c,0],
		[0x3ca07720,0],
		[0x3ca07724,0],
		[0x3ca07728,0],
		[0x3ca0772c,0],
		[0x3ca07730,0],
		[0x3ca07734,0],
		[0x3ca07738,0],
		[0x3ca0773c,0],
		[0x3ca07740,0],
		[0x3ca07744,0],
		[0x3ca07748,0],
		[0x3ca0774c,0],
		[0x3ca07750,0],
		[0x3ca07754,0],
		[0x3ca07758,0],
		[0x3ca0775c,0],
		[0x3ca07760,0],
		[0x3ca07764,0],
		[0x3ca07768,0],
		[0x3ca0776c,0],
		[0x3ca07770,0],
		[0x3ca07774,0],
		[0x3ca07778,0],
		[0x3ca0777c,0],
		[0x3ca07784,1],
		[0x3ca07788,0],
		[0x3ca0778c,0],
		[0x3ca07790,0],
		[0x3ca07794,0],
		[0x3ca07798,0],
		[0x3ca0779c,0],
		[0x3ca077a0,0],
		[0x3ca077a4,0],
		[0x3ca077a8,0],
		[0x3ca077ac,0],
		[0x3ca077b0,0],
		[0x3ca077b4,0],
		[0x3ca077b8,0],
		[0x3ca077bc,0],
		[0x3ca077c0,0],
		[0x3ca077c4,0],
		[0x3ca077c8,0],
		[0x3ca077cc,0],
		[0x3ca077d0,0],
		[0x3ca077d4,0],
		[0x3ca077d8,0],
		[0x3ca077dc,0],
		[0x3ca077e0,0],
		[0x3ca077e4,0],
		[0x3ca077e8,0],
		[0x3ca077ec,0],
		[0x3ca077f0,0],
		[0x3ca077f4,0],
		[0x3ca077f8,0],
		[0x3ca077fc,0],
		[0x3ca07810,41],
		[0x3ca07814,0],
		[0x3ca07824,32683],
		[0x3ca0782c,11006],
		[0x3ca07834,0],
		[0x3ca0783c,0],
		[0x3ca07858,1],
		[0x3ca0785c,1],
		[0x3ca07860,32],
		[0x3ca07864,0],
		[0x3ca07868,3],
		[0x3ca0786c,0],
		[0x3ca07870,122],
		[0x3ca07874,0],
		[0x3ca07878,0],
		[0x3ca0787c,0],
		[0x3ca07890,0],
		[0x3ca07894,0],
		[0x3ca07898,1],
		[0x3ca0789c,0],
		[0x3ca078b0,1267],
		[0x3ca078b4,0],
		[0x3ca078b8,15299],
		[0x3ca078bc,0],
		[0x3ca078c0,15291],
		[0x3ca078c4,0],
		[0x3ca078c8,0],
		[0x3ca078cc,0],
		[0x3ca078d0,0],
		[0x3ca078d4,0],
		[0x3ca078d8,134],
		[0x3ca078dc,0],
		[0x3ca078e0,2087],
		[0x3ca078e4,0],
		[0x3ca078e8,33],
		[0x3ca078ec,0],
		[0x3ca078f0,0],
		[0x3ca078f4,0],
		[0x3ca078fc,0],
		[0x3ca07904,0],
		[0x3ca0790c,0],
		[0x3ca07914,0],
		[0x3ca0791c,0],
		[0x3ca07924,0],
		[0x3ca07950,33],
		[0x3ca07954,0],
		[0x3ca0795c,32683],
		[0x3ca07960,16],
		[0x3ca07964,0],
		[0x3ca0796c,0],
		[0x3ca07970,6],
		[0x3ca07974,0],
		[0x3ca07978,4096],
		[0x3ca0797c,0],
		[0x3ca07980,17],
		[0x3ca07984,0],
		[0x3ca07988,100],
		[0x3ca0798c,0],
		[0x3ca07990,3],
		[0x3ca07994,0],
		[0x3ca0799c,0],
		[0x3ca079a0,4],
		[0x3ca079a4,0],
		[0x3ca079a8,56],
		[0x3ca079ac,0],
		[0x3ca079b0,5],
		[0x3ca079b4,0],
		[0x3ca079b8,9],
		[0x3ca079bc,0],
		[0x3ca079c0,7],
		[0x3ca079c4,0],
		[0x3ca079cc,32683],
		[0x3ca079d0,8],
		[0x3ca079d4,0],
		[0x3ca079d8,0],
		[0x3ca079dc,0],
		[0x3ca079e0,9],
		[0x3ca079e4,0],
		[0x3ca079ec,0],
		[0x3ca079f0,11],
		[0x3ca079f4,0],
		[0x3ca079f8,1000],
		[0x3ca079fc,0],
		[0x3ca07a00,12],
		[0x3ca07a04,0],
		[0x3ca07a08,1000],
		[0x3ca07a0c,0],
		[0x3ca07a10,13],
		[0x3ca07a14,0],
		[0x3ca07a18,1000],
		[0x3ca07a1c,0],
		[0x3ca07a20,14],
		[0x3ca07a24,0],
		[0x3ca07a28,1000],
		[0x3ca07a2c,0],
		[0x3ca07a30,23],
		[0x3ca07a34,0],
		[0x3ca07a38,0],
		[0x3ca07a3c,0],
		[0x3ca07a40,25],
		[0x3ca07a44,0],
		[0x3ca07a50,26],
		[0x3ca07a54,0],
		[0x3ca07a58,0],
		[0x3ca07a5c,0],
		[0x3ca07a60,31],
		[0x3ca07a64,0],
		[0x3ca07a70,15],
		[0x3ca07a74,0],
		[0x3ca07a80,0],
		[0x3ca07a84,0],
		[0x3ca07a88,0],
		[0x3ca07a8c,0],
		[0x3ca07a90,0],
		[0x3ca07a94,0],
		[0x3ca07a98,0],
		[0x3ca07a9c,0],
		[0x3ca07aa0,0],
		[0x3ca07aa4,0],
		[0x3ca07aa8,0],
		[0x3ca07aac,0],
		[0x3ca07ab0,0],
		[0x3ca07ab4,0],
		[0x3ca07ab8,0],
		[0x3ca07abc,0],
		[0x3ca07ac0,1197],
		[0x3ca07ac4,0],
		[0x3ca07ac8,109],
		[0x3ca07acc,0],
		[0x3ca07ad0,0],
		[0x3ca07ad4,0],
		[0x3ca07ad8,0],
		[0x3ca07adc,0],
		[0x3ca07af0,0],
		[0x3ca07af4,0],
		[0x3ca07af8,0],
		[0x3ca07afc,0],
		[0x3ca07b00,0],
		[0x3ca07b04,0],
		[0x3ca07b08,0],
		[0x3ca07b0c,0],
		[0x3ca07b24,32683],
		[0x3ca07b30,0],
		[0x3ca07b34,0],
		[0x3ca07b40,205],
		[0x3ca07b44,0],
		[0x3ca07b48,0],
		[0x3ca07b4c,0],
		[0x3ca07b50,0],
		[0x3ca07b54,0],
		[0x3ca07b58,0],
		[0x3ca07b5c,0],
		[0x3ca07b78,0],
		[0x3ca07b7c,0],
		[0x3ca07b80,0],
		[0x3ca07b84,0],
		[0x3ca07b88,0],
		[0x3ca07b8c,0],
		[0x3ca07b90,0],
		[0x3ca07b94,0],
		[0x3ca07b98,0],
		[0x3ca07b9c,0],
		[0x3ca07ba0,0],
		[0x3ca07ba4,0],
		[0x3ca07ba8,0],
		[0x3ca07bac,0],
		[0x3ca07bb0,0],
		[0x3ca07bb4,0],
		[0x3ca07bb8,0],
		[0x3ca07bbc,0],
		[0x3ca07bc0,0],
		[0x3ca07bc4,0],
		[0x3ca07bc8,0],
		[0x3ca07bcc,0],
		[0x3ca07bd0,0],
		[0x3ca07bd4,0],
		[0x3ca07bd8,0],
		[0x3ca07bdc,0],
		[0x3ca07be0,0],
		[0x3ca07be4,0],
		[0x3ca07be8,0],
		[0x3ca07bec,0],
		[0x3ca07bf0,0],
		[0x3ca07bf4,0],
		[0x3ca07bf8,0],
		[0x3ca07bfc,0],
		[0x3ca07c00,0],
		[0x3ca07c04,0],
		[0x3ca07c08,0],
		[0x3ca07c0c,0],
		[0x3ca07c10,0],
		[0x3ca07c14,0],
		[0x3ca07c18,0],
		[0x3ca07c1c,0],
		[0x3ca07c20,0],
		[0x3ca07c24,0],
		[0x3ca07c28,0],
		[0x3ca07c2c,0],
		[0x3ca07c30,0],
		[0x3ca07c34,0],
		[0x3ca07c38,0],
		[0x3ca07c3c,0],
		[0x3ca07c40,0],
		[0x3ca07c44,0],
		[0x3ca07c48,0],
		[0x3ca07c4c,0],
		[0x3ca07c50,0],
		[0x3ca07c54,0],
		[0x3ca07c58,0],
		[0x3ca07c5c,0],
		[0x3ca07c60,0],
		[0x3ca07c64,0],
		[0x3ca07c68,0],
		[0x3ca07c6c,0],
		[0x3ca07c70,0],
		[0x3ca07c74,0],
		[0x3ca07c78,0],
		[0x3ca07c7c,0],
		[0x3ca07c80,0],
		[0x3ca07c84,0],
		[0x3ca07c88,0],
		[0x3ca07c8c,0],
		[0x3ca07c90,0],
		[0x3ca07c94,0],
		[0x3ca07c98,0],
		[0x3ca07c9c,0],
		[0x3ca07ca0,0],
		[0x3ca07ca4,0],
		[0x3ca07ca8,0],
		[0x3ca07cac,0],
		[0x3ca07cb0,0],
		[0x3ca07cb4,0],
		[0x3ca07cb8,0],
		[0x3ca07cbc,0],
		[0x3ca07cc0,0],
		[0x3ca07cc4,0],
		[0x3ca07cc8,0],
		[0x3ca07ccc,0],
		[0x3ca07cd0,0],
		[0x3ca07cd4,0],
		[0x3ca07cd8,0],
		[0x3ca07cdc,0],
		[0x3ca07ce0,0],
		[0x3ca07ce4,0],
		[0x3ca07ce8,0],
		[0x3ca07cec,0],
		[0x3ca07cf0,0],
		[0x3ca07cf4,0],
		[0x3ca07cf8,0],
		[0x3ca07cfc,0],
		[0x3ca07d00,0],
		[0x3ca07d04,0],
		[0x3ca07d08,0],
		[0x3ca07d0c,0],
		[0x3ca07d10,0],
		[0x3ca07d14,0],
		[0x3ca07d18,0],
		[0x3ca07d1c,0],
		[0x3ca07d20,0],
		[0x3ca07d24,0],
		[0x3ca07d28,0],
		[0x3ca07d2c,0],
		[0x3ca07d30,0],
		[0x3ca07d34,0],
		[0x3ca07d38,0],
		[0x3ca07d3c,0],
		[0x3ca07d40,0],
		[0x3ca07d44,0],
		[0x3ca07d48,0],
		[0x3ca07d4c,0],
		[0x3ca07d50,0],
		[0x3ca07d54,0],
		[0x3ca07d58,0],
		[0x3ca07d5c,0],
		[0x3ca07d60,0],
		[0x3ca07d64,0],
		[0x3ca07d68,0],
		[0x3ca07d6c,0],
		[0x3ca07d70,0],
		[0x3ca07d74,0],
		[0x3ca07d78,0],
		[0x3ca07d7c,0],
		[0x3ca07d80,0],
		[0x3ca07d84,0],
		[0x3ca07d88,0],
		[0x3ca07d8c,0],
		[0x3ca07d90,0],
		[0x3ca07d94,0],
		[0x3ca07d98,0],
		[0x3ca07d9c,0],
		[0x3ca07da0,0],
		[0x3ca07da4,0],
		[0x3ca07da8,0],
		[0x3ca07dac,0],
		[0x3ca07db0,0],
		[0x3ca07db4,0],
		[0x3ca07db8,0],
		[0x3ca07dbc,0],
		[0x3ca07dc0,0],
		[0x3ca07dc4,0],
		[0x3ca07dc8,0],
		[0x3ca07dcc,0],
		[0x3ca07dd0,0],
		[0x3ca07dd4,0],
		[0x3ca07dd8,0],
		[0x3ca07ddc,0],
		[0x3ca07de0,0],
		[0x3ca07de4,0],
		[0x3ca07de8,0],
		[0x3ca07dec,0],
		[0x3ca07df0,0],
		[0x3ca07df4,0],
		[0x3ca07df8,0],
		[0x3ca07dfc,0],
		[0x3ca07e00,0],
		[0x3ca07e04,0],
		[0x3ca07e08,0],
		[0x3ca07e0c,0],
		[0x3ca07e10,0],
		[0x3ca07e14,0],
		[0x3ca07e18,0],
		[0x3ca07e1c,0],
		[0x3ca07e20,0],
		[0x3ca07e24,0],
		[0x3ca07e28,0],
		[0x3ca07e2c,0],
		[0x3ca07e30,0],
		[0x3ca07e34,0],
		[0x3ca07e38,0],
		[0x3ca07e3c,0],
		[0x3ca07e40,0],
		[0x3ca07e44,0],
		[0x3ca07e48,0],
		[0x3ca07e4c,0],
		[0x3ca07e50,0],
		[0x3ca07e54,0],
		[0x3ca07e58,0],
		[0x3ca07e5c,0],
		[0x3ca07e60,0],
		[0x3ca07e64,0],
		[0x3ca07e68,0],
		[0x3ca07e6c,0],
		[0x3ca07e70,0],
		[0x3ca07e74,0],
		[0x3ca07e78,0],
		[0x3ca07e7c,0],
		[0x3ca07e80,0],
		[0x3ca07e84,0],
		[0x3ca07e88,0],
		[0x3ca07e8c,0],
		[0x3ca07e90,0],
		[0x3ca07e94,0],
		[0x3ca07e98,0],
		[0x3ca07e9c,0],
		[0x3ca07ea0,0],
		[0x3ca07ea4,0],
		[0x3ca07ea8,0],
		[0x3ca07eac,0],
		[0x3ca07eb0,0],
		[0x3ca07eb4,0],
		[0x3ca07eb8,0],
		[0x3ca07ebc,0],
		[0x3ca07ec0,0],
		[0x3ca07ec4,0],
		[0x3ca07ec8,0],
		[0x3ca07ecc,0],
		[0x3ca07ed0,0],
		[0x3ca07ed4,0],
		[0x3ca07ed8,0],
		[0x3ca07edc,0],
		[0x3ca07ee0,0],
		[0x3ca07ee4,0],
		[0x3ca07ee8,0],
		[0x3ca07eec,0],
		[0x3ca07ef0,0],
		[0x3ca07ef4,0],
		[0x3ca07ef8,0],
		[0x3ca07efc,0],
		[0x3ca07f00,0],
		[0x3ca07f04,0],
		[0x3ca07f08,0],
		[0x3ca07f0c,0],
		[0x3ca07f10,0],
		[0x3ca07f14,0],
		[0x3ca07f18,0],
		[0x3ca07f1c,0],
		[0x3ca07f20,0],
		[0x3ca07f24,0],
		[0x3ca07f28,0],
		[0x3ca07f2c,0],
		[0x3ca07f30,0],
		[0x3ca07f34,0],
		[0x3ca07f38,0],
		[0x3ca07f3c,0],
		[0x3ca07f40,0],
		[0x3ca07f44,0],
		[0x3ca07f48,0],
		[0x3ca07f4c,0],
		[0x3ca07f50,0],
		[0x3ca07f54,0],
		[0x3ca07f58,0],
		[0x3ca07f5c,0],
		[0x3ca07f60,0],
		[0x3ca07f64,0],
		[0x3ca07f68,0],
		[0x3ca07f6c,0],
		[0x3ca07f70,0],
		[0x3ca07f74,0],
		[0x3ca07f78,0],
		[0x3ca07f7c,0],
		[0x3ca07f80,0],
		[0x3ca07f84,0],
		[0x3ca07f88,0],
		[0x3ca07f8c,0],
		[0x3ca07f90,0],
		[0x3ca07f94,0],
		[0x3ca07f98,0],
		[0x3ca07f9c,0],
		[0x3ca07fa0,0],
		[0x3ca07fa4,0],
		[0x3ca07fa8,0],
		[0x3ca07fac,0],
		[0x3ca07fb0,0],
		[0x3ca07fb4,0],
		[0x3ca07fb8,0],
		[0x3ca07fbc,0],
		[0x3ca07fc0,0],
		[0x3ca07fc4,0],
		[0x3ca07fc8,0],
		[0x3ca07fcc,0],
		[0x3ca07fd0,0],
		[0x3ca07fd4,0],
		[0x3ca07fd8,0],
		[0x3ca07fdc,0],
		[0x3ca07fe0,0],
		[0x3ca07fe4,0],
		[0x3ca07fe8,0],
		[0x3ca07fec,0],
		[0x3ca07ff0,0],
		[0x3ca07ff4,0],
		[0x3ca07ff8,0],
		[0x3ca07ffc,0],
		[0, 0]
]).
string_val([
		[0x3ca07010,113],
		[0x3ca07060,86],
		[0x3ca07188,100],
		[0x3ca071a8,56],
		[0x3ca072d8,48],
		[0x3ca07810,41],
		[0x3ca07870,122],
		[0x3ca07988,100],
		[0x3ca079a8,56],
		[0x3ca07ac8,109],
		[0, 0]
]).
/* This file contains recursive predicates */
:- use_module(library(clpfd)).
:- use_module(reif).
:- style_check(-singleton).

isTrue([X, Y]):-
    X == 49.

isTrue([X|Tail]):-
    isTrue(Tail).

log(File_name, Name, Addr, Base):-
    Offset #= Addr - Base,
    open(File_name, append, Stream),
    write(Stream, Name),
    write(Stream, ':'),
    write(Stream, Offset),
    nl(Stream),
    close(Stream).

possible_task_struct(Base_addr) :-
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM2_addr, Pid_addr, Tgid_addr, Real_parent_addr, Parent_addr , Child_addr, 
           Group_leader_addr, Thread_group_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    %MM2_addr #> Base_addr + 1000,
    Tasks_addr #> MM2_addr - 100,
    %FS_struct_addr #< Base_addr + 4000,
    Tgid_addr #= Pid_addr + 4,
    Real_parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr - 8,
    Child_addr #= Parent_addr + 8,
    %FIXME This may be too strong
    Group_leader_addr #=< Child_addr +32,
    %Comm_addr #= Base_addr + 1656,
    %Tasks_addr #= Base_addr + 1072,
    %FS_struct_addr #= Base_addr + 2640,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    % make query after labeling
    MM2_val #> 0,
    integer(MM2_val),
    
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val,  Comm_addr, Comm_val ]),

    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_parent_addr, Real_parent_val, Group_leader_addr, Group_leader_val]),
    Real_parent_val #> 0,
    Group_leader_val #> 0,
    query_ts(Real_parent_val, Comm_offset, Tasks_offset),
    query_ts(Group_leader_val, Comm_offset, Tasks_offset),

    labeling([enum], [Cred_addr, Cred_val]),
    Cred_val #> 0,
    query_cred(Cred_val),

    labeling([enum], [FS_struct_addr, FS_struct_val]),
    FS_struct_val #> 0,
    %query_fs_struct(FS_struct_val),



    get_time(End),
    Time_past is End - Current,
    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    log("profile.txt", "tasks", Tasks_addr, Base_addr),
    log("profile.txt", "mm_struct", MM2_addr, Base_addr),
    log("profile.txt", "comm", Comm_addr, Base_addr),
    log("profile.txt", "parent", Parent_addr, Base_addr),
    log("profile.txt", "group_leader", Group_leader_addr, Base_addr),
    log("profile.txt", "cred", Cred_addr, Base_addr),

    
    print_nl('tasks offset', Tasks_offset),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).

possible_string_pointer(Base_addr) :-
    /* Verify if this pointer points to a stirng */
    string_val(Str),
    Str_profile = [
        [Name_addr, Name_val]
    ],
    tuples_in(Str_profile, Str),
    Name_addr #= Base_addr.

query_string_pointer(Val) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "string_pointer"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_mount_struct(Base_addr, Offset) :-
    pointer(Ptr),
    Ptr_profile = ([
        [Mnt_devname_addr, Mnt_devname_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Mnt_devname_addr #= Base_addr + Offset,
    labeling([enum], [Mnt_devname_addr, Mnt_devname_val]),
    query_string_pointer(Mnt_devname_val).



possible_kernel_param(Base_addr) :-
    string_val(Str),
    Str_profile = [
        [Name_addr, Name_val]
    ],
    tuples_in(Str_profile, Str),
    Name_addr #= Base_addr.

possible_in_device(Base_addr) :-
    /* in_ifaddr remains the same across kernel versions 
       but we need this query to find ip_ptr in net_device struct
    */
    /*
        struct net_device *dev;
        int               refcnt;
        int               dead;
        struct in_ifaddr  *ifa_list;
    */
    pointer(Ptr),
    int(Int),
    Ptr_profile = ([
        [Dev_addr, Dev_val],
        [Ifa_list_addr, Ifa_list_val]
    ]),
    Int_profile = ([
        [Refcnt_addr, Refcnt_val],
        [Dead_addr, Dead_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Dead_addr #= Refcnt_addr + 4,
    chain([Dev_addr, Refcnt_addr, Dead_addr, Ifa_list_addr], #<),
    Dev_addr #= Base_addr,
    Ifa_list_addr #= Base_addr + 16,
    labeling([enum], [Ifa_list_addr, Ifa_list_val]),

    process_create(path('python'),
                    ['subquery.py', Ifa_list_val, "in_ifaddr"],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_in_ifaddr(Base_addr) :-
    /* in_ifaddr remains the same across kernel versions */
    pointer(Ptr),
    Ptr_profile = ([
        [Hash_addr, Hash_val],
        [Ifa_next_addr, Ifa_next_val],
        [Ifa_dev_addr, Ifa_dev_val],
        [Rcu_head_addr, Rcu_head_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([Hash_addr, Ifa_next_addr, Ifa_dev_addr, Rcu_head_addr], #<),
    Hash_addr #= Base_addr,
    Ifa_next_addr #= Hash_addr + 16,
    Ifa_dev_addr #= Ifa_next_addr + 8,
    Rcu_head_addr #= Ifa_dev_addr + 8,
    labeling([enum], [Hash_addr, Ifa_next_addr, Ifa_dev_addr, Rcu_head_addr]).

possible_mm_struct2(Current_addr) :- 
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),

    Ptr_profile = [
        [Mmap_addr, Mmap_val],
        [Pgd_addr, Pgd_val]  
    ],
    Ulong_profile = [
        [Mmap_base_addr, Mmap_base_val],
        [Task_size_addr, Task_size_val],
        [Start_brk_addr, Start_brk_val],
        [Brk_addr, Brk_val],
        [Start_stack_addr, Start_stack_val],
        [ARG_start_addr, ARG_start_val]
    ],
    Mmap_addr #= Current_addr,


    Mmap_base_addr #> Mmap_addr,
    %FIXME mmap_base need more value constraint, because we removed mmap_legacy_base and highest_vm_end.
    Mmap_base_val #> 0x7f0000000000,
    
    chain([Mmap_base_addr, Task_size_addr, Pgd_addr], #<),


    Pgd_addr #> Task_size_addr,
    Pgd_addr #=< Task_size_addr + 40,
    %FIXME: This rule may not be true for other mm_struct.
    Task_size_val #>= 0x7ffffffff000,


    Start_brk_addr #> Pgd_addr,
    Start_stack_val #> 0x7ff000000000,
    ARG_start_addr #< Current_addr + 500,
    chain([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr], #<),
    ARG_start_addr #= Start_brk_addr + 24,
    Brk_val #< 0x7ff000000000,
    ARG_start_val #> 0x7ff000000000,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
/*

    labeling([enum], [Mmap_addr, Mmap_val, Mmap_base_addr, Pgd_addr, Pgd_val]),
    Mmap_val #> 0,
    Pgd_val #> 0,
    
    process_create(path('python'),
                    ['subquery.py', Mmap_val, "vm_area_struct", Current_addr],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    label([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr]),*/
    statistics(real_time, [End|_]),

    log("./profile/mm_struct", "mmap", Mmap_addr, Current_addr),
    log("./profile/mm_struct", "mmap_base", Mmap_base_addr, Current_addr),
    log("./profile/mm_struct", "pgd", Pgd_addr, Current_addr),
    log("./profile/mm_struct", "start_brk", Start_brk_addr, Current_addr),
    log("./profile/mm_struct", "brk", Brk_addr, Current_addr),
    log("./profile/mm_struct", "start_stack", Start_stack_addr, Current_addr),
    log("./profile/mm_struct", "arg_start", ARG_start_addr, Current_addr).
    %log("./profile/mm_struct", "mm_struct", End, Start).

possible_mm_struct2(Current_addr) :- 
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),

    Ptr_profile = [
        [Mmap_addr, Mmap_val],
        [Pgd_addr, Pgd_val]  
    ],
    Ulong_profile = [
        [Mmap_base_addr, Mmap_base_val],
        [Mmap_legacy_base_addr, Mmap_legacy_base_val],
        [Task_size_addr, Task_size_val],
        [High_vm_end_addr, High_vm_end_val],
        [Start_brk_addr, Start_brk_val],
        [Brk_addr, Brk_val],
        [Start_stack_addr, Start_stack_val],
        [ARG_start_addr, ARG_start_val]
    ],
    Mmap_addr #= Current_addr,


    Mmap_base_addr #> Mmap_addr,
    %FIXME mmap_base need more value constraint, because we removed mmap_legacy_base and highest_vm_end.
    Mmap_base_val #> 0x7f0000000000,
    High_vm_end_addr #= Mmap_base_addr + 24,
    
    chain([Mmap_base_addr, Mmap_legacy_base_addr, Task_size_addr, High_vm_end_addr, Pgd_addr], #<),


    Pgd_addr #> Task_size_addr,
    Pgd_addr #=< Task_size_addr + 40,
    %FIXME: This rule may not be true for other mm_struct.
    Task_size_val #>= 0x7ffffffff000,


    Start_brk_addr #> Pgd_addr,
    Start_stack_val #> 0x7ff000000000,
    ARG_start_addr #< Current_addr + 500,
    chain([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr], #<),
    ARG_start_addr #= Start_brk_addr + 24,
    Brk_val #< 0x7ff000000000,
    ARG_start_val #> 0x7ff000000000,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
/*

    labeling([enum], [Mmap_addr, Mmap_val, Mmap_base_addr, Pgd_addr, Pgd_val]),
    Mmap_val #> 0,
    Pgd_val #> 0,
    
    process_create(path('python'),
                    ['subquery.py', Mmap_val, "vm_area_struct", Current_addr],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    label([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr]),*/
    statistics(real_time, [End|_]),

    log("./profile/mm_struct", "mmap", Mmap_addr, Current_addr),
    log("./profile/mm_struct", "mmap_base", Mmap_base_addr, Current_addr),
    log("./profile/mm_struct", "pgd", Pgd_addr, Current_addr),
    log("./profile/mm_struct", "start_brk", Start_brk_addr, Current_addr),
    log("./profile/mm_struct", "brk", Brk_addr, Current_addr),
    log("./profile/mm_struct", "start_stack", Start_stack_addr, Current_addr),
    log("./profile/mm_struct", "arg_start", ARG_start_addr, Current_addr).
    %log("./profile/mm_struct", "mm_struct", End, Start).


possible_vm_area_struct(Base_addr, MM_addr) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [VM_next_addr, VM_next_val],
        [Vm_mm_addr, Vm_mm_val],
        [VM_file_addr, VM_file_val]
    ],
    Ulong_profile = [
        [VM_start_addr, VM_start_val],
        [VM_end_addr, VM_end_val],
        [VM_flag_addr, VM_flag_val]
        /*VM_pgoff is 0, and we do not consider 0 as ulong*/
        %[VM_pgoff_addr, VM_pgoff_val]
    ],
    VM_start_addr #>= Base_addr,
    chain([VM_start_addr, VM_end_addr, VM_next_addr, Vm_mm_addr, VM_flag_addr, VM_file_addr], #<),
    VM_end_addr #= VM_start_addr + 8,
    VM_next_addr #= VM_end_addr + 8,
    VM_next_addr #< Base_addr + 32,

    Vm_mm_val #= MM_addr,
    VM_file_addr #< Base_addr + 180,
    VM_pgoff_addr #= VM_file_addr - 8,
    VM_flag_val #< 0x88888888,
    VM_file_addr #< Base_addr + 200,

    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    %FIXME: VM_flag may need value constraints.

    label([VM_next_addr, VM_next_val]),
    /* vm_file maybe zero! */
    labeling([enum], [VM_start_addr, VM_end_addr, Vm_mm_addr, Vm_mm_val, VM_flag_addr, VM_pgoff_addr, VM_file_addr, VM_file_val]),
    
    VM_file_val #> 0,
    
    process_create(path('python'),
                ['subquery.py', VM_file_val, "vm_file"],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    statistics(real_time, [End|_]),
    

    log("./profile/vm_area_struct", "vm_start", VM_start_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_end", VM_end_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_next", VM_next_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_mm", Vm_mm_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_flag", VM_flag_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_pgoff", VM_pgoff_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_file", VM_file_addr, Base_addr).
    %log("./profile/vm_area_struct", "vm_area_struct", End, Start).

check_vm_area_struct(Base_addr, Level) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "vm_area_struct", Level],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vm_file(Base_addr) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [Vfs_mount_addr, Vfs_mount_val],
        [Dentry_addr, Dentry_val],
        [F_op_addr, F_op_val]
    ],
    tuples_in(Ptr_profile, Ptr),
    Vfs_mount_addr #> Base_addr,
    Dentry_addr #= Vfs_mount_addr + 8,
    Dentry_addr #< Base_addr + 40,
    Vfs_mount_val #> 0,
    Dentry_val #> 0,
    F_op_addr #= Base_addr + 40, 
    F_op_val #> 0,
    chain([Vfs_mount_addr, Dentry_addr, F_op_addr], #<),
    labeling([enum], [Vfs_mount_val, Dentry_val, F_op_addr, F_op_val]),


    process_create(path('python'),
                    ['subquery.py', Vfs_mount_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),
/*
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/
    query_file_operation(F_op_val),
    statistics(real_time, [End|_]),

    log("./profile/file", "f_path", Vfs_mount_addr, Base_addr),
    log("./profile/file", "f_op", F_op_addr, Base_addr).
    %log("./profile/file", "file", End, Start).



query_file_operation(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result).

possible_name_pointer(Val, Name_offset) :-
    /* The value at val+name_offset is a string pointer */
    current_predicate(pointer/1),
    pointer(Ptr),
    Ptr_profile = ([
        [Name_addr, Name_val]
    ]),
    Name_addr #= Val + Name_offset,
    tuples_in(Ptr_profile, Ptr),
    labeling([enum], [Name_addr, Name_val]),
    query_string_pointer(Name_val).

possible_vfs_mount(Base_addr) :-
    pointer(Ptr),
    int(Int),
    Ptr_profile = [
        [Dentry_addr, Dentry_val],
        [Mnt_sb_addr, Mnt_sb_val]
    ],
    Int_profile = [
        [Mnt_flags_addr, Mnt_flags_val]
    ],
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Dentry_addr #= Base_addr,
    Dentry_val #> 0,
    Mnt_flags_addr #= Dentry_addr + 16,
    Mnt_flags_val #>= 0,
    Mnt_sb_val #> 0,
    chain([Dentry_addr, Mnt_sb_addr, Mnt_flags_addr], #<),
    label([Dentry_addr, Dentry_val, Mnt_flags_addr, Mnt_flags_val]).
 
possible_dentry(Base_addr) :-
    /*
        struct dentry *d_parent;
        struct qstr d_name contains char *name; it's a name pointer
        struct inode *d_inode;
        unsigned char d_iname[LEN];
        const struct dentry_operations *d_op;
        struct list_head d_child;
        struct list_head d_subdirs;
        union {
	        struct hlist_node d_alias;
	        struct rcu_head d_rcu;
        } d_u;
    */
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    string_val(Str),
    Ptr_profile = [
        [Dparent_addr, Dparent_val],
        [Dname_addr, Dname_val],
        [D_inode_addr, D_inode_val],
        [D_op_addr, D_op_val],
        [Dchild_addr, Dchild_val],
        [D_subdirs_addr, D_subdirs_val]
    ],
    Str_profile = [
        [D_iname_addr, D_iname_val]
    ],
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    Dparent_addr #> Base_addr,
    chain([Dparent_addr, Dname_addr, D_inode_addr, D_iname_addr, 
            D_op_addr, Dchild_addr, D_subdirs_addr], #<),
    D_subdirs_addr #= Dchild_addr + 16,
    D_subdirs_addr #< Base_addr + 200,
    Dparent_val #> 0,
    labeling([enum], [Dname_addr, Dname_val]),
    query_string_pointer(Dname_val),
    labeling([enum], [D_iname_addr, D_iname_val]),
    D_iname_offset #= D_iname_addr - Base_addr,
    Dname_offset #= Dname_addr - Base_addr,
    labeling([enum], [Dparent_addr, Dparent_val]),
    Parent_dname #= Dparent_val + Dname_offset,
    process_create(path('python'),
                    ['subquery.py', Parent_dname, "name_pointer", Dname_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    labeling([enum], [D_inode_addr, D_inode_val]),
    query_inode(D_inode_val),
    /* d_op might be zero! */
    labeling([enum], [D_op_addr, D_op_val]),
    %query_file_operation(D_op_val),

    labeling([enum], [Dchild_addr, Dchild_val]),
    Dchild_offset #= Dchild_addr - Base_addr,
    Dchild_init #= Dchild_val - Dchild_offset,
    query_name_pointer(Dchild_init, Dname_offset),

    /* This can be hardcoded as d_child_addr + 16 */
    labeling([enum], [D_subdirs_addr, D_subdirs_val]),
    Dsubdirs_offset #= D_subdirs_addr - Base_addr,
    D_subdirs_init #= D_subdirs_val - Dsubdirs_offset,
    query_name_pointer(D_subdirs_init, Dname_offset),

    _Name_addr #= Dname_addr - 8,

    statistics(real_time, [End|_]),

    log("./profile/dentry", "parent", Dparent_addr, Base_addr),
    log("./profile/dentry", "d_name", _Name_addr, Base_addr),
    log("./profile/dentry", "d_inode", D_inode_addr, Base_addr),
    log("./profile/dentry", "d_iname", D_iname_addr, Base_addr),
    log("./profile/dentry", "dchild", Dchild_addr, Base_addr),
    log("./profile/dentry", "d_subdirs", D_subdirs_addr, Base_addr),
    log("./profile/dentry", "dentry", End, Start).

query_inode(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_inode(Base_addr) :-
    /*
        struct inode_operations *i_op;
        struct super_block      *i_sb;
        struct address_space    *i_mapping;
    */
    statistics(real_time, [Start|_]),

    pointer(Ptr),
    long(Ulg),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [I_op_addr, I_op_val],
        [I_sb_addr, I_sb_val],
        [I_mapping_addr, I_mapping_val],
        [I_fop_addr, I_fop_val]
    ]),
    Ulong_profile = ([
        /* i_mode is actually not long type. */
        [I_mode_addr, I_mode_val],
        [I_ino_addr, I_ino_val],
        [I_size_addr, I_size_val],
        [I_atime_addr, I_atime_val],
        [_I_atime_addr, _I_atime_val],
        [I_mtime_addr, I_mtime_val],
        [I_ctime_addr, I_ctime_val],
        [_I_ctime_addr, _I_ctime_val]
    ]),
    Int_profile = ([
        [I_uid_addr, I_uid_val],
        [I_gid_addr, I_gid_val],
        [_atomic_t_addr, _atomic_t_val],
        [_atomic_t2_addr, _atomic_t2_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    tuples_in(Int_profile, Int),

    chain([I_mode_addr, I_uid_addr, I_gid_addr, I_op_addr, I_sb_addr, I_mapping_addr, I_ino_addr,
           I_size_addr, I_atime_addr, _I_atime_addr, I_mtime_addr, I_ctime_addr, _I_ctime_addr, 
           _atomic_t_addr, _atomic_t2_addr, I_fop_addr], #<),

    I_mode_addr #= Base_addr,
    I_mode_val #> 0,
    I_gid_addr #= I_mode_addr + 8,
    %I_op_addr #= Base_addr + 32,
    I_op_addr #=< Base_addr + 32,
    I_op_val #> 0,
    labeling([enum], [I_op_addr, I_op_val]),
    query_inode_operations(I_op_val),

    I_sb_addr #= I_op_addr + 8,
    I_mapping_addr #= I_sb_addr + 8,
    I_atime_addr #= I_size_addr + 8,
    I_mtime_addr #= I_atime_addr + 16,
    I_ctime_addr #= I_mtime_addr + 16,
    _I_ctime_addr #= I_ctime_addr + 8,
    I_size_val #> 0,
    I_atime_val #> 4096,
    I_mtime_val #> 4096,
    I_ctime_val #> 4096,
    I_fop_addr #< Base_addr + 400,
    labeling([enum], [I_sb_addr, I_mapping_addr, I_atime_addr, I_mtime_addr, I_ctime_addr]),
    I_fop_addr #= _atomic_t_addr + 8,
    labeling([enum], [I_fop_addr, I_fop_val]),
    I_fop_val #> 0,
    query_inode_operations(I_fop_val),

    statistics(real_time, [End|_]),
    log("./profile/inode", "I_mode_addr", I_mode_addr, Base_addr),
    log("./profile/inode", "I_uid_addr", I_uid_addr, Base_addr),
    log("./profile/inode", "I_gid_addr", I_gid_addr, Base_addr),
    log("./profile/inode", "I_op_addr", I_op_addr, Base_addr),
    log("./profile/inode", "I_sb_addr", I_sb_addr, Base_addr),
    log("./profile/inode", "I_mapping_addr", I_mapping_addr, Base_addr),
    log("./profile/inode", "I_size_addr", I_size_addr, Base_addr),
    log("./profile/inode", "I_atime_addr", I_atime_addr, Base_addr),
    log("./profile/inode", "I_mtime_addr", I_mtime_addr, Base_addr),
    log("./profile/inode", "I_ctime_addr", I_ctime_addr, Base_addr),
    log("./profile/inode", "I_fop_addr", I_fop_addr, Base_addr).
    %log("./profile/inode", "inode", End, Start).


query_inode_operations(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_name_pointer(Base_addr, Offset) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "name_pointer", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_inode_operations(Base_addr) :-
    /* a bunch of function pointers. */
    pointer(Ptr),
    Ptr_profile = ([
        [_L1_addr, _L1_val],
        [_L2_addr, _L2_val],
        [_L3_addr, _L3_val],
        [_L4_addr, _L4_val],
        [_L5_addr, _L5_val],
        [_L6_addr, _L6_val],
        [_L7_addr, _L7_val],
        [_L8_addr, _L8_val],
        [_L9_addr, _L9_val],
        [_L10_addr, _L10_val],
        [_L11_addr, _L11_val],
        [_L12_addr, _L12_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([_L1_addr, _L2_addr, _L3_addr, _L4_addr, _L5_addr, _L6_addr, _L7_addr,
           _L8_addr, _L9_addr, _L10_addr, _L11_addr, _L12_addr], #<),
    _L1_addr #= Base_addr,
    _L12_addr #= Base_addr + 88.




possible_nothing() :-

    %log("profile.txt", "dentry addr", Base_addr, 0),
    Dparent_addr #> Base_addr,
    Dname_addr #> 0,
    Dname_addr #< Base_addr + 200,
    %Dname_addr #= Base_addr + 160,
    %FIXME This child rule is not applicable for old kernel version. 
    %chain([Dparent_addr, Dname_addr, Dchild_addr], #<),
    %Dchild_addr #< Base_addr + 200,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    labeling([enum], [Dparent_addr, Dparent_val, Dname_addr, Dchild_addr, Dchild_val]),
    Dname_offset #= Dname_addr - Base_addr,
    integer(Dname_offset),
    Dparent_val #> 0,
    
    %FIXME d_parent may not be initialized
    /*process_create(path('python'),
                ['subquery.py', Dparent_val, "d_entry", Dname_offset],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/

    %FIXME: may need to find another way for all list_head. 
    /*Dchild_offset #= Dchild_addr - Base_addr,
    integer(Dchild_offset),
    Dchild_base #= Dchild_val - Dchild_offset,
    integer(Dchild_base),
    Dchild_base #> 0,
    process_create(path('python'),
                ['subquery.py', Dchild_base, "d_entry", Dname_offset],
                [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    statistics(real_time, [End|_]).
/*
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    log("profile.txt", "d_parent", Dparent_addr, Base_addr),
    log("profile.txt", "d_child", Dchild_addr, Base_addr),
    log("profile.txt", "dentry time", End, Start).
*/
possible_d_entry(Base_addr, Dname_offset) :-
    current_predicate(string_val/1),
    string_val(Str),
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    Dname_addr #= Base_addr + Dname_offset,
    tuples_in(Str_profile, Str),
    label([Dname_addr]).

possible_list_head(Tasks_val, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_val, Tasks_addr]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],
    Comm_addr #= Tasks_val - Tasks_offset + Comm_offset,
    Tasks_addr #\= Tasks_val,
    tuples_in(Str_profile, Str),
    tuples_in(Ptr_profile, Ptr),
    label([Comm_addr]).

possible_tasks(Tasks_val, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [MM_addr, MM_val]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],
    Comm_addr #= Tasks_val - Tasks_offset + Comm_offset,
    Base_addr #= Tasks_val - Tasks_offset,
    MM_addr #> Tasks_val,
    MM_addr #< Base_addr + Comm_offset,
    tuples_in(Str_profile, Str),
    tuples_in(Ptr_profile, Ptr),
    labeling([enum], [MM_addr, MM_val]),
    query_mm_struct(MM_val),
    label([Comm_addr]).

possible_child(Child_val, Comm_offset, Child_offset) :-
    Child_addr #= Child_val - Child_offset,
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [MM_addr, MM_val]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],
    Comm_addr #= Child_addr + Comm_offset.


possible_ts(Base_addr, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_addr, Tasks_val]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],

    Comm_addr #= Base_addr + Comm_offset,
    Tasks_addr #= Base_addr + Tasks_offset,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),

    label([Tasks_val]),
    
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "list_head", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_cred(Base_addr) :-
    statistics(real_time, [Start|_]),

    int(Int),
    long(Ulg),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3],
        [Addr4, Val4],
        [Addr5, Val5],
        [Addr6, Val6],
        [Addr7, Val7],
        [Addr8, Val8],
        [Addr9, Val9]
    ],
    %FIXME For now, this rule is hard-coded because we do not consider 0 as a unsign long number. 
    %So that for cred whos val10 is 0, this rule does not apply.
    /*Ulong_profile = [
        [Addr10, Val10],
        [Addr11, Val11]
    ],*/
    Addr1 #> Base_addr,
    %chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9, Addr10, Addr11], #<),
    chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9], #<),
    Addr1 #= Base_addr + 4,
    Addr9 #= Addr1 + 32,
    %Addr11 #< Base_addr + 120,
    tuples_in(Int_profile, Int),
    %tuples_in(Ulong_profile, Ulg),
    statistics(real_time, [End|_]),
    labeling([enum], [Addr1, Addr2, Addr5, Addr6]),
    log("./profile/cred", "cred", End, Start),
    log('./profile/cred', "uid", Addr1, Base_addr),
    log('./profile/cred', "gid", Addr2, Base_addr),
    log('./profile/cred', "euid", Addr5, Base_addr),
    log('./profile/cred', "egid", Addr6, Base_addr).

possible_fs_struct(Base_addr) :-
    statistics(real_time, [Start|_]),
    int(Int),
    pointer(Ptr),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3]
    ],
    Ptr_profile = [
        [Root_addr, Root_val],
        [Root_dentry_addr, Root_dentry_val],
        [PWD_addr, PWD_val]
    ],
    Addr1 #>= Base_addr,
    Root_dentry_addr #= Root_addr + 8,
    chain([Addr1, Addr2, Addr3, Root_addr, Root_dentry_addr, PWD_addr], #<),
    PWD_addr #= Root_addr + 16,
    PWD_addr #< Base_addr + 50,
    tuples_in(Int_profile, Int),
    tuples_in(Ptr_profile, Ptr),
    Root_val #> 0,
    PWD_val #> 0,
    label([Root_addr, Root_val, Root_dentry_addr, Root_dentry_val]),
    /* some times the dentry fields are zero, use vfs_mount instead */
    process_create(path('python'),
                    ['subquery.py', Root_val, "vfs_mount"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    query_dentry(Root_dentry_val),

    label([PWD_addr, PWD_val]),
    process_create(path('python'),
                    ['subquery.py', PWD_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    statistics(real_time, [End|_]),
    log("./profile/fs_struct", "fs time", End, Start),
    log('./profile/fs_struct', "Root", Root_addr, Base_addr),
    log('./profile/fs_struct', "pwd", PWD_addr, Base_addr),
    log('./profile/fs_struct', "fs_struct", End, Start).

possible_mount(Base_addr) :-
    /* struct hlist_head mnt_hash;
       struct mount *mnt_parent; 
       struct vfsmount mnt;
       struct list_head mnt_mounts;
       struct list_head mnt_child;
       struct list_head mnt_instance;
       const char *mnt_devname;
       struct list_head mnt_list;
    */
    statistics(real_time, [Start|_]),
    %get_time(Current),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Mnt_hash_addr, Mnt_hash_val],
        [Mnt_parent_addr, Mnt_parent_val],
        [Vfsmount_addr, Vfsmount_val],
        [Mnt_child_addr, Mnt_child_val],
        [Mnt_devname_addr, Mnt_devname_val],
        [Mnt_list_addr, Mnt_list_val]
    ]),
    Int_profile = ([
        [Mnt_flags_addr, Mnt_flags_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    /* Order Invariants */
    chain([Mnt_hash_addr, Mnt_parent_addr, Vfsmount_addr, Mnt_flags_addr,
            Mnt_child_addr, Mnt_devname_addr, Mnt_list_addr], #<),
    Mnt_hash_addr #= Base_addr,
    /* mnt_hash_addr is a list_head */
    Mnt_parent_addr #> Base_addr + 8,
    Mnt_list_addr - Base_addr #< 200,
    labeling([enum], [Mnt_devname_addr, Mnt_devname_val]),
    query_string_pointer(Mnt_devname_val),
    Mnt_devname_offset #= Mnt_devname_addr - Base_addr,
    /* the offset from mnt_mounts to mnt_list remains the same, so it's safe to use fixed offsets. */
    Mnt_child_addr #= Mnt_devname_addr - 32,
    Mnt_list_addr #= Mnt_devname_addr + 8,
    Mnt_flags_addr #= Vfsmount_addr + 16,
    labeling([enum], [Mnt_child_addr, Mnt_list_addr, Vfsmount_addr, Vfsmount_val]),
    /* Seems unnecessary 
    Mnt_list_offset #= Mnt_list_addr - Base_addr,
    Mnt_list #= Mnt_list_val - Mnt_list_offset,
    Mnt_list #> 0,
    query_mount_struct(Mnt_list, Mnt_devname_offset),
    */
    Vfsmount_val #>= 0,
    /* Here we can infer layout of dentry structure 
       Maybe need to infer using another dentry, somehow it may not be initialized. 
    */
    Vfsmount_addr #> 0,
    %query_dentry(Vfsmount_addr),

    labeling([enum], [Mnt_parent_addr, Mnt_parent_val]),
    /* To verify another mount struct, only one-level query, so it does not direct call query_mount recursively */
    
    query_mount_struct(Mnt_parent_val, Mnt_devname_offset),
    

    %get_time(End),
    %Time_past is End - Current,
    statistics(real_time, [End|_]),
    log("./profile/mount", "mnt_hash", Mnt_hash_addr, Base_addr),
    log("./profile/mount", "mnt_parent", Mnt_parent_addr, Base_addr),
    log("./profile/mount", "mnt_child", Mnt_child_addr, Base_addr),
    log("./profile/mount", "mnt_devname", Mnt_devname_addr, Base_addr),
    log("./profile/mount", "mnt_list", Mnt_list_addr, Base_addr),
    log("./profile/mount", "mount", End, Start).


possible_neigh_hash_table(Base_addr) :-
    /* neighbour **hash_buckets */
    pointer(Ptr),
    Ptr_profile = ([
        [Hash_buckest_addr, Hash_buckets_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Hash_buckest_addr #= Base_addr,
    labeling([enum], [Hash_buckest_addr, Hash_buckets_val]),
    process_create(path('python'),
                    ['subquery.py', Hash_buckets_val, "hash_buckets"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_hash_buckets(Base_addr) :-
    /* hash_buckets is an array of neighbour pointer 
       note that not all element are non-zero
    */
    pointer(Ptr),
    Ptr_profile = ([
        [Neighbour_addr, Neighbour_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Neighbour_addr #< Base_addr + 32,
    Neighbour_val #> 0,
    labeling([enum], [Neighbour_addr, Neighbour_val]),
    process_create(path('python'),
                    ['subquery.py', Neighbour_val, "neighbour"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_neighbour(Base_addr) :-
    /* net_device *dev at offset 464 */
    pointer(Ptr),
    Ptr_profile = ([
        [Dev_addr, Dev_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Dev_addr #>= Base_addr + 360,
    Dev_addr #=< Base_addr + 376,
    labeling([enum], [Dev_addr, Dev_val]),
    process_create(path('python'),
                    ['subquery.py', Dev_val, "net_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).


possible_net_device(Base_addr) :- 
    /*
        char             name[NAMSIZ];
        struct list_head dev_list;
        unsigned char    addr_len;
        unsigned int     promiscuity;
        struct in_device *ip_ptr;
    */
    statistics(real_time, [Start|_]),

    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Dev_list_addr, Dev_list_val],
        [_atalk_ptr_addr, _atalk_ptr_val],
        [IP_ptr_addr, IP_ptr_val],
        [_dn_ptr_addr, _dn_ptr_val],
        [_ip6_ptr_addr, _ip6_ptr_val],
        [Dev_addr_addr, Dev_addr_val]
    ]),
    Str_profile = ([
        [Name_addr, Name_val],
        [Broad_cast_addr, Broad_cast_val]
    ]),
    Int_profile = ([
        [Promisc_addr, Promisc_val],
        [Addr_len_addr, Addr_len_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),
    /* Hard to determine offsets for addr_len and promisc */
    chain([Name_addr, Dev_list_addr, Addr_len_addr, Promisc_addr, 
           _atalk_ptr_addr, IP_ptr_addr, _dn_ptr_addr, _ip6_ptr_addr, Dev_addr_addr, Broad_cast_addr], #<),
    Name_addr #= Base_addr,
    Name_offset #= Name_addr - Base_addr,
    IP_ptr_addr #= _atalk_ptr_addr + 8,
    IP_ptr_addr #< Base_addr + 1000,
    _ip6_ptr_addr #= IP_ptr_addr + 16,


    /* dev_list offset can be hardcoded since it remains the same */
    Dev_list_addr #= Base_addr + 80,
    labeling([enum], [Name_addr, Dev_list_addr, Dev_list_val]),
    /* do not have a good constrain to narrow down ip_ptr, use its rough offset
       to reduce the search space. 
     */
    IP_ptr_addr #> Base_addr + 700,
    IP_ptr_val #> 0,
    labeling([enum], [IP_ptr_addr, IP_ptr_val]),
    query_in_device(IP_ptr_val),

    %labeling([enum], [Dev_addr_addr, Dev_addr_val]),
    %query_string_pointer(Dev_addr_val),

    statistics(real_time, [End|_]),

    log("./profile/net_device", "name", Name_addr, Base_addr),
    log("./profile/net_device", "ip_ptr", IP_ptr_addr, Base_addr),
    log("./profile/net_device", "dev_list", Dev_list_addr, Base_addr),
    log("./profile/net_device", "net_device", End, Start).

query_in_device(IP_ptr_val) :-
    process_create(path('python'),
                    ['subquery.py', IP_ptr_val, "in_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).


query_mount_struct(Val, Offset) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "mount_struct", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_dentry(Dentry_val) :-
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).
