:- use_module(library(clpfd)).
:- style_check(-singleton).
pointer([
		[0x172282a0,0],
		[0x172282a8,0],
		[0x172282b0,378234128],
		[0x172282b8,0],
		[0x172282c0,0],
		[0x172282c8,378234112],
		[0x172282d0,378234032],
		[0x172282d8,378233936],
		[0x172282e0,378233920],
		[0x172282e8,0],
		[0x172282f0,0],
		[0x172282f8,378210304],
		[0x17228300,0],
		[0x17228308,0],
		[0x17228310,378234192],
		[0x17228318,378233952],
		[0x17228320,0],
		[0x17228328,0],
		[0x17228330,0],
		[0x17228338,378234016],
		[0x17228340,378234000],
		[0x17228348,378233968],
		[0x17228350,378233984],
		[0x17228358,0],
		[0x17228360,0],
		[0x17228390,0],
		[0x17228398,0],
		[0x17228420,388137632],
		[0x17228428,378265200],
		[0x17228430,378260480],
		[0x17228438,378259072],
		[0x17228440,378259216],
		[0x17228448,378262624],
		[0x17228450,378281280],
		[0x17228458,378263440],
		[0x17228460,378242528],
		[0x17228468,378273200],
		[0x17228470,0],
		[0x17228478,378210304],
		[0x17228480,378239920],
		[0x17228488,378273824],
		[0x17228490,378258016],
		[0x17228498,378271024],
		[0x172284a0,378258816],
		[0x172284a8,378273168],
		[0x172284b0,378255904],
		[0x172284b8,378256224],
		[0x172284c0,378238400],
		[0x172284c8,378238128],
		[0x172284d0,378258560],
		[0x172284d8,378272800],
		[0x172284e0,388138016],
		[0x172284e8,378292800],
		[0x172284f0,378296992],
		[0x172284f8,378291904],
		[0x17228500,0],
		[0x17228508,378288448],
		[0x17228510,378296304],
		[0x17228518,378296816],
		[0x17228520,378291760],
		[0x17228528,0],
		[0x17228530,378294400],
		[0x17228538,378210304],
		[0x17228540,378289216],
		[0x17228548,378294512],
		[0x17228550,378295088],
		[0x17228558,378295968],
		[0x17228560,0],
		[0x17228568,0],
		[0x17228570,378289584],
		[0x17228578,378289680],
		[0x17228580,378289456],
		[0x17228588,378288304],
		[0x17228590,378295248],
		[0x17228598,0],
		[0x172285a0,388138208],
		[0x172285a8,378302560],
		[0x172285b0,378304720],
		[0x172285b8,378304656],
		[0x172285c0,0],
		[0x172285c8,378297728],
		[0x172285d0,378304784],
		[0x172285d8,378304592],
		[0x172285e0,378298656],
		[0x172285e8,0],
		[0x172285f0,378300464],
		[0x172285f8,378298368],
		[0x17228600,378299008],
		[0x17228608,378299616],
		[0x17228610,378301168],
		[0x17228618,378305200],
		[0x17228620,378297600],
		[0x17228628,378298288],
		[0x17228630,378301504],
		[0x17228638,378301632],
		[0x17228640,378298512],
		[0x17228648,0],
		[0x17228650,378303904],
		[0x17228658,0],
		[0x17228660,388138400],
		[0x17228668,378306400],
		[0x17228670,378306288],
		[0x17228678,378306384],
		[0x17228680,0],
		[0x17228688,378306448],
		[0x17228690,378306560],
		[0x17228698,378306688],
		[0x172286a0,378306272],
		[0x172286a8,0],
		[0x172286b0,0],
		[0x172286b8,378210304],
		[0x172286c0,0],
		[0x172286c8,0],
		[0x172286d0,378306464],
		[0x172286d8,378306304],
		[0x172286e0,0],
		[0x172286e8,0],
		[0x172286f0,0],
		[0x172286f8,378306368],
		[0x17228700,378306352],
		[0x17228708,378306320],
		[0x17228710,378306336],
		[0x17228718,0],
		[0x17228730,0],
		[0x17228738,0],
		[0x17228740,0],
		[0x17228748,380038624],
		[0x17228750,380042192],
		[0x17228758,0],
		[0x17228760,0],
		[0x17228768,0],
		[0x17228770,0],
		[0x17228778,0],
		[0x17228780,0],
		[0x17228788,0],
		[0x17228790,0],
		[0x17228798,0],
		[0x172287a0,378325664],
		[0x172287a8,0],
		[0x172287b0,380038864],
		[0x172287b8,0],
		[0x172287c0,0],
		[0x172287c8,0],
		[0x172287d0,0],
		[0x172287d8,0],
		[0x172287e0,0],
		[0x172287e8,0],
		[0x172287f0,0],
		[0x172287f8,0],
		[0x17228800,0],
		[0x17228808,0],
		[0x17228810,0],
		[0x17228818,0],
		[0x17228820,0],
		[0x17228828,0],
		[0x17228830,0],
		[0x17228838,0],
		[0x17228840,378326160],
		[0x17228848,378325648],
		[0x17228850,378326272],
		[0x17228858,378325696],
		[0x17228860,0],
		[0x17228868,380038624],
		[0x17228870,380042192],
		[0x17228878,0],
		[0x17228880,0],
		[0x17228888,0],
		[0x17228890,0],
		[0x17228898,0],
		[0x172288a0,0],
		[0x172288a8,0],
		[0x172288b0,0],
		[0x172288b8,0],
		[0x172288c0,378328064],
		[0x172288c8,0],
		[0x172288d0,378328032],
		[0x172288d8,0],
		[0x172288e0,0],
		[0x172288e8,0],
		[0x172288f0,0],
		[0x172288f8,0],
		[0x17228900,0],
		[0x17228908,0],
		[0x17228910,0],
		[0x17228918,0],
		[0x17228920,0],
		[0x17228928,0],
		[0x17228930,0],
		[0x17228938,0],
		[0x17228940,0],
		[0x17228948,0],
		[0x17228950,0],
		[0x17228958,0],
		[0x17228960,378328096],
		[0x17228968,378326304],
		[0x17228970,378328208],
		[0x17228978,378334624],
		[0x17228980,391029198],
		[0x17228988,390815231],
		[0x17228990,390725078],
		[0x17228998,0],
		[0x172289a0,0],
		[0x172289a8,380038624],
		[0x172289b0,380042192],
		[0x172289b8,378334672],
		[0x172289c0,0],
		[0x172289c8,0],
		[0x172289d0,0],
		[0x172289d8,0],
		[0x172289e0,0],
		[0x172289e8,0],
		[0x172289f0,0],
		[0x172289f8,0],
		[0x17228a00,378326320],
		[0x17228a08,0],
		[0x17228a10,380038912],
		[0x17228a18,0],
		[0x17228a20,0],
		[0x17228a28,0],
		[0x17228a30,0],
		[0x17228a38,0],
		[0x17228a40,0],
		[0x17228a48,0],
		[0x17228a50,0],
		[0x17228a58,0],
		[0x17228a60,0],
		[0x17228a68,0],
		[0x17228a70,0],
		[0x17228a78,0],
		[0x17228a80,0],
		[0x17228a88,0],
		[0x17228a90,0],
		[0x17228a98,0],
		[0x17228aa0,390812980],
		[0x17228aa8,390815255],
		[0x17228ab0,390815267],
		[0x17228ab8,390815278],
		[0x17228ac0,390815289],
		[0x17228ac8,390815305],
		[0x17228ad0,390815323],
		[0x17228ad8,390815330],
		[0x17228ae0,390815342],
		[0x17228ae8,390815350],
		[0x17228af0,390815367],
		[0x17228af8,390815378],
		[0x17228b00,390815390],
		[0x17228b08,390815408],
		[0x17228b10,390815420],
		[0x17228b18,390815437],
		[0x17228b20,390815454],
		[0x17228b28,390815461],
		[0x17228b48,0],
		[0x17228b50,0],
		[0x17228b58,0],
		[0x17228b60,390815685],
		[0x17228b68,390815693],
		[0x17228b70,390815701],
		[0x17228b78,0],
		[0x17228b98,0],
		[0x17228bc0,0],
		[0x17228bc8,380038624],
		[0x17228bd0,380042192],
		[0x17228bd8,0],
		[0x17228be0,0],
		[0x17228be8,0],
		[0x17228bf0,0],
		[0x17228bf8,0],
		[0x17228c00,0],
		[0x17228c08,0],
		[0x17228c10,0],
		[0x17228c18,0],
		[0x17228c20,378359760],
		[0x17228c28,0],
		[0x17228c30,380038912],
		[0x17228c38,0],
		[0x17228c40,0],
		[0x17228c48,0],
		[0x17228c50,0],
		[0x17228c58,0],
		[0x17228c60,0],
		[0x17228c68,0],
		[0x17228c70,0],
		[0x17228c78,0],
		[0x17228c80,0],
		[0x17228c88,0],
		[0x17228c90,0],
		[0x17228c98,0],
		[0x17228ca0,0],
		[0x17228ca8,0],
		[0x17228cb0,0],
		[0x17228cb8,0],
		[0x17228cc0,0],
		[0x17228cc8,379865936],
		[0x17228cd0,378360272],
		[0x17228cd8,378361696],
		[0x17228ce0,0],
		[0x17228ce8,0],
		[0x17228cf0,0],
		[0x17228cf8,0],
		[0x17228d00,0],
		[0x17228d08,0],
		[0x17228d10,0],
		[0x17228d18,0],
		[0x17228d20,378361328],
		[0x17228d28,0],
		[0x17228d30,378362096],
		[0x17228d38,0],
		[0x17228d40,0],
		[0x17228d48,0],
		[0x17228d50,0],
		[0x17228d58,0],
		[0x17228d60,0],
		[0x17228d68,0],
		[0x17228d70,0],
		[0x17228d78,0],
		[0x17228d80,0],
		[0x17228d88,0],
		[0x17228d90,0],
		[0x17228d98,0],
		[0x17228da0,0],
		[0x17228da8,0],
		[0x17228db0,0],
		[0x17228db8,0],
		[0x17228dc0,397586976],
		[0x17228dc8,392560672],
		[0x17228dd0,392560448],
		[0x17228dd8,392560224],
		[0x17228de0,392560000],
		[0x17228de8,0],
		[0x17228df0,0],
		[0x17228df8,0],
		[0x17228e00,390815919],
		[0x17228e08,390711891],
		[0x17228e10,391165788],
		[0x17228e18,390828228],
		[0x17228e20,390815848],
		[0x17228e28,390815794],
		[0x17228e30,390828228],
		[0x17228e38,390732420],
		[0x17228e40,0],
		[0x17228e48,380038624],
		[0x17228e50,380042192],
		[0x17228e58,0],
		[0x17228e60,0],
		[0x17228e68,0],
		[0x17228e70,0],
		[0x17228e78,0],
		[0x17228e80,0],
		[0x17228e88,0],
		[0x17228e90,0],
		[0x17228e98,0],
		[0x17228ea0,378363008],
		[0x17228ea8,0],
		[0x17228eb0,380038912],
		[0x17228eb8,0],
		[0x17228ec0,0],
		[0x17228ec8,0],
		[0x17228ed0,0],
		[0x17228ed8,0],
		[0x17228ee0,0],
		[0x17228ee8,0],
		[0x17228ef0,0],
		[0x17228ef8,0],
		[0x17228f00,0],
		[0x17228f08,0],
		[0x17228f10,0],
		[0x17228f18,0],
		[0x17228f20,0],
		[0x17228f28,0],
		[0x17228f30,0],
		[0x17228f38,0],
		[0x17228f40,391029198],
		[0x17228f48,390818874],
		[0x17228f50,390816117],
		[0x17228f58,391174018],
		[0x17228f60,391047376],
		[0x17228f68,390816128],
		[0x17228f70,0],
		[0x17228f78,0],
		[0x17228fb8,0],
		[0x17228fc0,0],
		[0x17228fc8,390816261],
		[0x17228fd0,390816240],
		[0x17228fd8,390816256],
		[0x17228fe0,0],
		[0x17228fe8,390815919],
		[0x17228ff0,390816248],
		[0x17228ff8,390797998],
		[0x17229048,0],
		[0x17229050,0],
		[0x17229058,0],
		[0x17229060,0],
		[0x17229068,391174018],
		[0x17229070,391096939],
		[0x17229078,390810737],
		[0x17229080,391165788],
		[0x17229088,390816564],
		[0x172290d8,0],
		[0x17229140,0],
		[0x17229148,379865952],
		[0x17229150,378399776],
		[0x17229158,378399536],
		[0x17229160,0],
		[0x17229168,0],
		[0x17229170,0],
		[0x17229178,0],
		[0x17229180,0],
		[0x17229188,378400032],
		[0x17229190,378401168],
		[0x17229198,0],
		[0x172291a0,378398992],
		[0x172291a8,0],
		[0x172291b0,378398832],
		[0x172291b8,0],
		[0x172291c0,0],
		[0x172291c8,0],
		[0x172291d0,0],
		[0x172291d8,0],
		[0x172291e0,0],
		[0x172291e8,0],
		[0x172291f0,0],
		[0x172291f8,0],
		[0x17229200,0],
		[0x17229208,0],
		[0x17229210,0],
		[0x17229218,0],
		[0x17229220,0],
		[0x17229228,0],
		[0x17229230,0],
		[0x17229238,0],
		[0x17229240,378415045],
		[0x17229248,378415045],
		[0x17229250,378415394],
		[0x17229258,378415868],
		[0x17229260,378414963],
		[0x17229268,378415082],
		[0x17229270,378415098],
		[0x17229278,378415125],
		[0x17229280,378415875],
		[0x17229288,378415154],
		[0x17229290,378415382],
		[0x17229298,0],
		[0, 0]
]).
unknown([
		[0x17228380,580736694513784],
		[0x172283a0,18051468385098661887],
		[0x172283a8,17286145344943783188],
		[0x172283b0,16553269494227715814],
		[0x172283b8,15851465172105092843],
		[0x172283c0,15179415056271342793],
		[0x172283c8,14535857654701788180],
		[0x172283d0,13919584977779370512],
		[0x172283d8,13329440240487146398],
		[0x172283e0,12764315706334704435],
		[0x172283e8,12223150595709091561],
		[0x172283f0,11704929110189856425],
		[0x172283f8,11208678516993634911],
		[0x17228400,10733467319318081616],
		[0x17228408,10278403516880114547],
		[0x17228410,9842632930878669283],
		[0x17228418,9425337584792028007],
		[0, 0]
]).
long([
		[0x17228368,532544],
		[0x17228370,4498933856],
		[0x17228378,1164662497904],
		[0x17228388,550831654912],
		[0x17228b40,1702125925],
		[0x17228bb8,500186441069],
		[0x17228f88,6648929],
		[0x17228f98,1919251566],
		[0x17228fb0,521325536612],
		[0x17229030,111542170579813],
		[0x172290f8,7565409],
		[0x17229108,1702063980],
		[0x17229118,1801676136],
		[0x17229128,6578533],
		[0x17229138,7364983],
		[0, 0]
]).
int([
		[0x172282a0,0],
		[0x172282a4,0],
		[0x172282a8,0],
		[0x172282ac,0],
		[0x172282b8,0],
		[0x172282bc,0],
		[0x172282c0,0],
		[0x172282c4,0],
		[0x172282e8,0],
		[0x172282ec,0],
		[0x172282f0,0],
		[0x172282f4,0],
		[0x17228300,0],
		[0x17228304,0],
		[0x17228308,0],
		[0x1722830c,0],
		[0x17228320,0],
		[0x17228324,0],
		[0x17228328,0],
		[0x1722832c,0],
		[0x17228330,0],
		[0x17228334,0],
		[0x17228358,0],
		[0x1722835c,0],
		[0x17228360,0],
		[0x17228364,0],
		[0x1722836c,0],
		[0x17228374,1],
		[0x1722837c,271],
		[0x1722838c,128],
		[0x17228390,0],
		[0x17228394,0],
		[0x17228398,0],
		[0x1722839c,0],
		[0x17228470,0],
		[0x17228474,0],
		[0x17228500,0],
		[0x17228504,0],
		[0x17228528,0],
		[0x1722852c,0],
		[0x17228560,0],
		[0x17228564,0],
		[0x17228568,0],
		[0x1722856c,0],
		[0x17228598,0],
		[0x1722859c,0],
		[0x172285c0,0],
		[0x172285c4,0],
		[0x172285e8,0],
		[0x172285ec,0],
		[0x17228648,0],
		[0x1722864c,0],
		[0x17228658,0],
		[0x1722865c,0],
		[0x17228680,0],
		[0x17228684,0],
		[0x172286a8,0],
		[0x172286ac,0],
		[0x172286b0,0],
		[0x172286b4,0],
		[0x172286c0,0],
		[0x172286c4,0],
		[0x172286c8,0],
		[0x172286cc,0],
		[0x172286e0,0],
		[0x172286e4,0],
		[0x172286e8,0],
		[0x172286ec,0],
		[0x172286f0,0],
		[0x172286f4,0],
		[0x17228718,0],
		[0x1722871c,0],
		[0x17228730,0],
		[0x17228734,0],
		[0x17228738,0],
		[0x1722873c,0],
		[0x17228740,0],
		[0x17228744,0],
		[0x17228758,0],
		[0x1722875c,0],
		[0x17228760,0],
		[0x17228764,0],
		[0x17228768,0],
		[0x1722876c,0],
		[0x17228770,0],
		[0x17228774,0],
		[0x17228778,0],
		[0x1722877c,0],
		[0x17228780,0],
		[0x17228784,0],
		[0x17228788,0],
		[0x1722878c,0],
		[0x17228790,0],
		[0x17228794,0],
		[0x17228798,0],
		[0x1722879c,0],
		[0x172287a8,0],
		[0x172287ac,0],
		[0x172287b8,0],
		[0x172287bc,0],
		[0x172287c0,0],
		[0x172287c4,0],
		[0x172287c8,0],
		[0x172287cc,0],
		[0x172287d0,0],
		[0x172287d4,0],
		[0x172287d8,0],
		[0x172287dc,0],
		[0x172287e0,0],
		[0x172287e4,0],
		[0x172287e8,0],
		[0x172287ec,0],
		[0x172287f0,0],
		[0x172287f4,0],
		[0x172287f8,0],
		[0x172287fc,0],
		[0x17228800,0],
		[0x17228804,0],
		[0x17228808,0],
		[0x1722880c,0],
		[0x17228810,0],
		[0x17228814,0],
		[0x17228818,0],
		[0x1722881c,0],
		[0x17228820,0],
		[0x17228824,0],
		[0x17228828,0],
		[0x1722882c,0],
		[0x17228830,0],
		[0x17228834,0],
		[0x17228838,0],
		[0x1722883c,0],
		[0x17228860,0],
		[0x17228864,0],
		[0x17228878,0],
		[0x1722887c,0],
		[0x17228880,0],
		[0x17228884,0],
		[0x17228888,0],
		[0x1722888c,0],
		[0x17228890,0],
		[0x17228894,0],
		[0x17228898,0],
		[0x1722889c,0],
		[0x172288a0,0],
		[0x172288a4,0],
		[0x172288a8,0],
		[0x172288ac,0],
		[0x172288b0,0],
		[0x172288b4,0],
		[0x172288b8,0],
		[0x172288bc,0],
		[0x172288c8,0],
		[0x172288cc,0],
		[0x172288d8,0],
		[0x172288dc,0],
		[0x172288e0,0],
		[0x172288e4,0],
		[0x172288e8,0],
		[0x172288ec,0],
		[0x172288f0,0],
		[0x172288f4,0],
		[0x172288f8,0],
		[0x172288fc,0],
		[0x17228900,0],
		[0x17228904,0],
		[0x17228908,0],
		[0x1722890c,0],
		[0x17228910,0],
		[0x17228914,0],
		[0x17228918,0],
		[0x1722891c,0],
		[0x17228920,0],
		[0x17228924,0],
		[0x17228928,0],
		[0x1722892c,0],
		[0x17228930,0],
		[0x17228934,0],
		[0x17228938,0],
		[0x1722893c,0],
		[0x17228940,0],
		[0x17228944,0],
		[0x17228948,0],
		[0x1722894c,0],
		[0x17228950,0],
		[0x17228954,0],
		[0x17228958,0],
		[0x1722895c,0],
		[0x17228998,0],
		[0x1722899c,0],
		[0x172289a0,0],
		[0x172289a4,0],
		[0x172289c0,0],
		[0x172289c4,0],
		[0x172289c8,0],
		[0x172289cc,0],
		[0x172289d0,0],
		[0x172289d4,0],
		[0x172289d8,0],
		[0x172289dc,0],
		[0x172289e0,0],
		[0x172289e4,0],
		[0x172289e8,0],
		[0x172289ec,0],
		[0x172289f0,0],
		[0x172289f4,0],
		[0x172289f8,0],
		[0x172289fc,0],
		[0x17228a08,0],
		[0x17228a0c,0],
		[0x17228a18,0],
		[0x17228a1c,0],
		[0x17228a20,0],
		[0x17228a24,0],
		[0x17228a28,0],
		[0x17228a2c,0],
		[0x17228a30,0],
		[0x17228a34,0],
		[0x17228a38,0],
		[0x17228a3c,0],
		[0x17228a40,0],
		[0x17228a44,0],
		[0x17228a48,0],
		[0x17228a4c,0],
		[0x17228a50,0],
		[0x17228a54,0],
		[0x17228a58,0],
		[0x17228a5c,0],
		[0x17228a60,0],
		[0x17228a64,0],
		[0x17228a68,0],
		[0x17228a6c,0],
		[0x17228a70,0],
		[0x17228a74,0],
		[0x17228a78,0],
		[0x17228a7c,0],
		[0x17228a80,0],
		[0x17228a84,0],
		[0x17228a88,0],
		[0x17228a8c,0],
		[0x17228a90,0],
		[0x17228a94,0],
		[0x17228a98,0],
		[0x17228a9c,0],
		[0x17228b44,0],
		[0x17228b48,0],
		[0x17228b4c,0],
		[0x17228b50,0],
		[0x17228b54,0],
		[0x17228b58,0],
		[0x17228b5c,0],
		[0x17228b78,0],
		[0x17228b7c,0],
		[0x17228b98,0],
		[0x17228b9c,0],
		[0x17228bbc,116],
		[0x17228bc0,0],
		[0x17228bc4,0],
		[0x17228bd8,0],
		[0x17228bdc,0],
		[0x17228be0,0],
		[0x17228be4,0],
		[0x17228be8,0],
		[0x17228bec,0],
		[0x17228bf0,0],
		[0x17228bf4,0],
		[0x17228bf8,0],
		[0x17228bfc,0],
		[0x17228c00,0],
		[0x17228c04,0],
		[0x17228c08,0],
		[0x17228c0c,0],
		[0x17228c10,0],
		[0x17228c14,0],
		[0x17228c18,0],
		[0x17228c1c,0],
		[0x17228c28,0],
		[0x17228c2c,0],
		[0x17228c38,0],
		[0x17228c3c,0],
		[0x17228c40,0],
		[0x17228c44,0],
		[0x17228c48,0],
		[0x17228c4c,0],
		[0x17228c50,0],
		[0x17228c54,0],
		[0x17228c58,0],
		[0x17228c5c,0],
		[0x17228c60,0],
		[0x17228c64,0],
		[0x17228c68,0],
		[0x17228c6c,0],
		[0x17228c70,0],
		[0x17228c74,0],
		[0x17228c78,0],
		[0x17228c7c,0],
		[0x17228c80,0],
		[0x17228c84,0],
		[0x17228c88,0],
		[0x17228c8c,0],
		[0x17228c90,0],
		[0x17228c94,0],
		[0x17228c98,0],
		[0x17228c9c,0],
		[0x17228ca0,0],
		[0x17228ca4,0],
		[0x17228ca8,0],
		[0x17228cac,0],
		[0x17228cb0,0],
		[0x17228cb4,0],
		[0x17228cb8,0],
		[0x17228cbc,0],
		[0x17228cc0,0],
		[0x17228cc4,0],
		[0x17228ce0,0],
		[0x17228ce4,0],
		[0x17228ce8,0],
		[0x17228cec,0],
		[0x17228cf0,0],
		[0x17228cf4,0],
		[0x17228cf8,0],
		[0x17228cfc,0],
		[0x17228d00,0],
		[0x17228d04,0],
		[0x17228d08,0],
		[0x17228d0c,0],
		[0x17228d10,0],
		[0x17228d14,0],
		[0x17228d18,0],
		[0x17228d1c,0],
		[0x17228d28,0],
		[0x17228d2c,0],
		[0x17228d38,0],
		[0x17228d3c,0],
		[0x17228d40,0],
		[0x17228d44,0],
		[0x17228d48,0],
		[0x17228d4c,0],
		[0x17228d50,0],
		[0x17228d54,0],
		[0x17228d58,0],
		[0x17228d5c,0],
		[0x17228d60,0],
		[0x17228d64,0],
		[0x17228d68,0],
		[0x17228d6c,0],
		[0x17228d70,0],
		[0x17228d74,0],
		[0x17228d78,0],
		[0x17228d7c,0],
		[0x17228d80,0],
		[0x17228d84,0],
		[0x17228d88,0],
		[0x17228d8c,0],
		[0x17228d90,0],
		[0x17228d94,0],
		[0x17228d98,0],
		[0x17228d9c,0],
		[0x17228da0,0],
		[0x17228da4,0],
		[0x17228da8,0],
		[0x17228dac,0],
		[0x17228db0,0],
		[0x17228db4,0],
		[0x17228db8,0],
		[0x17228dbc,0],
		[0x17228de8,0],
		[0x17228dec,0],
		[0x17228df0,0],
		[0x17228df4,0],
		[0x17228df8,0],
		[0x17228dfc,0],
		[0x17228e40,0],
		[0x17228e44,0],
		[0x17228e58,0],
		[0x17228e5c,0],
		[0x17228e60,0],
		[0x17228e64,0],
		[0x17228e68,0],
		[0x17228e6c,0],
		[0x17228e70,0],
		[0x17228e74,0],
		[0x17228e78,0],
		[0x17228e7c,0],
		[0x17228e80,0],
		[0x17228e84,0],
		[0x17228e88,0],
		[0x17228e8c,0],
		[0x17228e90,0],
		[0x17228e94,0],
		[0x17228e98,0],
		[0x17228e9c,0],
		[0x17228ea8,0],
		[0x17228eac,0],
		[0x17228eb8,0],
		[0x17228ebc,0],
		[0x17228ec0,0],
		[0x17228ec4,0],
		[0x17228ec8,0],
		[0x17228ecc,0],
		[0x17228ed0,0],
		[0x17228ed4,0],
		[0x17228ed8,0],
		[0x17228edc,0],
		[0x17228ee0,0],
		[0x17228ee4,0],
		[0x17228ee8,0],
		[0x17228eec,0],
		[0x17228ef0,0],
		[0x17228ef4,0],
		[0x17228ef8,0],
		[0x17228efc,0],
		[0x17228f00,0],
		[0x17228f04,0],
		[0x17228f08,0],
		[0x17228f0c,0],
		[0x17228f10,0],
		[0x17228f14,0],
		[0x17228f18,0],
		[0x17228f1c,0],
		[0x17228f20,0],
		[0x17228f24,0],
		[0x17228f28,0],
		[0x17228f2c,0],
		[0x17228f30,0],
		[0x17228f34,0],
		[0x17228f38,0],
		[0x17228f3c,0],
		[0x17228f70,0],
		[0x17228f74,0],
		[0x17228f78,0],
		[0x17228f7c,0],
		[0x17228f8c,0],
		[0x17228f9c,0],
		[0x17228fb4,121],
		[0x17228fb8,0],
		[0x17228fbc,0],
		[0x17228fc0,0],
		[0x17228fc4,0],
		[0x17228fe0,0],
		[0x17228fe4,0],
		[0x17229008,25970],
		[0x1722900c,0],
		[0x17229034,25970],
		[0x17229040,101],
		[0x17229044,0],
		[0x17229048,0],
		[0x1722904c,0],
		[0x17229050,0],
		[0x17229054,0],
		[0x17229058,0],
		[0x1722905c,0],
		[0x17229060,0],
		[0x17229064,0],
		[0x172290b8,115],
		[0x172290bc,0],
		[0x172290d0,115],
		[0x172290d4,0],
		[0x172290d8,0],
		[0x172290dc,0],
		[0x172290fc,0],
		[0x1722910c,0],
		[0x1722911c,0],
		[0x1722912c,0],
		[0x1722913c,0],
		[0x17229140,0],
		[0x17229144,0],
		[0x17229160,0],
		[0x17229164,0],
		[0x17229168,0],
		[0x1722916c,0],
		[0x17229170,0],
		[0x17229174,0],
		[0x17229178,0],
		[0x1722917c,0],
		[0x17229180,0],
		[0x17229184,0],
		[0x17229198,0],
		[0x1722919c,0],
		[0x172291a8,0],
		[0x172291ac,0],
		[0x172291b8,0],
		[0x172291bc,0],
		[0x172291c0,0],
		[0x172291c4,0],
		[0x172291c8,0],
		[0x172291cc,0],
		[0x172291d0,0],
		[0x172291d4,0],
		[0x172291d8,0],
		[0x172291dc,0],
		[0x172291e0,0],
		[0x172291e4,0],
		[0x172291e8,0],
		[0x172291ec,0],
		[0x172291f0,0],
		[0x172291f4,0],
		[0x172291f8,0],
		[0x172291fc,0],
		[0x17229200,0],
		[0x17229204,0],
		[0x17229208,0],
		[0x1722920c,0],
		[0x17229210,0],
		[0x17229214,0],
		[0x17229218,0],
		[0x1722921c,0],
		[0x17229220,0],
		[0x17229224,0],
		[0x17229228,0],
		[0x1722922c,0],
		[0x17229230,0],
		[0x17229234,0],
		[0x17229238,0],
		[0x1722923c,0],
		[0x17229298,0],
		[0x1722929c,0],
		[0, 0]
]).
string_val([
		[0x17228720,8462108013429552481],
		[0x17228728,7310575183467863920],
		[0x17228b30,8388903693187511667],
		[0x17228b38,8242536627753546344],
		[0x17228b40,1702125925],
		[0x17228b80,7232626449060949360],
		[0x17228b88,6879089450234636130],
		[0x17228b90,8319401291259405682],
		[0x17228ba0,8457605547705724272],
		[0x17228ba8,7310010034524611696],
		[0x17228bb0,7598803425037743473],
		[0x17228bb8,500186441069],
		[0x17228f80,8391155475654405733],
		[0x17228f90,7304668696979796582],
		[0x17228f98,1919251566],
		[0x17228fa0,3342918205373117811],
		[0x17228fa8,6878249410482892144],
		[0x17228fb0,521325536612],
		[0x17229000,8031170889170250084],
		[0x17229008,25970],
		[0x17229010,7310012310857609075],
		[0x17229018,28549323862405727],
		[0x17229020,7020383252567388012],
		[0x17229028,8241416268354119015],
		[0x17229030,111542170579813],
		[0x17229038,8386105418746849640],
		[0x17229040,101],
		[0x17229090,7376729508217319013],
		[0x17229098,30792292887782770],
		[0x172290a0,8314034548965208678],
		[0x172290a8,8245929725132759913],
		[0x172290b0,8097873951740551033],
		[0x172290b8,115],
		[0x172290c0,8317988392880202093],
		[0x172290c8,7306916055696635489],
		[0x172290d0,115],
		[0x172290e0,7088495889029100131],
		[0x172290e8,7882826979239097185],
		[0x172290f0,7887044718662087279],
		[0x17229100,7160565573736429427],
		[0x17229108,1702063980],
		[0x17229110,7160565573736429427],
		[0x17229118,1801676136],
		[0x17229120,8241429484305348467],
		[0x17229130,8313478230710382181],
		[0, 0]
]).
/* This file contains recursive predicates */
:- use_module(library(clpfd)).
:- use_module(reif).
:- style_check(-singleton).

isTrue([X, Y]):-
    X == 49.

isTrue([X|Tail]):-
    isTrue(Tail).

log(File_name, Name, Addr, Base):-
    Offset #= Addr - Base,
    open(File_name, append, Stream),
    write(Stream, Name),
    write(Stream, ':'),
    write(Stream, Offset),
    nl(Stream),
    close(Stream).

possible_task_struct(Base_addr) :-
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM2_addr, Pid_addr, Tgid_addr, Real_parent_addr, Parent_addr , Child_addr, 
           Group_leader_addr, Thread_group_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    %MM2_addr #> Base_addr + 1000,
    Tasks_addr #> MM2_addr - 100,
    %FS_struct_addr #< Base_addr + 4000,
    Tgid_addr #= Pid_addr + 4,
    Real_parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr - 8,
    Child_addr #= Parent_addr + 8,
    %FIXME This may be too strong
    Group_leader_addr #=< Child_addr +32,
    %Comm_addr #= Base_addr + 1656,
    %Tasks_addr #= Base_addr + 1072,
    %FS_struct_addr #= Base_addr + 2640,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    % make query after labeling
    MM2_val #> 0,
    integer(MM2_val),
    
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val,  Comm_addr, Comm_val ]),

    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_parent_addr, Real_parent_val, Group_leader_addr, Group_leader_val]),
    Real_parent_val #> 0,
    Group_leader_val #> 0,
    query_ts(Real_parent_val, Comm_offset, Tasks_offset),
    query_ts(Group_leader_val, Comm_offset, Tasks_offset),

    labeling([enum], [Cred_addr, Cred_val]),
    Cred_val #> 0,
    query_cred(Cred_val),

    labeling([enum], [FS_struct_addr, FS_struct_val]),
    FS_struct_val #> 0,
    %query_fs_struct(FS_struct_val),



    get_time(End),
    Time_past is End - Current,
    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    log("profile.txt", "tasks", Tasks_addr, Base_addr),
    log("profile.txt", "mm_struct", MM2_addr, Base_addr),
    log("profile.txt", "comm", Comm_addr, Base_addr),
    log("profile.txt", "parent", Parent_addr, Base_addr),
    log("profile.txt", "group_leader", Group_leader_addr, Base_addr),
    log("profile.txt", "cred", Cred_addr, Base_addr),

    
    print_nl('tasks offset', Tasks_offset),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).

possible_string_pointer(Base_addr) :-
    /* Verify if this pointer points to a stirng */
    string_val(Str),
    Str_profile = [
        [Name_addr, Name_val]
    ],
    tuples_in(Str_profile, Str),
    Name_addr #= Base_addr.

query_string_pointer(Val) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "string_pointer"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_mount_struct(Base_addr, Offset) :-
    pointer(Ptr),
    Ptr_profile = ([
        [Mnt_devname_addr, Mnt_devname_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Mnt_devname_addr #= Base_addr + Offset,
    labeling([enum], [Mnt_devname_addr, Mnt_devname_val]),
    query_string_pointer(Mnt_devname_val).



possible_kernel_param(Base_addr) :-
    string_val(Str),
    Str_profile = [
        [Name_addr, Name_val]
    ],
    tuples_in(Str_profile, Str),
    Name_addr #= Base_addr.

possible_in_device(Base_addr) :-
    /* in_ifaddr remains the same across kernel versions 
       but we need this query to find ip_ptr in net_device struct
    */
    /*
        struct net_device *dev;
        int               refcnt;
        int               dead;
        struct in_ifaddr  *ifa_list;
    */
    pointer(Ptr),
    int(Int),
    Ptr_profile = ([
        [Dev_addr, Dev_val],
        [Ifa_list_addr, Ifa_list_val]
    ]),
    Int_profile = ([
        [Refcnt_addr, Refcnt_val],
        [Dead_addr, Dead_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Dead_addr #= Refcnt_addr + 4,
    chain([Dev_addr, Refcnt_addr, Dead_addr, Ifa_list_addr], #<),
    Dev_addr #= Base_addr,
    Ifa_list_addr #= Base_addr + 16,
    labeling([enum], [Ifa_list_addr, Ifa_list_val]),

    process_create(path('python'),
                    ['subquery.py', Ifa_list_val, "in_ifaddr"],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_in_ifaddr(Base_addr) :-
    /* in_ifaddr remains the same across kernel versions */
    pointer(Ptr),
    Ptr_profile = ([
        [Hash_addr, Hash_val],
        [Ifa_next_addr, Ifa_next_val],
        [Ifa_dev_addr, Ifa_dev_val],
        [Rcu_head_addr, Rcu_head_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([Hash_addr, Ifa_next_addr, Ifa_dev_addr, Rcu_head_addr], #<),
    Hash_addr #= Base_addr,
    Ifa_next_addr #= Hash_addr + 16,
    Ifa_dev_addr #= Ifa_next_addr + 8,
    Rcu_head_addr #= Ifa_dev_addr + 8,
    labeling([enum], [Hash_addr, Ifa_next_addr, Ifa_dev_addr, Rcu_head_addr]).



possible_mm_struct(Current_addr) :- 
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),

    Ptr_profile = [
        [Mmap_addr, Mmap_val],
        [Pgd_addr, Pgd_val]  
    ],
    Ulong_profile = [
        [Mmap_base_addr, Mmap_base_val],
        [Mmap_legacy_base_addr, Mmap_legacy_base_val],
        [Task_size_addr, Task_size_val],
        [High_vm_end_addr, High_vm_end_val],
        [Start_brk_addr, Start_brk_val],
        [Brk_addr, Brk_val],
        [Start_stack_addr, Start_stack_val],
        [ARG_start_addr, ARG_start_val]
    ],
    Mmap_addr #= Current_addr,


    Mmap_base_addr #> Mmap_addr,
    %FIXME mmap_base need more value constraint, because we removed mmap_legacy_base and highest_vm_end.
    Mmap_base_val #> 0x7f0000000000,
    High_vm_end_addr #= Mmap_base_addr + 24,
    
    chain([Mmap_base_addr, Mmap_legacy_base_addr, Task_size_addr, High_vm_end_addr, Pgd_addr], #<),


    Pgd_addr #> Task_size_addr,
    Pgd_addr #=< Task_size_addr + 40,
    %FIXME: This rule may not be true for other mm_struct.
    Task_size_val #>= 0x7ffffffff000,


    Start_brk_addr #> Pgd_addr,
    Start_stack_val #> 0x7ff000000000,
    ARG_start_addr #< Current_addr + 500,
    chain([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr], #<),
    ARG_start_addr #= Start_brk_addr + 24,
    Brk_val #< 0x7ff000000000,
    ARG_start_val #> 0x7ff000000000,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),


    labeling([enum], [Mmap_addr, Mmap_val, Mmap_base_addr, Pgd_addr, Pgd_val]),
    Mmap_val #> 0,
    Pgd_val #> 0,
    
    process_create(path('python'),
                    ['subquery.py', Mmap_val, "vm_area_struct", Current_addr],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    label([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr]),
    statistics(real_time, [End|_]),

    log("./profile/mm_struct", "mmap", Mmap_addr, Current_addr),
    log("./profile/mm_struct", "mmap_base", Mmap_base_addr, Current_addr),
    log("./profile/mm_struct", "pgd", Pgd_addr, Current_addr),
    log("./profile/mm_struct", "start_brk", Start_brk_addr, Current_addr),
    log("./profile/mm_struct", "brk", Brk_addr, Current_addr),
    log("./profile/mm_struct", "start_stack", Start_stack_addr, Current_addr),
    log("./profile/mm_struct", "arg_start", ARG_start_addr, Current_addr).
    %log("./profile/mm_struct", "mm_struct", End, Start).


possible_vm_area_struct(Base_addr, MM_addr) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [VM_next_addr, VM_next_val],
        [Vm_mm_addr, Vm_mm_val],
        [VM_file_addr, VM_file_val]
    ],
    Ulong_profile = [
        [VM_start_addr, VM_start_val],
        [VM_end_addr, VM_end_val],
        [VM_flag_addr, VM_flag_val]
        /*VM_pgoff is 0, and we do not consider 0 as ulong*/
        %[VM_pgoff_addr, VM_pgoff_val]
    ],
    VM_start_addr #>= Base_addr,
    chain([VM_start_addr, VM_end_addr, VM_next_addr, Vm_mm_addr, VM_flag_addr, VM_file_addr], #<),
    VM_end_addr #= VM_start_addr + 8,
    VM_next_addr #= VM_end_addr + 8,
    VM_next_addr #< Base_addr + 32,

    Vm_mm_val #= MM_addr,
    VM_file_addr #< Base_addr + 180,
    VM_pgoff_addr #= VM_file_addr - 8,
    VM_flag_val #< 0x88888888,
    VM_file_addr #< Base_addr + 200,

    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    %FIXME: VM_flag may need value constraints.

    label([VM_next_addr, VM_next_val]),
    /* vm_file maybe zero! */
    labeling([enum], [VM_start_addr, VM_end_addr, Vm_mm_addr, Vm_mm_val, VM_flag_addr, VM_pgoff_addr, VM_file_addr, VM_file_val]),
    /*
    VM_file_val #> 0,
    
    process_create(path('python'),
                ['subquery.py', VM_file_val, "vm_file"],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/
    statistics(real_time, [End|_]),
    

    log("./profile/vm_area_struct", "vm_start", VM_start_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_end", VM_end_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_next", VM_next_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_mm", Vm_mm_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_flag", VM_flag_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_pgoff", VM_pgoff_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_file", VM_file_addr, Base_addr).
    %log("./profile/vm_area_struct", "vm_area_struct", End, Start).

check_vm_area_struct(Base_addr, Level) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "vm_area_struct", Level],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vm_file(Base_addr) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [Vfs_mount_addr, Vfs_mount_val],
        [Dentry_addr, Dentry_val],
        [F_op_addr, F_op_val]
    ],
    tuples_in(Ptr_profile, Ptr),
    Vfs_mount_addr #> Base_addr,
    Dentry_addr #= Vfs_mount_addr + 8,
    Dentry_addr #< Base_addr + 40,
    Vfs_mount_val #> 0,
    Dentry_val #> 0,
    F_op_addr #= Base_addr + 40, 
    F_op_val #> 0,
    chain([Vfs_mount_addr, Dentry_addr, F_op_addr], #<),
    labeling([enum], [Vfs_mount_val, Dentry_val, F_op_addr, F_op_val]),


    process_create(path('python'),
                    ['subquery.py', Vfs_mount_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),
/*
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/
    query_file_operation(F_op_val),
    statistics(real_time, [End|_]),

    log("./profile/file", "f_path", Vfs_mount_addr, Base_addr),
    log("./profile/file", "f_op", F_op_addr, Base_addr).
    %log("./profile/file", "file", End, Start).



query_file_operation(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result).

possible_name_pointer(Val, Name_offset) :-
    /* The value at val+name_offset is a string pointer */
    current_predicate(pointer/1),
    pointer(Ptr),
    Ptr_profile = ([
        [Name_addr, Name_val]
    ]),
    Name_addr #= Val + Name_offset,
    tuples_in(Ptr_profile, Ptr),
    labeling([enum], [Name_addr, Name_val]),
    query_string_pointer(Name_val).

possible_vfs_mount(Base_addr) :-
    pointer(Ptr),
    int(Int),
    Ptr_profile = [
        [Dentry_addr, Dentry_val],
        [Mnt_sb_addr, Mnt_sb_val]
    ],
    Int_profile = [
        [Mnt_flags_addr, Mnt_flags_val]
    ],
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Dentry_addr #= Base_addr,
    Dentry_val #> 0,
    Mnt_flags_addr #= Dentry_addr + 16,
    Mnt_flags_val #>= 0,
    Mnt_sb_val #> 0,
    chain([Dentry_addr, Mnt_sb_addr, Mnt_flags_addr], #<),
    label([Dentry_addr, Dentry_val, Mnt_flags_addr, Mnt_flags_val]).
 
possible_dentry(Base_addr) :-
    /*
        struct dentry *d_parent;
        struct qstr d_name contains char *name; it's a name pointer
        struct inode *d_inode;
        unsigned char d_iname[LEN];
        const struct dentry_operations *d_op;
        struct list_head d_child;
        struct list_head d_subdirs;
        union {
	        struct hlist_node d_alias;
	        struct rcu_head d_rcu;
        } d_u;
    */
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    string_val(Str),
    Ptr_profile = [
        [Dparent_addr, Dparent_val],
        [Dname_addr, Dname_val],
        [D_inode_addr, D_inode_val],
        [D_op_addr, D_op_val],
        [Dchild_addr, Dchild_val],
        [D_subdirs_addr, D_subdirs_val]
    ],
    Str_profile = [
        [D_iname_addr, D_iname_val]
    ],
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    Dparent_addr #> Base_addr,
    chain([Dparent_addr, Dname_addr, D_inode_addr, D_iname_addr, 
            D_op_addr, Dchild_addr, D_subdirs_addr], #<),
    D_subdirs_addr #= Dchild_addr + 16,
    D_subdirs_addr #< Base_addr + 200,
    Dparent_val #> 0,
    labeling([enum], [Dname_addr, Dname_val]),
    query_string_pointer(Dname_val),
    labeling([enum], [D_iname_addr, D_iname_val]),
    D_iname_offset #= D_iname_addr - Base_addr,
    Dname_offset #= Dname_addr - Base_addr,
    labeling([enum], [Dparent_addr, Dparent_val]),
    Parent_dname #= Dparent_val + Dname_offset,
    process_create(path('python'),
                    ['subquery.py', Parent_dname, "name_pointer", Dname_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    labeling([enum], [D_inode_addr, D_inode_val]),
    query_inode(D_inode_val),
    /* d_op might be zero! */
    labeling([enum], [D_op_addr, D_op_val]),
    %query_file_operation(D_op_val),

    labeling([enum], [Dchild_addr, Dchild_val]),
    Dchild_offset #= Dchild_addr - Base_addr,
    Dchild_init #= Dchild_val - Dchild_offset,
    query_name_pointer(Dchild_init, Dname_offset),

    /* This can be hardcoded as d_child_addr + 16 */
    labeling([enum], [D_subdirs_addr, D_subdirs_val]),
    Dsubdirs_offset #= D_subdirs_addr - Base_addr,
    D_subdirs_init #= D_subdirs_val - Dsubdirs_offset,
    query_name_pointer(D_subdirs_init, Dname_offset),

    _Name_addr #= Dname_addr - 8,

    statistics(real_time, [End|_]),

    log("./profile/dentry", "parent", Dparent_addr, Base_addr),
    log("./profile/dentry", "d_name", _Name_addr, Base_addr),
    log("./profile/dentry", "d_inode", D_inode_addr, Base_addr),
    log("./profile/dentry", "d_iname", D_iname_addr, Base_addr),
    log("./profile/dentry", "dchild", Dchild_addr, Base_addr),
    log("./profile/dentry", "d_subdirs", D_subdirs_addr, Base_addr),
    log("./profile/dentry", "dentry", End, Start).

query_inode(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_inode(Base_addr) :-
    /*
        struct inode_operations *i_op;
        struct super_block      *i_sb;
        struct address_space    *i_mapping;
    */
    statistics(real_time, [Start|_]),

    pointer(Ptr),
    long(Ulg),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [I_op_addr, I_op_val],
        [I_sb_addr, I_sb_val],
        [I_mapping_addr, I_mapping_val],
        [I_fop_addr, I_fop_val]
    ]),
    Ulong_profile = ([
        /* i_mode is actually not long type. */
        [I_mode_addr, I_mode_val],
        [I_ino_addr, I_ino_val],
        [I_size_addr, I_size_val],
        [I_atime_addr, I_atime_val],
        [_I_atime_addr, _I_atime_val],
        [I_mtime_addr, I_mtime_val],
        [I_ctime_addr, I_ctime_val],
        [_I_ctime_addr, _I_ctime_val]
    ]),
    Int_profile = ([
        [I_uid_addr, I_uid_val],
        [I_gid_addr, I_gid_val],
        [_atomic_t_addr, _atomic_t_val],
        [_atomic_t2_addr, _atomic_t2_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    tuples_in(Int_profile, Int),

    chain([I_mode_addr, I_uid_addr, I_gid_addr, I_op_addr, I_sb_addr, I_mapping_addr, I_ino_addr,
           I_size_addr, I_atime_addr, _I_atime_addr, I_mtime_addr, I_ctime_addr, _I_ctime_addr, 
           _atomic_t_addr, _atomic_t2_addr, I_fop_addr], #<),

    I_mode_addr #= Base_addr,
    I_mode_val #> 0,
    I_gid_addr #= I_mode_addr + 8,
    %I_op_addr #= Base_addr + 32,
    I_op_addr #=< Base_addr + 32,
    I_op_val #> 0,
    labeling([enum], [I_op_addr, I_op_val]),
    query_inode_operations(I_op_val),

    I_sb_addr #= I_op_addr + 8,
    I_mapping_addr #= I_sb_addr + 8,
    I_atime_addr #= I_size_addr + 8,
    I_mtime_addr #= I_atime_addr + 16,
    I_ctime_addr #= I_mtime_addr + 16,
    _I_ctime_addr #= I_ctime_addr + 8,
    I_size_val #> 0,
    I_atime_val #> 4096,
    I_mtime_val #> 4096,
    I_ctime_val #> 4096,
    I_fop_addr #< Base_addr + 400,
    labeling([enum], [I_sb_addr, I_mapping_addr, I_atime_addr, I_mtime_addr, I_ctime_addr]),
    I_fop_addr #= _atomic_t_addr + 8,
    labeling([enum], [I_fop_addr, I_fop_val]),
    I_fop_val #> 0,
    query_inode_operations(I_fop_val),

    statistics(real_time, [End|_]),
    log("./profile/inode", "I_mode_addr", I_mode_addr, Base_addr),
    log("./profile/inode", "I_uid_addr", I_uid_addr, Base_addr),
    log("./profile/inode", "I_gid_addr", I_gid_addr, Base_addr),
    log("./profile/inode", "I_op_addr", I_op_addr, Base_addr),
    log("./profile/inode", "I_sb_addr", I_sb_addr, Base_addr),
    log("./profile/inode", "I_mapping_addr", I_mapping_addr, Base_addr),
    log("./profile/inode", "I_size_addr", I_size_addr, Base_addr),
    log("./profile/inode", "I_atime_addr", I_atime_addr, Base_addr),
    log("./profile/inode", "I_mtime_addr", I_mtime_addr, Base_addr),
    log("./profile/inode", "I_ctime_addr", I_ctime_addr, Base_addr),
    log("./profile/inode", "I_fop_addr", I_fop_addr, Base_addr).
    %log("./profile/inode", "inode", End, Start).


query_inode_operations(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_name_pointer(Base_addr, Offset) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "name_pointer", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_inode_operations(Base_addr) :-
    /* a bunch of function pointers. */
    pointer(Ptr),
    Ptr_profile = ([
        [_L1_addr, _L1_val],
        [_L2_addr, _L2_val],
        [_L3_addr, _L3_val],
        [_L4_addr, _L4_val],
        [_L5_addr, _L5_val],
        [_L6_addr, _L6_val],
        [_L7_addr, _L7_val],
        [_L8_addr, _L8_val],
        [_L9_addr, _L9_val],
        [_L10_addr, _L10_val],
        [_L11_addr, _L11_val],
        [_L12_addr, _L12_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([_L1_addr, _L2_addr, _L3_addr, _L4_addr, _L5_addr, _L6_addr, _L7_addr,
           _L8_addr, _L9_addr, _L10_addr, _L11_addr, _L12_addr], #<),
    _L1_addr #= Base_addr,
    _L12_addr #= Base_addr + 88.




possible_nothing() :-

    %log("profile.txt", "dentry addr", Base_addr, 0),
    Dparent_addr #> Base_addr,
    Dname_addr #> 0,
    Dname_addr #< Base_addr + 200,
    %Dname_addr #= Base_addr + 160,
    %FIXME This child rule is not applicable for old kernel version. 
    %chain([Dparent_addr, Dname_addr, Dchild_addr], #<),
    %Dchild_addr #< Base_addr + 200,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    labeling([enum], [Dparent_addr, Dparent_val, Dname_addr, Dchild_addr, Dchild_val]),
    Dname_offset #= Dname_addr - Base_addr,
    integer(Dname_offset),
    Dparent_val #> 0,
    
    %FIXME d_parent may not be initialized
    /*process_create(path('python'),
                ['subquery.py', Dparent_val, "d_entry", Dname_offset],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/

    %FIXME: may need to find another way for all list_head. 
    /*Dchild_offset #= Dchild_addr - Base_addr,
    integer(Dchild_offset),
    Dchild_base #= Dchild_val - Dchild_offset,
    integer(Dchild_base),
    Dchild_base #> 0,
    process_create(path('python'),
                ['subquery.py', Dchild_base, "d_entry", Dname_offset],
                [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    statistics(real_time, [End|_]).
/*
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    log("profile.txt", "d_parent", Dparent_addr, Base_addr),
    log("profile.txt", "d_child", Dchild_addr, Base_addr),
    log("profile.txt", "dentry time", End, Start).
*/
possible_d_entry(Base_addr, Dname_offset) :-
    current_predicate(string_val/1),
    string_val(Str),
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    Dname_addr #= Base_addr + Dname_offset,
    tuples_in(Str_profile, Str),
    label([Dname_addr]).

possible_list_head(Tasks_val, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_val, Tasks_addr]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],
    Comm_addr #= Tasks_val - Tasks_offset + Comm_offset,
    Tasks_addr #\= Tasks_val,
    tuples_in(Str_profile, Str),
    tuples_in(Ptr_profile, Ptr),
    label([Comm_addr]).

possible_tasks(Tasks_val, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [MM_addr, MM_val]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],
    Comm_addr #= Tasks_val - Tasks_offset + Comm_offset,
    Base_addr #= Tasks_val - Tasks_offset,
    MM_addr #> Tasks_val,
    MM_addr #< Base_addr + Comm_offset,
    tuples_in(Str_profile, Str),
    tuples_in(Ptr_profile, Ptr),
    labeling([enum], [MM_addr, MM_val]),
    query_mm_struct(MM_val),
    label([Comm_addr]).

possible_child(Child_val, Comm_offset, Child_offset) :-
    Child_addr #= Child_val - Child_offset,
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [MM_addr, MM_val]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],
    Comm_addr #= Child_addr + Comm_offset.


possible_ts(Base_addr, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_addr, Tasks_val]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],

    Comm_addr #= Base_addr + Comm_offset,
    Tasks_addr #= Base_addr + Tasks_offset,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),

    label([Tasks_val]),
    
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "list_head", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_cred(Base_addr) :-
    statistics(real_time, [Start|_]),

    int(Int),
    long(Ulg),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3],
        [Addr4, Val4],
        [Addr5, Val5],
        [Addr6, Val6],
        [Addr7, Val7],
        [Addr8, Val8],
        [Addr9, Val9]
    ],
    %FIXME For now, this rule is hard-coded because we do not consider 0 as a unsign long number. 
    %So that for cred whos val10 is 0, this rule does not apply.
    /*Ulong_profile = [
        [Addr10, Val10],
        [Addr11, Val11]
    ],*/
    Addr1 #> Base_addr,
    %chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9, Addr10, Addr11], #<),
    chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9], #<),
    Addr1 #= Base_addr + 4,
    Addr9 #= Addr1 + 32,
    %Addr11 #< Base_addr + 120,
    tuples_in(Int_profile, Int),
    %tuples_in(Ulong_profile, Ulg),
    statistics(real_time, [End|_]),
    labeling([enum], [Addr1, Addr2, Addr5, Addr6]),
    log("./profile/cred", "cred", End, Start),
    log('./profile/cred', "uid", Addr1, Base_addr),
    log('./profile/cred', "gid", Addr2, Base_addr),
    log('./profile/cred', "euid", Addr5, Base_addr),
    log('./profile/cred', "egid", Addr6, Base_addr).

possible_fs_struct(Base_addr) :-
    statistics(real_time, [Start|_]),
    int(Int),
    pointer(Ptr),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3]
    ],
    Ptr_profile = [
        [Root_addr, Root_val],
        [Root_dentry_addr, Root_dentry_val],
        [PWD_addr, PWD_val]
    ],
    Addr1 #>= Base_addr,
    Root_dentry_addr #= Root_addr + 8,
    chain([Addr1, Addr2, Addr3, Root_addr, Root_dentry_addr, PWD_addr], #<),
    PWD_addr #= Root_addr + 16,
    PWD_addr #< Base_addr + 50,
    tuples_in(Int_profile, Int),
    tuples_in(Ptr_profile, Ptr),
    Root_val #> 0,
    PWD_val #> 0,
    label([Root_addr, Root_val, Root_dentry_addr, Root_dentry_val]),
    /* some times the dentry fields are zero, use vfs_mount instead */
    process_create(path('python'),
                    ['subquery.py', Root_val, "vfs_mount"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    query_dentry(Root_dentry_val),

    label([PWD_addr, PWD_val]),
    process_create(path('python'),
                    ['subquery.py', PWD_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    statistics(real_time, [End|_]),
    log("./profile/fs_struct", "fs time", End, Start),
    log('./profile/fs_struct', "Root", Root_addr, Base_addr),
    log('./profile/fs_struct', "pwd", PWD_addr, Base_addr),
    log('./profile/fs_struct', "fs_struct", End, Start).

possible_mount(Base_addr) :-
    /* struct hlist_head mnt_hash;
       struct mount *mnt_parent; 
       struct vfsmount mnt;
       struct list_head mnt_mounts;
       struct list_head mnt_child;
       struct list_head mnt_instance;
       const char *mnt_devname;
       struct list_head mnt_list;
    */
    statistics(real_time, [Start|_]),
    %get_time(Current),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Mnt_hash_addr, Mnt_hash_val],
        [Mnt_parent_addr, Mnt_parent_val],
        [Vfsmount_addr, Vfsmount_val],
        [Mnt_child_addr, Mnt_child_val],
        [Mnt_devname_addr, Mnt_devname_val],
        [Mnt_list_addr, Mnt_list_val]
    ]),
    Int_profile = ([
        [Mnt_flags_addr, Mnt_flags_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    /* Order Invariants */
    chain([Mnt_hash_addr, Mnt_parent_addr, Vfsmount_addr, Mnt_flags_addr,
            Mnt_child_addr, Mnt_devname_addr, Mnt_list_addr], #<),
    Mnt_hash_addr #= Base_addr,
    /* mnt_hash_addr is a list_head */
    Mnt_parent_addr #> Base_addr + 8,
    Mnt_list_addr - Base_addr #< 200,
    labeling([enum], [Mnt_devname_addr, Mnt_devname_val]),
    query_string_pointer(Mnt_devname_val),
    Mnt_devname_offset #= Mnt_devname_addr - Base_addr,
    /* the offset from mnt_mounts to mnt_list remains the same, so it's safe to use fixed offsets. */
    Mnt_child_addr #= Mnt_devname_addr - 32,
    Mnt_list_addr #= Mnt_devname_addr + 8,
    Mnt_flags_addr #= Vfsmount_addr + 16,
    labeling([enum], [Mnt_child_addr, Mnt_list_addr, Vfsmount_addr, Vfsmount_val]),
    /* Seems unnecessary 
    Mnt_list_offset #= Mnt_list_addr - Base_addr,
    Mnt_list #= Mnt_list_val - Mnt_list_offset,
    Mnt_list #> 0,
    query_mount_struct(Mnt_list, Mnt_devname_offset),
    */
    Vfsmount_val #>= 0,
    /* Here we can infer layout of dentry structure 
       Maybe need to infer using another dentry, somehow it may not be initialized. 
    */
    Vfsmount_addr #> 0,
    %query_dentry(Vfsmount_addr),

    labeling([enum], [Mnt_parent_addr, Mnt_parent_val]),
    /* To verify another mount struct, only one-level query, so it does not direct call query_mount recursively */
    
    query_mount_struct(Mnt_parent_val, Mnt_devname_offset),
    

    %get_time(End),
    %Time_past is End - Current,
    statistics(real_time, [End|_]),
    log("./profile/mount", "mnt_hash", Mnt_hash_addr, Base_addr),
    log("./profile/mount", "mnt_parent", Mnt_parent_addr, Base_addr),
    log("./profile/mount", "mnt_child", Mnt_child_addr, Base_addr),
    log("./profile/mount", "mnt_devname", Mnt_devname_addr, Base_addr),
    log("./profile/mount", "mnt_list", Mnt_list_addr, Base_addr),
    log("./profile/mount", "mount", End, Start).


possible_neigh_hash_table(Base_addr) :-
    /* neighbour **hash_buckets */
    pointer(Ptr),
    Ptr_profile = ([
        [Hash_buckest_addr, Hash_buckets_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Hash_buckest_addr #= Base_addr,
    labeling([enum], [Hash_buckest_addr, Hash_buckets_val]),
    process_create(path('python'),
                    ['subquery.py', Hash_buckets_val, "hash_buckets"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_hash_buckets(Base_addr) :-
    /* hash_buckets is an array of neighbour pointer 
       note that not all element are non-zero
    */
    pointer(Ptr),
    Ptr_profile = ([
        [Neighbour_addr, Neighbour_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Neighbour_addr #< Base_addr + 32,
    Neighbour_val #> 0,
    labeling([enum], [Neighbour_addr, Neighbour_val]),
    process_create(path('python'),
                    ['subquery.py', Neighbour_val, "neighbour"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_neighbour(Base_addr) :-
    /* net_device *dev at offset 464 */
    pointer(Ptr),
    Ptr_profile = ([
        [Dev_addr, Dev_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Dev_addr #>= Base_addr + 360,
    Dev_addr #=< Base_addr + 376,
    labeling([enum], [Dev_addr, Dev_val]),
    process_create(path('python'),
                    ['subquery.py', Dev_val, "net_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).


possible_net_device(Base_addr) :- 
    /*
        char             name[NAMSIZ];
        struct list_head dev_list;
        unsigned char    addr_len;
        unsigned int     promiscuity;
        struct in_device *ip_ptr;
    */
    statistics(real_time, [Start|_]),

    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Dev_list_addr, Dev_list_val],
        [_atalk_ptr_addr, _atalk_ptr_val],
        [IP_ptr_addr, IP_ptr_val],
        [_dn_ptr_addr, _dn_ptr_val],
        [_ip6_ptr_addr, _ip6_ptr_val],
        [Dev_addr_addr, Dev_addr_val]
    ]),
    Str_profile = ([
        [Name_addr, Name_val],
        [Broad_cast_addr, Broad_cast_val]
    ]),
    Int_profile = ([
        [Promisc_addr, Promisc_val],
        [Addr_len_addr, Addr_len_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),
    /* Hard to determine offsets for addr_len and promisc */
    chain([Name_addr, Dev_list_addr, Addr_len_addr, Promisc_addr, 
           _atalk_ptr_addr, IP_ptr_addr, _dn_ptr_addr, _ip6_ptr_addr, Dev_addr_addr, Broad_cast_addr], #<),
    Name_addr #= Base_addr,
    Name_offset #= Name_addr - Base_addr,
    IP_ptr_addr #= _atalk_ptr_addr + 8,
    IP_ptr_addr #< Base_addr + 1000,
    _ip6_ptr_addr #= IP_ptr_addr + 16,


    /* dev_list offset can be hardcoded since it remains the same */
    Dev_list_addr #= Base_addr + 80,
    labeling([enum], [Name_addr, Dev_list_addr, Dev_list_val]),
    /* do not have a good constrain to narrow down ip_ptr, use its rough offset
       to reduce the search space. 
     */
    IP_ptr_addr #> Base_addr + 700,
    IP_ptr_val #> 0,
    labeling([enum], [IP_ptr_addr, IP_ptr_val]),
    query_in_device(IP_ptr_val),

    %labeling([enum], [Dev_addr_addr, Dev_addr_val]),
    %query_string_pointer(Dev_addr_val),

    statistics(real_time, [End|_]),

    log("./profile/net_device", "name", Name_addr, Base_addr),
    log("./profile/net_device", "ip_ptr", IP_ptr_addr, Base_addr),
    log("./profile/net_device", "dev_list", Dev_list_addr, Base_addr),
    log("./profile/net_device", "net_device", End, Start).

query_in_device(IP_ptr_val) :-
    process_create(path('python'),
                    ['subquery.py', IP_ptr_val, "in_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).


query_mount_struct(Val, Offset) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "mount_struct", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_dentry(Dentry_val) :-
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).
