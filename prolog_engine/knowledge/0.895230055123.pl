:- use_module(library(clpfd)).
:- style_check(-singleton).
pointer([
		[0x1ece0300,0],
		[0x1ece0308,459344008],
		[0x1ece0310,516818816],
		[0x1ece0318,512419520],
		[0x1ece0320,434804224],
		[0x1ece0328,519753728],
		[0x1ece0338,0],
		[0x1ece0340,0],
		[0x1ece0350,516820064],
		[0x1ece0358,450047456],
		[0x1ece0360,516816992],
		[0x1ece0368,516819680],
		[0x1ece0370,365162608],
		[0x1ece0378,519753920],
		[0x1ece0380,519430016],
		[0x1ece0388,516817032],
		[0x1ece0390,459365128],
		[0x1ece0398,516817816],
		[0x1ece03a0,516817816],
		[0x1ece03a8,516817832],
		[0x1ece03b0,516817832],
		[0x1ece03b8,365162696],
		[0x1ece03c0,365162696],
		[0x1ece03c8,516817864],
		[0x1ece03d0,516817864],
		[0x1ece03d8,0],
		[0x1ece03e0,458287232],
		[0x1ece03e8,460051328],
		[0x1ece03f0,0],
		[0x1ece03f8,365162736],
		[0x1ece0400,516817920],
		[0x1ece0408,516817920],
		[0x1ece0410,0],
		[0x1ece0428,0],
		[0x1ece0430,0],
		[0x1ece0438,516817976],
		[0x1ece0440,516817976],
		[0x1ece0448,0],
		[0x1ece0450,0],
		[0x1ece0458,0],
		[0x1ece0460,0],
		[0x1ece0468,0],
		[0x1ece0470,321513552],
		[0x1ece0478,0],
		[0x1ece0480,0],
		[0x1ece0488,459347728],
		[0x1ece0490,516818432],
		[0x1ece0498,434799744],
		[0x1ece04a0,434800704],
		[0x1ece04a8,519749632],
		[0x1ece04b8,0],
		[0x1ece04c0,0],
		[0x1ece04d0,516818128],
		[0x1ece04d8,516818128],
		[0x1ece04e0,516817376],
		[0x1ece04e8,516818512],
		[0x1ece04f0,365164528],
		[0x1ece04f8,519749824],
		[0x1ece0500,519428432],
		[0x1ece0508,516819720],
		[0x1ece0510,516818568],
		[0x1ece0518,516818200],
		[0x1ece0520,516818200],
		[0x1ece0528,516818216],
		[0x1ece0530,516818216],
		[0x1ece0538,365164616],
		[0x1ece0540,365164616],
		[0x1ece0548,516818248],
		[0x1ece0550,516818248],
		[0x1ece0558,0],
		[0x1ece0560,458287232],
		[0x1ece0568,518760704],
		[0x1ece0570,0],
		[0x1ece0578,365164656],
		[0x1ece0580,516818304],
		[0x1ece0588,516818304],
		[0x1ece0590,0],
		[0x1ece05a8,0],
		[0x1ece05b0,0],
		[0x1ece05b8,516818360],
		[0x1ece05c0,516818360],
		[0x1ece05c8,0],
		[0x1ece05d0,0],
		[0x1ece05d8,0],
		[0x1ece05e0,0],
		[0x1ece05e8,0],
		[0x1ece05f0,321513552],
		[0x1ece05f8,0],
		[0x1ece0600,0],
		[0x1ece0608,450046976],
		[0x1ece0610,516818816],
		[0x1ece0618,434818432],
		[0x1ece0620,453010176],
		[0x1ece0628,459517952],
		[0x1ece0638,0],
		[0x1ece0640,0],
		[0x1ece0650,516818144],
		[0x1ece0658,450046688],
		[0x1ece0660,516819680],
		[0x1ece0668,516818896],
		[0x1ece0670,365165296],
		[0x1ece0678,459363184],
		[0x1ece0680,519426448],
		[0x1ece0688,516818184],
		[0x1ece0690,516817032],
		[0x1ece0698,516818584],
		[0x1ece06a0,516818584],
		[0x1ece06a8,516818600],
		[0x1ece06b0,516818600],
		[0x1ece06b8,365165384],
		[0x1ece06c0,365165384],
		[0x1ece06c8,516818632],
		[0x1ece06d0,516818632],
		[0x1ece06d8,0],
		[0x1ece06e0,458287232],
		[0x1ece06e8,460052736],
		[0x1ece06f0,0],
		[0x1ece06f8,365165424],
		[0x1ece0700,516818688],
		[0x1ece0708,516818688],
		[0x1ece0710,0],
		[0x1ece0728,0],
		[0x1ece0730,0],
		[0x1ece0738,516818744],
		[0x1ece0740,516818744],
		[0x1ece0748,0],
		[0x1ece0750,0],
		[0x1ece0758,0],
		[0x1ece0760,0],
		[0x1ece0768,0],
		[0x1ece0770,321513552],
		[0x1ece0778,0],
		[0x1ece0780,0],
		[0x1ece0788,459344880],
		[0x1ece0790,459364992],
		[0x1ece0798,453012672],
		[0x1ece07a0,512491712],
		[0x1ece07a8,522764288],
		[0x1ece07b8,0],
		[0x1ece07c0,0],
		[0x1ece07d0,516818528],
		[0x1ece07d8,516816992],
		[0x1ece07e0,459365072],
		[0x1ece07e8,459365072],
		[0x1ece07f0,365163760],
		[0x1ece07f8,522764480],
		[0x1ece0800,520035680],
		[0x1ece0808,516820104],
		[0x1ece0810,516819720],
		[0x1ece0818,516818968],
		[0x1ece0820,516818968],
		[0x1ece0828,516818984],
		[0x1ece0830,516818984],
		[0x1ece0838,365163848],
		[0x1ece0840,522827080],
		[0x1ece0848,516819016],
		[0x1ece0850,516819016],
		[0x1ece0858,0],
		[0x1ece0860,458287232],
		[0x1ece0868,459699520],
		[0x1ece0870,459363312],
		[0x1ece0878,365163888],
		[0x1ece0880,516819072],
		[0x1ece0888,516819072],
		[0x1ece0890,0],
		[0x1ece08a8,0],
		[0x1ece08b0,0],
		[0x1ece08b8,516819128],
		[0x1ece08c0,516819128],
		[0x1ece08c8,0],
		[0x1ece08d0,0],
		[0x1ece08d8,0],
		[0x1ece08e0,0],
		[0x1ece08e8,0],
		[0x1ece08f0,321513552],
		[0x1ece08f8,0],
		[0x1ece0900,0],
		[0x1ece0908,0],
		[0x1ece0910,516819200],
		[0x1ece0918,434204864],
		[0x1ece0920,434204864],
		[0x1ece0928,516143104],
		[0x1ece0938,0],
		[0x1ece0940,0],
		[0x1ece0950,516819280],
		[0x1ece0958,516819280],
		[0x1ece0960,516819296],
		[0x1ece0968,516819296],
		[0x1ece0970,450047472],
		[0x1ece0978,516143296],
		[0x1ece0980,336558320],
		[0x1ece0988,516819336],
		[0x1ece0990,516819336],
		[0x1ece0998,516819352],
		[0x1ece09a0,516819352],
		[0x1ece09a8,516819368],
		[0x1ece09b0,516819368],
		[0x1ece09b8,516819384],
		[0x1ece09c0,516819384],
		[0x1ece09c8,516819400],
		[0x1ece09d0,516819400],
		[0x1ece09d8,0],
		[0x1ece09e0,0],
		[0x1ece09e8,0],
		[0x1ece09f0,0],
		[0x1ece09f8,0],
		[0x1ece0a00,516819456],
		[0x1ece0a08,516819456],
		[0x1ece0a10,0],
		[0x1ece0a20,0],
		[0x1ece0a28,0],
		[0x1ece0a30,0],
		[0x1ece0a38,516819512],
		[0x1ece0a40,516819512],
		[0x1ece0a48,0],
		[0x1ece0a50,0],
		[0x1ece0a58,0],
		[0x1ece0a60,0],
		[0x1ece0a68,0],
		[0x1ece0a70,321513552],
		[0x1ece0a78,0],
		[0x1ece0a80,0],
		[0x1ece0a88,459344056],
		[0x1ece0a90,516818816],
		[0x1ece0a98,512419904],
		[0x1ece0aa0,435075136],
		[0x1ece0aa8,519755776],
		[0x1ece0ab8,0],
		[0x1ece0ac0,0],
		[0x1ece0ad0,516820448],
		[0x1ece0ad8,354609120],
		[0x1ece0ae0,516817760],
		[0x1ece0ae8,516818528],
		[0x1ece0af0,365164912],
		[0x1ece0af8,519755968],
		[0x1ece0b00,519426456],
		[0x1ece0b08,516818952],
		[0x1ece0b10,516818184],
		[0x1ece0b18,516819736],
		[0x1ece0b20,516819736],
		[0x1ece0b28,516819752],
		[0x1ece0b30,516819752],
		[0x1ece0b38,365165000],
		[0x1ece0b40,522828232],
		[0x1ece0b48,516819784],
		[0x1ece0b50,516819784],
		[0x1ece0b58,0],
		[0x1ece0b60,458287232],
		[0x1ece0b68,460054336],
		[0x1ece0b70,0],
		[0x1ece0b78,365165040],
		[0x1ece0b80,516819840],
		[0x1ece0b88,516819840],
		[0x1ece0b90,0],
		[0x1ece0ba8,0],
		[0x1ece0bb0,0],
		[0x1ece0bb8,516819896],
		[0x1ece0bc0,516819896],
		[0x1ece0bc8,0],
		[0x1ece0bd0,0],
		[0x1ece0bd8,0],
		[0x1ece0be0,0],
		[0x1ece0be8,0],
		[0x1ece0bf0,321513552],
		[0x1ece0bf8,0],
		[0x1ece0c00,0],
		[0x1ece0c08,459344632],
		[0x1ece0c10,516817664],
		[0x1ece0c18,434186496],
		[0x1ece0c20,453009792],
		[0x1ece0c28,459507712],
		[0x1ece0c38,0],
		[0x1ece0c40,0],
		[0x1ece0c50,516820048],
		[0x1ece0c58,516820048],
		[0x1ece0c60,450167648],
		[0x1ece0c68,516817744],
		[0x1ece0c70,438487408],
		[0x1ece0c78,461138672],
		[0x1ece0c80,520032832],
		[0x1ece0c88,516817416],
		[0x1ece0c90,516818952],
		[0x1ece0c98,516820120],
		[0x1ece0ca0,516820120],
		[0x1ece0ca8,516820136],
		[0x1ece0cb0,516820136],
		[0x1ece0cb8,438487496],
		[0x1ece0cc0,438487496],
		[0x1ece0cc8,516820168],
		[0x1ece0cd0,516820168],
		[0x1ece0cd8,0],
		[0x1ece0ce0,458287232],
		[0x1ece0ce8,460053504],
		[0x1ece0cf0,0],
		[0x1ece0cf8,438487536],
		[0x1ece0d00,516820224],
		[0x1ece0d08,516820224],
		[0x1ece0d10,0],
		[0x1ece0d28,0],
		[0x1ece0d30,0],
		[0x1ece0d38,516820280],
		[0x1ece0d40,516820280],
		[0x1ece0d48,0],
		[0x1ece0d50,0],
		[0x1ece0d58,0],
		[0x1ece0d60,0],
		[0x1ece0d68,0],
		[0x1ece0d70,321513552],
		[0x1ece0d78,0],
		[0x1ece0d80,0],
		[0x1ece0d88,459342448],
		[0x1ece0d90,516819584],
		[0x1ece0d98,434167168],
		[0x1ece0da0,434164864],
		[0x1ece0da8,520929280],
		[0x1ece0db8,0],
		[0x1ece0dc0,0],
		[0x1ece0dd0,516820432],
		[0x1ece0dd8,516820432],
		[0x1ece0de0,354609120],
		[0x1ece0de8,516819664],
		[0x1ece0df0,365163376],
		[0x1ece0df8,520929472],
		[0x1ece0e00,519429280],
		[0x1ece0e08,450167688],
		[0x1ece0e10,516817416],
		[0x1ece0e18,516820504],
		[0x1ece0e20,516820504],
		[0x1ece0e28,516820520],
		[0x1ece0e30,516820520],
		[0x1ece0e38,365163464],
		[0x1ece0e40,365163464],
		[0x1ece0e48,516820552],
		[0x1ece0e50,516820552],
		[0x1ece0e58,0],
		[0x1ece0e60,458287232],
		[0x1ece0e68,460052544],
		[0x1ece0e70,0],
		[0x1ece0e78,365163504],
		[0x1ece0e80,516820608],
		[0x1ece0e88,516820608],
		[0x1ece0e90,0],
		[0x1ece0ea8,0],
		[0x1ece0eb0,0],
		[0x1ece0eb8,516820664],
		[0x1ece0ec0,516820664],
		[0x1ece0ec8,0],
		[0x1ece0ed0,0],
		[0x1ece0ed8,0],
		[0x1ece0ee0,0],
		[0x1ece0ee8,0],
		[0x1ece0ef0,321513552],
		[0x1ece0ef8,0],
		[0x1ece1000,324188800],
		[0x1ece1008,324191120],
		[0x1ece1010,324191392],
		[0x1ece1018,324188944],
		[0x1ece1020,324189504],
		[0x1ece1028,324189280],
		[0x1ece1030,0],
		[0x1ece1048,0],
		[0x1ece1078,0],
		[0x1ece1080,0],
		[0x1ece1088,0],
		[0x1ece10b8,0],
		[0x1ece10c0,0],
		[0x1ece10c8,0],
		[0x1ece10d0,0],
		[0x1ece10e0,0],
		[0x1ece10f0,324162672],
		[0x1ece1108,522834480],
		[0x1ece1110,0],
		[0x1ece1118,0],
		[0x1ece1130,0],
		[0x1ece1138,312328720],
		[0x1ece1140,0],
		[0x1ece1148,0],
		[0x1ece1150,0],
		[0x1ece1158,0],
		[0x1ece1160,0],
		[0x1ece1168,347038912],
		[0x1ece1170,516136960],
		[0x1ece11a0,0],
		[0x1ece11a8,0],
		[0x1ece11b0,0],
		[0x1ece11b8,516792160],
		[0x1ece11c8,0],
		[0x1ece11d0,0],
		[0x1ece11d8,0],
		[0x1ece11e0,0],
		[0x1ece11e8,0],
		[0x1ece11f0,0],
		[0x1ece11f8,0],
		[0x1ece1200,0],
		[0x1ece1208,341832224],
		[0x1ece1210,522069888],
		[0x1ece1228,0],
		[0x1ece1238,516821560],
		[0x1ece1240,516821560],
		[0x1ece1248,0],
		[0x1ece1250,0],
		[0x1ece1258,0],
		[0x1ece1260,0],
		[0x1ece1268,0],
		[0x1ece1270,327585760],
		[0x1ece1278,0],
		[0x1ece1290,0],
		[0x1ece12a0,0],
		[0x1ece12a8,0],
		[0x1ece12b0,0],
		[0x1ece12c0,0],
		[0x1ece12d8,0],
		[0x1ece12e0,0],
		[0x1ece12e8,0],
		[0x1ece12f0,0],
		[0x1ece12f8,0],
		[0, 0]
]).
unknown([
		[0x1ece0f00,14757395258967641292],
		[0x1ece0f08,14757395258967641292],
		[0x1ece0f10,14757395258967641292],
		[0x1ece0f18,14757395258967641292],
		[0x1ece0f20,14757395258967641292],
		[0x1ece0f28,14757395258967641292],
		[0x1ece0f30,14757395258967641292],
		[0x1ece0f38,14757395258967641292],
		[0x1ece0f40,14757395258967641292],
		[0x1ece0f48,14757395258967641292],
		[0x1ece0f50,14757395258967641292],
		[0x1ece0f58,14757395258967641292],
		[0x1ece0f60,14757395258967641292],
		[0x1ece0f68,14757395258967641292],
		[0x1ece0f70,14757395258967641292],
		[0x1ece0f78,14757395258967641292],
		[0x1ece0f80,14757395258967641292],
		[0x1ece0f88,14757395258967641292],
		[0x1ece0f90,14757395258967641292],
		[0x1ece0f98,14757395258967641292],
		[0x1ece0fa0,14757395258967641292],
		[0x1ece0fa8,14757395258967641292],
		[0x1ece0fb0,14757395258967641292],
		[0x1ece0fb8,14757395258967641292],
		[0x1ece0fc0,14757395258967641292],
		[0x1ece0fc8,14757395258967641292],
		[0x1ece0fd0,14757395258967641292],
		[0x1ece0fd8,14757395258967641292],
		[0x1ece0fe0,14757395258967641292],
		[0x1ece0fe8,14757395258967641292],
		[0x1ece0ff0,14757395258967641292],
		[0x1ece0ff8,14757395258967641292],
		[0x1ece10d8,16045481047390945792],
		[0x1ece1198,18446744069414584320],
		[0x1ece1288,1477743627730944],
		[0x1ece12c8,1585267069693394944],
		[0x1ece12d0,15962540710901601362],
		[0, 0]
]).
long([
		[0x1ece0330,4135],
		[0x1ece0348,71292699023792],
		[0x1ece0418,90194313216],
		[0x1ece0420,7],
		[0x1ece04b0,4133],
		[0x1ece04c8,71292699023828],
		[0x1ece0598,103079215104],
		[0x1ece05a0,3],
		[0x1ece0630,4129],
		[0x1ece0648,71292699023820],
		[0x1ece0718,98784247808],
		[0x1ece0720,2],
		[0x1ece07b0,4128],
		[0x1ece07c8,71292699028068],
		[0x1ece0898,111669149696],
		[0x1ece08a0,1],
		[0x1ece0948,180036],
		[0x1ece0a18,85899345920],
		[0x1ece0ab0,4133],
		[0x1ece0ac8,71292699024076],
		[0x1ece0b98,107374182400],
		[0x1ece0ba0,5],
		[0x1ece0c30,4135],
		[0x1ece0c48,71292699028704],
		[0x1ece0d18,115964116992],
		[0x1ece0d20,8],
		[0x1ece0db0,4135],
		[0x1ece0dc8,71292699028736],
		[0x1ece0e98,124554051584],
		[0x1ece0ea0,6],
		[0x1ece1038,2576980378400],
		[0x1ece1040,2576980378400],
		[0x1ece1050,24],
		[0x1ece1058,34359738384],
		[0x1ece1060,34359738368],
		[0x1ece1068,8],
		[0x1ece1070,34359738368],
		[0x1ece1098,89477053677568],
		[0x1ece10a0,137438953568],
		[0x1ece10a8,17179869200],
		[0x1ece10b0,17179869280],
		[0x1ece10e8,4294892978],
		[0x1ece10f8,213909504],
		[0x1ece1100,65536],
		[0x1ece1120,68719476744],
		[0x1ece1128,7],
		[0x1ece1178,214748364806],
		[0x1ece1180,1],
		[0x1ece1188,4294967296],
		[0x1ece1190,4294967296],
		[0x1ece1218,4294877960],
		[0x1ece1220,4294892960],
		[0x1ece1230,1],
		[0x1ece1280,4294892960],
		[0x1ece1298,24189255824179],
		[0x1ece12b8,14],
		[0, 0]
]).
int([
		[0x1ece0300,0],
		[0x1ece0304,0],
		[0x1ece0330,4135],
		[0x1ece0334,0],
		[0x1ece0338,0],
		[0x1ece033c,0],
		[0x1ece0340,0],
		[0x1ece0344,0],
		[0x1ece034c,16599],
		[0x1ece03d8,0],
		[0x1ece03dc,0],
		[0x1ece03f0,0],
		[0x1ece03f4,0],
		[0x1ece0410,0],
		[0x1ece0414,0],
		[0x1ece0418,0],
		[0x1ece041c,21],
		[0x1ece0420,7],
		[0x1ece0424,0],
		[0x1ece0428,0],
		[0x1ece042c,0],
		[0x1ece0430,0],
		[0x1ece0434,0],
		[0x1ece0448,0],
		[0x1ece044c,0],
		[0x1ece0450,0],
		[0x1ece0454,0],
		[0x1ece0458,0],
		[0x1ece045c,0],
		[0x1ece0460,0],
		[0x1ece0464,0],
		[0x1ece0468,0],
		[0x1ece046c,0],
		[0x1ece0478,0],
		[0x1ece047c,0],
		[0x1ece0480,0],
		[0x1ece0484,0],
		[0x1ece04b0,4133],
		[0x1ece04b4,0],
		[0x1ece04b8,0],
		[0x1ece04bc,0],
		[0x1ece04c0,0],
		[0x1ece04c4,0],
		[0x1ece04cc,16599],
		[0x1ece0558,0],
		[0x1ece055c,0],
		[0x1ece0570,0],
		[0x1ece0574,0],
		[0x1ece0590,0],
		[0x1ece0594,0],
		[0x1ece0598,0],
		[0x1ece059c,24],
		[0x1ece05a0,3],
		[0x1ece05a4,0],
		[0x1ece05a8,0],
		[0x1ece05ac,0],
		[0x1ece05b0,0],
		[0x1ece05b4,0],
		[0x1ece05c8,0],
		[0x1ece05cc,0],
		[0x1ece05d0,0],
		[0x1ece05d4,0],
		[0x1ece05d8,0],
		[0x1ece05dc,0],
		[0x1ece05e0,0],
		[0x1ece05e4,0],
		[0x1ece05e8,0],
		[0x1ece05ec,0],
		[0x1ece05f8,0],
		[0x1ece05fc,0],
		[0x1ece0600,0],
		[0x1ece0604,0],
		[0x1ece0630,4129],
		[0x1ece0634,0],
		[0x1ece0638,0],
		[0x1ece063c,0],
		[0x1ece0640,0],
		[0x1ece0644,0],
		[0x1ece064c,16599],
		[0x1ece06d8,0],
		[0x1ece06dc,0],
		[0x1ece06f0,0],
		[0x1ece06f4,0],
		[0x1ece0710,0],
		[0x1ece0714,0],
		[0x1ece0718,0],
		[0x1ece071c,23],
		[0x1ece0720,2],
		[0x1ece0724,0],
		[0x1ece0728,0],
		[0x1ece072c,0],
		[0x1ece0730,0],
		[0x1ece0734,0],
		[0x1ece0748,0],
		[0x1ece074c,0],
		[0x1ece0750,0],
		[0x1ece0754,0],
		[0x1ece0758,0],
		[0x1ece075c,0],
		[0x1ece0760,0],
		[0x1ece0764,0],
		[0x1ece0768,0],
		[0x1ece076c,0],
		[0x1ece0778,0],
		[0x1ece077c,0],
		[0x1ece0780,0],
		[0x1ece0784,0],
		[0x1ece07b0,4128],
		[0x1ece07b4,0],
		[0x1ece07b8,0],
		[0x1ece07bc,0],
		[0x1ece07c0,0],
		[0x1ece07c4,0],
		[0x1ece07cc,16599],
		[0x1ece0858,0],
		[0x1ece085c,0],
		[0x1ece0890,0],
		[0x1ece0894,0],
		[0x1ece0898,0],
		[0x1ece089c,26],
		[0x1ece08a0,1],
		[0x1ece08a4,0],
		[0x1ece08a8,0],
		[0x1ece08ac,0],
		[0x1ece08b0,0],
		[0x1ece08b4,0],
		[0x1ece08c8,0],
		[0x1ece08cc,0],
		[0x1ece08d0,0],
		[0x1ece08d4,0],
		[0x1ece08d8,0],
		[0x1ece08dc,0],
		[0x1ece08e0,0],
		[0x1ece08e4,0],
		[0x1ece08e8,0],
		[0x1ece08ec,0],
		[0x1ece08f8,0],
		[0x1ece08fc,0],
		[0x1ece0900,0],
		[0x1ece0904,0],
		[0x1ece0908,0],
		[0x1ece090c,0],
		[0x1ece0930,16384],
		[0x1ece0934,0],
		[0x1ece0938,0],
		[0x1ece093c,0],
		[0x1ece0940,0],
		[0x1ece0944,0],
		[0x1ece094c,0],
		[0x1ece09d8,0],
		[0x1ece09dc,0],
		[0x1ece09e0,0],
		[0x1ece09e4,0],
		[0x1ece09e8,0],
		[0x1ece09ec,0],
		[0x1ece09f0,0],
		[0x1ece09f4,0],
		[0x1ece09f8,0],
		[0x1ece09fc,0],
		[0x1ece0a10,0],
		[0x1ece0a14,0],
		[0x1ece0a18,0],
		[0x1ece0a1c,20],
		[0x1ece0a20,0],
		[0x1ece0a24,0],
		[0x1ece0a28,0],
		[0x1ece0a2c,0],
		[0x1ece0a30,0],
		[0x1ece0a34,0],
		[0x1ece0a48,0],
		[0x1ece0a4c,0],
		[0x1ece0a50,0],
		[0x1ece0a54,0],
		[0x1ece0a58,0],
		[0x1ece0a5c,0],
		[0x1ece0a60,0],
		[0x1ece0a64,0],
		[0x1ece0a68,0],
		[0x1ece0a6c,0],
		[0x1ece0a78,0],
		[0x1ece0a7c,0],
		[0x1ece0a80,0],
		[0x1ece0a84,0],
		[0x1ece0ab0,4133],
		[0x1ece0ab4,0],
		[0x1ece0ab8,0],
		[0x1ece0abc,0],
		[0x1ece0ac0,0],
		[0x1ece0ac4,0],
		[0x1ece0acc,16599],
		[0x1ece0b58,0],
		[0x1ece0b5c,0],
		[0x1ece0b70,0],
		[0x1ece0b74,0],
		[0x1ece0b90,0],
		[0x1ece0b94,0],
		[0x1ece0b98,0],
		[0x1ece0b9c,25],
		[0x1ece0ba0,5],
		[0x1ece0ba4,0],
		[0x1ece0ba8,0],
		[0x1ece0bac,0],
		[0x1ece0bb0,0],
		[0x1ece0bb4,0],
		[0x1ece0bc8,0],
		[0x1ece0bcc,0],
		[0x1ece0bd0,0],
		[0x1ece0bd4,0],
		[0x1ece0bd8,0],
		[0x1ece0bdc,0],
		[0x1ece0be0,0],
		[0x1ece0be4,0],
		[0x1ece0be8,0],
		[0x1ece0bec,0],
		[0x1ece0bf8,0],
		[0x1ece0bfc,0],
		[0x1ece0c00,0],
		[0x1ece0c04,0],
		[0x1ece0c30,4135],
		[0x1ece0c34,0],
		[0x1ece0c38,0],
		[0x1ece0c3c,0],
		[0x1ece0c40,0],
		[0x1ece0c44,0],
		[0x1ece0c4c,16599],
		[0x1ece0cd8,0],
		[0x1ece0cdc,0],
		[0x1ece0cf0,0],
		[0x1ece0cf4,0],
		[0x1ece0d10,0],
		[0x1ece0d14,0],
		[0x1ece0d18,0],
		[0x1ece0d1c,27],
		[0x1ece0d20,8],
		[0x1ece0d24,0],
		[0x1ece0d28,0],
		[0x1ece0d2c,0],
		[0x1ece0d30,0],
		[0x1ece0d34,0],
		[0x1ece0d48,0],
		[0x1ece0d4c,0],
		[0x1ece0d50,0],
		[0x1ece0d54,0],
		[0x1ece0d58,0],
		[0x1ece0d5c,0],
		[0x1ece0d60,0],
		[0x1ece0d64,0],
		[0x1ece0d68,0],
		[0x1ece0d6c,0],
		[0x1ece0d78,0],
		[0x1ece0d7c,0],
		[0x1ece0d80,0],
		[0x1ece0d84,0],
		[0x1ece0db0,4135],
		[0x1ece0db4,0],
		[0x1ece0db8,0],
		[0x1ece0dbc,0],
		[0x1ece0dc0,0],
		[0x1ece0dc4,0],
		[0x1ece0dcc,16599],
		[0x1ece0e58,0],
		[0x1ece0e5c,0],
		[0x1ece0e70,0],
		[0x1ece0e74,0],
		[0x1ece0e90,0],
		[0x1ece0e94,0],
		[0x1ece0e98,0],
		[0x1ece0e9c,29],
		[0x1ece0ea0,6],
		[0x1ece0ea4,0],
		[0x1ece0ea8,0],
		[0x1ece0eac,0],
		[0x1ece0eb0,0],
		[0x1ece0eb4,0],
		[0x1ece0ec8,0],
		[0x1ece0ecc,0],
		[0x1ece0ed0,0],
		[0x1ece0ed4,0],
		[0x1ece0ed8,0],
		[0x1ece0edc,0],
		[0x1ece0ee0,0],
		[0x1ece0ee4,0],
		[0x1ece0ee8,0],
		[0x1ece0eec,0],
		[0x1ece0ef8,0],
		[0x1ece0efc,0],
		[0x1ece1030,0],
		[0x1ece1034,0],
		[0x1ece1038,800],
		[0x1ece103c,600],
		[0x1ece1040,800],
		[0x1ece1044,600],
		[0x1ece1048,0],
		[0x1ece104c,0],
		[0x1ece1050,24],
		[0x1ece1054,0],
		[0x1ece1058,16],
		[0x1ece105c,8],
		[0x1ece1060,0],
		[0x1ece1064,8],
		[0x1ece1068,8],
		[0x1ece106c,0],
		[0x1ece1070,0],
		[0x1ece1074,8],
		[0x1ece1078,0],
		[0x1ece107c,0],
		[0x1ece1080,0],
		[0x1ece1084,0],
		[0x1ece1088,0],
		[0x1ece108c,0],
		[0x1ece1098,0],
		[0x1ece109c,20833],
		[0x1ece10a0,96],
		[0x1ece10a4,32],
		[0x1ece10a8,16],
		[0x1ece10ac,4],
		[0x1ece10b0,96],
		[0x1ece10b4,4],
		[0x1ece10b8,0],
		[0x1ece10bc,0],
		[0x1ece10c0,0],
		[0x1ece10c4,0],
		[0x1ece10c8,0],
		[0x1ece10cc,0],
		[0x1ece10d0,0],
		[0x1ece10d4,0],
		[0x1ece10d8,512],
		[0x1ece10e0,0],
		[0x1ece10e4,0],
		[0x1ece10ec,0],
		[0x1ece10fc,0],
		[0x1ece1104,0],
		[0x1ece1110,0],
		[0x1ece1114,0],
		[0x1ece1118,0],
		[0x1ece111c,0],
		[0x1ece1120,8],
		[0x1ece1124,16],
		[0x1ece1128,7],
		[0x1ece112c,0],
		[0x1ece1130,0],
		[0x1ece1134,0],
		[0x1ece1140,0],
		[0x1ece1144,0],
		[0x1ece1148,0],
		[0x1ece114c,0],
		[0x1ece1150,0],
		[0x1ece1154,0],
		[0x1ece1158,0],
		[0x1ece115c,0],
		[0x1ece1160,0],
		[0x1ece1164,0],
		[0x1ece1178,6],
		[0x1ece117c,50],
		[0x1ece1180,1],
		[0x1ece1184,0],
		[0x1ece1188,0],
		[0x1ece118c,1],
		[0x1ece1190,0],
		[0x1ece1194,1],
		[0x1ece1198,0],
		[0x1ece11a0,0],
		[0x1ece11a4,0],
		[0x1ece11a8,0],
		[0x1ece11ac,0],
		[0x1ece11b0,0],
		[0x1ece11b4,0],
		[0x1ece11c0,96],
		[0x1ece11c4,0],
		[0x1ece11c8,0],
		[0x1ece11cc,0],
		[0x1ece11d0,0],
		[0x1ece11d4,0],
		[0x1ece11d8,0],
		[0x1ece11dc,0],
		[0x1ece11e0,0],
		[0x1ece11e4,0],
		[0x1ece11e8,0],
		[0x1ece11ec,0],
		[0x1ece11f0,0],
		[0x1ece11f4,0],
		[0x1ece11f8,0],
		[0x1ece11fc,0],
		[0x1ece1200,0],
		[0x1ece1204,0],
		[0x1ece121c,0],
		[0x1ece1224,0],
		[0x1ece1228,0],
		[0x1ece122c,0],
		[0x1ece1230,1],
		[0x1ece1234,0],
		[0x1ece1248,0],
		[0x1ece124c,0],
		[0x1ece1250,0],
		[0x1ece1254,0],
		[0x1ece1258,0],
		[0x1ece125c,0],
		[0x1ece1260,0],
		[0x1ece1264,0],
		[0x1ece1268,0],
		[0x1ece126c,0],
		[0x1ece1278,0],
		[0x1ece127c,0],
		[0x1ece1284,0],
		[0x1ece1288,0],
		[0x1ece1290,0],
		[0x1ece1294,0],
		[0x1ece1298,13107],
		[0x1ece129c,5632],
		[0x1ece12a0,0],
		[0x1ece12a4,0],
		[0x1ece12a8,0],
		[0x1ece12ac,0],
		[0x1ece12b0,0],
		[0x1ece12b4,0],
		[0x1ece12b8,14],
		[0x1ece12bc,0],
		[0x1ece12c0,0],
		[0x1ece12c4,0],
		[0x1ece12d8,0],
		[0x1ece12dc,0],
		[0x1ece12e0,0],
		[0x1ece12e4,0],
		[0x1ece12e8,0],
		[0x1ece12ec,0],
		[0x1ece12f0,0],
		[0x1ece12f4,0],
		[0x1ece12f8,0],
		[0x1ece12fc,0],
		[0, 0]
]).
string_val([
		[0x1ece0930,16384],
		[0x1ece11c0,96],
		[0, 0]
]).
/* This file contains recursive predicates */
:- use_module(library(clpfd)).
:- use_module(reif).
:- style_check(-singleton).

isTrue([X, Y]):-
    X == 49.

isTrue([X|Tail]):-
    isTrue(Tail).

log(File_name, Name, Addr, Base):-
    Offset #= Addr - Base,
    open(File_name, append, Stream),
    write(Stream, Name),
    write(Stream, ':'),
    write(Stream, Offset),
    nl(Stream),
    close(Stream).

possible_task_struct(Base_addr) :-
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM2_addr, Pid_addr, Tgid_addr, Real_parent_addr, Parent_addr , Child_addr, 
           Group_leader_addr, Thread_group_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    %MM2_addr #> Base_addr + 1000,
    Tasks_addr #> MM2_addr - 100,
    %FS_struct_addr #< Base_addr + 4000,
    Tgid_addr #= Pid_addr + 4,
    Real_parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr - 8,
    Child_addr #= Parent_addr + 8,
    %FIXME This may be too strong
    Group_leader_addr #=< Child_addr +32,
    %Comm_addr #= Base_addr + 1656,
    %Tasks_addr #= Base_addr + 1072,
    %FS_struct_addr #= Base_addr + 2640,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    % make query after labeling
    MM2_val #> 0,
    integer(MM2_val),
    
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val,  Comm_addr, Comm_val ]),

    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_parent_addr, Real_parent_val, Group_leader_addr, Group_leader_val]),
    Real_parent_val #> 0,
    Group_leader_val #> 0,
    query_ts(Real_parent_val, Comm_offset, Tasks_offset),
    query_ts(Group_leader_val, Comm_offset, Tasks_offset),

    labeling([enum], [Cred_addr, Cred_val]),
    Cred_val #> 0,
    query_cred(Cred_val),

    labeling([enum], [FS_struct_addr, FS_struct_val]),
    FS_struct_val #> 0,
    %query_fs_struct(FS_struct_val),



    get_time(End),
    Time_past is End - Current,
    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    log("profile.txt", "tasks", Tasks_addr, Base_addr),
    log("profile.txt", "mm_struct", MM2_addr, Base_addr),
    log("profile.txt", "comm", Comm_addr, Base_addr),
    log("profile.txt", "parent", Parent_addr, Base_addr),
    log("profile.txt", "group_leader", Group_leader_addr, Base_addr),
    log("profile.txt", "cred", Cred_addr, Base_addr),

    
    print_nl('tasks offset', Tasks_offset),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).

possible_string_pointer(Base_addr) :-
    /* Verify if this pointer points to a stirng */
    string_val(Str),
    Str_profile = [
        [Name_addr, Name_val]
    ],
    tuples_in(Str_profile, Str),
    Name_addr #= Base_addr.

query_string_pointer(Val) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "string_pointer"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_mount_struct(Base_addr, Offset) :-
    pointer(Ptr),
    Ptr_profile = ([
        [Mnt_devname_addr, Mnt_devname_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Mnt_devname_addr #= Base_addr + Offset,
    labeling([enum], [Mnt_devname_addr, Mnt_devname_val]),
    query_string_pointer(Mnt_devname_val).



possible_kernel_param(Base_addr) :-
    string_val(Str),
    Str_profile = [
        [Name_addr, Name_val]
    ],
    tuples_in(Str_profile, Str),
    Name_addr #= Base_addr.

possible_in_device(Base_addr) :-
    /* in_ifaddr remains the same across kernel versions 
       but we need this query to find ip_ptr in net_device struct
    */
    /*
        struct net_device *dev;
        int               refcnt;
        int               dead;
        struct in_ifaddr  *ifa_list;
    */
    pointer(Ptr),
    int(Int),
    Ptr_profile = ([
        [Dev_addr, Dev_val],
        [Ifa_list_addr, Ifa_list_val]
    ]),
    Int_profile = ([
        [Refcnt_addr, Refcnt_val],
        [Dead_addr, Dead_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Dead_addr #= Refcnt_addr + 4,
    chain([Dev_addr, Refcnt_addr, Dead_addr, Ifa_list_addr], #<),
    Dev_addr #= Base_addr,
    Ifa_list_addr #= Base_addr + 16,
    labeling([enum], [Ifa_list_addr, Ifa_list_val]),

    process_create(path('python'),
                    ['subquery.py', Ifa_list_val, "in_ifaddr"],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_in_ifaddr(Base_addr) :-
    /* in_ifaddr remains the same across kernel versions */
    pointer(Ptr),
    Ptr_profile = ([
        [Hash_addr, Hash_val],
        [Ifa_next_addr, Ifa_next_val],
        [Ifa_dev_addr, Ifa_dev_val],
        [Rcu_head_addr, Rcu_head_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([Hash_addr, Ifa_next_addr, Ifa_dev_addr, Rcu_head_addr], #<),
    Hash_addr #= Base_addr,
    Ifa_next_addr #= Hash_addr + 16,
    Ifa_dev_addr #= Ifa_next_addr + 8,
    Rcu_head_addr #= Ifa_dev_addr + 8,
    labeling([enum], [Hash_addr, Ifa_next_addr, Ifa_dev_addr, Rcu_head_addr]).



possible_mm_struct(Current_addr) :- 
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    % TODO: ADD vm_area_struct *mmap
    Ptr_profile = [
        [Mmap_addr, Mmap_val],
        [Pgd_addr, Pgd_val]  
    ],
    Ulong_profile = [
        [Mmap_base_addr, Mmap_base_val],
        [Mmap_legacy_base_addr, Mmap_legacy_base_val],
        [Task_size_addr, Task_size_val],
        [High_vm_end_addr, High_vm_end_val],
        [Start_brk_addr, Start_brk_val],
        [Brk_addr, Brk_val],
        [Start_stack_addr, Start_stack_val],
        [ARG_start_addr, ARG_start_val]
    ],
    Mmap_addr #= Current_addr,


    Mmap_base_addr #> Mmap_addr,
    %FIXME mmap_base need more value constraint, because we removed mmap_legacy_base and highest_vm_end.
    Mmap_base_val #> 0x7f0000000000,
    %FIXME in old linux version, e.g., there is no mmap_legacy_base and highest_vm_enb
    %chain([Mmap_base_addr, Mmap_legacy_base_addr, Task_size_addr, High_vm_end_addr, Pgd_addr], #<),
    chain([Mmap_base_addr, Task_size_addr, Pgd_addr], #<),

    %FIXME: This rule may be too strong
    %High_vm_end_addr #= Mmap_base_addr + 24, 
    Pgd_addr #> Task_size_addr,
    Pgd_addr #=< Task_size_addr + 40,
    %FIXME: This rule may not be true for other mm_struct.
    Task_size_val #>= 0x7ffffffff000,

    %Mmap_base_addr #= Current_addr + 40,
    %Mmap_legacy_base_addr #= Current_addr + 40,
    %Task_size_addr #= Current_addr + 48,
    %High_vm_end_addr #= Current_addr + 72,

    Start_brk_addr #> Pgd_addr,
    Start_stack_val #> 0x7ff000000000,
    % TODO: Convert this to index comparison. 
    ARG_start_addr #< Current_addr + 500,
    chain([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr], #<),
    ARG_start_addr #= Start_brk_addr + 24,
    Brk_val #< 0x7ff000000000,
    ARG_start_val #> 0x7ff000000000,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),


    labeling([enum], [Mmap_addr, Mmap_val, Mmap_base_addr, Pgd_addr, Pgd_val]),
    Mmap_val #> 0,
    Pgd_val #> 0,
    
    process_create(path('python'),
                    ['subquery.py', Mmap_val, "vm_area_struct", 2],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    label([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr]),
    statistics(real_time, [End|_]),

    log("./profile/mm_struct", "mmap", Mmap_addr, Current_addr),
    log("./profile/mm_struct", "mmap_base", Mmap_base_addr, Current_addr),
    log("./profile/mm_struct", "pgd", Pgd_addr, Current_addr),
    log("./profile/mm_struct", "start_brk", Start_brk_addr, Current_addr),
    log("./profile/mm_struct", "brk", Brk_addr, Current_addr),
    log("./profile/mm_struct", "start_stack", Start_stack_addr, Current_addr),
    log("./profile/mm_struct", "arg_start", ARG_start_addr, Current_addr),
    log("./profile/mm_struct", "mm_struct", End, Start).


possible_vm_area_struct(Base_addr, Level) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [VM_next_addr, VM_next_val],
        [VM_file_addr, VM_file_val]
    ],
    Ulong_profile = [
        [VM_start_addr, VM_start_val],
        [VM_end_addr, VM_end_val],
        [VM_flag_addr, VM_flag_val]
        /*VM_pgoff is 0, and we do not consider 0 as ulong*/
        %[VM_pgoff_addr, VM_pgoff_val]
    ],
    VM_start_addr #>= Base_addr,
    chain([VM_start_addr, VM_end_addr, VM_next_addr, VM_flag_addr, VM_file_addr], #<),
    VM_end_addr #= VM_start_addr + 8,
    VM_next_addr #= VM_end_addr + 8,
    VM_next_addr #< Base_addr + 32,
    VM_file_addr #< Base_addr + 180,
    VM_pgoff_addr #= VM_file_addr - 8,
    VM_flag_val #< 0x88888888,
    VM_file_addr #= Base_addr + 160,

    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    %FIXME: VM_flag may need value constraints.

    label([VM_next_addr, VM_next_val]),
    /* vm_file maybe zero! */
    labeling([enum], [VM_start_addr, VM_end_addr, VM_flag_addr, VM_pgoff_addr, VM_file_addr, VM_file_val]),
    
    VM_file_val #> 0,
    /*
    process_create(path('python'),
                ['subquery.py', VM_file_val, "vm_file"],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    statistics(real_time, [End|_]),
    */

    log("./profile/vm_area_struct", "vm_start", VM_start_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_end", VM_end_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_next", VM_next_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_flag", VM_flag_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_pgoff", VM_pgoff_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_file", VM_file_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_area_struct", End, Start).

check_vm_area_struct(Base_addr, Level) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "vm_area_struct", Level],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vm_file(Base_addr) :-
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [Vfs_mount_addr, Vfs_mount_val],
        [Dentry_addr, Dentry_val],
        [F_op_addr, F_op_val]
    ],
    tuples_in(Ptr_profile, Ptr),
    Vfs_mount_addr #> Base_addr,
    Dentry_addr #= Vfs_mount_addr + 8,
    Dentry_addr #< Base_addr + 40,
    Vfs_mount_val #> 0,
    Dentry_val #> 0,
    F_op_addr #= Base_addr + 40, 
    F_op_val #> 0,
    chain([Vfs_mount_addr, Dentry_addr, F_op_addr], #<),
    labeling([enum], [Vfs_mount_val, Dentry_val, F_op_addr, F_op_val]),


    process_create(path('python'),
                    ['subquery.py', Vfs_mount_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    /*
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/
    

    %query_file_operation(F_op_addr),

    log("./profile/file", "vfs_mount", Vfs_mount_addr, Base_addr),
    log("./profile/file", "dentry", Dentry_addr, Base_addr),
    log("./profile/file", "f_op", F_op_addr, Base_addr).



query_file_operation(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result).

possible_name_pointer(Val, Name_offset) :-
    /* The value at val+name_offset is a string pointer */
    current_predicate(pointer/1),
    pointer(Ptr),
    Ptr_profile = ([
        [Name_addr, Name_val]
    ]),
    Name_addr #= Val + Name_offset,
    tuples_in(Ptr_profile, Ptr),
    labeling([enum], [Name_addr, Name_val]),
    query_string_pointer(Name_val).

possible_vfs_mount(Base_addr) :-
    pointer(Ptr),
    int(Int),
    Ptr_profile = [
        [Dentry_addr, Dentry_val],
        [Mnt_sb_addr, Mnt_sb_val]
    ],
    Int_profile = [
        [Mnt_flags_addr, Mnt_flags_val]
    ],
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Dentry_addr #= Base_addr,
    Dentry_val #> 0,
    Mnt_flags_addr #= Dentry_addr + 16,
    Mnt_flags_val #>= 0,
    Mnt_sb_val #> 0,
    chain([Dentry_addr, Mnt_sb_addr, Mnt_flags_addr], #<),
    label([Dentry_addr, Dentry_val, Mnt_flags_addr, Mnt_flags_val]).
 
possible_dentry(Base_addr) :-
    /*
        struct dentry *d_parent;
        struct qstr d_name -> char *name; it's a name pointer
        struct inode *d_inode;
        unsigned char d_iname[LEN];
        const struct dentry_operations *d_op;
        struct list_head d_child;
        struct list_head d_subdirs;
        union {
	        struct hlist_node d_alias;
	        struct rcu_head d_rcu;
        } d_u;
    */
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    string_val(Str),
    Ptr_profile = [
        [Dparent_addr, Dparent_val],
        [Dname_addr, Dname_val],
        [D_inode_addr, D_inode_val],
        [D_op_addr, D_op_val],
        [Dchild_addr, Dchild_val],
        [D_subdirs_addr, D_subdirs_val]
    ],
    Str_profile = [
        [D_iname_addr, D_iname_val]
    ],
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    Dparent_addr #> Base_addr,
    chain([Dparent_addr, Dname_addr, D_inode_addr, D_iname_addr, 
            D_op_addr, Dchild_addr, D_subdirs_addr], #<),
    D_subdirs_addr #= Dchild_addr + 16,
    D_subdirs_addr #< Base_addr + 200,
    Dparent_val #> 0,
    labeling([enum], [Dname_addr, Dname_val]),
    query_string_pointer(Dname_val),
    labeling([enum], [D_iname_addr, D_iname_val]),
    D_iname_offset #= D_iname_addr - Base_addr,
    Dname_offset #= Dname_addr - Base_addr,
    labeling([enum], [Dparent_addr, Dparent_val]),
    Parent_dname #= Dparent_val + Dname_offset,
    process_create(path('python'),
                    ['subquery.py', Parent_dname, "name_pointer", Dname_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    %labeling([enum], [D_inode_addr, D_inode_val]),
    %query_inode(D_inode_val),

    labeling([enum], [Dchild_addr, Dchild_val]),
    Dchild_offset #= Dchild_addr - Base_addr,
    Dchild_init #= Dchild_val - Dchild_offset,
    query_name_pointer(Dchild_init, Dname_offset),

    /* This can be hardcoded as d_child_addr + 16 */
    labeling([enum], [D_subdirs_addr, D_subdirs_val]),
    Dsubdirs_offset #= D_subdirs_addr - Base_addr,
    D_subdirs_init #= D_subdirs_val - Dsubdirs_offset,
    query_name_pointer(D_subdirs_init, Dname_offset),

    statistics(real_time, [End|_]),

    log("./profile/dentry", "parent", Dparent_addr, Base_addr),
    log("./profile/dentry", "inode", D_inode_val, Base_addr),
    log("./profile/dentry", "d_iname", D_iname_addr, Base_addr),
    log("./profile/dentry", "dchild", Dchild_addr, Base_addr),
    log("./profile/dentry", "d_subdirs", D_subdirs_addr, Base_addr),
    log("./profile/dentry", "dentry", End, Start).

query_inode(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_inode(Base_addr) :-
    /*
        struct inode_operations *i_op;
        struct super_block      *i_sb;
        struct address_space    *i_mapping;
    */
    statistics(real_time, [Start|_]),

    pointer(Ptr),
    long(Ulg),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [I_op_addr, I_op_val],
        [I_sb_addr, I_sb_val],
        [I_mapping_addr, I_mapping_val],
        [I_fop_addr, I_fop_val]
    ]),
    Ulong_profile = ([
        /* i_mode is actually not long type. */
        [I_mode_addr, I_mode_val],
        [I_ino_addr, I_ino_val],
        [I_size_addr, I_size_val],
        [I_atime_addr, I_atime_val],
        [_I_atime_addr, _I_atime_val],
        [I_mtime_addr, I_mtime_val],
        [I_ctime_addr, I_ctime_val],
        [_I_ctime_addr, _I_ctime_val]
    ]),
    Int_profile = ([
        [I_uid_addr, I_uid_val],
        [I_gid_addr, I_gid_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    tuples_in(Int_profile, Int),

    chain([I_mode_addr, I_uid_addr, I_gid_addr, I_op_addr, I_sb_addr, I_mapping_addr, I_ino_addr,
           I_size_addr, I_atime_addr, _I_atime_addr, I_mtime_addr, I_ctime_addr, _I_ctime_addr, I_fop_addr], #<),

    I_mode_addr #= Base_addr,
    I_mode_val #> 0,
    I_gid_addr #= I_mode_addr + 8,
    %I_op_addr #= Base_addr + 32,
    I_op_addr #=< Base_addr + 32,
    I_op_val #> 0,
    labeling([enum], [I_op_addr, I_op_val]),
    query_inode_operations(I_op_val),

    I_sb_addr #= I_op_addr + 8,
    I_mapping_addr #= I_sb_addr + 8,
    I_atime_addr #= I_size_addr + 8,
    I_mtime_addr #= I_atime_addr + 16,
    I_ctime_addr #= I_mtime_addr + 16,
    _I_ctime_addr #= I_ctime_addr + 8,
    I_size_val #> 0,
    I_atime_val #> 4096,
    I_mtime_val #> 4096,
    I_ctime_val #> 4096,
    I_fop_addr #< Base_addr + 400,
    labeling([enum], [I_sb_addr, I_mapping_addr, I_atime_addr, I_mtime_addr, I_ctime_addr]),


    labeling([enum], [I_fop_addr, I_fop_val]),
    I_fop_val #> 0,
    query_inode_operations(I_fop_val),
    statistics(real_time, [End|_]),


    log("./profile/inode", "I_mode_addr", I_mode_addr, Base_addr),
    log("./profile/inode", "I_uid_addr", I_uid_addr, Base_addr),
    log("./profile/inode", "I_gid_addr", I_gid_addr, Base_addr),
    log("./profile/inode", "I_op_addr", I_op_addr, Base_addr),
    log("./profile/inode", "I_sb_addr", I_sb_addr, Base_addr),
    log("./profile/inode", "I_mapping_addr", I_mapping_addr, Base_addr),
    log("./profile/inode", "I_size_addr", I_size_addr, Base_addr),
    log("./profile/inode", "I_atime_addr", I_atime_addr, Base_addr),
    log("./profile/inode", "I_mtime_addr", I_mtime_addr, Base_addr),
    log("./profile/inode", "I_ctime_addr", I_ctime_addr, Base_addr),
    log("./profile/inode", "I_fop_addr", I_fop_addr, Base_addr),
    log("./profile/inode", "inode", End, Start).


query_inode_operations(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_name_pointer(Base_addr, Offset) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "name_pointer", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_inode_operations(Base_addr) :-
    /* a bunch of function pointers. */
    pointer(Ptr),
    Ptr_profile = ([
        [_L1_addr, _L1_val],
        [_L2_addr, _L2_val],
        [_L3_addr, _L3_val],
        [_L4_addr, _L4_val],
        [_L5_addr, _L5_val],
        [_L6_addr, _L6_val],
        [_L7_addr, _L7_val],
        [_L8_addr, _L8_val],
        [_L9_addr, _L9_val],
        [_L10_addr, _L10_val],
        [_L11_addr, _L11_val],
        [_L12_addr, _L12_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([_L1_addr, _L2_addr, _L3_addr, _L4_addr, _L5_addr, _L6_addr, _L7_addr,
           _L8_addr, _L9_addr, _L10_addr, _L11_addr, _L12_addr], #<),
    _L1_addr #= Base_addr,
    _L12_addr #= Base_addr + 88.




possible_nothing() :-

    %log("profile.txt", "dentry addr", Base_addr, 0),
    Dparent_addr #> Base_addr,
    Dname_addr #> 0,
    Dname_addr #< Base_addr + 200,
    %Dname_addr #= Base_addr + 160,
    %FIXME This child rule is not applicable for old kernel version. 
    %chain([Dparent_addr, Dname_addr, Dchild_addr], #<),
    %Dchild_addr #< Base_addr + 200,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    labeling([enum], [Dparent_addr, Dparent_val, Dname_addr, Dchild_addr, Dchild_val]),
    Dname_offset #= Dname_addr - Base_addr,
    integer(Dname_offset),
    Dparent_val #> 0,
    
    %FIXME d_parent may not be initialized
    /*process_create(path('python'),
                ['subquery.py', Dparent_val, "d_entry", Dname_offset],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/

    %FIXME: may need to find another way for all list_head. 
    /*Dchild_offset #= Dchild_addr - Base_addr,
    integer(Dchild_offset),
    Dchild_base #= Dchild_val - Dchild_offset,
    integer(Dchild_base),
    Dchild_base #> 0,
    process_create(path('python'),
                ['subquery.py', Dchild_base, "d_entry", Dname_offset],
                [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    statistics(real_time, [End|_]).
/*
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    log("profile.txt", "d_parent", Dparent_addr, Base_addr),
    log("profile.txt", "d_child", Dchild_addr, Base_addr),
    log("profile.txt", "dentry time", End, Start).
*/
possible_d_entry(Base_addr, Dname_offset) :-
    current_predicate(string_val/1),
    string_val(Str),
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    Dname_addr #= Base_addr + Dname_offset,
    tuples_in(Str_profile, Str),
    label([Dname_addr]).

possible_list_head(Tasks_val, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_val, Tasks_addr]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],
    Comm_addr #= Tasks_val - Tasks_offset + Comm_offset,
    Tasks_addr #\= Tasks_val,
    tuples_in(Str_profile, Str),
    tuples_in(Ptr_profile, Ptr),
    label([Comm_addr]).

possible_ts(Base_addr, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_addr, Tasks_val]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],

    Comm_addr #= Base_addr + Comm_offset,
    Tasks_addr #= Base_addr + Tasks_offset,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),

    label([Tasks_val]),
    
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "list_head", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_cred(Base_addr) :-
    statistics(real_time, [Start|_]),

    int(Int),
    long(Ulg),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3],
        [Addr4, Val4],
        [Addr5, Val5],
        [Addr6, Val6],
        [Addr7, Val7],
        [Addr8, Val8],
        [Addr9, Val9]
    ],
    %FIXME For now, this rule is hard-coded because we do not consider 0 as a unsign long number. 
    %So that for cred whos val10 is 0, this rule does not apply.
    /*Ulong_profile = [
        [Addr10, Val10],
        [Addr11, Val11]
    ],*/
    Addr1 #> Base_addr,
    %chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9, Addr10, Addr11], #<),
    chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9], #<),
    Addr1 #= Base_addr + 4,
    Addr9 #= Addr1 + 32,
    %Addr11 #< Base_addr + 120,
    tuples_in(Int_profile, Int),
    %tuples_in(Ulong_profile, Ulg),
    statistics(real_time, [End|_]),
    labeling([enum], [Addr1, Addr2, Addr5, Addr6]),
    log("./profile/cred", "cred", End, Start),
    log('./profile/cred', "uid", Addr1, Base_addr),
    log('./profile/cred', "gid", Addr2, Base_addr),
    log('./profile/cred', "euid", Addr5, Base_addr),
    log('./profile/cred', "egid", Addr6, Base_addr).

possible_fs_struct(Base_addr) :-
    statistics(real_time, [Start|_]),
    int(Int),
    pointer(Ptr),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3]
    ],
    Ptr_profile = [
        [Root_addr, Root_val],
        [PWD_addr, PWD_val]
    ],
    Addr1 #>= Base_addr,
    chain([Addr1, Addr2, Addr3, Root_addr, PWD_addr], #<),
    PWD_addr #= Root_addr + 16,
    PWD_addr #< Base_addr + 50,
    tuples_in(Int_profile, Int),
    tuples_in(Ptr_profile, Ptr),
    Root_val #> 0,
    PWD_val #> 0,
    label([Root_addr, Root_val]),
    /* some times the dentry fields are zero, use vfs_mount instead */
    process_create(path('python'),
                    ['subquery.py', Root_val, "vfs_mount"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    label([PWD_addr, PWD_val]),
    process_create(path('python'),
                    ['subquery.py', PWD_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    statistics(real_time, [End|_]),
    log("profile.txt", "fs time", End, Start),
    log('profile.txt', "Root", Root_addr, Base_addr),
    log('profile.txt', "pwd", PWD_addr, Base_addr),
    log('profile.txt', "fs_struct", End, Start).

possible_mount(Base_addr) :-
    /* struct hlist_head mnt_hash;
       struct mount *mnt_parent; 
       struct vfsmount mnt;
       struct list_head mnt_mounts;
       struct list_head mnt_child;
       struct list_head mnt_instance;
       const char *mnt_devname;
       struct list_head mnt_list;
    */
    statistics(real_time, [Start|_]),
    %get_time(Current),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Mnt_hash_addr, Mnt_hash_val],
        [Mnt_parent_addr, Mnt_parent_val],
        [Vfsmount_addr, Vfsmount_val],
        [Mnt_child_addr, Mnt_child_val],
        [Mnt_devname_addr, Mnt_devname_val],
        [Mnt_list_addr, Mnt_list_val]
    ]),
    Int_profile = ([
        [Mnt_flags_addr, Mnt_flags_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    /* Order Invariants */
    chain([Mnt_hash_addr, Mnt_parent_addr, Vfsmount_addr, Mnt_flags_addr,
            Mnt_child_addr, Mnt_devname_addr, Mnt_list_addr], #<),
    Mnt_hash_addr #= Base_addr,
    /* mnt_hash_addr is a list_head */
    Mnt_parent_addr #> Base_addr + 8,
    Mnt_list_addr - Base_addr #< 200,
    labeling([enum], [Mnt_devname_addr, Mnt_devname_val]),
    query_string_pointer(Mnt_devname_val),
    Mnt_devname_offset #= Mnt_devname_addr - Base_addr,
    /* the offset from mnt_mounts to mnt_list remains the same, so it's safe to use fixed offsets. */
    Mnt_child_addr #= Mnt_devname_addr - 32,
    Mnt_list_addr #= Mnt_devname_addr + 8,
    Mnt_flags_addr #= Vfsmount_addr + 16,
    labeling([enum], [Mnt_child_addr, Mnt_list_addr, Vfsmount_addr, Vfsmount_val]),
    /* Seems unnecessary 
    Mnt_list_offset #= Mnt_list_addr - Base_addr,
    Mnt_list #= Mnt_list_val - Mnt_list_offset,
    Mnt_list #> 0,
    query_mount_struct(Mnt_list, Mnt_devname_offset),
    */
    Vfsmount_val #>= 0,
    /* Here we can infer layout of dentry structure 
       Maybe need to infer using another dentry, somehow it may not be initialized. 
    */
    Vfsmount_addr #> 0,
    %query_dentry(Vfsmount_addr),

    labeling([enum], [Mnt_parent_addr, Mnt_parent_val]),
    /* To verify another mount struct, only one-level query, so it does not direct call query_mount recursively */
    
    query_mount_struct(Mnt_parent_val, Mnt_devname_offset),
    

    %get_time(End),
    %Time_past is End - Current,
    statistics(real_time, [End|_]),
    log("./profile/mount", "mnt_hash", Mnt_hash_addr, Base_addr),
    log("./profile/mount", "mnt_parent", Mnt_parent_addr, Base_addr),
    log("./profile/mount", "mnt_child", Mnt_child_addr, Base_addr),
    log("./profile/mount", "mnt_devname", Mnt_devname_addr, Base_addr),
    log("./profile/mount", "mnt_list", Mnt_list_addr, Base_addr),
    log("./profile/mount", "mount", End, Start).


possible_neigh_hash_table(Base_addr) :-
    /* neighbour **hash_buckets */
    pointer(Ptr),
    Ptr_profile = ([
        [Hash_buckest_addr, Hash_buckets_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Hash_buckest_addr #= Base_addr,
    labeling([enum], [Hash_buckest_addr, Hash_buckets_val]),
    process_create(path('python'),
                    ['subquery.py', Hash_buckets_val, "hash_buckets"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_hash_buckets(Base_addr) :-
    /* hash_buckets is an array of neighbour pointer 
       note that not all element are non-zero
    */
    pointer(Ptr),
    Ptr_profile = ([
        [Neighbour_addr, Neighbour_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Neighbour_addr #< Base_addr + 32,
    Neighbour_val #> 0,
    labeling([enum], [Neighbour_addr, Neighbour_val]),
    process_create(path('python'),
                    ['subquery.py', Neighbour_val, "neighbour"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_neighbour(Base_addr) :-
    /* net_device *dev at offset 464 */
    pointer(Ptr),
    Ptr_profile = ([
        [Dev_addr, Dev_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Dev_addr #>= Base_addr + 360,
    Dev_addr #=< Base_addr + 376,
    labeling([enum], [Dev_addr, Dev_val]),
    process_create(path('python'),
                    ['subquery.py', Dev_val, "net_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).


possible_net_device(Base_addr) :- 
    /*
        char             name[NAMSIZ];
        struct list_head dev_list;
        unsigned char    addr_len;
        unsigned int     promiscuity;
        struct in_device *ip_ptr;
    */
    statistics(real_time, [Start|_]),
    %get_time(Current),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Dev_list_addr, Dev_list_val],
        [IP_ptr_addr, IP_ptr_val]
    ]),
    Str_profile = ([
        [Name_addr, Name_val]
    ]),
    Int_profile = ([
        [Promisc_addr, Promisc_val],
        [Addr_len_addr, Addr_len_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),
    /* Hard to determine offsets for addr_len and promisc */
    chain([Name_addr, Dev_list_addr, Addr_len_addr, Promisc_addr, IP_ptr_addr], #<),
    Name_addr #>= Base_addr,
    Name_offset #= Name_addr - Base_addr,
    IP_ptr_addr #< Base_addr + 1000,
    /* dev_list offset can be hardcoded since it remains the same */
    Dev_list_addr #= Base_addr + 80,
    labeling([enum], [Name_addr, Dev_list_addr, Dev_list_val]),
    /* do not have a good constrain to narrow down ip_ptr, use its rough offset
       to reduce the search space. 
     */
    IP_ptr_addr #> Base_addr + 700,
    IP_ptr_val #> 0,
    labeling([enum], [IP_ptr_addr, IP_ptr_val]),
    query_in_device(IP_ptr_val),

    %get_time(End),
    %Time_past is End - Current,
    statistics(real_time, [End|_]),

    log("./profile/net_device", "name", Name_addr, Base_addr),
    log("./profile/net_device", "ip_ptr", IP_ptr_addr, Base_addr),
    log("./profile/net_device", "dev_list", Dev_list_addr, Base_addr),
    log("./profile/net_device", "net_device", End, Start).

query_in_device(IP_ptr_val) :-
    process_create(path('python'),
                    ['subquery.py', IP_ptr_val, "in_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).


query_mount_struct(Val, Offset) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "mount_struct", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).
