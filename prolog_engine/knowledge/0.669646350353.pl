:- use_module(library(clpfd)).
:- style_check(-singleton).
pointer([
		[0x38af800,0],
		[0x38af808,274917734399],
		[0x38af810,59490416],
		[0x38af818,59528848],
		[0x38af820,42146020],
		[0x38af828,0],
		[0x38af830,0],
		[0x38af838,0],
		[0x38af840,0],
		[0x38af848,0],
		[0x38af858,0],
		[0x38af860,0],
		[0x38af868,0],
		[0x38af870,0],
		[0x38af878,0],
		[0x38af880,0],
		[0x38af888,0],
		[0x38af890,0],
		[0x38af898,0],
		[0x38af8a0,0],
		[0x38af8a8,0],
		[0x38af8b0,0],
		[0x38af8b8,0],
		[0x38af8c0,0],
		[0x38af8c8,0],
		[0x38af8d0,0],
		[0x38af8d8,0],
		[0x38af8e0,0],
		[0x38af8e8,0],
		[0x38af8f0,0],
		[0x38af8f8,0],
		[0x38af900,0],
		[0x38af908,0],
		[0x38af910,0],
		[0x38af918,0],
		[0x38af920,0],
		[0x38af928,0],
		[0x38af930,0],
		[0x38af938,0],
		[0x38af940,0],
		[0x38af948,0],
		[0x38af950,0],
		[0x38af958,0],
		[0x38af960,0],
		[0x38af968,0],
		[0x38af970,0],
		[0x38af978,0],
		[0x38af980,0],
		[0x38af988,0],
		[0x38af990,0],
		[0x38af998,0],
		[0x38af9a0,0],
		[0x38af9a8,0],
		[0x38af9b0,0],
		[0x38af9b8,0],
		[0x38af9c0,0],
		[0x38af9c8,0],
		[0x38af9d0,0],
		[0x38af9d8,0],
		[0x38af9e0,0],
		[0x38af9e8,0],
		[0x38af9f0,0],
		[0x38af9f8,0],
		[0x38afa00,0],
		[0x38afa08,0],
		[0x38afa10,0],
		[0x38afa18,0],
		[0x38afa20,0],
		[0x38afa28,0],
		[0x38afa30,0],
		[0x38afa38,0],
		[0x38afa40,0],
		[0x38afa48,0],
		[0x38afa50,0],
		[0x38afa58,0],
		[0x38afa60,0],
		[0x38afa68,0],
		[0x38afa70,0],
		[0x38afa78,0],
		[0x38afa80,0],
		[0x38afa88,0],
		[0x38afa90,0],
		[0x38afa98,0],
		[0x38afaa0,0],
		[0x38afaa8,0],
		[0x38afab0,0],
		[0x38afab8,0],
		[0x38afac0,0],
		[0x38afac8,0],
		[0x38afad0,0],
		[0x38afad8,0],
		[0x38afae0,0],
		[0x38afae8,0],
		[0x38afaf0,0],
		[0x38afaf8,0],
		[0x38afb00,0],
		[0x38afb08,0],
		[0x38afb10,0],
		[0x38afb18,0],
		[0x38afb20,0],
		[0x38afb28,0],
		[0x38afb30,0],
		[0x38afb38,0],
		[0x38afb40,0],
		[0x38afb48,0],
		[0x38afb50,0],
		[0x38afb58,0],
		[0x38afb60,0],
		[0x38afb68,0],
		[0x38afb70,0],
		[0x38afb78,0],
		[0x38afb80,0],
		[0x38afb88,0],
		[0x38afb90,0],
		[0x38afb98,0],
		[0x38afba0,0],
		[0x38afba8,0],
		[0x38afbb0,0],
		[0x38afbb8,0],
		[0x38afbc0,0],
		[0x38afbc8,0],
		[0x38afbd0,0],
		[0x38afbd8,0],
		[0x38afbe0,0],
		[0x38afbe8,0],
		[0x38afbf0,0],
		[0x38afbf8,0],
		[0x38afc00,0],
		[0x38afc08,0],
		[0x38afc10,0],
		[0x38afc18,0],
		[0x38afc20,0],
		[0x38afc28,0],
		[0x38afc30,0],
		[0x38afc38,0],
		[0x38afc40,0],
		[0x38afc48,0],
		[0x38afc50,0],
		[0x38afc58,0],
		[0x38afc60,0],
		[0x38afc68,0],
		[0x38afc70,0],
		[0x38afc78,0],
		[0x38afc80,0],
		[0x38afc88,0],
		[0x38afc90,0],
		[0x38afc98,0],
		[0x38afca0,0],
		[0x38afca8,0],
		[0x38afcb0,0],
		[0x38afcb8,0],
		[0x38afcc0,0],
		[0x38afcc8,0],
		[0x38afcd0,0],
		[0x38afcd8,0],
		[0x38afce0,0],
		[0x38afce8,0],
		[0x38afcf0,0],
		[0x38afcf8,0],
		[0x38afd00,0],
		[0x38afd08,0],
		[0x38afd10,0],
		[0x38afd18,0],
		[0x38afd20,0],
		[0x38afd28,0],
		[0x38afd30,0],
		[0x38afd38,0],
		[0x38afd40,0],
		[0x38afd48,0],
		[0x38afd50,0],
		[0x38afd58,0],
		[0x38afd60,0],
		[0x38afd68,0],
		[0x38afd70,0],
		[0x38afd78,0],
		[0x38afd80,0],
		[0x38afd88,0],
		[0x38afd90,0],
		[0x38afd98,0],
		[0x38afda0,0],
		[0x38afda8,0],
		[0x38afdb0,0],
		[0x38afdb8,0],
		[0x38afdc0,0],
		[0x38afdc8,0],
		[0x38afdd0,0],
		[0x38afdd8,0],
		[0x38afde0,0],
		[0x38afde8,0],
		[0x38afdf0,0],
		[0x38afdf8,0],
		[0x38afe00,0],
		[0x38afe08,0],
		[0x38afe10,0],
		[0x38afe18,0],
		[0x38afe20,0],
		[0x38afe28,0],
		[0x38afe30,0],
		[0x38afe38,0],
		[0x38afe40,0],
		[0x38afe48,0],
		[0x38afe50,0],
		[0x38afe58,0],
		[0x38afe60,0],
		[0x38afe68,0],
		[0x38afe70,0],
		[0x38afe78,0],
		[0x38afe80,0],
		[0x38afe88,0],
		[0x38afe90,0],
		[0x38afe98,0],
		[0x38afea0,0],
		[0x38afea8,0],
		[0x38afeb0,0],
		[0x38afeb8,0],
		[0x38afec0,0],
		[0x38afec8,0],
		[0x38afed0,0],
		[0x38afed8,0],
		[0x38afee0,0],
		[0x38afee8,0],
		[0x38afef0,0],
		[0x38afef8,0],
		[0x38aff00,0],
		[0x38aff08,0],
		[0x38aff10,0],
		[0x38aff18,0],
		[0x38aff20,0],
		[0x38aff28,0],
		[0x38aff30,0],
		[0x38aff38,0],
		[0x38aff40,0],
		[0x38aff48,0],
		[0x38aff50,0],
		[0x38aff58,0],
		[0x38aff60,0],
		[0x38aff68,0],
		[0x38aff70,0],
		[0x38aff78,0],
		[0x38aff80,0],
		[0x38aff88,0],
		[0x38aff90,0],
		[0x38aff98,0],
		[0x38affa0,0],
		[0x38affa8,0],
		[0x38affb0,0],
		[0x38affb8,0],
		[0x38affc0,0],
		[0x38affc8,0],
		[0x38affd0,0],
		[0x38affd8,0],
		[0x38affe0,0],
		[0x38affe8,0],
		[0x38afff0,0],
		[0x38afff8,0],
		[0x38b0000,0],
		[0x38b0008,0],
		[0x38b0010,0],
		[0x38b0018,0],
		[0x38b0020,0],
		[0x38b0028,0],
		[0x38b0030,0],
		[0x38b0038,0],
		[0x38b0040,0],
		[0x38b0048,0],
		[0x38b0050,0],
		[0x38b0058,0],
		[0x38b0060,0],
		[0x38b0068,0],
		[0x38b0070,0],
		[0x38b0078,0],
		[0x38b0080,0],
		[0x38b0088,0],
		[0x38b0090,0],
		[0x38b0098,0],
		[0x38b00a0,0],
		[0x38b00a8,0],
		[0x38b00b0,0],
		[0x38b00b8,0],
		[0x38b00c0,0],
		[0x38b00c8,0],
		[0x38b00d0,0],
		[0x38b00d8,0],
		[0x38b00e0,0],
		[0x38b00e8,0],
		[0x38b00f0,0],
		[0x38b00f8,0],
		[0x38b0100,0],
		[0x38b0108,0],
		[0x38b0110,0],
		[0x38b0118,0],
		[0x38b0120,0],
		[0x38b0128,0],
		[0x38b0130,0],
		[0x38b0138,0],
		[0x38b0140,0],
		[0x38b0148,0],
		[0x38b0150,0],
		[0x38b0158,0],
		[0x38b0160,0],
		[0x38b0168,0],
		[0x38b0170,0],
		[0x38b0178,0],
		[0x38b0180,0],
		[0x38b0188,0],
		[0x38b0190,0],
		[0x38b0198,0],
		[0x38b01a0,0],
		[0x38b01a8,0],
		[0x38b01b0,0],
		[0x38b01b8,0],
		[0x38b01c0,0],
		[0x38b01c8,0],
		[0x38b01d0,0],
		[0x38b01d8,0],
		[0x38b01e0,0],
		[0x38b01e8,0],
		[0x38b01f0,0],
		[0x38b01f8,0],
		[0x38b0200,0],
		[0x38b0208,0],
		[0x38b0210,0],
		[0x38b0218,0],
		[0x38b0220,0],
		[0x38b0228,0],
		[0x38b0230,0],
		[0x38b0238,0],
		[0x38b0240,0],
		[0x38b0248,0],
		[0x38b0250,0],
		[0x38b0258,0],
		[0x38b0260,0],
		[0x38b0268,0],
		[0x38b0270,0],
		[0x38b0278,0],
		[0x38b0280,0],
		[0x38b0288,0],
		[0x38b0290,0],
		[0x38b0298,0],
		[0x38b02a0,0],
		[0x38b02a8,0],
		[0x38b02b0,0],
		[0x38b02b8,0],
		[0x38b02c0,0],
		[0x38b02c8,0],
		[0x38b02d0,0],
		[0x38b02d8,0],
		[0x38b02e0,0],
		[0x38b02e8,0],
		[0x38b02f0,0],
		[0x38b02f8,0],
		[0x38b0300,0],
		[0x38b0308,0],
		[0x38b0310,0],
		[0x38b0318,0],
		[0x38b0320,0],
		[0x38b0328,0],
		[0x38b0330,0],
		[0x38b0338,0],
		[0x38b0340,0],
		[0x38b0348,0],
		[0x38b0350,0],
		[0x38b0358,0],
		[0x38b0360,0],
		[0x38b0368,0],
		[0x38b0370,0],
		[0x38b0378,0],
		[0x38b0380,0],
		[0x38b0388,0],
		[0x38b0390,0],
		[0x38b0398,0],
		[0x38b03a0,0],
		[0x38b03a8,0],
		[0x38b03b0,0],
		[0x38b03b8,0],
		[0x38b03c0,0],
		[0x38b03c8,0],
		[0x38b03d0,0],
		[0x38b03d8,0],
		[0x38b03e0,0],
		[0x38b03e8,0],
		[0x38b03f0,0],
		[0x38b03f8,0],
		[0x38b0400,0],
		[0x38b0408,0],
		[0x38b0410,0],
		[0x38b0418,0],
		[0x38b0420,0],
		[0x38b0428,0],
		[0x38b0430,0],
		[0x38b0438,0],
		[0x38b0440,0],
		[0x38b0448,0],
		[0x38b0450,0],
		[0x38b0458,0],
		[0x38b0460,0],
		[0x38b0468,0],
		[0x38b0470,0],
		[0x38b0478,0],
		[0x38b0480,0],
		[0x38b0488,0],
		[0x38b0490,0],
		[0x38b0498,0],
		[0x38b04a0,0],
		[0x38b04a8,0],
		[0x38b04b0,0],
		[0x38b04b8,0],
		[0x38b04c0,0],
		[0x38b04c8,0],
		[0x38b04d0,0],
		[0x38b04d8,0],
		[0x38b04e0,0],
		[0x38b04e8,0],
		[0x38b04f0,0],
		[0x38b04f8,0],
		[0x38b0500,0],
		[0x38b0508,0],
		[0x38b0510,0],
		[0x38b0518,0],
		[0x38b0520,0],
		[0x38b0528,0],
		[0x38b0530,0],
		[0x38b0538,0],
		[0x38b0540,0],
		[0x38b0548,0],
		[0x38b0550,0],
		[0x38b0558,0],
		[0x38b0560,0],
		[0x38b0568,0],
		[0x38b0570,0],
		[0x38b0578,0],
		[0x38b0580,0],
		[0x38b0588,0],
		[0x38b0590,0],
		[0x38b0598,0],
		[0x38b05a0,0],
		[0x38b05a8,0],
		[0x38b05b0,0],
		[0x38b05b8,0],
		[0x38b05c0,0],
		[0x38b05c8,0],
		[0x38b05d0,0],
		[0x38b05d8,0],
		[0x38b05e0,0],
		[0x38b05e8,0],
		[0x38b05f0,0],
		[0x38b05f8,0],
		[0x38b0600,0],
		[0x38b0608,0],
		[0x38b0610,0],
		[0x38b0618,0],
		[0x38b0620,0],
		[0x38b0628,0],
		[0x38b0630,0],
		[0x38b0638,0],
		[0x38b0640,0],
		[0x38b0648,0],
		[0x38b0650,0],
		[0x38b0658,0],
		[0x38b0660,0],
		[0x38b0668,0],
		[0x38b0670,0],
		[0x38b0678,0],
		[0x38b0680,0],
		[0x38b0688,0],
		[0x38b0690,0],
		[0x38b0698,0],
		[0x38b06a0,0],
		[0x38b06a8,0],
		[0x38b06b0,0],
		[0x38b06b8,0],
		[0x38b06c0,0],
		[0x38b06c8,0],
		[0x38b06d0,0],
		[0x38b06d8,0],
		[0x38b06e0,0],
		[0x38b06e8,0],
		[0x38b06f0,0],
		[0x38b06f8,0],
		[0x38b0700,0],
		[0x38b0708,0],
		[0x38b0710,0],
		[0x38b0718,0],
		[0x38b0720,0],
		[0x38b0728,0],
		[0x38b0730,0],
		[0x38b0738,0],
		[0x38b0740,0],
		[0x38b0748,0],
		[0x38b0750,0],
		[0x38b0758,0],
		[0x38b0760,0],
		[0x38b0768,0],
		[0x38b0770,0],
		[0x38b0778,0],
		[0x38b0780,0],
		[0x38b0788,0],
		[0x38b0790,0],
		[0x38b0798,0],
		[0x38b07a0,0],
		[0x38b07a8,0],
		[0x38b07b0,0],
		[0x38b07b8,0],
		[0x38b07c0,0],
		[0x38b07c8,0],
		[0x38b07d0,0],
		[0x38b07d8,0],
		[0x38b07e0,0],
		[0x38b07e8,0],
		[0x38b07f0,0],
		[0x38b07f8,0],
		[0, 0]
]).
unknown([
		[0, 0]
]).
long([
		[0x38af850,1073741825],
		[0, 0]
]).
int([
		[0x38af800,0],
		[0x38af804,0],
		[0x38af828,0],
		[0x38af82c,0],
		[0x38af830,0],
		[0x38af834,0],
		[0x38af838,0],
		[0x38af83c,0],
		[0x38af840,0],
		[0x38af844,0],
		[0x38af848,0],
		[0x38af84c,0],
		[0x38af854,0],
		[0x38af858,0],
		[0x38af85c,0],
		[0x38af860,0],
		[0x38af864,0],
		[0x38af868,0],
		[0x38af86c,0],
		[0x38af870,0],
		[0x38af874,0],
		[0x38af878,0],
		[0x38af87c,0],
		[0x38af880,0],
		[0x38af884,0],
		[0x38af888,0],
		[0x38af88c,0],
		[0x38af890,0],
		[0x38af894,0],
		[0x38af898,0],
		[0x38af89c,0],
		[0x38af8a0,0],
		[0x38af8a4,0],
		[0x38af8a8,0],
		[0x38af8ac,0],
		[0x38af8b0,0],
		[0x38af8b4,0],
		[0x38af8b8,0],
		[0x38af8bc,0],
		[0x38af8c0,0],
		[0x38af8c4,0],
		[0x38af8c8,0],
		[0x38af8cc,0],
		[0x38af8d0,0],
		[0x38af8d4,0],
		[0x38af8d8,0],
		[0x38af8dc,0],
		[0x38af8e0,0],
		[0x38af8e4,0],
		[0x38af8e8,0],
		[0x38af8ec,0],
		[0x38af8f0,0],
		[0x38af8f4,0],
		[0x38af8f8,0],
		[0x38af8fc,0],
		[0x38af900,0],
		[0x38af904,0],
		[0x38af908,0],
		[0x38af90c,0],
		[0x38af910,0],
		[0x38af914,0],
		[0x38af918,0],
		[0x38af91c,0],
		[0x38af920,0],
		[0x38af924,0],
		[0x38af928,0],
		[0x38af92c,0],
		[0x38af930,0],
		[0x38af934,0],
		[0x38af938,0],
		[0x38af93c,0],
		[0x38af940,0],
		[0x38af944,0],
		[0x38af948,0],
		[0x38af94c,0],
		[0x38af950,0],
		[0x38af954,0],
		[0x38af958,0],
		[0x38af95c,0],
		[0x38af960,0],
		[0x38af964,0],
		[0x38af968,0],
		[0x38af96c,0],
		[0x38af970,0],
		[0x38af974,0],
		[0x38af978,0],
		[0x38af97c,0],
		[0x38af980,0],
		[0x38af984,0],
		[0x38af988,0],
		[0x38af98c,0],
		[0x38af990,0],
		[0x38af994,0],
		[0x38af998,0],
		[0x38af99c,0],
		[0x38af9a0,0],
		[0x38af9a4,0],
		[0x38af9a8,0],
		[0x38af9ac,0],
		[0x38af9b0,0],
		[0x38af9b4,0],
		[0x38af9b8,0],
		[0x38af9bc,0],
		[0x38af9c0,0],
		[0x38af9c4,0],
		[0x38af9c8,0],
		[0x38af9cc,0],
		[0x38af9d0,0],
		[0x38af9d4,0],
		[0x38af9d8,0],
		[0x38af9dc,0],
		[0x38af9e0,0],
		[0x38af9e4,0],
		[0x38af9e8,0],
		[0x38af9ec,0],
		[0x38af9f0,0],
		[0x38af9f4,0],
		[0x38af9f8,0],
		[0x38af9fc,0],
		[0x38afa00,0],
		[0x38afa04,0],
		[0x38afa08,0],
		[0x38afa0c,0],
		[0x38afa10,0],
		[0x38afa14,0],
		[0x38afa18,0],
		[0x38afa1c,0],
		[0x38afa20,0],
		[0x38afa24,0],
		[0x38afa28,0],
		[0x38afa2c,0],
		[0x38afa30,0],
		[0x38afa34,0],
		[0x38afa38,0],
		[0x38afa3c,0],
		[0x38afa40,0],
		[0x38afa44,0],
		[0x38afa48,0],
		[0x38afa4c,0],
		[0x38afa50,0],
		[0x38afa54,0],
		[0x38afa58,0],
		[0x38afa5c,0],
		[0x38afa60,0],
		[0x38afa64,0],
		[0x38afa68,0],
		[0x38afa6c,0],
		[0x38afa70,0],
		[0x38afa74,0],
		[0x38afa78,0],
		[0x38afa7c,0],
		[0x38afa80,0],
		[0x38afa84,0],
		[0x38afa88,0],
		[0x38afa8c,0],
		[0x38afa90,0],
		[0x38afa94,0],
		[0x38afa98,0],
		[0x38afa9c,0],
		[0x38afaa0,0],
		[0x38afaa4,0],
		[0x38afaa8,0],
		[0x38afaac,0],
		[0x38afab0,0],
		[0x38afab4,0],
		[0x38afab8,0],
		[0x38afabc,0],
		[0x38afac0,0],
		[0x38afac4,0],
		[0x38afac8,0],
		[0x38afacc,0],
		[0x38afad0,0],
		[0x38afad4,0],
		[0x38afad8,0],
		[0x38afadc,0],
		[0x38afae0,0],
		[0x38afae4,0],
		[0x38afae8,0],
		[0x38afaec,0],
		[0x38afaf0,0],
		[0x38afaf4,0],
		[0x38afaf8,0],
		[0x38afafc,0],
		[0x38afb00,0],
		[0x38afb04,0],
		[0x38afb08,0],
		[0x38afb0c,0],
		[0x38afb10,0],
		[0x38afb14,0],
		[0x38afb18,0],
		[0x38afb1c,0],
		[0x38afb20,0],
		[0x38afb24,0],
		[0x38afb28,0],
		[0x38afb2c,0],
		[0x38afb30,0],
		[0x38afb34,0],
		[0x38afb38,0],
		[0x38afb3c,0],
		[0x38afb40,0],
		[0x38afb44,0],
		[0x38afb48,0],
		[0x38afb4c,0],
		[0x38afb50,0],
		[0x38afb54,0],
		[0x38afb58,0],
		[0x38afb5c,0],
		[0x38afb60,0],
		[0x38afb64,0],
		[0x38afb68,0],
		[0x38afb6c,0],
		[0x38afb70,0],
		[0x38afb74,0],
		[0x38afb78,0],
		[0x38afb7c,0],
		[0x38afb80,0],
		[0x38afb84,0],
		[0x38afb88,0],
		[0x38afb8c,0],
		[0x38afb90,0],
		[0x38afb94,0],
		[0x38afb98,0],
		[0x38afb9c,0],
		[0x38afba0,0],
		[0x38afba4,0],
		[0x38afba8,0],
		[0x38afbac,0],
		[0x38afbb0,0],
		[0x38afbb4,0],
		[0x38afbb8,0],
		[0x38afbbc,0],
		[0x38afbc0,0],
		[0x38afbc4,0],
		[0x38afbc8,0],
		[0x38afbcc,0],
		[0x38afbd0,0],
		[0x38afbd4,0],
		[0x38afbd8,0],
		[0x38afbdc,0],
		[0x38afbe0,0],
		[0x38afbe4,0],
		[0x38afbe8,0],
		[0x38afbec,0],
		[0x38afbf0,0],
		[0x38afbf4,0],
		[0x38afbf8,0],
		[0x38afbfc,0],
		[0x38afc00,0],
		[0x38afc04,0],
		[0x38afc08,0],
		[0x38afc0c,0],
		[0x38afc10,0],
		[0x38afc14,0],
		[0x38afc18,0],
		[0x38afc1c,0],
		[0x38afc20,0],
		[0x38afc24,0],
		[0x38afc28,0],
		[0x38afc2c,0],
		[0x38afc30,0],
		[0x38afc34,0],
		[0x38afc38,0],
		[0x38afc3c,0],
		[0x38afc40,0],
		[0x38afc44,0],
		[0x38afc48,0],
		[0x38afc4c,0],
		[0x38afc50,0],
		[0x38afc54,0],
		[0x38afc58,0],
		[0x38afc5c,0],
		[0x38afc60,0],
		[0x38afc64,0],
		[0x38afc68,0],
		[0x38afc6c,0],
		[0x38afc70,0],
		[0x38afc74,0],
		[0x38afc78,0],
		[0x38afc7c,0],
		[0x38afc80,0],
		[0x38afc84,0],
		[0x38afc88,0],
		[0x38afc8c,0],
		[0x38afc90,0],
		[0x38afc94,0],
		[0x38afc98,0],
		[0x38afc9c,0],
		[0x38afca0,0],
		[0x38afca4,0],
		[0x38afca8,0],
		[0x38afcac,0],
		[0x38afcb0,0],
		[0x38afcb4,0],
		[0x38afcb8,0],
		[0x38afcbc,0],
		[0x38afcc0,0],
		[0x38afcc4,0],
		[0x38afcc8,0],
		[0x38afccc,0],
		[0x38afcd0,0],
		[0x38afcd4,0],
		[0x38afcd8,0],
		[0x38afcdc,0],
		[0x38afce0,0],
		[0x38afce4,0],
		[0x38afce8,0],
		[0x38afcec,0],
		[0x38afcf0,0],
		[0x38afcf4,0],
		[0x38afcf8,0],
		[0x38afcfc,0],
		[0x38afd00,0],
		[0x38afd04,0],
		[0x38afd08,0],
		[0x38afd0c,0],
		[0x38afd10,0],
		[0x38afd14,0],
		[0x38afd18,0],
		[0x38afd1c,0],
		[0x38afd20,0],
		[0x38afd24,0],
		[0x38afd28,0],
		[0x38afd2c,0],
		[0x38afd30,0],
		[0x38afd34,0],
		[0x38afd38,0],
		[0x38afd3c,0],
		[0x38afd40,0],
		[0x38afd44,0],
		[0x38afd48,0],
		[0x38afd4c,0],
		[0x38afd50,0],
		[0x38afd54,0],
		[0x38afd58,0],
		[0x38afd5c,0],
		[0x38afd60,0],
		[0x38afd64,0],
		[0x38afd68,0],
		[0x38afd6c,0],
		[0x38afd70,0],
		[0x38afd74,0],
		[0x38afd78,0],
		[0x38afd7c,0],
		[0x38afd80,0],
		[0x38afd84,0],
		[0x38afd88,0],
		[0x38afd8c,0],
		[0x38afd90,0],
		[0x38afd94,0],
		[0x38afd98,0],
		[0x38afd9c,0],
		[0x38afda0,0],
		[0x38afda4,0],
		[0x38afda8,0],
		[0x38afdac,0],
		[0x38afdb0,0],
		[0x38afdb4,0],
		[0x38afdb8,0],
		[0x38afdbc,0],
		[0x38afdc0,0],
		[0x38afdc4,0],
		[0x38afdc8,0],
		[0x38afdcc,0],
		[0x38afdd0,0],
		[0x38afdd4,0],
		[0x38afdd8,0],
		[0x38afddc,0],
		[0x38afde0,0],
		[0x38afde4,0],
		[0x38afde8,0],
		[0x38afdec,0],
		[0x38afdf0,0],
		[0x38afdf4,0],
		[0x38afdf8,0],
		[0x38afdfc,0],
		[0x38afe00,0],
		[0x38afe04,0],
		[0x38afe08,0],
		[0x38afe0c,0],
		[0x38afe10,0],
		[0x38afe14,0],
		[0x38afe18,0],
		[0x38afe1c,0],
		[0x38afe20,0],
		[0x38afe24,0],
		[0x38afe28,0],
		[0x38afe2c,0],
		[0x38afe30,0],
		[0x38afe34,0],
		[0x38afe38,0],
		[0x38afe3c,0],
		[0x38afe40,0],
		[0x38afe44,0],
		[0x38afe48,0],
		[0x38afe4c,0],
		[0x38afe50,0],
		[0x38afe54,0],
		[0x38afe58,0],
		[0x38afe5c,0],
		[0x38afe60,0],
		[0x38afe64,0],
		[0x38afe68,0],
		[0x38afe6c,0],
		[0x38afe70,0],
		[0x38afe74,0],
		[0x38afe78,0],
		[0x38afe7c,0],
		[0x38afe80,0],
		[0x38afe84,0],
		[0x38afe88,0],
		[0x38afe8c,0],
		[0x38afe90,0],
		[0x38afe94,0],
		[0x38afe98,0],
		[0x38afe9c,0],
		[0x38afea0,0],
		[0x38afea4,0],
		[0x38afea8,0],
		[0x38afeac,0],
		[0x38afeb0,0],
		[0x38afeb4,0],
		[0x38afeb8,0],
		[0x38afebc,0],
		[0x38afec0,0],
		[0x38afec4,0],
		[0x38afec8,0],
		[0x38afecc,0],
		[0x38afed0,0],
		[0x38afed4,0],
		[0x38afed8,0],
		[0x38afedc,0],
		[0x38afee0,0],
		[0x38afee4,0],
		[0x38afee8,0],
		[0x38afeec,0],
		[0x38afef0,0],
		[0x38afef4,0],
		[0x38afef8,0],
		[0x38afefc,0],
		[0x38aff00,0],
		[0x38aff04,0],
		[0x38aff08,0],
		[0x38aff0c,0],
		[0x38aff10,0],
		[0x38aff14,0],
		[0x38aff18,0],
		[0x38aff1c,0],
		[0x38aff20,0],
		[0x38aff24,0],
		[0x38aff28,0],
		[0x38aff2c,0],
		[0x38aff30,0],
		[0x38aff34,0],
		[0x38aff38,0],
		[0x38aff3c,0],
		[0x38aff40,0],
		[0x38aff44,0],
		[0x38aff48,0],
		[0x38aff4c,0],
		[0x38aff50,0],
		[0x38aff54,0],
		[0x38aff58,0],
		[0x38aff5c,0],
		[0x38aff60,0],
		[0x38aff64,0],
		[0x38aff68,0],
		[0x38aff6c,0],
		[0x38aff70,0],
		[0x38aff74,0],
		[0x38aff78,0],
		[0x38aff7c,0],
		[0x38aff80,0],
		[0x38aff84,0],
		[0x38aff88,0],
		[0x38aff8c,0],
		[0x38aff90,0],
		[0x38aff94,0],
		[0x38aff98,0],
		[0x38aff9c,0],
		[0x38affa0,0],
		[0x38affa4,0],
		[0x38affa8,0],
		[0x38affac,0],
		[0x38affb0,0],
		[0x38affb4,0],
		[0x38affb8,0],
		[0x38affbc,0],
		[0x38affc0,0],
		[0x38affc4,0],
		[0x38affc8,0],
		[0x38affcc,0],
		[0x38affd0,0],
		[0x38affd4,0],
		[0x38affd8,0],
		[0x38affdc,0],
		[0x38affe0,0],
		[0x38affe4,0],
		[0x38affe8,0],
		[0x38affec,0],
		[0x38afff0,0],
		[0x38afff4,0],
		[0x38afff8,0],
		[0x38afffc,0],
		[0x38b0000,0],
		[0x38b0004,0],
		[0x38b0008,0],
		[0x38b000c,0],
		[0x38b0010,0],
		[0x38b0014,0],
		[0x38b0018,0],
		[0x38b001c,0],
		[0x38b0020,0],
		[0x38b0024,0],
		[0x38b0028,0],
		[0x38b002c,0],
		[0x38b0030,0],
		[0x38b0034,0],
		[0x38b0038,0],
		[0x38b003c,0],
		[0x38b0040,0],
		[0x38b0044,0],
		[0x38b0048,0],
		[0x38b004c,0],
		[0x38b0050,0],
		[0x38b0054,0],
		[0x38b0058,0],
		[0x38b005c,0],
		[0x38b0060,0],
		[0x38b0064,0],
		[0x38b0068,0],
		[0x38b006c,0],
		[0x38b0070,0],
		[0x38b0074,0],
		[0x38b0078,0],
		[0x38b007c,0],
		[0x38b0080,0],
		[0x38b0084,0],
		[0x38b0088,0],
		[0x38b008c,0],
		[0x38b0090,0],
		[0x38b0094,0],
		[0x38b0098,0],
		[0x38b009c,0],
		[0x38b00a0,0],
		[0x38b00a4,0],
		[0x38b00a8,0],
		[0x38b00ac,0],
		[0x38b00b0,0],
		[0x38b00b4,0],
		[0x38b00b8,0],
		[0x38b00bc,0],
		[0x38b00c0,0],
		[0x38b00c4,0],
		[0x38b00c8,0],
		[0x38b00cc,0],
		[0x38b00d0,0],
		[0x38b00d4,0],
		[0x38b00d8,0],
		[0x38b00dc,0],
		[0x38b00e0,0],
		[0x38b00e4,0],
		[0x38b00e8,0],
		[0x38b00ec,0],
		[0x38b00f0,0],
		[0x38b00f4,0],
		[0x38b00f8,0],
		[0x38b00fc,0],
		[0x38b0100,0],
		[0x38b0104,0],
		[0x38b0108,0],
		[0x38b010c,0],
		[0x38b0110,0],
		[0x38b0114,0],
		[0x38b0118,0],
		[0x38b011c,0],
		[0x38b0120,0],
		[0x38b0124,0],
		[0x38b0128,0],
		[0x38b012c,0],
		[0x38b0130,0],
		[0x38b0134,0],
		[0x38b0138,0],
		[0x38b013c,0],
		[0x38b0140,0],
		[0x38b0144,0],
		[0x38b0148,0],
		[0x38b014c,0],
		[0x38b0150,0],
		[0x38b0154,0],
		[0x38b0158,0],
		[0x38b015c,0],
		[0x38b0160,0],
		[0x38b0164,0],
		[0x38b0168,0],
		[0x38b016c,0],
		[0x38b0170,0],
		[0x38b0174,0],
		[0x38b0178,0],
		[0x38b017c,0],
		[0x38b0180,0],
		[0x38b0184,0],
		[0x38b0188,0],
		[0x38b018c,0],
		[0x38b0190,0],
		[0x38b0194,0],
		[0x38b0198,0],
		[0x38b019c,0],
		[0x38b01a0,0],
		[0x38b01a4,0],
		[0x38b01a8,0],
		[0x38b01ac,0],
		[0x38b01b0,0],
		[0x38b01b4,0],
		[0x38b01b8,0],
		[0x38b01bc,0],
		[0x38b01c0,0],
		[0x38b01c4,0],
		[0x38b01c8,0],
		[0x38b01cc,0],
		[0x38b01d0,0],
		[0x38b01d4,0],
		[0x38b01d8,0],
		[0x38b01dc,0],
		[0x38b01e0,0],
		[0x38b01e4,0],
		[0x38b01e8,0],
		[0x38b01ec,0],
		[0x38b01f0,0],
		[0x38b01f4,0],
		[0x38b01f8,0],
		[0x38b01fc,0],
		[0x38b0200,0],
		[0x38b0204,0],
		[0x38b0208,0],
		[0x38b020c,0],
		[0x38b0210,0],
		[0x38b0214,0],
		[0x38b0218,0],
		[0x38b021c,0],
		[0x38b0220,0],
		[0x38b0224,0],
		[0x38b0228,0],
		[0x38b022c,0],
		[0x38b0230,0],
		[0x38b0234,0],
		[0x38b0238,0],
		[0x38b023c,0],
		[0x38b0240,0],
		[0x38b0244,0],
		[0x38b0248,0],
		[0x38b024c,0],
		[0x38b0250,0],
		[0x38b0254,0],
		[0x38b0258,0],
		[0x38b025c,0],
		[0x38b0260,0],
		[0x38b0264,0],
		[0x38b0268,0],
		[0x38b026c,0],
		[0x38b0270,0],
		[0x38b0274,0],
		[0x38b0278,0],
		[0x38b027c,0],
		[0x38b0280,0],
		[0x38b0284,0],
		[0x38b0288,0],
		[0x38b028c,0],
		[0x38b0290,0],
		[0x38b0294,0],
		[0x38b0298,0],
		[0x38b029c,0],
		[0x38b02a0,0],
		[0x38b02a4,0],
		[0x38b02a8,0],
		[0x38b02ac,0],
		[0x38b02b0,0],
		[0x38b02b4,0],
		[0x38b02b8,0],
		[0x38b02bc,0],
		[0x38b02c0,0],
		[0x38b02c4,0],
		[0x38b02c8,0],
		[0x38b02cc,0],
		[0x38b02d0,0],
		[0x38b02d4,0],
		[0x38b02d8,0],
		[0x38b02dc,0],
		[0x38b02e0,0],
		[0x38b02e4,0],
		[0x38b02e8,0],
		[0x38b02ec,0],
		[0x38b02f0,0],
		[0x38b02f4,0],
		[0x38b02f8,0],
		[0x38b02fc,0],
		[0x38b0300,0],
		[0x38b0304,0],
		[0x38b0308,0],
		[0x38b030c,0],
		[0x38b0310,0],
		[0x38b0314,0],
		[0x38b0318,0],
		[0x38b031c,0],
		[0x38b0320,0],
		[0x38b0324,0],
		[0x38b0328,0],
		[0x38b032c,0],
		[0x38b0330,0],
		[0x38b0334,0],
		[0x38b0338,0],
		[0x38b033c,0],
		[0x38b0340,0],
		[0x38b0344,0],
		[0x38b0348,0],
		[0x38b034c,0],
		[0x38b0350,0],
		[0x38b0354,0],
		[0x38b0358,0],
		[0x38b035c,0],
		[0x38b0360,0],
		[0x38b0364,0],
		[0x38b0368,0],
		[0x38b036c,0],
		[0x38b0370,0],
		[0x38b0374,0],
		[0x38b0378,0],
		[0x38b037c,0],
		[0x38b0380,0],
		[0x38b0384,0],
		[0x38b0388,0],
		[0x38b038c,0],
		[0x38b0390,0],
		[0x38b0394,0],
		[0x38b0398,0],
		[0x38b039c,0],
		[0x38b03a0,0],
		[0x38b03a4,0],
		[0x38b03a8,0],
		[0x38b03ac,0],
		[0x38b03b0,0],
		[0x38b03b4,0],
		[0x38b03b8,0],
		[0x38b03bc,0],
		[0x38b03c0,0],
		[0x38b03c4,0],
		[0x38b03c8,0],
		[0x38b03cc,0],
		[0x38b03d0,0],
		[0x38b03d4,0],
		[0x38b03d8,0],
		[0x38b03dc,0],
		[0x38b03e0,0],
		[0x38b03e4,0],
		[0x38b03e8,0],
		[0x38b03ec,0],
		[0x38b03f0,0],
		[0x38b03f4,0],
		[0x38b03f8,0],
		[0x38b03fc,0],
		[0x38b0400,0],
		[0x38b0404,0],
		[0x38b0408,0],
		[0x38b040c,0],
		[0x38b0410,0],
		[0x38b0414,0],
		[0x38b0418,0],
		[0x38b041c,0],
		[0x38b0420,0],
		[0x38b0424,0],
		[0x38b0428,0],
		[0x38b042c,0],
		[0x38b0430,0],
		[0x38b0434,0],
		[0x38b0438,0],
		[0x38b043c,0],
		[0x38b0440,0],
		[0x38b0444,0],
		[0x38b0448,0],
		[0x38b044c,0],
		[0x38b0450,0],
		[0x38b0454,0],
		[0x38b0458,0],
		[0x38b045c,0],
		[0x38b0460,0],
		[0x38b0464,0],
		[0x38b0468,0],
		[0x38b046c,0],
		[0x38b0470,0],
		[0x38b0474,0],
		[0x38b0478,0],
		[0x38b047c,0],
		[0x38b0480,0],
		[0x38b0484,0],
		[0x38b0488,0],
		[0x38b048c,0],
		[0x38b0490,0],
		[0x38b0494,0],
		[0x38b0498,0],
		[0x38b049c,0],
		[0x38b04a0,0],
		[0x38b04a4,0],
		[0x38b04a8,0],
		[0x38b04ac,0],
		[0x38b04b0,0],
		[0x38b04b4,0],
		[0x38b04b8,0],
		[0x38b04bc,0],
		[0x38b04c0,0],
		[0x38b04c4,0],
		[0x38b04c8,0],
		[0x38b04cc,0],
		[0x38b04d0,0],
		[0x38b04d4,0],
		[0x38b04d8,0],
		[0x38b04dc,0],
		[0x38b04e0,0],
		[0x38b04e4,0],
		[0x38b04e8,0],
		[0x38b04ec,0],
		[0x38b04f0,0],
		[0x38b04f4,0],
		[0x38b04f8,0],
		[0x38b04fc,0],
		[0x38b0500,0],
		[0x38b0504,0],
		[0x38b0508,0],
		[0x38b050c,0],
		[0x38b0510,0],
		[0x38b0514,0],
		[0x38b0518,0],
		[0x38b051c,0],
		[0x38b0520,0],
		[0x38b0524,0],
		[0x38b0528,0],
		[0x38b052c,0],
		[0x38b0530,0],
		[0x38b0534,0],
		[0x38b0538,0],
		[0x38b053c,0],
		[0x38b0540,0],
		[0x38b0544,0],
		[0x38b0548,0],
		[0x38b054c,0],
		[0x38b0550,0],
		[0x38b0554,0],
		[0x38b0558,0],
		[0x38b055c,0],
		[0x38b0560,0],
		[0x38b0564,0],
		[0x38b0568,0],
		[0x38b056c,0],
		[0x38b0570,0],
		[0x38b0574,0],
		[0x38b0578,0],
		[0x38b057c,0],
		[0x38b0580,0],
		[0x38b0584,0],
		[0x38b0588,0],
		[0x38b058c,0],
		[0x38b0590,0],
		[0x38b0594,0],
		[0x38b0598,0],
		[0x38b059c,0],
		[0x38b05a0,0],
		[0x38b05a4,0],
		[0x38b05a8,0],
		[0x38b05ac,0],
		[0x38b05b0,0],
		[0x38b05b4,0],
		[0x38b05b8,0],
		[0x38b05bc,0],
		[0x38b05c0,0],
		[0x38b05c4,0],
		[0x38b05c8,0],
		[0x38b05cc,0],
		[0x38b05d0,0],
		[0x38b05d4,0],
		[0x38b05d8,0],
		[0x38b05dc,0],
		[0x38b05e0,0],
		[0x38b05e4,0],
		[0x38b05e8,0],
		[0x38b05ec,0],
		[0x38b05f0,0],
		[0x38b05f4,0],
		[0x38b05f8,0],
		[0x38b05fc,0],
		[0x38b0600,0],
		[0x38b0604,0],
		[0x38b0608,0],
		[0x38b060c,0],
		[0x38b0610,0],
		[0x38b0614,0],
		[0x38b0618,0],
		[0x38b061c,0],
		[0x38b0620,0],
		[0x38b0624,0],
		[0x38b0628,0],
		[0x38b062c,0],
		[0x38b0630,0],
		[0x38b0634,0],
		[0x38b0638,0],
		[0x38b063c,0],
		[0x38b0640,0],
		[0x38b0644,0],
		[0x38b0648,0],
		[0x38b064c,0],
		[0x38b0650,0],
		[0x38b0654,0],
		[0x38b0658,0],
		[0x38b065c,0],
		[0x38b0660,0],
		[0x38b0664,0],
		[0x38b0668,0],
		[0x38b066c,0],
		[0x38b0670,0],
		[0x38b0674,0],
		[0x38b0678,0],
		[0x38b067c,0],
		[0x38b0680,0],
		[0x38b0684,0],
		[0x38b0688,0],
		[0x38b068c,0],
		[0x38b0690,0],
		[0x38b0694,0],
		[0x38b0698,0],
		[0x38b069c,0],
		[0x38b06a0,0],
		[0x38b06a4,0],
		[0x38b06a8,0],
		[0x38b06ac,0],
		[0x38b06b0,0],
		[0x38b06b4,0],
		[0x38b06b8,0],
		[0x38b06bc,0],
		[0x38b06c0,0],
		[0x38b06c4,0],
		[0x38b06c8,0],
		[0x38b06cc,0],
		[0x38b06d0,0],
		[0x38b06d4,0],
		[0x38b06d8,0],
		[0x38b06dc,0],
		[0x38b06e0,0],
		[0x38b06e4,0],
		[0x38b06e8,0],
		[0x38b06ec,0],
		[0x38b06f0,0],
		[0x38b06f4,0],
		[0x38b06f8,0],
		[0x38b06fc,0],
		[0x38b0700,0],
		[0x38b0704,0],
		[0x38b0708,0],
		[0x38b070c,0],
		[0x38b0710,0],
		[0x38b0714,0],
		[0x38b0718,0],
		[0x38b071c,0],
		[0x38b0720,0],
		[0x38b0724,0],
		[0x38b0728,0],
		[0x38b072c,0],
		[0x38b0730,0],
		[0x38b0734,0],
		[0x38b0738,0],
		[0x38b073c,0],
		[0x38b0740,0],
		[0x38b0744,0],
		[0x38b0748,0],
		[0x38b074c,0],
		[0x38b0750,0],
		[0x38b0754,0],
		[0x38b0758,0],
		[0x38b075c,0],
		[0x38b0760,0],
		[0x38b0764,0],
		[0x38b0768,0],
		[0x38b076c,0],
		[0x38b0770,0],
		[0x38b0774,0],
		[0x38b0778,0],
		[0x38b077c,0],
		[0x38b0780,0],
		[0x38b0784,0],
		[0x38b0788,0],
		[0x38b078c,0],
		[0x38b0790,0],
		[0x38b0794,0],
		[0x38b0798,0],
		[0x38b079c,0],
		[0x38b07a0,0],
		[0x38b07a4,0],
		[0x38b07a8,0],
		[0x38b07ac,0],
		[0x38b07b0,0],
		[0x38b07b4,0],
		[0x38b07b8,0],
		[0x38b07bc,0],
		[0x38b07c0,0],
		[0x38b07c4,0],
		[0x38b07c8,0],
		[0x38b07cc,0],
		[0x38b07d0,0],
		[0x38b07d4,0],
		[0x38b07d8,0],
		[0x38b07dc,0],
		[0x38b07e0,0],
		[0x38b07e4,0],
		[0x38b07e8,0],
		[0x38b07ec,0],
		[0x38b07f0,0],
		[0x38b07f4,0],
		[0x38b07f8,0],
		[0x38b07fc,0],
		[0, 0]
]).
string_val([
		[0, 0]
]).
/* This file contains recursive predicates */
:- use_module(library(clpfd)).
:- use_module(reif).
:- style_check(-singleton).

isTrue([X, Y]):-
    X == 49.

isTrue([X|Tail]):-
    isTrue(Tail).

log(File_name, Name, Addr, Base):-
    Offset #= Addr - Base,
    open(File_name, append, Stream),
    write(Stream, Name),
    write(Stream, ':'),
    write(Stream, Offset),
    nl(Stream),
    close(Stream).

possible_task_struct(Base_addr) :-
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM2_addr, Pid_addr, Tgid_addr, Real_parent_addr, Parent_addr , Child_addr, 
           Group_leader_addr, Thread_group_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    %MM2_addr #> Base_addr + 1000,
    Tasks_addr #> MM2_addr - 100,
    %FS_struct_addr #< Base_addr + 4000,
    Tgid_addr #= Pid_addr + 4,
    Real_parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr - 8,
    Child_addr #= Parent_addr + 8,
    %FIXME This may be too strong
    Group_leader_addr #=< Child_addr +32,
    %Comm_addr #= Base_addr + 1656,
    %Tasks_addr #= Base_addr + 1072,
    %FS_struct_addr #= Base_addr + 2640,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    % make query after labeling
    MM2_val #> 0,
    integer(MM2_val),
    
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val,  Comm_addr, Comm_val ]),

    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_parent_addr, Real_parent_val, Group_leader_addr, Group_leader_val]),
    Real_parent_val #> 0,
    Group_leader_val #> 0,
    query_ts(Real_parent_val, Comm_offset, Tasks_offset),
    query_ts(Group_leader_val, Comm_offset, Tasks_offset),

    labeling([enum], [Cred_addr, Cred_val]),
    Cred_val #> 0,
    query_cred(Cred_val),

    labeling([enum], [FS_struct_addr, FS_struct_val]),
    FS_struct_val #> 0,
    %query_fs_struct(FS_struct_val),



    get_time(End),
    Time_past is End - Current,
    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    log("profile.txt", "tasks", Tasks_addr, Base_addr),
    log("profile.txt", "mm_struct", MM2_addr, Base_addr),
    log("profile.txt", "comm", Comm_addr, Base_addr),
    log("profile.txt", "parent", Parent_addr, Base_addr),
    log("profile.txt", "group_leader", Group_leader_addr, Base_addr),
    log("profile.txt", "cred", Cred_addr, Base_addr),

    
    print_nl('tasks offset', Tasks_offset),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).

possible_string_pointer(Base_addr) :-
    /* Verify if this pointer points to a stirng */
    string_val(Str),
    Str_profile = [
        [Name_addr, Name_val]
    ],
    tuples_in(Str_profile, Str),
    Name_addr #= Base_addr.

query_string_pointer(Val) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "string_pointer"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_mount_struct(Base_addr, Offset) :-
    pointer(Ptr),
    Ptr_profile = ([
        [Mnt_devname_addr, Mnt_devname_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Mnt_devname_addr #= Base_addr + Offset,
    labeling([enum], [Mnt_devname_addr, Mnt_devname_val]),
    query_string_pointer(Mnt_devname_val).



possible_kernel_param(Base_addr) :-
    string_val(Str),
    Str_profile = [
        [Name_addr, Name_val]
    ],
    tuples_in(Str_profile, Str),
    Name_addr #= Base_addr.

possible_in_device(Base_addr) :-
    /* in_ifaddr remains the same across kernel versions 
       but we need this query to find ip_ptr in net_device struct
    */
    /*
        struct net_device *dev;
        int               refcnt;
        int               dead;
        struct in_ifaddr  *ifa_list;
    */
    pointer(Ptr),
    int(Int),
    Ptr_profile = ([
        [Dev_addr, Dev_val],
        [Ifa_list_addr, Ifa_list_val]
    ]),
    Int_profile = ([
        [Refcnt_addr, Refcnt_val],
        [Dead_addr, Dead_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Dead_addr #= Refcnt_addr + 4,
    chain([Dev_addr, Refcnt_addr, Dead_addr, Ifa_list_addr], #<),
    Dev_addr #= Base_addr,
    Ifa_list_addr #= Base_addr + 16,
    labeling([enum], [Ifa_list_addr, Ifa_list_val]),

    process_create(path('python'),
                    ['subquery.py', Ifa_list_val, "in_ifaddr"],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_in_ifaddr(Base_addr) :-
    /* in_ifaddr remains the same across kernel versions */
    pointer(Ptr),
    Ptr_profile = ([
        [Hash_addr, Hash_val],
        [Ifa_next_addr, Ifa_next_val],
        [Ifa_dev_addr, Ifa_dev_val],
        [Rcu_head_addr, Rcu_head_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([Hash_addr, Ifa_next_addr, Ifa_dev_addr, Rcu_head_addr], #<),
    Hash_addr #= Base_addr,
    Ifa_next_addr #= Hash_addr + 16,
    Ifa_dev_addr #= Ifa_next_addr + 8,
    Rcu_head_addr #= Ifa_dev_addr + 8,
    labeling([enum], [Hash_addr, Ifa_next_addr, Ifa_dev_addr, Rcu_head_addr]).



possible_mm_struct(Current_addr) :- 
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),

    Ptr_profile = [
        [Mmap_addr, Mmap_val],
        [Pgd_addr, Pgd_val]  
    ],
    Ulong_profile = [
        [Mmap_base_addr, Mmap_base_val],
        [Mmap_legacy_base_addr, Mmap_legacy_base_val],
        [Task_size_addr, Task_size_val],
        [High_vm_end_addr, High_vm_end_val],
        [Start_brk_addr, Start_brk_val],
        [Brk_addr, Brk_val],
        [Start_stack_addr, Start_stack_val],
        [ARG_start_addr, ARG_start_val]
    ],
    Mmap_addr #= Current_addr,


    Mmap_base_addr #> Mmap_addr,
    %FIXME mmap_base need more value constraint, because we removed mmap_legacy_base and highest_vm_end.
    Mmap_base_val #> 0x7f0000000000,
    High_vm_end_addr #= Mmap_base_addr + 24,
    
    chain([Mmap_base_addr, Mmap_legacy_base_addr, Task_size_addr, High_vm_end_addr, Pgd_addr], #<),


    Pgd_addr #> Task_size_addr,
    Pgd_addr #=< Task_size_addr + 40,
    %FIXME: This rule may not be true for other mm_struct.
    Task_size_val #>= 0x7ffffffff000,


    Start_brk_addr #> Pgd_addr,
    Start_stack_val #> 0x7ff000000000,
    ARG_start_addr #< Current_addr + 500,
    chain([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr], #<),
    ARG_start_addr #= Start_brk_addr + 24,
    Brk_val #< 0x7ff000000000,
    ARG_start_val #> 0x7ff000000000,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),


    labeling([enum], [Mmap_addr, Mmap_val, Mmap_base_addr, Pgd_addr, Pgd_val]),
    Mmap_val #> 0,
    Pgd_val #> 0,
    
    process_create(path('python'),
                    ['subquery.py', Mmap_val, "vm_area_struct", Current_addr],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    label([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr]),
    statistics(real_time, [End|_]),

    log("./profile/mm_struct", "mmap", Mmap_addr, Current_addr),
    log("./profile/mm_struct", "mmap_base", Mmap_base_addr, Current_addr),
    log("./profile/mm_struct", "pgd", Pgd_addr, Current_addr),
    log("./profile/mm_struct", "start_brk", Start_brk_addr, Current_addr),
    log("./profile/mm_struct", "brk", Brk_addr, Current_addr),
    log("./profile/mm_struct", "start_stack", Start_stack_addr, Current_addr),
    log("./profile/mm_struct", "arg_start", ARG_start_addr, Current_addr),
    log("./profile/mm_struct", "mm_struct", End, Start).


possible_vm_area_struct(Base_addr, MM_addr) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [VM_next_addr, VM_next_val],
        [Vm_mm_addr, Vm_mm_val],
        [VM_file_addr, VM_file_val]
    ],
    Ulong_profile = [
        [VM_start_addr, VM_start_val],
        [VM_end_addr, VM_end_val],
        [VM_flag_addr, VM_flag_val]
        /*VM_pgoff is 0, and we do not consider 0 as ulong*/
        %[VM_pgoff_addr, VM_pgoff_val]
    ],
    VM_start_addr #>= Base_addr,
    chain([VM_start_addr, VM_end_addr, VM_next_addr, Vm_mm_addr, VM_flag_addr, VM_file_addr], #<),
    VM_end_addr #= VM_start_addr + 8,
    VM_next_addr #= VM_end_addr + 8,
    VM_next_addr #< Base_addr + 32,

    Vm_mm_val #= MM_addr,
    VM_file_addr #< Base_addr + 180,
    VM_pgoff_addr #= VM_file_addr - 8,
    VM_flag_val #< 0x88888888,
    VM_file_addr #< Base_addr + 200,

    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    %FIXME: VM_flag may need value constraints.

    label([VM_next_addr, VM_next_val]),
    /* vm_file maybe zero! */
    labeling([enum], [VM_start_addr, VM_end_addr, Vm_mm_addr, Vm_mm_val, VM_flag_addr, VM_pgoff_addr, VM_file_addr, VM_file_val]),
    
    VM_file_val #> 0,
    
    process_create(path('python'),
                ['subquery.py', VM_file_val, "vm_file"],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    statistics(real_time, [End|_]),
    

    log("./profile/vm_area_struct", "vm_start", VM_start_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_end", VM_end_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_next", VM_next_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_mm", Vm_mm_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_flag", VM_flag_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_pgoff", VM_pgoff_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_file", VM_file_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_area_struct", End, Start).

check_vm_area_struct(Base_addr, Level) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "vm_area_struct", Level],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vm_file(Base_addr) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [Vfs_mount_addr, Vfs_mount_val],
        [Dentry_addr, Dentry_val],
        [F_op_addr, F_op_val]
    ],
    tuples_in(Ptr_profile, Ptr),
    Vfs_mount_addr #> Base_addr,
    Dentry_addr #= Vfs_mount_addr + 8,
    Dentry_addr #< Base_addr + 40,
    Vfs_mount_val #> 0,
    Dentry_val #> 0,
    F_op_addr #= Base_addr + 40, 
    F_op_val #> 0,
    chain([Vfs_mount_addr, Dentry_addr, F_op_addr], #<),
    labeling([enum], [Vfs_mount_val, Dentry_val, F_op_addr, F_op_val]),


    process_create(path('python'),
                    ['subquery.py', Vfs_mount_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),
/*
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/
    query_file_operation(F_op_val),
    statistics(real_time, [End|_]),

    log("./profile/file", "f_path", Vfs_mount_addr, Base_addr),
    log("./profile/file", "f_op", F_op_addr, Base_addr),
    log("./profile/file", "file", End, Start).



query_file_operation(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result).

possible_name_pointer(Val, Name_offset) :-
    /* The value at val+name_offset is a string pointer */
    current_predicate(pointer/1),
    pointer(Ptr),
    Ptr_profile = ([
        [Name_addr, Name_val]
    ]),
    Name_addr #= Val + Name_offset,
    tuples_in(Ptr_profile, Ptr),
    labeling([enum], [Name_addr, Name_val]),
    query_string_pointer(Name_val).

possible_vfs_mount(Base_addr) :-
    pointer(Ptr),
    int(Int),
    Ptr_profile = [
        [Dentry_addr, Dentry_val],
        [Mnt_sb_addr, Mnt_sb_val]
    ],
    Int_profile = [
        [Mnt_flags_addr, Mnt_flags_val]
    ],
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Dentry_addr #= Base_addr,
    Dentry_val #> 0,
    Mnt_flags_addr #= Dentry_addr + 16,
    Mnt_flags_val #>= 0,
    Mnt_sb_val #> 0,
    chain([Dentry_addr, Mnt_sb_addr, Mnt_flags_addr], #<),
    label([Dentry_addr, Dentry_val, Mnt_flags_addr, Mnt_flags_val]).
 
possible_dentry(Base_addr) :-
    /*
        struct dentry *d_parent;
        struct qstr d_name contains char *name; it's a name pointer
        struct inode *d_inode;
        unsigned char d_iname[LEN];
        const struct dentry_operations *d_op;
        struct list_head d_child;
        struct list_head d_subdirs;
        union {
	        struct hlist_node d_alias;
	        struct rcu_head d_rcu;
        } d_u;
    */
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    string_val(Str),
    Ptr_profile = [
        [Dparent_addr, Dparent_val],
        [Dname_addr, Dname_val],
        [D_inode_addr, D_inode_val],
        [D_op_addr, D_op_val],
        [Dchild_addr, Dchild_val],
        [D_subdirs_addr, D_subdirs_val]
    ],
    Str_profile = [
        [D_iname_addr, D_iname_val]
    ],
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    Dparent_addr #> Base_addr,
    chain([Dparent_addr, Dname_addr, D_inode_addr, D_iname_addr, 
            D_op_addr, Dchild_addr, D_subdirs_addr], #<),
    D_subdirs_addr #= Dchild_addr + 16,
    D_subdirs_addr #< Base_addr + 200,
    Dparent_val #> 0,
    labeling([enum], [Dname_addr, Dname_val]),
    query_string_pointer(Dname_val),
    labeling([enum], [D_iname_addr, D_iname_val]),
    D_iname_offset #= D_iname_addr - Base_addr,
    Dname_offset #= Dname_addr - Base_addr,
    labeling([enum], [Dparent_addr, Dparent_val]),
    Parent_dname #= Dparent_val + Dname_offset,
    process_create(path('python'),
                    ['subquery.py', Parent_dname, "name_pointer", Dname_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    labeling([enum], [D_inode_addr, D_inode_val]),
    query_inode(D_inode_val),
    /* d_op might be zero! */
    labeling([enum], [D_op_addr, D_op_val]),
    %query_file_operation(D_op_val),

    labeling([enum], [Dchild_addr, Dchild_val]),
    Dchild_offset #= Dchild_addr - Base_addr,
    Dchild_init #= Dchild_val - Dchild_offset,
    query_name_pointer(Dchild_init, Dname_offset),

    /* This can be hardcoded as d_child_addr + 16 */
    labeling([enum], [D_subdirs_addr, D_subdirs_val]),
    Dsubdirs_offset #= D_subdirs_addr - Base_addr,
    D_subdirs_init #= D_subdirs_val - Dsubdirs_offset,
    query_name_pointer(D_subdirs_init, Dname_offset),

    _Name_addr #= Dname_addr - 8,

    statistics(real_time, [End|_]),

    log("./profile/dentry", "parent", Dparent_addr, Base_addr),
    log("./profile/dentry", "d_name", _Name_addr, Base_addr),
    log("./profile/dentry", "d_inode", D_inode_addr, Base_addr),
    log("./profile/dentry", "d_iname", D_iname_addr, Base_addr),
    log("./profile/dentry", "dchild", Dchild_addr, Base_addr),
    log("./profile/dentry", "d_subdirs", D_subdirs_addr, Base_addr),
    log("./profile/dentry", "dentry", End, Start).

query_inode(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_inode(Base_addr) :-
    /*
        struct inode_operations *i_op;
        struct super_block      *i_sb;
        struct address_space    *i_mapping;
    */
    statistics(real_time, [Start|_]),

    pointer(Ptr),
    long(Ulg),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [I_op_addr, I_op_val],
        [I_sb_addr, I_sb_val],
        [I_mapping_addr, I_mapping_val],
        [I_fop_addr, I_fop_val]
    ]),
    Ulong_profile = ([
        /* i_mode is actually not long type. */
        [I_mode_addr, I_mode_val],
        [I_ino_addr, I_ino_val],
        [I_size_addr, I_size_val],
        [I_atime_addr, I_atime_val],
        [_I_atime_addr, _I_atime_val],
        [I_mtime_addr, I_mtime_val],
        [I_ctime_addr, I_ctime_val],
        [_I_ctime_addr, _I_ctime_val]
    ]),
    Int_profile = ([
        [I_uid_addr, I_uid_val],
        [I_gid_addr, I_gid_val],
        [_atomic_t_addr, _atomic_t_val],
        [_atomic_t2_addr, _atomic_t2_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    tuples_in(Int_profile, Int),

    chain([I_mode_addr, I_uid_addr, I_gid_addr, I_op_addr, I_sb_addr, I_mapping_addr, I_ino_addr,
           I_size_addr, I_atime_addr, _I_atime_addr, I_mtime_addr, I_ctime_addr, _I_ctime_addr, 
           _atomic_t_addr, _atomic_t2_addr, I_fop_addr], #<),

    I_mode_addr #= Base_addr,
    I_mode_val #> 0,
    I_gid_addr #= I_mode_addr + 8,
    %I_op_addr #= Base_addr + 32,
    I_op_addr #=< Base_addr + 32,
    I_op_val #> 0,
    labeling([enum], [I_op_addr, I_op_val]),
    query_inode_operations(I_op_val),

    I_sb_addr #= I_op_addr + 8,
    I_mapping_addr #= I_sb_addr + 8,
    I_atime_addr #= I_size_addr + 8,
    I_mtime_addr #= I_atime_addr + 16,
    I_ctime_addr #= I_mtime_addr + 16,
    _I_ctime_addr #= I_ctime_addr + 8,
    I_size_val #> 0,
    I_atime_val #> 4096,
    I_mtime_val #> 4096,
    I_ctime_val #> 4096,
    I_fop_addr #< Base_addr + 400,
    labeling([enum], [I_sb_addr, I_mapping_addr, I_atime_addr, I_mtime_addr, I_ctime_addr]),
    I_fop_addr #= _atomic_t_addr + 8,
    labeling([enum], [I_fop_addr, I_fop_val]),
    I_fop_val #> 0,
    query_inode_operations(I_fop_val),

    statistics(real_time, [End|_]),
    log("./profile/inode", "I_mode_addr", I_mode_addr, Base_addr),
    log("./profile/inode", "I_uid_addr", I_uid_addr, Base_addr),
    log("./profile/inode", "I_gid_addr", I_gid_addr, Base_addr),
    log("./profile/inode", "I_op_addr", I_op_addr, Base_addr),
    log("./profile/inode", "I_sb_addr", I_sb_addr, Base_addr),
    log("./profile/inode", "I_mapping_addr", I_mapping_addr, Base_addr),
    log("./profile/inode", "I_size_addr", I_size_addr, Base_addr),
    log("./profile/inode", "I_atime_addr", I_atime_addr, Base_addr),
    log("./profile/inode", "I_mtime_addr", I_mtime_addr, Base_addr),
    log("./profile/inode", "I_ctime_addr", I_ctime_addr, Base_addr),
    log("./profile/inode", "I_fop_addr", I_fop_addr, Base_addr),
    log("./profile/inode", "inode", End, Start).


query_inode_operations(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_name_pointer(Base_addr, Offset) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "name_pointer", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_inode_operations(Base_addr) :-
    /* a bunch of function pointers. */
    pointer(Ptr),
    Ptr_profile = ([
        [_L1_addr, _L1_val],
        [_L2_addr, _L2_val],
        [_L3_addr, _L3_val],
        [_L4_addr, _L4_val],
        [_L5_addr, _L5_val],
        [_L6_addr, _L6_val],
        [_L7_addr, _L7_val],
        [_L8_addr, _L8_val],
        [_L9_addr, _L9_val],
        [_L10_addr, _L10_val],
        [_L11_addr, _L11_val],
        [_L12_addr, _L12_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([_L1_addr, _L2_addr, _L3_addr, _L4_addr, _L5_addr, _L6_addr, _L7_addr,
           _L8_addr, _L9_addr, _L10_addr, _L11_addr, _L12_addr], #<),
    _L1_addr #= Base_addr,
    _L12_addr #= Base_addr + 88.




possible_nothing() :-

    %log("profile.txt", "dentry addr", Base_addr, 0),
    Dparent_addr #> Base_addr,
    Dname_addr #> 0,
    Dname_addr #< Base_addr + 200,
    %Dname_addr #= Base_addr + 160,
    %FIXME This child rule is not applicable for old kernel version. 
    %chain([Dparent_addr, Dname_addr, Dchild_addr], #<),
    %Dchild_addr #< Base_addr + 200,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    labeling([enum], [Dparent_addr, Dparent_val, Dname_addr, Dchild_addr, Dchild_val]),
    Dname_offset #= Dname_addr - Base_addr,
    integer(Dname_offset),
    Dparent_val #> 0,
    
    %FIXME d_parent may not be initialized
    /*process_create(path('python'),
                ['subquery.py', Dparent_val, "d_entry", Dname_offset],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/

    %FIXME: may need to find another way for all list_head. 
    /*Dchild_offset #= Dchild_addr - Base_addr,
    integer(Dchild_offset),
    Dchild_base #= Dchild_val - Dchild_offset,
    integer(Dchild_base),
    Dchild_base #> 0,
    process_create(path('python'),
                ['subquery.py', Dchild_base, "d_entry", Dname_offset],
                [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    statistics(real_time, [End|_]).
/*
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    log("profile.txt", "d_parent", Dparent_addr, Base_addr),
    log("profile.txt", "d_child", Dchild_addr, Base_addr),
    log("profile.txt", "dentry time", End, Start).
*/
possible_d_entry(Base_addr, Dname_offset) :-
    current_predicate(string_val/1),
    string_val(Str),
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    Dname_addr #= Base_addr + Dname_offset,
    tuples_in(Str_profile, Str),
    label([Dname_addr]).

possible_list_head(Tasks_val, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_val, Tasks_addr]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],
    Comm_addr #= Tasks_val - Tasks_offset + Comm_offset,
    Tasks_addr #\= Tasks_val,
    tuples_in(Str_profile, Str),
    tuples_in(Ptr_profile, Ptr),
    label([Comm_addr]).

possible_ts(Base_addr, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_addr, Tasks_val]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],

    Comm_addr #= Base_addr + Comm_offset,
    Tasks_addr #= Base_addr + Tasks_offset,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),

    label([Tasks_val]),
    
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "list_head", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_cred(Base_addr) :-
    statistics(real_time, [Start|_]),

    int(Int),
    long(Ulg),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3],
        [Addr4, Val4],
        [Addr5, Val5],
        [Addr6, Val6],
        [Addr7, Val7],
        [Addr8, Val8],
        [Addr9, Val9]
    ],
    %FIXME For now, this rule is hard-coded because we do not consider 0 as a unsign long number. 
    %So that for cred whos val10 is 0, this rule does not apply.
    /*Ulong_profile = [
        [Addr10, Val10],
        [Addr11, Val11]
    ],*/
    Addr1 #> Base_addr,
    %chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9, Addr10, Addr11], #<),
    chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9], #<),
    Addr1 #= Base_addr + 4,
    Addr9 #= Addr1 + 32,
    %Addr11 #< Base_addr + 120,
    tuples_in(Int_profile, Int),
    %tuples_in(Ulong_profile, Ulg),
    statistics(real_time, [End|_]),
    labeling([enum], [Addr1, Addr2, Addr5, Addr6]),
    log("./profile/cred", "cred", End, Start),
    log('./profile/cred', "uid", Addr1, Base_addr),
    log('./profile/cred', "gid", Addr2, Base_addr),
    log('./profile/cred', "euid", Addr5, Base_addr),
    log('./profile/cred', "egid", Addr6, Base_addr).

possible_fs_struct(Base_addr) :-
    statistics(real_time, [Start|_]),
    int(Int),
    pointer(Ptr),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3]
    ],
    Ptr_profile = [
        [Root_addr, Root_val],
        [Root_dentry_addr, Root_dentry_val],
        [PWD_addr, PWD_val]
    ],
    Addr1 #>= Base_addr,
    Root_dentry_addr #= Root_addr + 8,
    chain([Addr1, Addr2, Addr3, Root_addr, Root_dentry_addr, PWD_addr], #<),
    PWD_addr #= Root_addr + 16,
    PWD_addr #< Base_addr + 50,
    tuples_in(Int_profile, Int),
    tuples_in(Ptr_profile, Ptr),
    Root_val #> 0,
    PWD_val #> 0,
    label([Root_addr, Root_val, Root_dentry_addr, Root_dentry_val]),
    /* some times the dentry fields are zero, use vfs_mount instead */
    process_create(path('python'),
                    ['subquery.py', Root_val, "vfs_mount"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    query_dentry(Root_dentry_val),

    label([PWD_addr, PWD_val]),
    process_create(path('python'),
                    ['subquery.py', PWD_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    statistics(real_time, [End|_]),
    log("./profile/fs_struct", "fs time", End, Start),
    log('./profile/fs_struct', "Root", Root_addr, Base_addr),
    log('./profile/fs_struct', "pwd", PWD_addr, Base_addr),
    log('./profile/fs_struct', "fs_struct", End, Start).

possible_mount(Base_addr) :-
    /* struct hlist_head mnt_hash;
       struct mount *mnt_parent; 
       struct vfsmount mnt;
       struct list_head mnt_mounts;
       struct list_head mnt_child;
       struct list_head mnt_instance;
       const char *mnt_devname;
       struct list_head mnt_list;
    */
    statistics(real_time, [Start|_]),
    %get_time(Current),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Mnt_hash_addr, Mnt_hash_val],
        [Mnt_parent_addr, Mnt_parent_val],
        [Vfsmount_addr, Vfsmount_val],
        [Mnt_child_addr, Mnt_child_val],
        [Mnt_devname_addr, Mnt_devname_val],
        [Mnt_list_addr, Mnt_list_val]
    ]),
    Int_profile = ([
        [Mnt_flags_addr, Mnt_flags_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    /* Order Invariants */
    chain([Mnt_hash_addr, Mnt_parent_addr, Vfsmount_addr, Mnt_flags_addr,
            Mnt_child_addr, Mnt_devname_addr, Mnt_list_addr], #<),
    Mnt_hash_addr #= Base_addr,
    /* mnt_hash_addr is a list_head */
    Mnt_parent_addr #> Base_addr + 8,
    Mnt_list_addr - Base_addr #< 200,
    labeling([enum], [Mnt_devname_addr, Mnt_devname_val]),
    query_string_pointer(Mnt_devname_val),
    Mnt_devname_offset #= Mnt_devname_addr - Base_addr,
    /* the offset from mnt_mounts to mnt_list remains the same, so it's safe to use fixed offsets. */
    Mnt_child_addr #= Mnt_devname_addr - 32,
    Mnt_list_addr #= Mnt_devname_addr + 8,
    Mnt_flags_addr #= Vfsmount_addr + 16,
    labeling([enum], [Mnt_child_addr, Mnt_list_addr, Vfsmount_addr, Vfsmount_val]),
    /* Seems unnecessary 
    Mnt_list_offset #= Mnt_list_addr - Base_addr,
    Mnt_list #= Mnt_list_val - Mnt_list_offset,
    Mnt_list #> 0,
    query_mount_struct(Mnt_list, Mnt_devname_offset),
    */
    Vfsmount_val #>= 0,
    /* Here we can infer layout of dentry structure 
       Maybe need to infer using another dentry, somehow it may not be initialized. 
    */
    Vfsmount_addr #> 0,
    %query_dentry(Vfsmount_addr),

    labeling([enum], [Mnt_parent_addr, Mnt_parent_val]),
    /* To verify another mount struct, only one-level query, so it does not direct call query_mount recursively */
    
    query_mount_struct(Mnt_parent_val, Mnt_devname_offset),
    

    %get_time(End),
    %Time_past is End - Current,
    statistics(real_time, [End|_]),
    log("./profile/mount", "mnt_hash", Mnt_hash_addr, Base_addr),
    log("./profile/mount", "mnt_parent", Mnt_parent_addr, Base_addr),
    log("./profile/mount", "mnt_child", Mnt_child_addr, Base_addr),
    log("./profile/mount", "mnt_devname", Mnt_devname_addr, Base_addr),
    log("./profile/mount", "mnt_list", Mnt_list_addr, Base_addr),
    log("./profile/mount", "mount", End, Start).


possible_neigh_hash_table(Base_addr) :-
    /* neighbour **hash_buckets */
    pointer(Ptr),
    Ptr_profile = ([
        [Hash_buckest_addr, Hash_buckets_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Hash_buckest_addr #= Base_addr,
    labeling([enum], [Hash_buckest_addr, Hash_buckets_val]),
    process_create(path('python'),
                    ['subquery.py', Hash_buckets_val, "hash_buckets"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_hash_buckets(Base_addr) :-
    /* hash_buckets is an array of neighbour pointer 
       note that not all element are non-zero
    */
    pointer(Ptr),
    Ptr_profile = ([
        [Neighbour_addr, Neighbour_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Neighbour_addr #< Base_addr + 32,
    Neighbour_val #> 0,
    labeling([enum], [Neighbour_addr, Neighbour_val]),
    process_create(path('python'),
                    ['subquery.py', Neighbour_val, "neighbour"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_neighbour(Base_addr) :-
    /* net_device *dev at offset 464 */
    pointer(Ptr),
    Ptr_profile = ([
        [Dev_addr, Dev_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Dev_addr #>= Base_addr + 360,
    Dev_addr #=< Base_addr + 376,
    labeling([enum], [Dev_addr, Dev_val]),
    process_create(path('python'),
                    ['subquery.py', Dev_val, "net_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).


possible_net_device(Base_addr) :- 
    /*
        char             name[NAMSIZ];
        struct list_head dev_list;
        unsigned char    addr_len;
        unsigned int     promiscuity;
        struct in_device *ip_ptr;
    */
    statistics(real_time, [Start|_]),

    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Dev_list_addr, Dev_list_val],
        [_atalk_ptr_addr, _atalk_ptr_val],
        [IP_ptr_addr, IP_ptr_val],
        [_dn_ptr_addr, _dn_ptr_val],
        [_ip6_ptr_addr, _ip6_ptr_val],
        [Dev_addr_addr, Dev_addr_val]
    ]),
    Str_profile = ([
        [Name_addr, Name_val],
        [Broad_cast_addr, Broad_cast_val]
    ]),
    Int_profile = ([
        [Promisc_addr, Promisc_val],
        [Addr_len_addr, Addr_len_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),
    /* Hard to determine offsets for addr_len and promisc */
    chain([Name_addr, Dev_list_addr, Addr_len_addr, Promisc_addr, 
           _atalk_ptr_addr, IP_ptr_addr, _dn_ptr_addr, _ip6_ptr_addr, Dev_addr_addr, Broad_cast_addr], #<),
    Name_addr #= Base_addr,
    Name_offset #= Name_addr - Base_addr,
    IP_ptr_addr #= _atalk_ptr_addr + 8,
    IP_ptr_addr #< Base_addr + 1000,
    _ip6_ptr_addr #= IP_ptr_addr + 16,


    /* dev_list offset can be hardcoded since it remains the same */
    Dev_list_addr #= Base_addr + 80,
    labeling([enum], [Name_addr, Dev_list_addr, Dev_list_val]),
    /* do not have a good constrain to narrow down ip_ptr, use its rough offset
       to reduce the search space. 
     */
    IP_ptr_addr #> Base_addr + 700,
    IP_ptr_val #> 0,
    labeling([enum], [IP_ptr_addr, IP_ptr_val]),
    query_in_device(IP_ptr_val),

    %labeling([enum], [Dev_addr_addr, Dev_addr_val]),
    %query_string_pointer(Dev_addr_val),

    statistics(real_time, [End|_]),

    log("./profile/net_device", "name", Name_addr, Base_addr),
    log("./profile/net_device", "ip_ptr", IP_ptr_addr, Base_addr),
    log("./profile/net_device", "dev_list", Dev_list_addr, Base_addr),
    log("./profile/net_device", "net_device", End, Start).

query_in_device(IP_ptr_val) :-
    process_create(path('python'),
                    ['subquery.py', IP_ptr_val, "in_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).


query_mount_struct(Val, Offset) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "mount_struct", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_dentry(Dentry_val) :-
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).
