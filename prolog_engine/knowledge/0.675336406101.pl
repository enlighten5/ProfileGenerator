:- use_module(library(clpfd)).
:- style_check(-singleton).
pointer([
		[0x10,0],
		[0x18,0],
		[0x20,0],
		[0x28,0],
		[0x38,0],
		[0x40,0],
		[0x48,0],
		[0x50,0],
		[0x58,0],
		[0x60,0],
		[0x68,0],
		[0x70,0],
		[0x78,0],
		[0x80,0],
		[0x88,0],
		[0xb8,0],
		[0xd8,0],
		[0xe0,0],
		[0xe8,0],
		[0xf0,0],
		[0xf8,0],
		[0x128,0],
		[0x140,0],
		[0x148,0],
		[0x150,0],
		[0x158,0],
		[0x180,0],
		[0x188,392234176],
		[0x190,0],
		[0x198,0],
		[0x1a0,0],
		[0x1a8,0],
		[0x1b0,392183264],
		[0x1b8,392183264],
		[0x1c8,1018707272],
		[0x1d0,0],
		[0x1e0,0],
		[0x1e8,392234176],
		[0x1f0,0],
		[0x1f8,0],
		[0x200,386792022],
		[0x220,0],
		[0x228,0],
		[0x230,0],
		[0x238,0],
		[0x240,0],
		[0x248,0],
		[0x250,0],
		[0x258,0],
		[0x260,0],
		[0x268,0],
		[0x270,0],
		[0x278,0],
		[0x280,1069547520],
		[0x298,0],
		[0x2a0,0],
		[0x2b0,0],
		[0x2c8,1069651776],
		[0x2d8,0],
		[0x2e0,1069584384],
		[0x2f0,0],
		[0x2f8,397148160],
		[0x308,0],
		[0x4a8,0],
		[0x4b0,0],
		[0x4b8,0],
		[0x760,0],
		[0x768,0],
		[0x780,0],
		[0x7c0,0],
		[0x7c8,0],
		[0x7d8,0],
		[0x7e8,0],
		[0x7f0,0],
		[0x7f8,0],
		[0x800,0],
		[0x808,0],
		[0x810,0],
		[0x818,0],
		[0x820,0],
		[0x828,0],
		[0x830,0],
		[0x838,0],
		[0x840,0],
		[0x848,0],
		[0x850,0],
		[0x858,0],
		[0x860,0],
		[0x868,0],
		[0x870,0],
		[0x878,0],
		[0x880,0],
		[0x888,0],
		[0x890,0],
		[0x898,0],
		[0x8a0,0],
		[0x8a8,0],
		[0x8b0,0],
		[0x8b8,0],
		[0x8c0,0],
		[0x8c8,0],
		[0x8d0,0],
		[0x8d8,0],
		[0x8e0,0],
		[0x8e8,0],
		[0x8f0,0],
		[0x8f8,0],
		[0x900,0],
		[0x908,0],
		[0x910,0],
		[0x918,0],
		[0x920,0],
		[0x928,0],
		[0x930,0],
		[0x938,0],
		[0x940,0],
		[0x948,0],
		[0x950,0],
		[0x958,0],
		[0x960,0],
		[0x968,0],
		[0x970,0],
		[0x978,0],
		[0x980,0],
		[0x988,0],
		[0x990,0],
		[0x998,0],
		[0x9a0,0],
		[0x9a8,0],
		[0x9b0,0],
		[0x9b8,0],
		[0x9c0,0],
		[0x9c8,0],
		[0x9d0,0],
		[0x9d8,0],
		[0x9e0,0],
		[0x9e8,0],
		[0x9f0,0],
		[0x9f8,0],
		[0xa00,0],
		[0xa08,0],
		[0xa10,0],
		[0xa18,0],
		[0xa20,0],
		[0xa28,0],
		[0xa30,0],
		[0xa38,0],
		[0xa40,0],
		[0xa48,0],
		[0xa50,0],
		[0xa58,0],
		[0xa60,0],
		[0xa68,0],
		[0xa70,0],
		[0xa78,0],
		[0xa80,0],
		[0xa88,0],
		[0xa90,0],
		[0xa98,0],
		[0xaa0,0],
		[0xaa8,0],
		[0xab0,0],
		[0xab8,0],
		[0xac0,0],
		[0xac8,0],
		[0xad0,0],
		[0xad8,0],
		[0xae0,0],
		[0xae8,0],
		[0xaf0,0],
		[0xaf8,0],
		[0xb00,0],
		[0xb08,0],
		[0xb10,0],
		[0xb18,0],
		[0xb20,0],
		[0xb28,0],
		[0xb30,0],
		[0xb38,0],
		[0xb40,0],
		[0xb48,0],
		[0xb50,0],
		[0xb58,0],
		[0xb60,0],
		[0xb68,0],
		[0xb70,0],
		[0xb78,0],
		[0xb80,0],
		[0xb88,0],
		[0xb90,0],
		[0xb98,0],
		[0xba0,0],
		[0xba8,0],
		[0xbb0,0],
		[0xbb8,0],
		[0xbc0,0],
		[0xbc8,0],
		[0xbd0,0],
		[0xbd8,0],
		[0xbe0,0],
		[0xbe8,0],
		[0xbf0,0],
		[0xbf8,0],
		[0xc00,0],
		[0xc08,0],
		[0xc10,0],
		[0xc18,0],
		[0xc20,0],
		[0xc28,0],
		[0xc30,0],
		[0xc38,0],
		[0xc40,0],
		[0xc48,0],
		[0xc50,0],
		[0xc58,0],
		[0xc60,0],
		[0xc68,0],
		[0xc70,0],
		[0xc78,0],
		[0xc80,0],
		[0xc88,0],
		[0xc90,0],
		[0xc98,0],
		[0xca0,0],
		[0xca8,0],
		[0xcb0,0],
		[0xcb8,0],
		[0xcc0,0],
		[0xcc8,0],
		[0xcd0,0],
		[0xcd8,0],
		[0xce0,0],
		[0xce8,0],
		[0xcf0,0],
		[0xcf8,0],
		[0xd00,0],
		[0xd08,0],
		[0xd10,0],
		[0xd18,0],
		[0xd20,0],
		[0xd28,0],
		[0xd30,0],
		[0xd38,0],
		[0xd40,0],
		[0xd48,0],
		[0xd50,0],
		[0xd58,0],
		[0xd60,0],
		[0xd68,0],
		[0xd70,0],
		[0xd78,0],
		[0xd80,0],
		[0xd88,0],
		[0xd90,0],
		[0xd98,0],
		[0xda0,0],
		[0xda8,0],
		[0xdb0,0],
		[0xdb8,0],
		[0xdc0,0],
		[0xdc8,0],
		[0xdd0,0],
		[0xdd8,0],
		[0xde0,0],
		[0xde8,0],
		[0xdf0,0],
		[0xdf8,0],
		[0xe00,0],
		[0xe08,0],
		[0xe10,0],
		[0xe18,0],
		[0xe20,0],
		[0xe28,0],
		[0xe30,0],
		[0xe38,0],
		[0xe40,0],
		[0xe48,0],
		[0xe50,0],
		[0xe58,0],
		[0xe60,0],
		[0xe68,0],
		[0xe70,0],
		[0xe78,0],
		[0xe80,0],
		[0xe88,0],
		[0xe90,0],
		[0xe98,0],
		[0xea0,0],
		[0xea8,0],
		[0xeb0,0],
		[0xeb8,0],
		[0xec0,0],
		[0xec8,0],
		[0xed0,0],
		[0xed8,0],
		[0xee0,0],
		[0xee8,0],
		[0xef0,0],
		[0xef8,0],
		[0xf00,0],
		[0xf08,0],
		[0xf10,0],
		[0xf18,0],
		[0xf20,0],
		[0xf28,0],
		[0xf30,0],
		[0xf38,0],
		[0xf40,0],
		[0xf48,0],
		[0xf50,0],
		[0xf58,0],
		[0xf60,0],
		[0xf68,0],
		[0xf70,0],
		[0xf78,0],
		[0xf80,0],
		[0xf88,0],
		[0xf90,0],
		[0xf98,0],
		[0xfa0,0],
		[0xfa8,0],
		[0xfb0,0],
		[0xfb8,0],
		[0xfc0,0],
		[0xfc8,0],
		[0xfd0,0],
		[0xfd8,0],
		[0xfe0,0],
		[0xfe8,0],
		[0xff0,0],
		[0xff8,0],
		[0, 0]
]).
unknown([
		[0x8,4995142085888704513],
		[0x90,10727861010053464064],
		[0xa0,10727642344678490112],
		[0xa8,10727861014348431359],
		[0xc0,4705625302607331328],
		[0xc8,9204047969672738716],
		[0x100,10704487136603668480],
		[0x118,10727642344678490112],
		[0x130,18428729675200069632],
		[0x210,18446744069414584336],
		[0x288,18446744069414584344],
		[0x328,17294103305076670291],
		[0x330,17294103305076662979],
		[0x338,17294103305076670291],
		[0x340,17294103305076670291],
		[0x348,17294079339159158437],
		[0x350,17294058057596196396],
		[0x358,17294058057596196396],
		[0x360,17294058057596202839],
		[0x368,17294095581920122150],
		[0x370,17294073253190498369],
		[0x378,17294095634265073465],
		[0x380,17294086258351466542],
		[0x388,17294076500185765448],
		[0x390,17294103305076670062],
		[0x398,17294103305076670291],
		[0x3a0,13835208898560158372],
		[0x3a8,17294103305076670291],
		[0x3b0,17294103305076670291],
		[0x3b8,17294103305076670291],
		[0x3c0,17294103305076670291],
		[0x3c8,17294103305076670291],
		[0x3d0,17294103305076670291],
		[0x3d8,17294103305076670291],
		[0x3e0,17294103305076670291],
		[0x3e8,17294103305076670291],
		[0x3f0,17294103305076670291],
		[0x3f8,17294103305076670291],
		[0x400,17294103305076670291],
		[0x408,17294103305076670291],
		[0x410,17294103305076670291],
		[0x418,17294103305076670291],
		[0x420,17294103305076670291],
		[0x428,11511200913578585177],
		[0x430,13835171515164852051],
		[0x438,17294103305076670291],
		[0x440,17294103305076670291],
		[0x448,17294103305076670291],
		[0x450,17294103305076670291],
		[0x458,17294103305076670291],
		[0x460,17294103305076670291],
		[0x468,17294103305076670291],
		[0x470,17294103305076670291],
		[0x478,17294103305076670291],
		[0x480,17294103305076670291],
		[0x488,17294103305076670291],
		[0x490,17294103305076670291],
		[0x498,17294103305076670291],
		[0x4a0,17294103305076670291],
		[0x4c0,17294103301050073088],
		[0x4c8,17294103305076670291],
		[0x4d0,17294103305076670291],
		[0x4d8,17294103305076670291],
		[0x4e0,17294103305076670291],
		[0x4e8,17294082392880895505],
		[0x4f0,17294082392880901198],
		[0x4f8,17294058018941490714],
		[0x500,17294082392880895496],
		[0x510,17294103305076670291],
		[0x518,17294103305076670291],
		[0x520,17294103305076670291],
		[0x528,17294103305076670291],
		[0x530,17294103305076670291],
		[0x538,17294103305076670291],
		[0x540,17294103305076670291],
		[0x548,17294103305076670291],
		[0x550,17294103305076670291],
		[0x558,17294103305076670291],
		[0x560,17294103305076670291],
		[0x568,17294103305076670291],
		[0x570,17294103305076670291],
		[0x578,17294103305076670291],
		[0x580,17294103305076670291],
		[0x588,17294103305076670291],
		[0x590,17294103305076670291],
		[0x598,17294103305076670291],
		[0x5a0,17294103305076670291],
		[0x5a8,17294103305076670291],
		[0x5b0,17294103305076670291],
		[0x5b8,17294103305076670291],
		[0x5c0,17294103305076670291],
		[0x5c8,17294103305076670291],
		[0x5d0,17294103305076670291],
		[0x5d8,17294103305076670291],
		[0x5e0,17294103305076670291],
		[0x5e8,17294103305076670291],
		[0x5f0,17294103305076670291],
		[0x5f8,17294103305076670291],
		[0x600,17294103305076670291],
		[0x608,17294103305076670291],
		[0x610,17294103305076670291],
		[0x618,17294103305076670291],
		[0x620,17294103305076670291],
		[0x628,17294103305076670291],
		[0x630,17294103305076670291],
		[0x638,17294103305076670291],
		[0x640,17294103305076670291],
		[0x648,17294103305076670291],
		[0x650,17294103305076670291],
		[0x658,17294103305076670291],
		[0x660,17294103305076670291],
		[0x668,17294103305076670291],
		[0x670,17294103305076670291],
		[0x678,17294103305076670291],
		[0x680,17294103305076670291],
		[0x688,17294103305076670291],
		[0x690,17294103305076670291],
		[0x698,17294103305076670291],
		[0x6a0,17294103305076670291],
		[0x6a8,17294103305076670291],
		[0x6b0,17294103305076670291],
		[0x6b8,17294103305076670291],
		[0x6c0,17294103305076670291],
		[0x6c8,17294103305076670291],
		[0x6d0,17294103305076670291],
		[0x6d8,17294103305076670291],
		[0x6e0,17294103305076670291],
		[0x6e8,17294103305076670291],
		[0x6f0,17294103305076670291],
		[0x6f8,17294103305076670291],
		[0x700,17294103305076670291],
		[0x708,17294103305076670291],
		[0x710,17294103305076670291],
		[0x718,17294103305076670291],
		[0x720,17294103305076670291],
		[0x730,11511200647558988664],
		[0x740,5827658158339260416],
		[0x748,5827746842177182733],
		[0x750,5827746842177196256],
		[0x758,2021360732118995168],
		[0x790,962257357897728],
		[0x798,54044295040073728],
		[0x7a8,6917546722910404638],
		[0x7b0,504403158266040825],
		[0x7b8,4503599627370496],
		[0, 0]
]).
long([
		[0x0,1443109011461],
		[0x30,4294967296],
		[0x98,4294967295],
		[0xb0,3238405341183],
		[0x108,73014444031],
		[0x110,2499670966272],
		[0x120,107374182399],
		[0x138,4294942523],
		[0x160,21474836480],
		[0x168,432],
		[0x170,1431127377],
		[0x178,1855425871873],
		[0x1c0,465999452380],
		[0x1d8,753],
		[0x208,582],
		[0x218,10525440],
		[0x290,12620544],
		[0x2a8,33280],
		[0x2b8,35661113458752],
		[0x2c0,4278225345],
		[0x2d0,545460846592],
		[0x2e8,17587891077120],
		[0x300,2147811379],
		[0x310,139637504999424],
		[0x318,1017479168],
		[0x320,1776],
		[0x508,4026597203],
		[0x728,1016],
		[0x738,10720657959],
		[0x770,17592191288064],
		[0x778,2048],
		[0x788,16441679872],
		[0x7a0,42949672980],
		[0x7d0,3221263520],
		[0x7e0,102623948767232],
		[0, 0]
]).
int([
		[0x0,5],
		[0x4,336],
		[0x8,1],
		[0x10,0],
		[0x14,0],
		[0x18,0],
		[0x1c,0],
		[0x20,0],
		[0x24,0],
		[0x28,0],
		[0x2c,0],
		[0x30,0],
		[0x34,1],
		[0x38,0],
		[0x3c,0],
		[0x40,0],
		[0x44,0],
		[0x48,0],
		[0x4c,0],
		[0x50,0],
		[0x54,0],
		[0x58,0],
		[0x5c,0],
		[0x60,0],
		[0x64,0],
		[0x68,0],
		[0x6c,0],
		[0x70,0],
		[0x74,0],
		[0x78,0],
		[0x7c,0],
		[0x80,0],
		[0x84,0],
		[0x88,0],
		[0x8c,0],
		[0x90,0],
		[0x9c,0],
		[0xa0,0],
		[0xb4,753],
		[0xb8,0],
		[0xbc,0],
		[0xc0,0],
		[0xd0,108],
		[0xd4,0],
		[0xd8,0],
		[0xdc,0],
		[0xe0,0],
		[0xe4,0],
		[0xe8,0],
		[0xec,0],
		[0xf0,0],
		[0xf4,0],
		[0xf8,0],
		[0xfc,0],
		[0x100,0],
		[0x10c,16],
		[0x110,0],
		[0x114,582],
		[0x118,0],
		[0x124,24],
		[0x128,0],
		[0x12c,0],
		[0x130,0],
		[0x13c,0],
		[0x140,0],
		[0x144,0],
		[0x148,0],
		[0x14c,0],
		[0x150,0],
		[0x154,0],
		[0x158,0],
		[0x15c,0],
		[0x160,0],
		[0x164,5],
		[0x168,432],
		[0x16c,0],
		[0x174,0],
		[0x178,1],
		[0x17c,432],
		[0x180,0],
		[0x184,0],
		[0x190,0],
		[0x194,0],
		[0x198,0],
		[0x19c,0],
		[0x1a0,0],
		[0x1a4,0],
		[0x1a8,0],
		[0x1ac,0],
		[0x1c4,108],
		[0x1d0,0],
		[0x1d4,0],
		[0x1d8,753],
		[0x1dc,0],
		[0x1e0,0],
		[0x1e4,0],
		[0x1f0,0],
		[0x1f4,0],
		[0x1f8,0],
		[0x1fc,0],
		[0x208,582],
		[0x20c,0],
		[0x210,16],
		[0x21c,0],
		[0x220,0],
		[0x224,0],
		[0x228,0],
		[0x22c,0],
		[0x230,0],
		[0x234,0],
		[0x238,0],
		[0x23c,0],
		[0x240,0],
		[0x244,0],
		[0x248,0],
		[0x24c,0],
		[0x250,0],
		[0x254,0],
		[0x258,0],
		[0x25c,0],
		[0x260,0],
		[0x264,0],
		[0x268,0],
		[0x26c,0],
		[0x270,0],
		[0x274,0],
		[0x278,0],
		[0x27c,0],
		[0x288,24],
		[0x294,0],
		[0x298,0],
		[0x29c,0],
		[0x2a0,0],
		[0x2a4,0],
		[0x2ac,0],
		[0x2b0,0],
		[0x2b4,0],
		[0x2b8,64],
		[0x2bc,8303],
		[0x2c4,0],
		[0x2d0,0],
		[0x2d4,127],
		[0x2d8,0],
		[0x2dc,0],
		[0x2e8,0],
		[0x2ec,4095],
		[0x2f0,0],
		[0x2f4,0],
		[0x304,0],
		[0x308,0],
		[0x30c,0],
		[0x314,32511],
		[0x31c,0],
		[0x320,1776],
		[0x324,0],
		[0x4a8,0],
		[0x4ac,0],
		[0x4b0,0],
		[0x4b4,0],
		[0x4b8,0],
		[0x4bc,0],
		[0x4c0,0],
		[0x50c,0],
		[0x728,1016],
		[0x72c,0],
		[0x730,888],
		[0x73c,2],
		[0x760,0],
		[0x764,0],
		[0x768,0],
		[0x76c,0],
		[0x774,4096],
		[0x778,2048],
		[0x77c,0],
		[0x780,0],
		[0x784,0],
		[0x78c,3],
		[0x790,0],
		[0x798,0],
		[0x7a0,20],
		[0x7a4,10],
		[0x7b8,0],
		[0x7c0,0],
		[0x7c4,0],
		[0x7c8,0],
		[0x7cc,0],
		[0x7d4,0],
		[0x7d8,0],
		[0x7dc,0],
		[0x7e4,23894],
		[0x7e8,0],
		[0x7ec,0],
		[0x7f0,0],
		[0x7f4,0],
		[0x7f8,0],
		[0x7fc,0],
		[0x800,0],
		[0x804,0],
		[0x808,0],
		[0x80c,0],
		[0x810,0],
		[0x814,0],
		[0x818,0],
		[0x81c,0],
		[0x820,0],
		[0x824,0],
		[0x828,0],
		[0x82c,0],
		[0x830,0],
		[0x834,0],
		[0x838,0],
		[0x83c,0],
		[0x840,0],
		[0x844,0],
		[0x848,0],
		[0x84c,0],
		[0x850,0],
		[0x854,0],
		[0x858,0],
		[0x85c,0],
		[0x860,0],
		[0x864,0],
		[0x868,0],
		[0x86c,0],
		[0x870,0],
		[0x874,0],
		[0x878,0],
		[0x87c,0],
		[0x880,0],
		[0x884,0],
		[0x888,0],
		[0x88c,0],
		[0x890,0],
		[0x894,0],
		[0x898,0],
		[0x89c,0],
		[0x8a0,0],
		[0x8a4,0],
		[0x8a8,0],
		[0x8ac,0],
		[0x8b0,0],
		[0x8b4,0],
		[0x8b8,0],
		[0x8bc,0],
		[0x8c0,0],
		[0x8c4,0],
		[0x8c8,0],
		[0x8cc,0],
		[0x8d0,0],
		[0x8d4,0],
		[0x8d8,0],
		[0x8dc,0],
		[0x8e0,0],
		[0x8e4,0],
		[0x8e8,0],
		[0x8ec,0],
		[0x8f0,0],
		[0x8f4,0],
		[0x8f8,0],
		[0x8fc,0],
		[0x900,0],
		[0x904,0],
		[0x908,0],
		[0x90c,0],
		[0x910,0],
		[0x914,0],
		[0x918,0],
		[0x91c,0],
		[0x920,0],
		[0x924,0],
		[0x928,0],
		[0x92c,0],
		[0x930,0],
		[0x934,0],
		[0x938,0],
		[0x93c,0],
		[0x940,0],
		[0x944,0],
		[0x948,0],
		[0x94c,0],
		[0x950,0],
		[0x954,0],
		[0x958,0],
		[0x95c,0],
		[0x960,0],
		[0x964,0],
		[0x968,0],
		[0x96c,0],
		[0x970,0],
		[0x974,0],
		[0x978,0],
		[0x97c,0],
		[0x980,0],
		[0x984,0],
		[0x988,0],
		[0x98c,0],
		[0x990,0],
		[0x994,0],
		[0x998,0],
		[0x99c,0],
		[0x9a0,0],
		[0x9a4,0],
		[0x9a8,0],
		[0x9ac,0],
		[0x9b0,0],
		[0x9b4,0],
		[0x9b8,0],
		[0x9bc,0],
		[0x9c0,0],
		[0x9c4,0],
		[0x9c8,0],
		[0x9cc,0],
		[0x9d0,0],
		[0x9d4,0],
		[0x9d8,0],
		[0x9dc,0],
		[0x9e0,0],
		[0x9e4,0],
		[0x9e8,0],
		[0x9ec,0],
		[0x9f0,0],
		[0x9f4,0],
		[0x9f8,0],
		[0x9fc,0],
		[0xa00,0],
		[0xa04,0],
		[0xa08,0],
		[0xa0c,0],
		[0xa10,0],
		[0xa14,0],
		[0xa18,0],
		[0xa1c,0],
		[0xa20,0],
		[0xa24,0],
		[0xa28,0],
		[0xa2c,0],
		[0xa30,0],
		[0xa34,0],
		[0xa38,0],
		[0xa3c,0],
		[0xa40,0],
		[0xa44,0],
		[0xa48,0],
		[0xa4c,0],
		[0xa50,0],
		[0xa54,0],
		[0xa58,0],
		[0xa5c,0],
		[0xa60,0],
		[0xa64,0],
		[0xa68,0],
		[0xa6c,0],
		[0xa70,0],
		[0xa74,0],
		[0xa78,0],
		[0xa7c,0],
		[0xa80,0],
		[0xa84,0],
		[0xa88,0],
		[0xa8c,0],
		[0xa90,0],
		[0xa94,0],
		[0xa98,0],
		[0xa9c,0],
		[0xaa0,0],
		[0xaa4,0],
		[0xaa8,0],
		[0xaac,0],
		[0xab0,0],
		[0xab4,0],
		[0xab8,0],
		[0xabc,0],
		[0xac0,0],
		[0xac4,0],
		[0xac8,0],
		[0xacc,0],
		[0xad0,0],
		[0xad4,0],
		[0xad8,0],
		[0xadc,0],
		[0xae0,0],
		[0xae4,0],
		[0xae8,0],
		[0xaec,0],
		[0xaf0,0],
		[0xaf4,0],
		[0xaf8,0],
		[0xafc,0],
		[0xb00,0],
		[0xb04,0],
		[0xb08,0],
		[0xb0c,0],
		[0xb10,0],
		[0xb14,0],
		[0xb18,0],
		[0xb1c,0],
		[0xb20,0],
		[0xb24,0],
		[0xb28,0],
		[0xb2c,0],
		[0xb30,0],
		[0xb34,0],
		[0xb38,0],
		[0xb3c,0],
		[0xb40,0],
		[0xb44,0],
		[0xb48,0],
		[0xb4c,0],
		[0xb50,0],
		[0xb54,0],
		[0xb58,0],
		[0xb5c,0],
		[0xb60,0],
		[0xb64,0],
		[0xb68,0],
		[0xb6c,0],
		[0xb70,0],
		[0xb74,0],
		[0xb78,0],
		[0xb7c,0],
		[0xb80,0],
		[0xb84,0],
		[0xb88,0],
		[0xb8c,0],
		[0xb90,0],
		[0xb94,0],
		[0xb98,0],
		[0xb9c,0],
		[0xba0,0],
		[0xba4,0],
		[0xba8,0],
		[0xbac,0],
		[0xbb0,0],
		[0xbb4,0],
		[0xbb8,0],
		[0xbbc,0],
		[0xbc0,0],
		[0xbc4,0],
		[0xbc8,0],
		[0xbcc,0],
		[0xbd0,0],
		[0xbd4,0],
		[0xbd8,0],
		[0xbdc,0],
		[0xbe0,0],
		[0xbe4,0],
		[0xbe8,0],
		[0xbec,0],
		[0xbf0,0],
		[0xbf4,0],
		[0xbf8,0],
		[0xbfc,0],
		[0xc00,0],
		[0xc04,0],
		[0xc08,0],
		[0xc0c,0],
		[0xc10,0],
		[0xc14,0],
		[0xc18,0],
		[0xc1c,0],
		[0xc20,0],
		[0xc24,0],
		[0xc28,0],
		[0xc2c,0],
		[0xc30,0],
		[0xc34,0],
		[0xc38,0],
		[0xc3c,0],
		[0xc40,0],
		[0xc44,0],
		[0xc48,0],
		[0xc4c,0],
		[0xc50,0],
		[0xc54,0],
		[0xc58,0],
		[0xc5c,0],
		[0xc60,0],
		[0xc64,0],
		[0xc68,0],
		[0xc6c,0],
		[0xc70,0],
		[0xc74,0],
		[0xc78,0],
		[0xc7c,0],
		[0xc80,0],
		[0xc84,0],
		[0xc88,0],
		[0xc8c,0],
		[0xc90,0],
		[0xc94,0],
		[0xc98,0],
		[0xc9c,0],
		[0xca0,0],
		[0xca4,0],
		[0xca8,0],
		[0xcac,0],
		[0xcb0,0],
		[0xcb4,0],
		[0xcb8,0],
		[0xcbc,0],
		[0xcc0,0],
		[0xcc4,0],
		[0xcc8,0],
		[0xccc,0],
		[0xcd0,0],
		[0xcd4,0],
		[0xcd8,0],
		[0xcdc,0],
		[0xce0,0],
		[0xce4,0],
		[0xce8,0],
		[0xcec,0],
		[0xcf0,0],
		[0xcf4,0],
		[0xcf8,0],
		[0xcfc,0],
		[0xd00,0],
		[0xd04,0],
		[0xd08,0],
		[0xd0c,0],
		[0xd10,0],
		[0xd14,0],
		[0xd18,0],
		[0xd1c,0],
		[0xd20,0],
		[0xd24,0],
		[0xd28,0],
		[0xd2c,0],
		[0xd30,0],
		[0xd34,0],
		[0xd38,0],
		[0xd3c,0],
		[0xd40,0],
		[0xd44,0],
		[0xd48,0],
		[0xd4c,0],
		[0xd50,0],
		[0xd54,0],
		[0xd58,0],
		[0xd5c,0],
		[0xd60,0],
		[0xd64,0],
		[0xd68,0],
		[0xd6c,0],
		[0xd70,0],
		[0xd74,0],
		[0xd78,0],
		[0xd7c,0],
		[0xd80,0],
		[0xd84,0],
		[0xd88,0],
		[0xd8c,0],
		[0xd90,0],
		[0xd94,0],
		[0xd98,0],
		[0xd9c,0],
		[0xda0,0],
		[0xda4,0],
		[0xda8,0],
		[0xdac,0],
		[0xdb0,0],
		[0xdb4,0],
		[0xdb8,0],
		[0xdbc,0],
		[0xdc0,0],
		[0xdc4,0],
		[0xdc8,0],
		[0xdcc,0],
		[0xdd0,0],
		[0xdd4,0],
		[0xdd8,0],
		[0xddc,0],
		[0xde0,0],
		[0xde4,0],
		[0xde8,0],
		[0xdec,0],
		[0xdf0,0],
		[0xdf4,0],
		[0xdf8,0],
		[0xdfc,0],
		[0xe00,0],
		[0xe04,0],
		[0xe08,0],
		[0xe0c,0],
		[0xe10,0],
		[0xe14,0],
		[0xe18,0],
		[0xe1c,0],
		[0xe20,0],
		[0xe24,0],
		[0xe28,0],
		[0xe2c,0],
		[0xe30,0],
		[0xe34,0],
		[0xe38,0],
		[0xe3c,0],
		[0xe40,0],
		[0xe44,0],
		[0xe48,0],
		[0xe4c,0],
		[0xe50,0],
		[0xe54,0],
		[0xe58,0],
		[0xe5c,0],
		[0xe60,0],
		[0xe64,0],
		[0xe68,0],
		[0xe6c,0],
		[0xe70,0],
		[0xe74,0],
		[0xe78,0],
		[0xe7c,0],
		[0xe80,0],
		[0xe84,0],
		[0xe88,0],
		[0xe8c,0],
		[0xe90,0],
		[0xe94,0],
		[0xe98,0],
		[0xe9c,0],
		[0xea0,0],
		[0xea4,0],
		[0xea8,0],
		[0xeac,0],
		[0xeb0,0],
		[0xeb4,0],
		[0xeb8,0],
		[0xebc,0],
		[0xec0,0],
		[0xec4,0],
		[0xec8,0],
		[0xecc,0],
		[0xed0,0],
		[0xed4,0],
		[0xed8,0],
		[0xedc,0],
		[0xee0,0],
		[0xee4,0],
		[0xee8,0],
		[0xeec,0],
		[0xef0,0],
		[0xef4,0],
		[0xef8,0],
		[0xefc,0],
		[0xf00,0],
		[0xf04,0],
		[0xf08,0],
		[0xf0c,0],
		[0xf10,0],
		[0xf14,0],
		[0xf18,0],
		[0xf1c,0],
		[0xf20,0],
		[0xf24,0],
		[0xf28,0],
		[0xf2c,0],
		[0xf30,0],
		[0xf34,0],
		[0xf38,0],
		[0xf3c,0],
		[0xf40,0],
		[0xf44,0],
		[0xf48,0],
		[0xf4c,0],
		[0xf50,0],
		[0xf54,0],
		[0xf58,0],
		[0xf5c,0],
		[0xf60,0],
		[0xf64,0],
		[0xf68,0],
		[0xf6c,0],
		[0xf70,0],
		[0xf74,0],
		[0xf78,0],
		[0xf7c,0],
		[0xf80,0],
		[0xf84,0],
		[0xf88,0],
		[0xf8c,0],
		[0xf90,0],
		[0xf94,0],
		[0xf98,0],
		[0xf9c,0],
		[0xfa0,0],
		[0xfa4,0],
		[0xfa8,0],
		[0xfac,0],
		[0xfb0,0],
		[0xfb4,0],
		[0xfb8,0],
		[0xfbc,0],
		[0xfc0,0],
		[0xfc4,0],
		[0xfc8,0],
		[0xfcc,0],
		[0xfd0,0],
		[0xfd4,0],
		[0xfd8,0],
		[0xfdc,0],
		[0xfe0,0],
		[0xfe4,0],
		[0xfe8,0],
		[0xfec,0],
		[0xff0,0],
		[0xff4,0],
		[0xff8,0],
		[0xffc,0],
		[0, 0]
]).
string_val([
		[0xd0,108],
		[0x170,1431127377],
		[0, 0]
]).
/* This file contains recursive predicates */
:- use_module(library(clpfd)).
:- use_module(reif).
:- style_check(-singleton).

isTrue([X, Y]):-
    X == 49.

isTrue([X|Tail]):-
    isTrue(Tail).

log(File_name, Name, Addr, Base):-
    Offset #= Addr - Base,
    open(File_name, append, Stream),
    write(Stream, Name),
    write(Stream, ':'),
    write(Stream, Offset),
    nl(Stream),
    close(Stream).

possible_string_pointer(Base_addr) :-
    /* Verify if this pointer points to a stirng */
    string_val(Str),
    Str_profile = [
        [Name_addr, Name_val]
    ],
    tuples_in(Str_profile, Str),
    Name_addr #= Base_addr.

query_string_pointer(Val) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "string_pointer"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_mount_struct(Base_addr, Offset) :-
    pointer(Ptr),
    Ptr_profile = ([
        [Mnt_devname_addr, Mnt_devname_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Mnt_devname_addr #= Base_addr + Offset,
    labeling([enum], [Mnt_devname_addr, Mnt_devname_val]),
    query_string_pointer(Mnt_devname_val).

possible_kernel_param(Base_addr) :-
    string_val(Str),
    Str_profile = [
        [Name_addr, Name_val]
    ],
    tuples_in(Str_profile, Str),
    Name_addr #= Base_addr.

possible_in_device(Base_addr) :-
    /* in_ifaddr remains the same across kernel versions 
       but we need this query to find ip_ptr in net_device struct
    */
    /*
        struct net_device *dev;
        int               refcnt;
        int               dead;
        struct in_ifaddr  *ifa_list;
    */
    pointer(Ptr),
    int(Int),
    log("./profile/debug", "in_device", Ifa_list_val, 0),

    Ptr_profile = ([
        [Dev_addr, Dev_val],
        [Ifa_list_addr, Ifa_list_val]
    ]),
    Int_profile = ([
        [Refcnt_addr, Refcnt_val],
        [Dead_addr, Dead_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Dead_addr #= Refcnt_addr + 4,
    chain([Dev_addr, Refcnt_addr, Dead_addr, Ifa_list_addr], #<),

    Dev_addr #= Base_addr,
    Ifa_list_addr #= Base_addr + 16,
    labeling([enum], [Ifa_list_addr, Ifa_list_val]),

    process_create(path('python'),
                    ['subquery.py', Ifa_list_val, "in_ifaddr"],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_in_ifaddr(Base_addr) :-
    /* in_ifaddr remains the same across kernel versions */
    pointer(Ptr),
    Ptr_profile = ([
        [Hash_addr, Hash_val],
        [Ifa_next_addr, Ifa_next_val],
        [Ifa_dev_addr, Ifa_dev_val],
        [Rcu_head_addr, Rcu_head_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([Hash_addr, Ifa_next_addr, Ifa_dev_addr, Rcu_head_addr], #<),
    Hash_addr #= Base_addr,
    Ifa_next_addr #= Hash_addr + 16,
    Ifa_dev_addr #= Ifa_next_addr + 8,
    Rcu_head_addr #= Ifa_dev_addr + 8,
    labeling([enum], [Hash_addr, Ifa_next_addr, Ifa_dev_addr, Rcu_head_addr]).

possible_mm_struct(Current_addr) :- 
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),

    Ptr_profile = [
        [Mmap_addr, Mmap_val],
        [Pgd_addr, Pgd_val]  
    ],
    Ulong_profile = [
        [Mmap_base_addr, Mmap_base_val],
        [Task_size_addr, Task_size_val],
        [Start_brk_addr, Start_brk_val],
        [Brk_addr, Brk_val],
        [Start_stack_addr, Start_stack_val],
        [ARG_start_addr, ARG_start_val]
    ],
    Mmap_addr #= Current_addr,
    Mmap_base_val #> 0x7f0000000000,
    chain([Mmap_addr, Mmap_base_addr, Task_size_addr, Pgd_addr], #<),
    Pgd_addr #> Task_size_addr,
    Pgd_addr #=< Task_size_addr + 40,
    %FIXME: This rule may not be true for other mm_struct.
    Task_size_val #>= 0x7ffffffff000,

    Start_brk_addr #> Pgd_addr,
    Start_stack_val #> 0x7ff000000000,
    ARG_start_addr #< Current_addr + 500,
    chain([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr], #<),
    ARG_start_addr #= Start_brk_addr + 24,
    Brk_val #< 0x7ff000000000,
    ARG_start_val #> 0x7ff000000000,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),

    Mmap_val #> 0,
    Pgd_val #> 0,
    labeling([enum], [Mmap_addr, Mmap_val, Mmap_base_addr, Pgd_addr, Pgd_val]),
    
    process_create(path('python'),
                    ['subquery.py', Mmap_val, "vm_area_struct", Current_addr],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    label([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr]),
    statistics(real_time, [End|_]),

    log("./profile/mm_struct", "mmap", Mmap_addr, Current_addr),
    log("./profile/mm_struct", "mmap_base", Mmap_base_addr, Current_addr),
    log("./profile/mm_struct", "pgd", Pgd_addr, Current_addr),
    log("./profile/mm_struct", "start_brk", Start_brk_addr, Current_addr),
    log("./profile/mm_struct", "brk", Brk_addr, Current_addr),
    log("./profile/mm_struct", "start_stack", Start_stack_addr, Current_addr),
    log("./profile/mm_struct", "arg_start", ARG_start_addr, Current_addr),
    log("./profile/mm_struct", "mm_struct", End, Start).


possible_vm_area_struct(Base_addr, MM_addr) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [VM_next_addr, VM_next_val],
        [Vm_mm_addr, Vm_mm_val],
        [VM_file_addr, VM_file_val]
    ],
    Ulong_profile = [
        [VM_start_addr, VM_start_val],
        [VM_end_addr, VM_end_val],
        [VM_flag_addr, VM_flag_val]
        /*VM_pgoff is 0, and we do not consider 0 as ulong*/
        %[VM_pgoff_addr, VM_pgoff_val]
    ],
    VM_start_addr #>= Base_addr,
    chain([VM_start_addr, VM_end_addr, VM_next_addr, Vm_mm_addr, VM_flag_addr, VM_file_addr], #<),
    VM_end_addr #= VM_start_addr + 8,
    VM_next_addr #= VM_end_addr + 8,
    VM_next_addr #< Base_addr + 32,

    Vm_mm_val #= MM_addr,
    VM_file_addr #< Base_addr + 180,
    VM_pgoff_addr #= VM_file_addr - 8,
    VM_flag_val #< 0x88888888,
    VM_file_addr #< Base_addr + 200,

    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    %FIXME: VM_flag may need value constraints.

    label([VM_next_addr, VM_next_val]),
    /* vm_file maybe zero */
    labeling([enum], [VM_start_addr, VM_end_addr, Vm_mm_addr, Vm_mm_val, VM_flag_addr, VM_pgoff_addr, VM_file_addr, VM_file_val]),
    
    VM_file_val #> 0,
    process_create(path('python'),
                ['subquery.py', VM_file_val, "vm_file"],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    statistics(real_time, [End|_]),

    log("./profile/vm_area_struct", "vm_start", VM_start_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_end", VM_end_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_next", VM_next_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_mm", Vm_mm_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_flag", VM_flag_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_pgoff", VM_pgoff_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_file", VM_file_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_area_struct", End, Start).

check_vm_area_struct(Base_addr, Level) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "vm_area_struct", Level],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vm_file(Base_addr) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [Vfs_mount_addr, Vfs_mount_val],
        [Dentry_addr, Dentry_val],
        [F_op_addr, F_op_val]
    ],
    tuples_in(Ptr_profile, Ptr),
    Vfs_mount_addr #> Base_addr,
    Dentry_addr #= Vfs_mount_addr + 8,
    Dentry_addr #< Base_addr + 40,
    Vfs_mount_val #> 0,
    Dentry_val #> 0,
    F_op_addr #= Base_addr + 40, 
    F_op_val #> 0,
    chain([Vfs_mount_addr, Dentry_addr, F_op_addr], #<),
    labeling([enum], [Vfs_mount_val, Dentry_val, F_op_addr, F_op_val]),


    process_create(path('python'),
                    ['subquery.py', Vfs_mount_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),
/*
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/
    query_file_operation(F_op_val),
    statistics(real_time, [End|_]),

    log("./profile/file", "f_path", Vfs_mount_addr, Base_addr),
    log("./profile/file", "f_op", F_op_addr, Base_addr),
    log("./profile/file", "file", End, Start).

query_file_operation(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result).

possible_name_pointer(Val, Name_offset) :-
    /* The value at val+name_offset is a string pointer */
    current_predicate(pointer/1),
    pointer(Ptr),
    Ptr_profile = ([
        [Name_addr, Name_val]
    ]),
    Name_addr #= Val + Name_offset,
    tuples_in(Ptr_profile, Ptr),
    labeling([enum], [Name_addr, Name_val]),
    query_string_pointer(Name_val).

possible_vfs_mount(Base_addr) :-
    pointer(Ptr),
    int(Int),
    Ptr_profile = [
        [Dentry_addr, Dentry_val],
        [Mnt_sb_addr, Mnt_sb_val]
    ],
    Int_profile = [
        [Mnt_flags_addr, Mnt_flags_val]
    ],
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Dentry_addr #= Base_addr,
    Dentry_val #> 0,
    Mnt_flags_addr #= Dentry_addr + 16,
    Mnt_flags_val #>= 0,
    Mnt_sb_val #> 0,
    chain([Dentry_addr, Mnt_sb_addr, Mnt_flags_addr], #<),
    label([Dentry_addr, Dentry_val, Mnt_flags_addr, Mnt_flags_val]).
 
possible_dentry(Base_addr) :-
    /*
        struct dentry *d_parent;
        struct qstr d_name contains char *name; it's a name pointer
        struct inode *d_inode;
        unsigned char d_iname[LEN];
        const struct dentry_operations *d_op;
        struct list_head d_child;
        struct list_head d_subdirs;
        union {
	        struct hlist_node d_alias;
	        struct rcu_head d_rcu;
        } d_u;
    */
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    string_val(Str),
    Ptr_profile = [
        [Dparent_addr, Dparent_val],
        [Dname_addr, Dname_val],
        [D_inode_addr, D_inode_val],
        [D_op_addr, D_op_val],
        [Dchild_addr, Dchild_val],
        [D_subdirs_addr, D_subdirs_val]
    ],
    Str_profile = [
        [D_iname_addr, D_iname_val]
    ],
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    Dparent_addr #> Base_addr,
    chain([Dparent_addr, Dname_addr, D_inode_addr, D_iname_addr, 
            D_op_addr, Dchild_addr, D_subdirs_addr], #<),
    D_subdirs_addr #= Dchild_addr + 16,
    D_subdirs_addr #< Base_addr + 200,
    Dparent_val #> 0,
    labeling([enum], [Dname_addr, Dname_val]),
    query_string_pointer(Dname_val),
    labeling([enum], [D_iname_addr, D_iname_val]),
    D_iname_offset #= D_iname_addr - Base_addr,
    Dname_offset #= Dname_addr - Base_addr,
    labeling([enum], [Dparent_addr, Dparent_val]),
    Parent_dname #= Dparent_val + Dname_offset,
    process_create(path('python'),
                    ['subquery.py', Parent_dname, "name_pointer", Dname_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    labeling([enum], [D_inode_addr, D_inode_val]),
    query_inode(D_inode_val),
    /* d_op might be zero! */
    labeling([enum], [D_op_addr, D_op_val]),
    %query_file_operation(D_op_val),

    labeling([enum], [Dchild_addr, Dchild_val]),
    Dchild_offset #= Dchild_addr - Base_addr,
    Dchild_init #= Dchild_val - Dchild_offset,
    query_name_pointer(Dchild_init, Dname_offset),

    /* This can be hardcoded as d_child_addr + 16 */
    labeling([enum], [D_subdirs_addr, D_subdirs_val]),
    Dsubdirs_offset #= D_subdirs_addr - Base_addr,
    D_subdirs_init #= D_subdirs_val - Dsubdirs_offset,
    query_name_pointer(D_subdirs_init, Dname_offset),

    _Name_addr #= Dname_addr - 8,

    statistics(real_time, [End|_]),

    log("./profile/dentry", "parent", Dparent_addr, Base_addr),
    log("./profile/dentry", "d_name", _Name_addr, Base_addr),
    log("./profile/dentry", "d_inode", D_inode_addr, Base_addr),
    log("./profile/dentry", "d_iname", D_iname_addr, Base_addr),
    log("./profile/dentry", "dchild", Dchild_addr, Base_addr),
    log("./profile/dentry", "d_subdirs", D_subdirs_addr, Base_addr),
    log("./profile/dentry", "dentry", End, Start).

query_inode(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_inode(Base_addr) :-
    /*
        struct inode_operations *i_op;
        struct super_block      *i_sb;
        struct address_space    *i_mapping;
    */
    statistics(real_time, [Start|_]),

    pointer(Ptr),
    long(Ulg),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [I_op_addr, I_op_val],
        [I_sb_addr, I_sb_val],
        [I_mapping_addr, I_mapping_val],
        [I_fop_addr, I_fop_val]
    ]),
    Ulong_profile = ([
        /* i_mode is actually not long type. */
        [I_mode_addr, I_mode_val],
        [I_ino_addr, I_ino_val],
        [I_size_addr, I_size_val],
        [I_atime_addr, I_atime_val],
        [_I_atime_addr, _I_atime_val],
        [I_mtime_addr, I_mtime_val],
        [I_ctime_addr, I_ctime_val],
        [_I_ctime_addr, _I_ctime_val]
    ]),
    Int_profile = ([
        [I_uid_addr, I_uid_val],
        [I_gid_addr, I_gid_val],
        [_atomic_t_addr, _atomic_t_val],
        [_atomic_t2_addr, _atomic_t2_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    tuples_in(Int_profile, Int),

    chain([I_mode_addr, I_uid_addr, I_gid_addr, I_op_addr, I_sb_addr, I_mapping_addr, I_ino_addr,
           I_size_addr, I_atime_addr, _I_atime_addr, I_mtime_addr, I_ctime_addr, _I_ctime_addr, 
           _atomic_t_addr, _atomic_t2_addr, I_fop_addr], #<),

    I_mode_addr #= Base_addr,
    I_mode_val #> 0,
    I_gid_addr #= I_mode_addr + 8,
    %I_op_addr #= Base_addr + 32,
    I_op_addr #=< Base_addr + 32,
    I_op_val #> 0,
    labeling([enum], [I_op_addr, I_op_val]),
    query_inode_operations(I_op_val),

    I_sb_addr #= I_op_addr + 8,
    I_mapping_addr #= I_sb_addr + 8,
    I_atime_addr #= I_size_addr + 8,
    I_mtime_addr #= I_atime_addr + 16,
    I_ctime_addr #= I_mtime_addr + 16,
    _I_ctime_addr #= I_ctime_addr + 8,
    I_size_val #> 0,
    I_atime_val #> 4096,
    I_mtime_val #> 4096,
    I_ctime_val #> 4096,
    I_fop_addr #< Base_addr + 400,
    labeling([enum], [I_sb_addr, I_mapping_addr, I_atime_addr, I_mtime_addr, I_ctime_addr]),
    I_fop_addr #= _atomic_t_addr + 8,
    labeling([enum], [I_fop_addr, I_fop_val]),
    I_fop_val #> 0,
    query_inode_operations(I_fop_val),

    statistics(real_time, [End|_]),
    log("./profile/inode", "I_mode_addr", I_mode_addr, Base_addr),
    log("./profile/inode", "I_uid_addr", I_uid_addr, Base_addr),
    log("./profile/inode", "I_gid_addr", I_gid_addr, Base_addr),
    log("./profile/inode", "I_op_addr", I_op_addr, Base_addr),
    log("./profile/inode", "I_sb_addr", I_sb_addr, Base_addr),
    log("./profile/inode", "I_mapping_addr", I_mapping_addr, Base_addr),
    log("./profile/inode", "I_size_addr", I_size_addr, Base_addr),
    log("./profile/inode", "I_atime_addr", I_atime_addr, Base_addr),
    log("./profile/inode", "I_mtime_addr", I_mtime_addr, Base_addr),
    log("./profile/inode", "I_ctime_addr", I_ctime_addr, Base_addr),
    log("./profile/inode", "I_fop_addr", I_fop_addr, Base_addr),
    log("./profile/inode", "inode", End, Start).


query_inode_operations(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_name_pointer(Base_addr, Offset) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "name_pointer", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_inode_operations(Base_addr) :-
    /* a bunch of function pointers. */
    pointer(Ptr),
    Ptr_profile = ([
        [_L1_addr, _L1_val],
        [_L2_addr, _L2_val],
        [_L3_addr, _L3_val],
        [_L4_addr, _L4_val],
        [_L5_addr, _L5_val],
        [_L6_addr, _L6_val],
        [_L7_addr, _L7_val],
        [_L8_addr, _L8_val],
        [_L9_addr, _L9_val],
        [_L10_addr, _L10_val],
        [_L11_addr, _L11_val],
        [_L12_addr, _L12_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([_L1_addr, _L2_addr, _L3_addr, _L4_addr, _L5_addr, _L6_addr, _L7_addr,
           _L8_addr, _L9_addr, _L10_addr, _L11_addr, _L12_addr], #<),
    _L1_addr #= Base_addr,
    _L12_addr #= Base_addr + 88.

possible_d_entry(Base_addr, Dname_offset) :-
    current_predicate(string_val/1),
    string_val(Str),
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    Dname_addr #= Base_addr + Dname_offset,
    tuples_in(Str_profile, Str),
    label([Dname_addr]).

possible_list_head(Tasks_val, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_val, Tasks_addr]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],
    Comm_addr #= Tasks_val - Tasks_offset + Comm_offset,
    Tasks_addr #\= Tasks_val,
    tuples_in(Str_profile, Str),
    tuples_in(Ptr_profile, Ptr),
    label([Comm_addr]).

possible_ts(Base_addr, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_addr, Tasks_val]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],

    Comm_addr #= Base_addr + Comm_offset,
    Tasks_addr #= Base_addr + Tasks_offset,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),

    label([Tasks_val]),
    
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "list_head", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_cred(Base_addr) :-
    statistics(real_time, [Start|_]),

    int(Int),
    long(Ulg),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3],
        [Addr4, Val4],
        [Addr5, Val5],
        [Addr6, Val6],
        [Addr7, Val7],
        [Addr8, Val8],
        [Addr9, Val9]
    ],
    %FIXME For now, this rule is hard-coded because we do not consider 0 as a unsign long number. 
    %So that for cred whos val10 is 0, this rule does not apply.
    /*Ulong_profile = [
        [Addr10, Val10],
        [Addr11, Val11]
    ],*/
    Addr1 #> Base_addr,
    %chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9, Addr10, Addr11], #<),
    chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9], #<),
    Addr1 #= Base_addr + 4,
    Addr9 #= Addr1 + 32,
    %Addr11 #< Base_addr + 120,
    tuples_in(Int_profile, Int),
    %tuples_in(Ulong_profile, Ulg),
    statistics(real_time, [End|_]),
    labeling([enum], [Addr1, Addr2, Addr5, Addr6]),
    log("./profile/cred", "cred", End, Start),
    log('./profile/cred', "uid", Addr1, Base_addr),
    log('./profile/cred', "gid", Addr2, Base_addr),
    log('./profile/cred', "euid", Addr5, Base_addr),
    log('./profile/cred', "egid", Addr6, Base_addr).

possible_fs_struct(Base_addr) :-
    statistics(real_time, [Start|_]),
    int(Int),
    pointer(Ptr),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3]
    ],
    Ptr_profile = [
        [Root_addr, Root_val],
        [Root_dentry_addr, Root_dentry_val],
        [PWD_addr, PWD_val]
    ],
    Addr1 #>= Base_addr,
    Root_dentry_addr #= Root_addr + 8,
    chain([Addr1, Addr2, Addr3, Root_addr, Root_dentry_addr, PWD_addr], #<),
    PWD_addr #= Root_addr + 16,
    PWD_addr #< Base_addr + 50,
    tuples_in(Int_profile, Int),
    tuples_in(Ptr_profile, Ptr),
    Root_val #> 0,
    PWD_val #> 0,
    label([Root_addr, Root_val, Root_dentry_addr, Root_dentry_val]),
    /* some times the dentry fields are zero, use vfs_mount instead */
    process_create(path('python'),
                    ['subquery.py', Root_val, "vfs_mount"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    query_dentry(Root_dentry_val),

    label([PWD_addr, PWD_val]),
    process_create(path('python'),
                    ['subquery.py', PWD_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    statistics(real_time, [End|_]),
    log("./profile/fs_struct", "fs time", End, Start),
    log('./profile/fs_struct', "Root", Root_addr, Base_addr),
    log('./profile/fs_struct', "pwd", PWD_addr, Base_addr),
    log('./profile/fs_struct', "fs_struct", End, Start).

possible_mount(Base_addr) :-
    /* struct hlist_head mnt_hash;
       struct mount *mnt_parent; 
       struct vfsmount mnt;
       struct list_head mnt_mounts;
       struct list_head mnt_child;
       struct list_head mnt_instance;
       const char *mnt_devname;
       struct list_head mnt_list;
    */
    statistics(real_time, [Start|_]),
    %get_time(Current),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Mnt_hash_addr, Mnt_hash_val],
        [Mnt_parent_addr, Mnt_parent_val],
        [Vfsmount_addr, Vfsmount_val],
        [Mnt_child_addr, Mnt_child_val],
        [Mnt_devname_addr, Mnt_devname_val],
        [Mnt_list_addr, Mnt_list_val]
    ]),
    Int_profile = ([
        [Mnt_flags_addr, Mnt_flags_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    /* Order Invariants */
    chain([Mnt_hash_addr, Mnt_parent_addr, Vfsmount_addr, Mnt_flags_addr,
            Mnt_child_addr, Mnt_devname_addr, Mnt_list_addr], #<),
    Mnt_hash_addr #= Base_addr,
    /* mnt_hash_addr is a list_head */
    Mnt_parent_addr #> Base_addr + 8,
    Mnt_list_addr - Base_addr #< 200,
    labeling([enum], [Mnt_devname_addr, Mnt_devname_val]),
    query_string_pointer(Mnt_devname_val),
    Mnt_devname_offset #= Mnt_devname_addr - Base_addr,
    /* the offset from mnt_mounts to mnt_list remains the same, so it's safe to use fixed offsets. */
    Mnt_child_addr #= Mnt_devname_addr - 32,
    Mnt_list_addr #= Mnt_devname_addr + 8,
    Mnt_flags_addr #= Vfsmount_addr + 16,
    labeling([enum], [Mnt_child_addr, Mnt_list_addr, Vfsmount_addr, Vfsmount_val]),
    Vfsmount_val #>= 0,
    /* Here we can infer layout of dentry structure 
       Maybe need to infer using another dentry, somehow it may not be initialized. 
    */
    Vfsmount_addr #> 0,
    %query_dentry(Vfsmount_addr),

    labeling([enum], [Mnt_parent_addr, Mnt_parent_val]),
    /* To verify another mount struct, only one-level query, so it does not direct call query_mount recursively */
    
    query_mount_struct(Mnt_parent_val, Mnt_devname_offset),
    
    %get_time(End),
    %Time_past is End - Current,
    statistics(real_time, [End|_]),
    log("./profile/mount", "mnt_hash", Mnt_hash_addr, Base_addr),
    log("./profile/mount", "mnt_parent", Mnt_parent_addr, Base_addr),
    log("./profile/mount", "mnt_child", Mnt_child_addr, Base_addr),
    log("./profile/mount", "mnt_devname", Mnt_devname_addr, Base_addr),
    log("./profile/mount", "mnt_list", Mnt_list_addr, Base_addr),
    log("./profile/mount", "mount", End, Start).

possible_neigh_table(Base_addr) :- 
    /* nht at offset 464 */
    pointer(Ptr),
    Ptr_profile = ([
        [Nht_addr, Nht_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Nht_addr #>= Base_addr + 448,
    Nht_addr #=< Base_addr + 472,
    labeling([enum], [Nht_addr, Nht_val]),
    query_neigh_hash_table(Nht_val).

possible_neigh_hash_table(Base_addr) :-
    /* neighbour **hash_buckets */
    pointer(Ptr),
    Ptr_profile = ([
        [Hash_buckest_addr, Hash_buckets_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Hash_buckest_addr #= Base_addr,
    labeling([enum], [Hash_buckest_addr, Hash_buckets_val]),
    process_create(path('python'),
                    ['subquery.py', Hash_buckets_val, "hash_buckets"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_hash_buckets(Base_addr) :-
    /* hash_buckets is an array of neighbour pointer 
       note that not all element are non-zero
    */
    pointer(Ptr),
    Ptr_profile = ([
        [Neighbour_addr, Neighbour_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Neighbour_addr #< Base_addr + 64,
    Neighbour_val #> 0,
    labeling([enum], [Neighbour_addr, Neighbour_val]),
    process_create(path('python'),
                    ['subquery.py', Neighbour_val, "neighbour"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_neighbour(Base_addr) :-
    /* net_device *dev at offset 368 */
    pointer(Ptr),
    Ptr_profile = ([
        [Dev_addr, Dev_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Dev_addr #>= Base_addr + 360,
    Dev_addr #=< Base_addr + 376,
    labeling([enum], [Dev_addr, Dev_val]),
    process_create(path('python'),
                    ['subquery.py', Dev_val, "net_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).


possible_net_device(Base_addr) :- 
    /*
        char             name[NAMSIZ];
        struct list_head dev_list;
        unsigned char    addr_len;
        unsigned int     promiscuity;
        struct in_device *ip_ptr;
    */
    statistics(real_time, [Start|_]),

    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Dev_list_addr, Dev_list_val],
        [_atalk_ptr_addr, _atalk_ptr_val],
        [IP_ptr_addr, IP_ptr_val],
        [_dn_ptr_addr, _dn_ptr_val],
        [_ip6_ptr_addr, _ip6_ptr_val],
        [Dev_addr_addr, Dev_addr_val]
    ]),
    Str_profile = ([
        [Name_addr, Name_val],
        [Broad_cast_addr, Broad_cast_val]
    ]),
    Int_profile = ([
        [Promisc_addr, Promisc_val],
        [Addr_len_addr, Addr_len_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),
    /* Hard to determine offsets for addr_len and promisc */
    chain([Name_addr, Dev_list_addr, Addr_len_addr, Promisc_addr, 
           _atalk_ptr_addr, IP_ptr_addr, _dn_ptr_addr, _ip6_ptr_addr, Dev_addr_addr, Broad_cast_addr], #<),
    Name_addr #= Base_addr,
    Name_offset #= Name_addr - Base_addr,
    IP_ptr_addr #= _atalk_ptr_addr + 8,
    IP_ptr_addr #< Base_addr + 1000,
    _ip6_ptr_addr #= IP_ptr_addr + 16,


    /* dev_list offset can be hardcoded since it remains the same */
    Dev_list_addr #= Base_addr + 80,
    labeling([enum], [Name_addr, Dev_list_addr, Dev_list_val]),
    log("./profile/debug", "net_device", Name_addr, Base_addr),
    /* do not have a good constrain to narrow down ip_ptr, use its rough offset
       to reduce the search space. 
     */
    IP_ptr_addr #= Base_addr + 760,
    log("./profile/debug", "net_device2", Name_addr, Base_addr),

    IP_ptr_addr #> Base_addr + 700,
    IP_ptr_val #> 0,

    labeling([enum], [IP_ptr_addr, IP_ptr_val]),

    query_in_device(IP_ptr_val),
    %labeling([enum], [Dev_addr_addr, Dev_addr_val]),
    %query_string_pointer(Dev_addr_val),

    statistics(real_time, [End|_]),

    log("./profile/net_device", "name", Name_addr, Base_addr),
    log("./profile/net_device", "ip_ptr", IP_ptr_addr, Base_addr),
    log("./profile/net_device", "dev_list", Dev_list_addr, Base_addr),
    log("./profile/net_device", "net_device", End, Start).

query_in_device(IP_ptr_val) :-
    process_create(path('python'),
                    ['subquery.py', IP_ptr_val, "in_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).


query_mount_struct(Val, Offset) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "mount_struct", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_dentry(Dentry_val) :-
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).
