:- use_module(library(clpfd)).
:- style_check(-singleton).
pointer([
		[0x15c06d0,22808272],
		[0x15c06d8,22808272],
		[0x15c06e0,22808288],
		[0x15c06e8,22808288],
		[0x15c06f0,0],
		[0x15c06f8,0],
		[0x15c0700,0],
		[0x15c0708,0],
		[0x15c0710,121566208],
		[0x15c0718,0],
		[0x15c0720,0],
		[0x15c0728,0],
		[0x15c0730,0],
		[0x15c0738,0],
		[0x15c0740,0],
		[0x15c0748,0],
		[0x15c0750,0],
		[0x15c0758,0],
		[0x15c0760,0],
		[0x15c0768,0],
		[0x15c0770,0],
		[0x15c0778,0],
		[0x15c0780,17236384],
		[0x15c0788,0],
		[0x15c0790,0],
		[0x15c0798,0],
		[0x15c07a0,0],
		[0x15c07a8,0],
		[0x15c07b0,0],
		[0x15c07c0,22807744],
		[0x15c07c8,22807744],
		[0x15c07d0,117801760],
		[0x15c07d8,117804256],
		[0x15c07e0,22808544],
		[0x15c07e8,22808544],
		[0x15c07f0,22807744],
		[0x15c07f8,22808568],
		[0x15c0800,22808568],
		[0x15c0808,22808584],
		[0x15c0810,22808584],
		[0x15c0818,0],
		[0x15c0820,0],
		[0x15c0828,22904320],
		[0x15c0830,0],
		[0x15c0838,0],
		[0x15c0840,22904320],
		[0x15c0848,0],
		[0x15c0850,0],
		[0x15c0858,22904320],
		[0x15c0860,22808672],
		[0x15c0868,22808672],
		[0x15c0870,22815952],
		[0x15c0878,22815952],
		[0x15c0880,0],
		[0x15c0888,0],
		[0x15c0890,0],
		[0x15c0898,0],
		[0x15c08a8,0],
		[0x15c08b8,0],
		[0x15c08c0,0],
		[0x15c08c8,0],
		[0x15c08d0,0],
		[0x15c08d8,0],
		[0x15c08e8,0],
		[0x15c08f0,0],
		[0x15c08f8,0],
		[0x15c0900,0],
		[0x15c0908,0],
		[0x15c0910,0],
		[0x15c0918,0],
		[0x15c0920,22808864],
		[0x15c0928,22808864],
		[0x15c0930,22808880],
		[0x15c0938,22808880],
		[0x15c0940,22808896],
		[0x15c0948,22808896],
		[0x15c0950,0],
		[0x15c0958,22905056],
		[0x15c0960,22905056],
		[0x15c0978,0],
		[0x15c0980,0],
		[0x15c0988,0],
		[0x15c0990,0],
		[0x15c0998,22929440],
		[0x15c09a0,22928384],
		[0x15c09a8,22904608],
		[0x15c09b0,22815936],
		[0x15c09b8,22813824],
		[0x15c09c0,0],
		[0x15c09c8,0],
		[0x15c09d0,0],
		[0x15c09d8,22809048],
		[0x15c09e0,22809048],
		[0x15c09e8,0],
		[0x15c09f0,0],
		[0x15c09f8,0],
		[0x15c0a00,0],
		[0x15c0a08,0],
		[0x15c0a10,0],
		[0x15c0a18,0],
		[0x15c0a20,0],
		[0x15c0a28,0],
		[0x15c0a30,0],
		[0x15c0a38,0],
		[0x15c0a40,0],
		[0x15c0a48,0],
		[0x15c0a50,0],
		[0x15c0a58,0],
		[0x15c0a60,0],
		[0x15c0a68,0],
		[0x15c0a70,0],
		[0x15c0a78,0],
		[0x15c0a80,0],
		[0x15c0a88,0],
		[0x15c0a90,0],
		[0x15c0a98,0],
		[0x15c0aa0,0],
		[0x15c0aa8,0],
		[0x15c0ab8,22809272],
		[0x15c0ac0,22809272],
		[0x15c0ac8,0],
		[0x15c0ad0,0],
		[0x15c0ad8,22809304],
		[0x15c0ae0,22809304],
		[0x15c0ae8,0],
		[0x15c0af0,0],
		[0x15c0af8,0],
		[0x15c0b00,0],
		[0x15c0b08,0],
		[0x15c0b10,0],
		[0x15c0b18,0],
		[0x15c0b20,117486400],
		[0x15c0b28,0],
		[0x15c0b30,0],
		[0x15c0b40,0],
		[0x15c0b48,0],
		[0x15c0b50,0],
		[0x15c0b58,0],
		[0x15c0b60,0],
		[0x15c0b68,0],
		[0x15c0b70,0],
		[0x15c0b78,0],
		[0x15c0b80,0],
		[0x15c0b88,0],
		[0x15c0b90,0],
		[0x15c0b98,22773760],
		[0x15c0ba0,22773472],
		[0x15c0ba8,0],
		[0x15c0bb0,0],
		[0x15c0bb8,0],
		[0x15c0bc0,0],
		[0x15c0bc8,0],
		[0x15c0bd0,0],
		[0x15c0bd8,0],
		[0x15c0be0,0],
		[0x15c0be8,0],
		[0x15c0bf0,0],
		[0x15c0bf8,0],
		[0x15c0c00,0],
		[0x15c0c08,0],
		[0x15c0c10,0],
		[0x15c0c18,0],
		[0x15c0c20,0],
		[0x15c0c28,0],
		[0x15c0c30,0],
		[0x15c0c38,0],
		[0x15c0c48,0],
		[0x15c0c50,0],
		[0x15c0c58,0],
		[0x15c0c60,0],
		[0x15c0c68,0],
		[0x15c0c70,0],
		[0x15c0c78,0],
		[0x15c0c80,0],
		[0x15c0c88,0],
		[0x15c0c90,0],
		[0x15c0c98,0],
		[0x15c0ca0,0],
		[0x15c0ca8,0],
		[0x15c0cb0,0],
		[0x15c0cb8,0],
		[0x15c0cc0,0],
		[0x15c0cc8,0],
		[0x15c0cd0,0],
		[0x15c0cd8,0],
		[0x15c0ce0,0],
		[0x15c0ce8,0],
		[0x15c0cf0,0],
		[0x15c0cf8,0],
		[0x15c0d00,0],
		[0x15c0d08,0],
		[0x15c0d10,0],
		[0x15c0d18,0],
		[0x15c0d20,0],
		[0x15c0d28,0],
		[0x15c0d30,0],
		[0x15c0d38,0],
		[0x15c0d40,0],
		[0x15c0d48,0],
		[0x15c0d50,0],
		[0x15c0d58,0],
		[0x15c0d60,0],
		[0x15c0d68,0],
		[0x15c0d70,0],
		[0x15c0d78,0],
		[0x15c0d80,0],
		[0x15c0d88,0],
		[0x15c0d90,0],
		[0x15c0d98,0],
		[0x15c0da0,0],
		[0x15c0da8,0],
		[0x15c0db0,0],
		[0x15c0db8,0],
		[0x15c0dc0,0],
		[0x15c0dc8,0],
		[0x15c0dd0,0],
		[0x15c0dd8,0],
		[0x15c0de0,0],
		[0x15c0de8,0],
		[0x15c0df0,0],
		[0x15c0df8,0],
		[0x15c0e00,0],
		[0x15c0e08,0],
		[0x15c0e10,0],
		[0x15c0e18,0],
		[0x15c0e20,0],
		[0x15c0e28,0],
		[0x15c0e30,0],
		[0x15c0e38,0],
		[0x15c0e40,0],
		[0x15c0e48,0],
		[0x15c0e50,0],
		[0x15c0e58,0],
		[0x15c0e60,0],
		[0x15c0e68,0],
		[0x15c0e70,0],
		[0x15c0e78,0],
		[0x15c0e80,0],
		[0x15c0e88,0],
		[0x15c0e90,0],
		[0x15c0e98,0],
		[0x15c0ea0,0],
		[0x15c0ea8,0],
		[0x15c0eb0,0],
		[0x15c0eb8,0],
		[0x15c0ec0,0],
		[0x15c0ec8,0],
		[0x15c0ed0,0],
		[0x15c0ed8,0],
		[0x15c0ee0,0],
		[0x15c0ee8,0],
		[0x15c0ef0,0],
		[0x15c0ef8,0],
		[0x15c0f00,0],
		[0x15c0f08,0],
		[0x15c0f10,0],
		[0x15c0f18,0],
		[0x15c0f20,0],
		[0x15c0f28,0],
		[0x15c0f30,0],
		[0x15c0f38,0],
		[0x15c0f40,0],
		[0x15c0f48,0],
		[0x15c0f50,0],
		[0x15c0f58,0],
		[0x15c0f60,0],
		[0x15c0f68,0],
		[0x15c0f70,0],
		[0x15c0f78,0],
		[0x15c0f80,0],
		[0x15c0f88,0],
		[0x15c0f90,0],
		[0x15c0f98,0],
		[0x15c0fa0,0],
		[0x15c0fa8,0],
		[0x15c0fb0,0],
		[0x15c0fb8,0],
		[0x15c0fc0,0],
		[0x15c0fc8,0],
		[0x15c0fd0,0],
		[0x15c0fd8,0],
		[0x15c0fe0,0],
		[0x15c0fe8,0],
		[0x15c0ff0,0],
		[0x15c0ff8,0],
		[0x15c1000,0],
		[0x15c1008,0],
		[0x15c1010,0],
		[0x15c1018,0],
		[0x15c1020,0],
		[0x15c1028,0],
		[0x15c1030,0],
		[0x15c1038,0],
		[0x15c1040,0],
		[0x15c1048,0],
		[0x15c1050,0],
		[0x15c1058,0],
		[0x15c1060,0],
		[0x15c1068,0],
		[0x15c1070,0],
		[0x15c1078,0],
		[0x15c1080,0],
		[0x15c1088,0],
		[0x15c1090,0],
		[0x15c1098,0],
		[0x15c10a0,0],
		[0x15c10a8,0],
		[0x15c10b0,0],
		[0x15c10b8,0],
		[0x15c10c0,0],
		[0x15c10c8,0],
		[0x15c10d0,0],
		[0x15c10d8,0],
		[0x15c10e0,0],
		[0x15c10e8,0],
		[0x15c10f0,0],
		[0x15c10f8,0],
		[0x15c1100,0],
		[0x15c1108,0],
		[0x15c1110,0],
		[0x15c1118,0],
		[0x15c1120,0],
		[0x15c1128,0],
		[0x15c1130,0],
		[0x15c1138,0],
		[0x15c1140,0],
		[0x15c1148,0],
		[0x15c1150,0],
		[0x15c1158,0],
		[0x15c1160,0],
		[0x15c1168,0],
		[0x15c1170,0],
		[0x15c1178,0],
		[0x15c1180,0],
		[0x15c1188,0],
		[0x15c1190,0],
		[0x15c1198,0],
		[0x15c11a0,0],
		[0x15c11a8,0],
		[0x15c11b0,0],
		[0x15c11b8,0],
		[0x15c11c0,0],
		[0x15c11c8,0],
		[0x15c11d0,0],
		[0x15c11d8,0],
		[0x15c11e0,0],
		[0x15c11e8,0],
		[0x15c11f0,0],
		[0x15c11f8,0],
		[0x15c1200,0],
		[0x15c1208,0],
		[0x15c1210,0],
		[0x15c1218,0],
		[0x15c1220,0],
		[0x15c1228,0],
		[0x15c1230,0],
		[0x15c1238,0],
		[0x15c1240,0],
		[0x15c1248,0],
		[0x15c1250,0],
		[0x15c1258,0],
		[0x15c1260,0],
		[0x15c1268,0],
		[0x15c1270,0],
		[0x15c1278,0],
		[0x15c1280,0],
		[0x15c1288,0],
		[0x15c1290,0],
		[0x15c1298,0],
		[0x15c12a0,0],
		[0x15c12a8,0],
		[0x15c12b0,0],
		[0x15c12b8,0],
		[0x15c12c0,0],
		[0x15c12c8,0],
		[0x15c12d0,0],
		[0x15c12d8,0],
		[0x15c12e0,0],
		[0x15c12e8,0],
		[0x15c12f0,0],
		[0x15c12f8,0],
		[0x15c1300,0],
		[0x15c1308,0],
		[0x15c1310,0],
		[0x15c1318,0],
		[0x15c1320,0],
		[0x15c1328,0],
		[0x15c1330,0],
		[0x15c1338,0],
		[0x15c1340,0],
		[0x15c1348,0],
		[0x15c1350,0],
		[0x15c1358,0],
		[0x15c1360,0],
		[0x15c1368,0],
		[0x15c1370,0],
		[0x15c1378,0],
		[0x15c1380,0],
		[0x15c1388,0],
		[0x15c1390,0],
		[0x15c1398,0],
		[0x15c13a0,0],
		[0x15c13a8,0],
		[0x15c13b0,0],
		[0x15c13b8,0],
		[0x15c13c0,0],
		[0x15c13c8,0],
		[0x15c13d0,0],
		[0x15c13d8,0],
		[0x15c13e0,0],
		[0x15c13e8,0],
		[0x15c13f0,0],
		[0x15c13f8,0],
		[0x15c1400,0],
		[0x15c1408,0],
		[0x15c1410,0],
		[0x15c1418,0],
		[0x15c1420,0],
		[0x15c1428,0],
		[0x15c1430,0],
		[0x15c1438,0],
		[0x15c1440,0],
		[0x15c1448,0],
		[0x15c1450,0],
		[0x15c1458,0],
		[0x15c1460,0],
		[0x15c1468,0],
		[0x15c1470,0],
		[0x15c1478,0],
		[0x15c1480,0],
		[0x15c1488,0],
		[0x15c1490,0],
		[0x15c1498,0],
		[0x15c14a0,0],
		[0x15c14a8,0],
		[0x15c14b0,0],
		[0x15c14b8,0],
		[0x15c14c0,0],
		[0x15c14c8,0],
		[0x15c14d0,0],
		[0x15c14d8,0],
		[0x15c14e0,0],
		[0x15c14e8,0],
		[0x15c14f0,0],
		[0x15c14f8,0],
		[0x15c1500,0],
		[0x15c1508,0],
		[0x15c1510,0],
		[0x15c1518,0],
		[0x15c1520,0],
		[0x15c1528,0],
		[0x15c1530,0],
		[0x15c1538,0],
		[0x15c1540,0],
		[0x15c1548,0],
		[0x15c1550,0],
		[0x15c1558,0],
		[0x15c1560,0],
		[0x15c1568,0],
		[0x15c1570,0],
		[0x15c1578,0],
		[0x15c1580,0],
		[0x15c1588,0],
		[0x15c1590,0],
		[0x15c1598,0],
		[0x15c15a0,0],
		[0x15c15a8,0],
		[0x15c15b0,0],
		[0x15c15b8,0],
		[0x15c15c0,0],
		[0x15c15c8,0],
		[0x15c15d0,0],
		[0x15c15d8,0],
		[0x15c15e0,0],
		[0x15c15e8,0],
		[0x15c15f0,0],
		[0x15c15f8,0],
		[0x15c1600,0],
		[0x15c1608,0],
		[0x15c1610,0],
		[0x15c1618,0],
		[0x15c1620,0],
		[0x15c1628,0],
		[0x15c1630,0],
		[0x15c1638,0],
		[0x15c1640,0],
		[0x15c1648,0],
		[0x15c1650,0],
		[0x15c1658,0],
		[0x15c1660,0],
		[0x15c1668,0],
		[0x15c1670,0],
		[0x15c1678,0],
		[0x15c1680,0],
		[0x15c1688,0],
		[0x15c1690,0],
		[0x15c1698,0],
		[0x15c16a0,0],
		[0x15c16a8,0],
		[0x15c16b0,0],
		[0x15c16b8,0],
		[0x15c16c0,0],
		[0x15c16c8,0],
		[0, 0]
]).
unknown([
		[0x15c07b8,17069850242533354482],
		[0, 0]
]).
long([
		[0x15c08a0,4],
		[0x15c08b0,4],
		[0x15c08e0,430],
		[0x15c0970,48],
		[0x15c0ab0,1],
		[0x15c0b38,50000],
		[0x15c0c40,4294967295],
		[0, 0]
]).
int([
		[0x15c06f0,0],
		[0x15c06f4,0],
		[0x15c06f8,0],
		[0x15c06fc,0],
		[0x15c0700,0],
		[0x15c0704,0],
		[0x15c0708,0],
		[0x15c070c,0],
		[0x15c0718,0],
		[0x15c071c,0],
		[0x15c0720,0],
		[0x15c0724,0],
		[0x15c0728,0],
		[0x15c072c,0],
		[0x15c0730,0],
		[0x15c0734,0],
		[0x15c0738,0],
		[0x15c073c,0],
		[0x15c0740,0],
		[0x15c0744,0],
		[0x15c0748,0],
		[0x15c074c,0],
		[0x15c0750,0],
		[0x15c0754,0],
		[0x15c0758,0],
		[0x15c075c,0],
		[0x15c0760,0],
		[0x15c0764,0],
		[0x15c0768,0],
		[0x15c076c,0],
		[0x15c0770,0],
		[0x15c0774,0],
		[0x15c0778,0],
		[0x15c077c,0],
		[0x15c0788,0],
		[0x15c078c,0],
		[0x15c0790,0],
		[0x15c0794,0],
		[0x15c0798,0],
		[0x15c079c,0],
		[0x15c07a0,0],
		[0x15c07a4,0],
		[0x15c07a8,0],
		[0x15c07ac,0],
		[0x15c07b0,0],
		[0x15c07b4,0],
		[0x15c0818,0],
		[0x15c081c,0],
		[0x15c0820,0],
		[0x15c0824,0],
		[0x15c0830,0],
		[0x15c0834,0],
		[0x15c0838,0],
		[0x15c083c,0],
		[0x15c0848,0],
		[0x15c084c,0],
		[0x15c0850,0],
		[0x15c0854,0],
		[0x15c0880,0],
		[0x15c0884,0],
		[0x15c0888,0],
		[0x15c088c,0],
		[0x15c0890,0],
		[0x15c0894,0],
		[0x15c0898,0],
		[0x15c089c,0],
		[0x15c08a0,4],
		[0x15c08a4,0],
		[0x15c08a8,0],
		[0x15c08ac,0],
		[0x15c08b0,4],
		[0x15c08b4,0],
		[0x15c08b8,0],
		[0x15c08bc,0],
		[0x15c08c0,0],
		[0x15c08c4,0],
		[0x15c08c8,0],
		[0x15c08cc,0],
		[0x15c08d0,0],
		[0x15c08d4,0],
		[0x15c08d8,0],
		[0x15c08dc,0],
		[0x15c08e0,430],
		[0x15c08e4,0],
		[0x15c08e8,0],
		[0x15c08ec,0],
		[0x15c08f0,0],
		[0x15c08f4,0],
		[0x15c08f8,0],
		[0x15c08fc,0],
		[0x15c0900,0],
		[0x15c0904,0],
		[0x15c0908,0],
		[0x15c090c,0],
		[0x15c0910,0],
		[0x15c0914,0],
		[0x15c0918,0],
		[0x15c091c,0],
		[0x15c0950,0],
		[0x15c0954,0],
		[0x15c0970,48],
		[0x15c0974,0],
		[0x15c0978,0],
		[0x15c097c,0],
		[0x15c0980,0],
		[0x15c0984,0],
		[0x15c0988,0],
		[0x15c098c,0],
		[0x15c0990,0],
		[0x15c0994,0],
		[0x15c09c0,0],
		[0x15c09c4,0],
		[0x15c09c8,0],
		[0x15c09cc,0],
		[0x15c09d0,0],
		[0x15c09d4,0],
		[0x15c09e8,0],
		[0x15c09ec,0],
		[0x15c09f0,0],
		[0x15c09f4,0],
		[0x15c09f8,0],
		[0x15c09fc,0],
		[0x15c0a00,0],
		[0x15c0a04,0],
		[0x15c0a08,0],
		[0x15c0a0c,0],
		[0x15c0a10,0],
		[0x15c0a14,0],
		[0x15c0a18,0],
		[0x15c0a1c,0],
		[0x15c0a20,0],
		[0x15c0a24,0],
		[0x15c0a28,0],
		[0x15c0a2c,0],
		[0x15c0a30,0],
		[0x15c0a34,0],
		[0x15c0a38,0],
		[0x15c0a3c,0],
		[0x15c0a40,0],
		[0x15c0a44,0],
		[0x15c0a48,0],
		[0x15c0a4c,0],
		[0x15c0a50,0],
		[0x15c0a54,0],
		[0x15c0a58,0],
		[0x15c0a5c,0],
		[0x15c0a60,0],
		[0x15c0a64,0],
		[0x15c0a68,0],
		[0x15c0a6c,0],
		[0x15c0a70,0],
		[0x15c0a74,0],
		[0x15c0a78,0],
		[0x15c0a7c,0],
		[0x15c0a80,0],
		[0x15c0a84,0],
		[0x15c0a88,0],
		[0x15c0a8c,0],
		[0x15c0a90,0],
		[0x15c0a94,0],
		[0x15c0a98,0],
		[0x15c0a9c,0],
		[0x15c0aa0,0],
		[0x15c0aa4,0],
		[0x15c0aa8,0],
		[0x15c0aac,0],
		[0x15c0ab0,1],
		[0x15c0ab4,0],
		[0x15c0ac8,0],
		[0x15c0acc,0],
		[0x15c0ad0,0],
		[0x15c0ad4,0],
		[0x15c0ae8,0],
		[0x15c0aec,0],
		[0x15c0af0,0],
		[0x15c0af4,0],
		[0x15c0af8,0],
		[0x15c0afc,0],
		[0x15c0b00,0],
		[0x15c0b04,0],
		[0x15c0b08,0],
		[0x15c0b0c,0],
		[0x15c0b10,0],
		[0x15c0b14,0],
		[0x15c0b18,0],
		[0x15c0b1c,0],
		[0x15c0b28,0],
		[0x15c0b2c,0],
		[0x15c0b30,0],
		[0x15c0b34,0],
		[0x15c0b3c,0],
		[0x15c0b40,0],
		[0x15c0b44,0],
		[0x15c0b48,0],
		[0x15c0b4c,0],
		[0x15c0b50,0],
		[0x15c0b54,0],
		[0x15c0b58,0],
		[0x15c0b5c,0],
		[0x15c0b60,0],
		[0x15c0b64,0],
		[0x15c0b68,0],
		[0x15c0b6c,0],
		[0x15c0b70,0],
		[0x15c0b74,0],
		[0x15c0b78,0],
		[0x15c0b7c,0],
		[0x15c0b80,0],
		[0x15c0b84,0],
		[0x15c0b88,0],
		[0x15c0b8c,0],
		[0x15c0b90,0],
		[0x15c0b94,0],
		[0x15c0ba8,0],
		[0x15c0bac,0],
		[0x15c0bb0,0],
		[0x15c0bb4,0],
		[0x15c0bb8,0],
		[0x15c0bbc,0],
		[0x15c0bc0,0],
		[0x15c0bc4,0],
		[0x15c0bc8,0],
		[0x15c0bcc,0],
		[0x15c0bd0,0],
		[0x15c0bd4,0],
		[0x15c0bd8,0],
		[0x15c0bdc,0],
		[0x15c0be0,0],
		[0x15c0be4,0],
		[0x15c0be8,0],
		[0x15c0bec,0],
		[0x15c0bf0,0],
		[0x15c0bf4,0],
		[0x15c0bf8,0],
		[0x15c0bfc,0],
		[0x15c0c00,0],
		[0x15c0c04,0],
		[0x15c0c08,0],
		[0x15c0c0c,0],
		[0x15c0c10,0],
		[0x15c0c14,0],
		[0x15c0c18,0],
		[0x15c0c1c,0],
		[0x15c0c20,0],
		[0x15c0c24,0],
		[0x15c0c28,0],
		[0x15c0c2c,0],
		[0x15c0c30,0],
		[0x15c0c34,0],
		[0x15c0c38,0],
		[0x15c0c3c,0],
		[0x15c0c44,0],
		[0x15c0c48,0],
		[0x15c0c4c,0],
		[0x15c0c50,0],
		[0x15c0c54,0],
		[0x15c0c58,0],
		[0x15c0c5c,0],
		[0x15c0c60,0],
		[0x15c0c64,0],
		[0x15c0c68,0],
		[0x15c0c6c,0],
		[0x15c0c70,0],
		[0x15c0c74,0],
		[0x15c0c78,0],
		[0x15c0c7c,0],
		[0x15c0c80,0],
		[0x15c0c84,0],
		[0x15c0c88,0],
		[0x15c0c8c,0],
		[0x15c0c90,0],
		[0x15c0c94,0],
		[0x15c0c98,0],
		[0x15c0c9c,0],
		[0x15c0ca0,0],
		[0x15c0ca4,0],
		[0x15c0ca8,0],
		[0x15c0cac,0],
		[0x15c0cb0,0],
		[0x15c0cb4,0],
		[0x15c0cb8,0],
		[0x15c0cbc,0],
		[0x15c0cc0,0],
		[0x15c0cc4,0],
		[0x15c0cc8,0],
		[0x15c0ccc,0],
		[0x15c0cd0,0],
		[0x15c0cd4,0],
		[0x15c0cd8,0],
		[0x15c0cdc,0],
		[0x15c0ce0,0],
		[0x15c0ce4,0],
		[0x15c0ce8,0],
		[0x15c0cec,0],
		[0x15c0cf0,0],
		[0x15c0cf4,0],
		[0x15c0cf8,0],
		[0x15c0cfc,0],
		[0x15c0d00,0],
		[0x15c0d04,0],
		[0x15c0d08,0],
		[0x15c0d0c,0],
		[0x15c0d10,0],
		[0x15c0d14,0],
		[0x15c0d18,0],
		[0x15c0d1c,0],
		[0x15c0d20,0],
		[0x15c0d24,0],
		[0x15c0d28,0],
		[0x15c0d2c,0],
		[0x15c0d30,0],
		[0x15c0d34,0],
		[0x15c0d38,0],
		[0x15c0d3c,0],
		[0x15c0d40,0],
		[0x15c0d44,0],
		[0x15c0d48,0],
		[0x15c0d4c,0],
		[0x15c0d50,0],
		[0x15c0d54,0],
		[0x15c0d58,0],
		[0x15c0d5c,0],
		[0x15c0d60,0],
		[0x15c0d64,0],
		[0x15c0d68,0],
		[0x15c0d6c,0],
		[0x15c0d70,0],
		[0x15c0d74,0],
		[0x15c0d78,0],
		[0x15c0d7c,0],
		[0x15c0d80,0],
		[0x15c0d84,0],
		[0x15c0d88,0],
		[0x15c0d8c,0],
		[0x15c0d90,0],
		[0x15c0d94,0],
		[0x15c0d98,0],
		[0x15c0d9c,0],
		[0x15c0da0,0],
		[0x15c0da4,0],
		[0x15c0da8,0],
		[0x15c0dac,0],
		[0x15c0db0,0],
		[0x15c0db4,0],
		[0x15c0db8,0],
		[0x15c0dbc,0],
		[0x15c0dc0,0],
		[0x15c0dc4,0],
		[0x15c0dc8,0],
		[0x15c0dcc,0],
		[0x15c0dd0,0],
		[0x15c0dd4,0],
		[0x15c0dd8,0],
		[0x15c0ddc,0],
		[0x15c0de0,0],
		[0x15c0de4,0],
		[0x15c0de8,0],
		[0x15c0dec,0],
		[0x15c0df0,0],
		[0x15c0df4,0],
		[0x15c0df8,0],
		[0x15c0dfc,0],
		[0x15c0e00,0],
		[0x15c0e04,0],
		[0x15c0e08,0],
		[0x15c0e0c,0],
		[0x15c0e10,0],
		[0x15c0e14,0],
		[0x15c0e18,0],
		[0x15c0e1c,0],
		[0x15c0e20,0],
		[0x15c0e24,0],
		[0x15c0e28,0],
		[0x15c0e2c,0],
		[0x15c0e30,0],
		[0x15c0e34,0],
		[0x15c0e38,0],
		[0x15c0e3c,0],
		[0x15c0e40,0],
		[0x15c0e44,0],
		[0x15c0e48,0],
		[0x15c0e4c,0],
		[0x15c0e50,0],
		[0x15c0e54,0],
		[0x15c0e58,0],
		[0x15c0e5c,0],
		[0x15c0e60,0],
		[0x15c0e64,0],
		[0x15c0e68,0],
		[0x15c0e6c,0],
		[0x15c0e70,0],
		[0x15c0e74,0],
		[0x15c0e78,0],
		[0x15c0e7c,0],
		[0x15c0e80,0],
		[0x15c0e84,0],
		[0x15c0e88,0],
		[0x15c0e8c,0],
		[0x15c0e90,0],
		[0x15c0e94,0],
		[0x15c0e98,0],
		[0x15c0e9c,0],
		[0x15c0ea0,0],
		[0x15c0ea4,0],
		[0x15c0ea8,0],
		[0x15c0eac,0],
		[0x15c0eb0,0],
		[0x15c0eb4,0],
		[0x15c0eb8,0],
		[0x15c0ebc,0],
		[0x15c0ec0,0],
		[0x15c0ec4,0],
		[0x15c0ec8,0],
		[0x15c0ecc,0],
		[0x15c0ed0,0],
		[0x15c0ed4,0],
		[0x15c0ed8,0],
		[0x15c0edc,0],
		[0x15c0ee0,0],
		[0x15c0ee4,0],
		[0x15c0ee8,0],
		[0x15c0eec,0],
		[0x15c0ef0,0],
		[0x15c0ef4,0],
		[0x15c0ef8,0],
		[0x15c0efc,0],
		[0x15c0f00,0],
		[0x15c0f04,0],
		[0x15c0f08,0],
		[0x15c0f0c,0],
		[0x15c0f10,0],
		[0x15c0f14,0],
		[0x15c0f18,0],
		[0x15c0f1c,0],
		[0x15c0f20,0],
		[0x15c0f24,0],
		[0x15c0f28,0],
		[0x15c0f2c,0],
		[0x15c0f30,0],
		[0x15c0f34,0],
		[0x15c0f38,0],
		[0x15c0f3c,0],
		[0x15c0f40,0],
		[0x15c0f44,0],
		[0x15c0f48,0],
		[0x15c0f4c,0],
		[0x15c0f50,0],
		[0x15c0f54,0],
		[0x15c0f58,0],
		[0x15c0f5c,0],
		[0x15c0f60,0],
		[0x15c0f64,0],
		[0x15c0f68,0],
		[0x15c0f6c,0],
		[0x15c0f70,0],
		[0x15c0f74,0],
		[0x15c0f78,0],
		[0x15c0f7c,0],
		[0x15c0f80,0],
		[0x15c0f84,0],
		[0x15c0f88,0],
		[0x15c0f8c,0],
		[0x15c0f90,0],
		[0x15c0f94,0],
		[0x15c0f98,0],
		[0x15c0f9c,0],
		[0x15c0fa0,0],
		[0x15c0fa4,0],
		[0x15c0fa8,0],
		[0x15c0fac,0],
		[0x15c0fb0,0],
		[0x15c0fb4,0],
		[0x15c0fb8,0],
		[0x15c0fbc,0],
		[0x15c0fc0,0],
		[0x15c0fc4,0],
		[0x15c0fc8,0],
		[0x15c0fcc,0],
		[0x15c0fd0,0],
		[0x15c0fd4,0],
		[0x15c0fd8,0],
		[0x15c0fdc,0],
		[0x15c0fe0,0],
		[0x15c0fe4,0],
		[0x15c0fe8,0],
		[0x15c0fec,0],
		[0x15c0ff0,0],
		[0x15c0ff4,0],
		[0x15c0ff8,0],
		[0x15c0ffc,0],
		[0x15c1000,0],
		[0x15c1004,0],
		[0x15c1008,0],
		[0x15c100c,0],
		[0x15c1010,0],
		[0x15c1014,0],
		[0x15c1018,0],
		[0x15c101c,0],
		[0x15c1020,0],
		[0x15c1024,0],
		[0x15c1028,0],
		[0x15c102c,0],
		[0x15c1030,0],
		[0x15c1034,0],
		[0x15c1038,0],
		[0x15c103c,0],
		[0x15c1040,0],
		[0x15c1044,0],
		[0x15c1048,0],
		[0x15c104c,0],
		[0x15c1050,0],
		[0x15c1054,0],
		[0x15c1058,0],
		[0x15c105c,0],
		[0x15c1060,0],
		[0x15c1064,0],
		[0x15c1068,0],
		[0x15c106c,0],
		[0x15c1070,0],
		[0x15c1074,0],
		[0x15c1078,0],
		[0x15c107c,0],
		[0x15c1080,0],
		[0x15c1084,0],
		[0x15c1088,0],
		[0x15c108c,0],
		[0x15c1090,0],
		[0x15c1094,0],
		[0x15c1098,0],
		[0x15c109c,0],
		[0x15c10a0,0],
		[0x15c10a4,0],
		[0x15c10a8,0],
		[0x15c10ac,0],
		[0x15c10b0,0],
		[0x15c10b4,0],
		[0x15c10b8,0],
		[0x15c10bc,0],
		[0x15c10c0,0],
		[0x15c10c4,0],
		[0x15c10c8,0],
		[0x15c10cc,0],
		[0x15c10d0,0],
		[0x15c10d4,0],
		[0x15c10d8,0],
		[0x15c10dc,0],
		[0x15c10e0,0],
		[0x15c10e4,0],
		[0x15c10e8,0],
		[0x15c10ec,0],
		[0x15c10f0,0],
		[0x15c10f4,0],
		[0x15c10f8,0],
		[0x15c10fc,0],
		[0x15c1100,0],
		[0x15c1104,0],
		[0x15c1108,0],
		[0x15c110c,0],
		[0x15c1110,0],
		[0x15c1114,0],
		[0x15c1118,0],
		[0x15c111c,0],
		[0x15c1120,0],
		[0x15c1124,0],
		[0x15c1128,0],
		[0x15c112c,0],
		[0x15c1130,0],
		[0x15c1134,0],
		[0x15c1138,0],
		[0x15c113c,0],
		[0x15c1140,0],
		[0x15c1144,0],
		[0x15c1148,0],
		[0x15c114c,0],
		[0x15c1150,0],
		[0x15c1154,0],
		[0x15c1158,0],
		[0x15c115c,0],
		[0x15c1160,0],
		[0x15c1164,0],
		[0x15c1168,0],
		[0x15c116c,0],
		[0x15c1170,0],
		[0x15c1174,0],
		[0x15c1178,0],
		[0x15c117c,0],
		[0x15c1180,0],
		[0x15c1184,0],
		[0x15c1188,0],
		[0x15c118c,0],
		[0x15c1190,0],
		[0x15c1194,0],
		[0x15c1198,0],
		[0x15c119c,0],
		[0x15c11a0,0],
		[0x15c11a4,0],
		[0x15c11a8,0],
		[0x15c11ac,0],
		[0x15c11b0,0],
		[0x15c11b4,0],
		[0x15c11b8,0],
		[0x15c11bc,0],
		[0x15c11c0,0],
		[0x15c11c4,0],
		[0x15c11c8,0],
		[0x15c11cc,0],
		[0x15c11d0,0],
		[0x15c11d4,0],
		[0x15c11d8,0],
		[0x15c11dc,0],
		[0x15c11e0,0],
		[0x15c11e4,0],
		[0x15c11e8,0],
		[0x15c11ec,0],
		[0x15c11f0,0],
		[0x15c11f4,0],
		[0x15c11f8,0],
		[0x15c11fc,0],
		[0x15c1200,0],
		[0x15c1204,0],
		[0x15c1208,0],
		[0x15c120c,0],
		[0x15c1210,0],
		[0x15c1214,0],
		[0x15c1218,0],
		[0x15c121c,0],
		[0x15c1220,0],
		[0x15c1224,0],
		[0x15c1228,0],
		[0x15c122c,0],
		[0x15c1230,0],
		[0x15c1234,0],
		[0x15c1238,0],
		[0x15c123c,0],
		[0x15c1240,0],
		[0x15c1244,0],
		[0x15c1248,0],
		[0x15c124c,0],
		[0x15c1250,0],
		[0x15c1254,0],
		[0x15c1258,0],
		[0x15c125c,0],
		[0x15c1260,0],
		[0x15c1264,0],
		[0x15c1268,0],
		[0x15c126c,0],
		[0x15c1270,0],
		[0x15c1274,0],
		[0x15c1278,0],
		[0x15c127c,0],
		[0x15c1280,0],
		[0x15c1284,0],
		[0x15c1288,0],
		[0x15c128c,0],
		[0x15c1290,0],
		[0x15c1294,0],
		[0x15c1298,0],
		[0x15c129c,0],
		[0x15c12a0,0],
		[0x15c12a4,0],
		[0x15c12a8,0],
		[0x15c12ac,0],
		[0x15c12b0,0],
		[0x15c12b4,0],
		[0x15c12b8,0],
		[0x15c12bc,0],
		[0x15c12c0,0],
		[0x15c12c4,0],
		[0x15c12c8,0],
		[0x15c12cc,0],
		[0x15c12d0,0],
		[0x15c12d4,0],
		[0x15c12d8,0],
		[0x15c12dc,0],
		[0x15c12e0,0],
		[0x15c12e4,0],
		[0x15c12e8,0],
		[0x15c12ec,0],
		[0x15c12f0,0],
		[0x15c12f4,0],
		[0x15c12f8,0],
		[0x15c12fc,0],
		[0x15c1300,0],
		[0x15c1304,0],
		[0x15c1308,0],
		[0x15c130c,0],
		[0x15c1310,0],
		[0x15c1314,0],
		[0x15c1318,0],
		[0x15c131c,0],
		[0x15c1320,0],
		[0x15c1324,0],
		[0x15c1328,0],
		[0x15c132c,0],
		[0x15c1330,0],
		[0x15c1334,0],
		[0x15c1338,0],
		[0x15c133c,0],
		[0x15c1340,0],
		[0x15c1344,0],
		[0x15c1348,0],
		[0x15c134c,0],
		[0x15c1350,0],
		[0x15c1354,0],
		[0x15c1358,0],
		[0x15c135c,0],
		[0x15c1360,0],
		[0x15c1364,0],
		[0x15c1368,0],
		[0x15c136c,0],
		[0x15c1370,0],
		[0x15c1374,0],
		[0x15c1378,0],
		[0x15c137c,0],
		[0x15c1380,0],
		[0x15c1384,0],
		[0x15c1388,0],
		[0x15c138c,0],
		[0x15c1390,0],
		[0x15c1394,0],
		[0x15c1398,0],
		[0x15c139c,0],
		[0x15c13a0,0],
		[0x15c13a4,0],
		[0x15c13a8,0],
		[0x15c13ac,0],
		[0x15c13b0,0],
		[0x15c13b4,0],
		[0x15c13b8,0],
		[0x15c13bc,0],
		[0x15c13c0,0],
		[0x15c13c4,0],
		[0x15c13c8,0],
		[0x15c13cc,0],
		[0x15c13d0,0],
		[0x15c13d4,0],
		[0x15c13d8,0],
		[0x15c13dc,0],
		[0x15c13e0,0],
		[0x15c13e4,0],
		[0x15c13e8,0],
		[0x15c13ec,0],
		[0x15c13f0,0],
		[0x15c13f4,0],
		[0x15c13f8,0],
		[0x15c13fc,0],
		[0x15c1400,0],
		[0x15c1404,0],
		[0x15c1408,0],
		[0x15c140c,0],
		[0x15c1410,0],
		[0x15c1414,0],
		[0x15c1418,0],
		[0x15c141c,0],
		[0x15c1420,0],
		[0x15c1424,0],
		[0x15c1428,0],
		[0x15c142c,0],
		[0x15c1430,0],
		[0x15c1434,0],
		[0x15c1438,0],
		[0x15c143c,0],
		[0x15c1440,0],
		[0x15c1444,0],
		[0x15c1448,0],
		[0x15c144c,0],
		[0x15c1450,0],
		[0x15c1454,0],
		[0x15c1458,0],
		[0x15c145c,0],
		[0x15c1460,0],
		[0x15c1464,0],
		[0x15c1468,0],
		[0x15c146c,0],
		[0x15c1470,0],
		[0x15c1474,0],
		[0x15c1478,0],
		[0x15c147c,0],
		[0x15c1480,0],
		[0x15c1484,0],
		[0x15c1488,0],
		[0x15c148c,0],
		[0x15c1490,0],
		[0x15c1494,0],
		[0x15c1498,0],
		[0x15c149c,0],
		[0x15c14a0,0],
		[0x15c14a4,0],
		[0x15c14a8,0],
		[0x15c14ac,0],
		[0x15c14b0,0],
		[0x15c14b4,0],
		[0x15c14b8,0],
		[0x15c14bc,0],
		[0x15c14c0,0],
		[0x15c14c4,0],
		[0x15c14c8,0],
		[0x15c14cc,0],
		[0x15c14d0,0],
		[0x15c14d4,0],
		[0x15c14d8,0],
		[0x15c14dc,0],
		[0x15c14e0,0],
		[0x15c14e4,0],
		[0x15c14e8,0],
		[0x15c14ec,0],
		[0x15c14f0,0],
		[0x15c14f4,0],
		[0x15c14f8,0],
		[0x15c14fc,0],
		[0x15c1500,0],
		[0x15c1504,0],
		[0x15c1508,0],
		[0x15c150c,0],
		[0x15c1510,0],
		[0x15c1514,0],
		[0x15c1518,0],
		[0x15c151c,0],
		[0x15c1520,0],
		[0x15c1524,0],
		[0x15c1528,0],
		[0x15c152c,0],
		[0x15c1530,0],
		[0x15c1534,0],
		[0x15c1538,0],
		[0x15c153c,0],
		[0x15c1540,0],
		[0x15c1544,0],
		[0x15c1548,0],
		[0x15c154c,0],
		[0x15c1550,0],
		[0x15c1554,0],
		[0x15c1558,0],
		[0x15c155c,0],
		[0x15c1560,0],
		[0x15c1564,0],
		[0x15c1568,0],
		[0x15c156c,0],
		[0x15c1570,0],
		[0x15c1574,0],
		[0x15c1578,0],
		[0x15c157c,0],
		[0x15c1580,0],
		[0x15c1584,0],
		[0x15c1588,0],
		[0x15c158c,0],
		[0x15c1590,0],
		[0x15c1594,0],
		[0x15c1598,0],
		[0x15c159c,0],
		[0x15c15a0,0],
		[0x15c15a4,0],
		[0x15c15a8,0],
		[0x15c15ac,0],
		[0x15c15b0,0],
		[0x15c15b4,0],
		[0x15c15b8,0],
		[0x15c15bc,0],
		[0x15c15c0,0],
		[0x15c15c4,0],
		[0x15c15c8,0],
		[0x15c15cc,0],
		[0x15c15d0,0],
		[0x15c15d4,0],
		[0x15c15d8,0],
		[0x15c15dc,0],
		[0x15c15e0,0],
		[0x15c15e4,0],
		[0x15c15e8,0],
		[0x15c15ec,0],
		[0x15c15f0,0],
		[0x15c15f4,0],
		[0x15c15f8,0],
		[0x15c15fc,0],
		[0x15c1600,0],
		[0x15c1604,0],
		[0x15c1608,0],
		[0x15c160c,0],
		[0x15c1610,0],
		[0x15c1614,0],
		[0x15c1618,0],
		[0x15c161c,0],
		[0x15c1620,0],
		[0x15c1624,0],
		[0x15c1628,0],
		[0x15c162c,0],
		[0x15c1630,0],
		[0x15c1634,0],
		[0x15c1638,0],
		[0x15c163c,0],
		[0x15c1640,0],
		[0x15c1644,0],
		[0x15c1648,0],
		[0x15c164c,0],
		[0x15c1650,0],
		[0x15c1654,0],
		[0x15c1658,0],
		[0x15c165c,0],
		[0x15c1660,0],
		[0x15c1664,0],
		[0x15c1668,0],
		[0x15c166c,0],
		[0x15c1670,0],
		[0x15c1674,0],
		[0x15c1678,0],
		[0x15c167c,0],
		[0x15c1680,0],
		[0x15c1684,0],
		[0x15c1688,0],
		[0x15c168c,0],
		[0x15c1690,0],
		[0x15c1694,0],
		[0x15c1698,0],
		[0x15c169c,0],
		[0x15c16a0,0],
		[0x15c16a4,0],
		[0x15c16a8,0],
		[0x15c16ac,0],
		[0x15c16b0,0],
		[0x15c16b4,0],
		[0x15c16b8,0],
		[0x15c16bc,0],
		[0x15c16c0,0],
		[0x15c16c4,0],
		[0x15c16c8,0],
		[0x15c16cc,0],
		[0, 0]
]).
string_val([
		[0x15c0968,3418906600723806067],
		[0, 0]
]).
:- use_module(library(clpfd)).
:- use_module(reif).
:- style_check(-singleton).

isTrue([X, Y]):-
    X == 49.

isTrue([X|Tail]):-
    isTrue(Tail).

log(File_name, Name, Addr, Base):-
    Offset #= Addr - Base,
    open(File_name, append, Stream),
    write(Stream, Name),
    write(Stream, ':'),
    write(Stream, Offset),
    nl(Stream),
    close(Stream).

possible_task_struct(Base_addr) :-
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM2_addr, Pid_addr, Tgid_addr, Real_parent_addr, Parent_addr , Child_addr, 
           Group_leader_addr, Thread_group_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    %MM2_addr #> Base_addr + 1000,
    Tasks_addr #> MM2_addr - 100,
    %FS_struct_addr #< Base_addr + 4000,
    Tgid_addr #= Pid_addr + 4,
    Real_parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr - 8,
    Child_addr #= Parent_addr + 8,
    %FIXME This may be too strong
    Group_leader_addr #=< Child_addr +32,
    %Comm_addr #= Base_addr + 1656,
    %Tasks_addr #= Base_addr + 1072,
    %FS_struct_addr #= Base_addr + 2640,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    % make query after labeling
    MM2_val #> 0,
    integer(MM2_val),
    
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val,  Comm_addr, Comm_val ]),

    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_parent_addr, Real_parent_val, Group_leader_addr, Group_leader_val]),
    Real_parent_val #> 0,
    Group_leader_val #> 0,
    query_ts(Real_parent_val, Comm_offset, Tasks_offset),
    query_ts(Group_leader_val, Comm_offset, Tasks_offset),

    labeling([enum], [Cred_addr, Cred_val]),
    Cred_val #> 0,
    query_cred(Cred_val),

    labeling([enum], [FS_struct_addr, FS_struct_val]),
    FS_struct_val #> 0,
    %query_fs_struct(FS_struct_val),



    get_time(End),
    Time_past is End - Current,
    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    log("profile.txt", "tasks", Tasks_addr, Base_addr),
    log("profile.txt", "mm_struct", MM2_addr, Base_addr),
    log("profile.txt", "comm", Comm_addr, Base_addr),
    log("profile.txt", "parent", Parent_addr, Base_addr),
    log("profile.txt", "group_leader", Group_leader_addr, Base_addr),
    log("profile.txt", "cred", Cred_addr, Base_addr),

    
    print_nl('tasks offset', Tasks_offset),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).

possible_mm_struct(Current_addr) :- 
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    % TODO: ADD vm_area_struct *mmap
    Ptr_profile = [
        [Mmap_addr, Mmap_val],
        [Pgd_addr, Pgd_val]  
    ],
    Ulong_profile = [
        [Mmap_base_addr, Mmap_base_val],
        [Mmap_legacy_base_addr, Mmap_legacy_base_val],
        [Task_size_addr, Task_size_val],
        [High_vm_end_addr, High_vm_end_val],
        [Start_brk_addr, Start_brk_val],
        [Brk_addr, Brk_val],
        [Start_stack_addr, Start_stack_val],
        [ARG_start_addr, ARG_start_val]
    ],
    Mmap_addr #= Current_addr,


    Mmap_base_addr #> Mmap_addr,
    %FIXME mmap_base need more value constraint, because we removed mmap_legacy_base and highest_vm_end.
    Mmap_base_val #> 0x7f0000000000,
    %FIXME in old linux version, e.g., there is no mmap_legacy_base and highest_vm_enb
    %chain([Mmap_base_addr, Mmap_legacy_base_addr, Task_size_addr, High_vm_end_addr, Pgd_addr], #<),
    chain([Mmap_base_addr, Task_size_addr, Pgd_addr], #<),

    %FIXME: This rule may be too strong
    %High_vm_end_addr #= Mmap_base_addr + 24, 
    Pgd_addr #> Task_size_addr,
    Pgd_addr #=< Task_size_addr + 40,
    %FIXME: This rule may not be true for other mm_struct.
    Task_size_val #>= 0x7ffffffff000,

    %Mmap_base_addr #= Current_addr + 40,
    %Mmap_legacy_base_addr #= Current_addr + 40,
    %Task_size_addr #= Current_addr + 48,
    %High_vm_end_addr #= Current_addr + 72,

    Start_brk_addr #> Pgd_addr,
    Start_stack_val #> 0x7ff000000000,
    % TODO: Convert this to index comparison. 
    ARG_start_addr #< Current_addr + 500,
    chain([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr], #<),
    ARG_start_addr #= Start_brk_addr + 24,
    Brk_val #< 0x7ff000000000,
    ARG_start_val #> 0x7ff000000000,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),


    labeling([enum], [Mmap_addr, Mmap_val, Mmap_base_addr, Pgd_addr, Pgd_val]),
    Mmap_val #> 0,
    Pgd_val #> 0,
    
    process_create(path('python'),
                    ['subquery.py', Mmap_val, "vm_area_struct", 2],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    label([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr]),
    statistics(real_time, [End|_]),

    log("profile.txt", "mmap", Mmap_addr, Current_addr),
    log("profile.txt", "mmap_base", Mmap_base_addr, Current_addr),
    log("profile.txt", "pgd", Pgd_addr, Current_addr),
    log("profile.txt", "start_brk", Start_brk_addr, Current_addr),
    log("profile.txt", "brk", Brk_addr, Current_addr),
    log("profile.txt", "start_stack", Start_stack_addr, Current_addr),
    log("profile.txt", "arg_start", ARG_start_addr, Current_addr),
    log("profile.txt", "mm_struct time", End, Start).


possible_vm_area_struct(Base_addr, Level) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [VM_next_addr, VM_next_val],
        [VM_file_addr, VM_file_val]
    ],
    Ulong_profile = [
        [VM_start_addr, VM_start_val],
        [VM_end_addr, VM_end_val],
        [VM_flag_addr, VM_flag_val]
        %VM_pgoff is 0, and we do not consider 0 as ulong
        %[VM_pgoff_addr, VM_pgoff_val]
    ],
    VM_start_addr #>= Base_addr,
    chain([VM_start_addr, VM_end_addr, VM_next_addr, VM_flag_addr, VM_file_addr], #<),
    VM_end_addr #= VM_start_addr + 8,
    VM_next_addr #= VM_end_addr + 8,
    VM_next_addr #< Base_addr + 32,
    VM_file_addr #< Base_addr + 180,
    VM_pgoff_addr #= VM_file_addr - 8,
    %VM_file_addr #= Base_addr + 160,

    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    %FIXME: VM_flag may need value constraints.

    label([VM_next_addr, VM_next_val]),
    /*if_(Level = 2,
        call(check_vm_area_struct, VM_next_val, 1),
        1 = 1),*/
    %Level #> 1 #==> check_vm_area_struct(VM_next_val, 1),

    labeling([enum], [VM_start_addr, VM_end_addr, VM_flag_addr, VM_pgoff_addr, VM_file_addr, VM_file_val]),
    
    VM_file_val #> 0,
    process_create(path('python'),
                ['subquery.py', VM_file_val, "vm_file"],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    statistics(real_time, [End|_]),

    log("profile.txt", "vm_start", VM_start_addr, Base_addr),
    log("profile.txt", "vm_end", VM_end_addr, Base_addr),
    log("profile.txt", "vm_next", VM_next_addr, Base_addr),
    log("profile.txt", "vm_flag", VM_flag_addr, Base_addr),
    log("profile.txt", "vm_pgoff", VM_pgoff_addr, Base_addr),
    log("profile.txt", "vm_file", VM_file_addr, Base_addr),
    log("profile.txt", "vm_area_struct time", End, Start).

check_vm_area_struct(Base_addr, Level) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "vm_area_struct", Level],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vm_file(Base_addr) :-
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [Vfs_mount_addr, Vfs_mount_val],
        [Dentry_addr, Dentry_val]
    ],
    Vfs_mount_addr #> Base_addr,
    Dentry_addr #= Vfs_mount_addr + 8,
    Dentry_addr #< Base_addr + 40,
    tuples_in(Ptr_profile, Ptr),
    label([Vfs_mount_val, Dentry_val]),
    Vfs_mount_val #>0,
    Dentry_val #> 0,
    %FIXME seems like we do not need this, make sure the string is not addr=0
/*
    process_create(path('python'),
                    ['subquery.py', Vfs_mount_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vfs_mount(Base_addr) :-
    pointer(Ptr),
    Ptr_profile = [
        [Dentry_addr, Dentry_val]
    ],
    Dentry_addr #< Base_addr + 16,
    tuples_in(Ptr_profile, Ptr),
    label([Dentry_val]),
    Dentry_val #> 0,
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).
    
possible_dentry(Base_addr) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    string_val(Str),
    Ptr_profile = [
        [Dparent_addr, Dparent_val],
        [Dchild_addr, Dchild_val]
    ],
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    %log("profile.txt", "dentry addr", Base_addr, 0),
    Dparent_addr #> Base_addr,
    Dname_addr #> 0,
    Dname_addr #< Base_addr + 200,
    %Dname_addr #= Base_addr + 160,
    %FIXME This child rule is not applicable for old kernel version. 
    %chain([Dparent_addr, Dname_addr, Dchild_addr], #<),
    %Dchild_addr #< Base_addr + 200,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    labeling([enum], [Dparent_addr, Dparent_val, Dname_addr, Dchild_addr, Dchild_val]),
    Dname_offset #= Dname_addr - Base_addr,
    integer(Dname_offset),
    Dparent_val #> 0,
    
    %FIXME d_parent may not be initialized
    /*process_create(path('python'),
                ['subquery.py', Dparent_val, "d_entry", Dname_offset],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/

    %FIXME: may need to find another way for all list_head. 
    /*Dchild_offset #= Dchild_addr - Base_addr,
    integer(Dchild_offset),
    Dchild_base #= Dchild_val - Dchild_offset,
    integer(Dchild_base),
    Dchild_base #> 0,
    process_create(path('python'),
                ['subquery.py', Dchild_base, "d_entry", Dname_offset],
                [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    statistics(real_time, [End|_]).
/*
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    log("profile.txt", "d_parent", Dparent_addr, Base_addr),
    log("profile.txt", "d_child", Dchild_addr, Base_addr),
    log("profile.txt", "dentry time", End, Start).
*/
possible_d_entry(Base_addr, Dname_offset) :-
    current_predicate(string_val/1),
    string_val(Str),
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    Dname_addr #= Base_addr + Dname_offset,
    tuples_in(Str_profile, Str),
    label([Dname_addr]).

possible_list_head(Tasks_val, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_val, Tasks_addr]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],
    Comm_addr #= Tasks_val - Tasks_offset + Comm_offset,
    Tasks_addr #\= Tasks_val,
    tuples_in(Str_profile, Str),
    tuples_in(Ptr_profile, Ptr),
    label([Comm_addr]).

possible_ts(Base_addr, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_addr, Tasks_val]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],

    Comm_addr #= Base_addr + Comm_offset,
    Tasks_addr #= Base_addr + Tasks_offset,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),

    label([Tasks_val]),
    
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "list_head", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_cred(Base_addr) :-
    statistics(real_time, [Start|_]),

    int(Int),
    long(Ulg),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3],
        [Addr4, Val4],
        [Addr5, Val5],
        [Addr6, Val6],
        [Addr7, Val7],
        [Addr8, Val8],
        [Addr9, Val9]
    ],
    %FIXME For now, this rule is hard-coded because we do not consider 0 as a unsign long number. 
    %So that for cred whos val10 is 0, this rule does not apply.
    /*Ulong_profile = [
        [Addr10, Val10],
        [Addr11, Val11]
    ],*/
    Addr1 #> Base_addr,
    %chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9, Addr10, Addr11], #<),
    chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9], #<),
    Addr1 #= Base_addr + 4,
    Addr9 #= Addr1 + 32,
    %Addr11 #< Base_addr + 120,
    tuples_in(Int_profile, Int),
    %tuples_in(Ulong_profile, Ulg),
    statistics(real_time, [End|_]),
    labeling([enum], [Addr1, Addr2, Addr5, Addr6]),
    log("profile.txt", "cred time", End, Start),
    log('profile.txt', "uid", Addr1, Base_addr),
    log('profile.txt', "gid", Addr2, Base_addr),
    log('profile.txt', "euid", Addr5, Base_addr),
    log('profile.txt', "egid", Addr6, Base_addr).

possible_fs_struct(Base_addr) :-
    statistics(real_time, [Start|_]),
    int(Int),
    pointer(Ptr),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3]
    ],
    Ptr_profile = [
        [Root_addr, Root_val],
        [PWD_addr, PWD_val]
    ],
    Addr1 #>= Base_addr,
    chain([Addr1, Addr2, Addr3, Root_addr, PWD_addr], #<),
    PWD_addr #= Root_addr + 16,
    PWD_addr #< Base_addr + 50,
    tuples_in(Int_profile, Int),
    tuples_in(Ptr_profile, Ptr),
    label([Root_addr, Root_val]),
    
    process_create(path('python'),
                    ['subquery.py', Root_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    label([PWD_addr, PWD_val]),
    process_create(path('python'),
                    ['subquery.py', PWD_val, "dentry"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    statistics(real_time, [End|_]),
    log("profile.txt", "fs time", End, Start),
    log('profile.txt', "Root", Root_addr, Base_addr),
    log('profile.txt', "pwd", PWD_addr, Base_addr).
