:- use_module(library(clpfd)).
:- style_check(-singleton).
pointer([
		[0x13e21100,0],
		[0x13e21108,0],
		[0x13e21110,518898080],
		[0x13e21118,399667200],
		[0x13e21120,461128992],
		[0x13e21128,436515008],
		[0x13e21130,0],
		[0x13e21148,0],
		[0x13e21150,0],
		[0x13e21158,333582680],
		[0x13e21160,333582680],
		[0x13e21168,0],
		[0x13e21170,0],
		[0x13e21178,0],
		[0x13e21180,0],
		[0x13e21188,0],
		[0x13e21190,334032448],
		[0x13e21198,0],
		[0x13e211a0,0],
		[0x13e211b8,0],
		[0x13e211c0,333875544],
		[0x13e211c8,0],
		[0x13e211d0,333582800],
		[0x13e211d8,333582800],
		[0x13e211e0,333582816],
		[0x13e211e8,333582816],
		[0x13e211f0,461129368],
		[0x13e211f8,0],
		[0x13e21200,0],
		[0x13e21208,0],
		[0x13e21210,518898080],
		[0x13e21218,402158336],
		[0x13e21220,460870088],
		[0x13e21228,436515008],
		[0x13e21230,0],
		[0x13e21248,0],
		[0x13e21250,0],
		[0x13e21258,333582936],
		[0x13e21260,333582936],
		[0x13e21270,0],
		[0x13e21278,0],
		[0x13e21280,0],
		[0x13e21288,0],
		[0x13e21290,334086912],
		[0x13e21298,0],
		[0x13e212a0,0],
		[0x13e212b8,0],
		[0x13e212c0,333874112],
		[0x13e212c8,0],
		[0x13e212d0,333583056],
		[0x13e212d8,333583056],
		[0x13e212e0,333583072],
		[0x13e212e8,333583072],
		[0x13e212f0,460870464],
		[0x13e212f8,0],
		[0x13e21300,0],
		[0x13e21308,0],
		[0x13e21310,518898080],
		[0x13e21318,460977664],
		[0x13e21320,399047672],
		[0x13e21328,436515008],
		[0x13e21330,0],
		[0x13e21348,0],
		[0x13e21350,0],
		[0x13e21358,333583192],
		[0x13e21360,333583192],
		[0x13e21370,0],
		[0x13e21378,0],
		[0x13e21380,0],
		[0x13e21388,0],
		[0x13e21390,334086912],
		[0x13e21398,0],
		[0x13e213a0,0],
		[0x13e213b8,0],
		[0x13e213c0,333876984],
		[0x13e213c8,0],
		[0x13e213d0,333583312],
		[0x13e213d8,333583312],
		[0x13e213e0,333583328],
		[0x13e213e8,333583328],
		[0x13e213f0,399048048],
		[0x13e213f8,0],
		[0x13e21400,333583872],
		[0x13e21408,428115008],
		[0x13e21410,0],
		[0x13e21418,0],
		[0x13e21420,0],
		[0x13e21428,436507936],
		[0x13e21430,0],
		[0x13e21438,0],
		[0x13e21448,0],
		[0x13e21450,0],
		[0x13e21458,333583448],
		[0x13e21460,333583448],
		[0x13e21470,0],
		[0x13e21478,0],
		[0x13e21480,0],
		[0x13e21488,0],
		[0x13e21490,334086912],
		[0x13e21498,0],
		[0x13e214a0,0],
		[0x13e214a8,0],
		[0x13e214b8,0],
		[0x13e214c0,333874432],
		[0x13e214c8,0],
		[0x13e214d0,333583568],
		[0x13e214d8,333583568],
		[0x13e214e0,333583584],
		[0x13e214e8,333583584],
		[0x13e214f0,401816296],
		[0x13e214f8,0],
		[0x13e21500,0],
		[0x13e21508,0],
		[0x13e21510,518898080],
		[0x13e21518,400195968],
		[0x13e21520,400109392],
		[0x13e21528,436515008],
		[0x13e21530,0],
		[0x13e21548,0],
		[0x13e21550,0],
		[0x13e21558,333583704],
		[0x13e21560,333583704],
		[0x13e21568,0],
		[0x13e21570,0],
		[0x13e21578,0],
		[0x13e21580,0],
		[0x13e21588,0],
		[0x13e21590,334086912],
		[0x13e215b8,0],
		[0x13e215c0,333876384],
		[0x13e215c8,0],
		[0x13e215d0,333583824],
		[0x13e215d8,333583824],
		[0x13e215e0,333583840],
		[0x13e215e8,333583840],
		[0x13e215f0,400109768],
		[0x13e215f8,0],
		[0x13e21600,333585920],
		[0x13e21608,428115008],
		[0x13e21610,0],
		[0x13e21618,0],
		[0x13e21620,0],
		[0x13e21628,436507936],
		[0x13e21630,0],
		[0x13e21638,0],
		[0x13e21648,0],
		[0x13e21650,0],
		[0x13e21658,333583960],
		[0x13e21660,333583960],
		[0x13e21670,0],
		[0x13e21678,0],
		[0x13e21680,0],
		[0x13e21688,0],
		[0x13e21690,334086912],
		[0x13e21698,0],
		[0x13e216a0,0],
		[0x13e216a8,0],
		[0x13e216b8,0],
		[0x13e216c0,333874432],
		[0x13e216c8,0],
		[0x13e216d0,333584080],
		[0x13e216d8,333584080],
		[0x13e216e0,333584096],
		[0x13e216e8,333584096],
		[0x13e216f0,401317176],
		[0x13e216f8,0],
		[0x13e21700,0],
		[0x13e21708,0],
		[0x13e21710,473597472],
		[0x13e21718,398594816],
		[0x13e21720,460547232],
		[0x13e21728,436473856],
		[0x13e21730,0],
		[0x13e21748,0],
		[0x13e21750,0],
		[0x13e21758,333584216],
		[0x13e21760,333584216],
		[0x13e21768,0],
		[0x13e21770,0],
		[0x13e21778,0],
		[0x13e21780,0],
		[0x13e21788,0],
		[0x13e21790,420304000],
		[0x13e21798,0],
		[0x13e217a0,0],
		[0x13e217a8,0],
		[0x13e217b0,0],
		[0x13e217b8,0],
		[0x13e217c0,348964200],
		[0x13e217c8,365277568],
		[0x13e217d0,333584336],
		[0x13e217d8,333584336],
		[0x13e217e0,333584352],
		[0x13e217e8,333584352],
		[0x13e217f0,460547608],
		[0x13e217f8,0],
		[0x13e21800,333585408],
		[0x13e21808,428115008],
		[0x13e21810,0],
		[0x13e21818,0],
		[0x13e21820,0],
		[0x13e21828,436507936],
		[0x13e21830,0],
		[0x13e21838,0],
		[0x13e21848,0],
		[0x13e21850,0],
		[0x13e21858,333584472],
		[0x13e21860,333584472],
		[0x13e21870,0],
		[0x13e21878,0],
		[0x13e21880,0],
		[0x13e21888,0],
		[0x13e21890,334086912],
		[0x13e21898,0],
		[0x13e218a0,0],
		[0x13e218a8,0],
		[0x13e218b8,0],
		[0x13e218c0,333874432],
		[0x13e218c8,0],
		[0x13e218d0,333584592],
		[0x13e218d8,333584592],
		[0x13e218e0,333584608],
		[0x13e218e8,333584608],
		[0x13e218f0,401319448],
		[0x13e218f8,0],
		[0x13e21900,0],
		[0x13e21908,0],
		[0x13e21910,518898080],
		[0x13e21918,402016704],
		[0x13e21920,399037952],
		[0x13e21928,436515008],
		[0x13e21930,0],
		[0x13e21948,0],
		[0x13e21950,0],
		[0x13e21958,333584728],
		[0x13e21960,333584728],
		[0x13e21968,0],
		[0x13e21970,0],
		[0x13e21978,0],
		[0x13e21980,0],
		[0x13e21988,0],
		[0x13e21990,334032448],
		[0x13e21998,0],
		[0x13e219a0,0],
		[0x13e219b8,0],
		[0x13e219c0,333874080],
		[0x13e219c8,0],
		[0x13e219d0,333584848],
		[0x13e219d8,333584848],
		[0x13e219e0,333584864],
		[0x13e219e8,333584864],
		[0x13e219f0,399038328],
		[0x13e219f8,0],
		[0x13e21a00,333584384],
		[0x13e21a08,428115008],
		[0x13e21a10,0],
		[0x13e21a18,0],
		[0x13e21a20,0],
		[0x13e21a28,436507936],
		[0x13e21a30,0],
		[0x13e21a38,0],
		[0x13e21a48,0],
		[0x13e21a50,0],
		[0x13e21a58,333584984],
		[0x13e21a60,333584984],
		[0x13e21a70,0],
		[0x13e21a78,0],
		[0x13e21a80,0],
		[0x13e21a88,0],
		[0x13e21a90,334086912],
		[0x13e21a98,0],
		[0x13e21aa0,0],
		[0x13e21aa8,0],
		[0x13e21ab8,0],
		[0x13e21ac0,333874432],
		[0x13e21ac8,0],
		[0x13e21ad0,333585104],
		[0x13e21ad8,333585104],
		[0x13e21ae0,333585120],
		[0x13e21ae8,333585120],
		[0x13e21af0,401256280],
		[0x13e21af8,0],
		[0x13e21b00,0],
		[0x13e21b08,0],
		[0x13e21b10,518898080],
		[0x13e21b18,402161408],
		[0x13e21b20,460876568],
		[0x13e21b28,436515008],
		[0x13e21b30,0],
		[0x13e21b48,0],
		[0x13e21b50,0],
		[0x13e21b58,333585240],
		[0x13e21b60,333585240],
		[0x13e21b70,0],
		[0x13e21b78,0],
		[0x13e21b80,0],
		[0x13e21b88,0],
		[0x13e21b90,334086912],
		[0x13e21b98,0],
		[0x13e21ba0,0],
		[0x13e21bb8,0],
		[0x13e21bc0,333873896],
		[0x13e21bc8,0],
		[0x13e21bd0,333585360],
		[0x13e21bd8,333585360],
		[0x13e21be0,333585376],
		[0x13e21be8,333585376],
		[0x13e21bf0,460876944],
		[0x13e21bf8,0],
		[0x13e21c00,0],
		[0x13e21c08,428115008],
		[0x13e21c10,0],
		[0x13e21c18,0],
		[0x13e21c20,0],
		[0x13e21c28,436507936],
		[0x13e21c30,0],
		[0x13e21c38,0],
		[0x13e21c48,0],
		[0x13e21c50,0],
		[0x13e21c58,333585496],
		[0x13e21c60,333585496],
		[0x13e21c70,0],
		[0x13e21c78,0],
		[0x13e21c80,0],
		[0x13e21c88,0],
		[0x13e21c90,334086912],
		[0x13e21c98,0],
		[0x13e21ca0,0],
		[0x13e21ca8,0],
		[0x13e21cb8,0],
		[0x13e21cc0,333874432],
		[0x13e21cc8,0],
		[0x13e21cd0,333585616],
		[0x13e21cd8,333585616],
		[0x13e21ce0,333585632],
		[0x13e21ce8,333585632],
		[0x13e21cf0,401258056],
		[0x13e21cf8,0],
		[0x13e21d00,333583360],
		[0x13e21d08,428115008],
		[0x13e21d10,0],
		[0x13e21d18,0],
		[0x13e21d20,0],
		[0x13e21d28,436507936],
		[0x13e21d30,0],
		[0x13e21d38,0],
		[0x13e21d48,0],
		[0x13e21d50,0],
		[0x13e21d58,333585752],
		[0x13e21d60,333585752],
		[0x13e21d70,0],
		[0x13e21d78,0],
		[0x13e21d80,0],
		[0x13e21d88,0],
		[0x13e21d90,334086912],
		[0x13e21d98,0],
		[0x13e21da0,0],
		[0x13e21da8,0],
		[0x13e21db8,0],
		[0x13e21dc0,333874432],
		[0x13e21dc8,0],
		[0x13e21dd0,333585872],
		[0x13e21dd8,333585872],
		[0x13e21de0,333585888],
		[0x13e21de8,333585888],
		[0x13e21df0,401758952],
		[0x13e21df8,0],
		[0x13e21e00,333584896],
		[0x13e21e08,428115008],
		[0x13e21e10,0],
		[0x13e21e18,0],
		[0x13e21e20,0],
		[0x13e21e28,436507936],
		[0x13e21e30,0],
		[0x13e21e38,0],
		[0x13e21e48,0],
		[0x13e21e50,0],
		[0x13e21e58,333586008],
		[0x13e21e60,333586008],
		[0x13e21e70,0],
		[0x13e21e78,0],
		[0x13e21e80,0],
		[0x13e21e88,0],
		[0x13e21e90,334086912],
		[0x13e21e98,0],
		[0x13e21ea0,0],
		[0x13e21ea8,0],
		[0x13e21eb8,0],
		[0x13e21ec0,333874432],
		[0x13e21ec8,0],
		[0x13e21ed0,333586128],
		[0x13e21ed8,333586128],
		[0x13e21ee0,333586144],
		[0x13e21ee8,333586144],
		[0x13e21ef0,401318856],
		[0x13e21ef8,0],
		[0x13e21f00,0],
		[0x13e21f08,0],
		[0x13e21f10,518898080],
		[0x13e21f18,402159296],
		[0x13e21f20,460879808],
		[0x13e21f28,436515008],
		[0x13e21f30,0],
		[0x13e21f48,0],
		[0x13e21f50,0],
		[0x13e21f58,333586264],
		[0x13e21f60,333586264],
		[0x13e21f70,0],
		[0x13e21f78,0],
		[0x13e21f80,0],
		[0x13e21f88,0],
		[0x13e21f90,334086912],
		[0x13e21f98,0],
		[0x13e21fa0,0],
		[0x13e21fb8,0],
		[0x13e21fc0,333873688],
		[0x13e21fc8,0],
		[0x13e21fd0,333586384],
		[0x13e21fd8,333586384],
		[0x13e21fe0,333586400],
		[0x13e21fe8,333586400],
		[0x13e21ff0,460880184],
		[0x13e21ff8,0],
		[0x13e22000,333589504],
		[0x13e22008,428115008],
		[0x13e22010,0],
		[0x13e22018,0],
		[0x13e22020,0],
		[0x13e22028,436507936],
		[0x13e22030,0],
		[0x13e22038,0],
		[0x13e22048,0],
		[0x13e22050,0],
		[0x13e22058,333586520],
		[0x13e22060,333586520],
		[0x13e22070,0],
		[0x13e22078,0],
		[0x13e22080,0],
		[0x13e22088,0],
		[0x13e22090,334086912],
		[0x13e22098,0],
		[0x13e220a0,0],
		[0x13e220a8,0],
		[0x13e220b8,0],
		[0x13e220c0,333874432],
		[0x13e220c8,0],
		[0x13e220d0,333586640],
		[0x13e220d8,333586640],
		[0x13e220e0,333586656],
		[0x13e220e8,333586656],
		[0x13e220f0,401052072],
		[0x13e220f8,0],
		[0, 0]
]).
unknown([
		[0x13e21140,703811995861024],
		[0x13e21240,703811995860992],
		[0x13e21340,703811995860992],
		[0x13e21440,703811995928576],
		[0x13e21540,703811995860992],
		[0x13e21640,703811995928576],
		[0x13e21740,1688862745167874],
		[0x13e21840,703811995928576],
		[0x13e21940,703811995861024],
		[0x13e21a40,703811995928576],
		[0x13e21b40,703811995860992],
		[0x13e21c40,703811995928576],
		[0x13e21d40,703811995928576],
		[0x13e21e40,703811995928576],
		[0x13e21f40,703811995860992],
		[0x13e22040,703811995928576],
		[0, 0]
]).
long([
		[0x13e21138,4],
		[0x13e211a8,32],
		[0x13e211b0,596],
		[0x13e21238,4],
		[0x13e21268,832],
		[0x13e212a8,32],
		[0x13e212b0,832],
		[0x13e21338,4],
		[0x13e21368,832],
		[0x13e213a8,32],
		[0x13e213b0,832],
		[0x13e21468,2147483647],
		[0x13e21538,1],
		[0x13e21598,164],
		[0x13e215a0,137438953504],
		[0x13e215a8,32],
		[0x13e21668,2147483647],
		[0x13e21738,2],
		[0x13e21868,2147483647],
		[0x13e21938,3],
		[0x13e219a8,32],
		[0x13e219b0,456],
		[0x13e21a68,2147483647],
		[0x13e21b38,4],
		[0x13e21b68,832],
		[0x13e21ba8,32],
		[0x13e21bb0,832],
		[0x13e21c68,2147483647],
		[0x13e21d68,2147483647],
		[0x13e21e68,2147483647],
		[0x13e21f38,4],
		[0x13e21f68,832],
		[0x13e21fa8,32],
		[0x13e21fb0,832],
		[0x13e22068,2147483647],
		[0, 0]
]).
int([
		[0x13e21100,0],
		[0x13e21104,0],
		[0x13e21108,0],
		[0x13e2110c,0],
		[0x13e21130,0],
		[0x13e21134,0],
		[0x13e21138,4],
		[0x13e2113c,0],
		[0x13e21148,0],
		[0x13e2114c,0],
		[0x13e21150,0],
		[0x13e21154,0],
		[0x13e21168,0],
		[0x13e2116c,0],
		[0x13e21170,0],
		[0x13e21174,0],
		[0x13e21178,0],
		[0x13e2117c,0],
		[0x13e21180,0],
		[0x13e21184,0],
		[0x13e21188,0],
		[0x13e2118c,0],
		[0x13e21198,0],
		[0x13e2119c,0],
		[0x13e211a0,0],
		[0x13e211a4,0],
		[0x13e211a8,32],
		[0x13e211ac,0],
		[0x13e211b0,596],
		[0x13e211b4,0],
		[0x13e211b8,0],
		[0x13e211bc,0],
		[0x13e211c8,0],
		[0x13e211cc,0],
		[0x13e211f8,0],
		[0x13e211fc,0],
		[0x13e21200,0],
		[0x13e21204,0],
		[0x13e21208,0],
		[0x13e2120c,0],
		[0x13e21230,0],
		[0x13e21234,0],
		[0x13e21238,4],
		[0x13e2123c,0],
		[0x13e21248,0],
		[0x13e2124c,0],
		[0x13e21250,0],
		[0x13e21254,0],
		[0x13e21268,832],
		[0x13e2126c,0],
		[0x13e21270,0],
		[0x13e21274,0],
		[0x13e21278,0],
		[0x13e2127c,0],
		[0x13e21280,0],
		[0x13e21284,0],
		[0x13e21288,0],
		[0x13e2128c,0],
		[0x13e21298,0],
		[0x13e2129c,0],
		[0x13e212a0,0],
		[0x13e212a4,0],
		[0x13e212a8,32],
		[0x13e212ac,0],
		[0x13e212b0,832],
		[0x13e212b4,0],
		[0x13e212b8,0],
		[0x13e212bc,0],
		[0x13e212c8,0],
		[0x13e212cc,0],
		[0x13e212f8,0],
		[0x13e212fc,0],
		[0x13e21300,0],
		[0x13e21304,0],
		[0x13e21308,0],
		[0x13e2130c,0],
		[0x13e21330,0],
		[0x13e21334,0],
		[0x13e21338,4],
		[0x13e2133c,0],
		[0x13e21348,0],
		[0x13e2134c,0],
		[0x13e21350,0],
		[0x13e21354,0],
		[0x13e21368,832],
		[0x13e2136c,0],
		[0x13e21370,0],
		[0x13e21374,0],
		[0x13e21378,0],
		[0x13e2137c,0],
		[0x13e21380,0],
		[0x13e21384,0],
		[0x13e21388,0],
		[0x13e2138c,0],
		[0x13e21398,0],
		[0x13e2139c,0],
		[0x13e213a0,0],
		[0x13e213a4,0],
		[0x13e213a8,32],
		[0x13e213ac,0],
		[0x13e213b0,832],
		[0x13e213b4,0],
		[0x13e213b8,0],
		[0x13e213bc,0],
		[0x13e213c8,0],
		[0x13e213cc,0],
		[0x13e213f8,0],
		[0x13e213fc,0],
		[0x13e21410,0],
		[0x13e21414,0],
		[0x13e21418,0],
		[0x13e2141c,0],
		[0x13e21420,0],
		[0x13e21424,0],
		[0x13e21430,0],
		[0x13e21434,0],
		[0x13e21438,0],
		[0x13e2143c,0],
		[0x13e21448,0],
		[0x13e2144c,0],
		[0x13e21450,0],
		[0x13e21454,0],
		[0x13e2146c,0],
		[0x13e21470,0],
		[0x13e21474,0],
		[0x13e21478,0],
		[0x13e2147c,0],
		[0x13e21480,0],
		[0x13e21484,0],
		[0x13e21488,0],
		[0x13e2148c,0],
		[0x13e21498,0],
		[0x13e2149c,0],
		[0x13e214a0,0],
		[0x13e214a4,0],
		[0x13e214a8,0],
		[0x13e214ac,0],
		[0x13e214b8,0],
		[0x13e214bc,0],
		[0x13e214c8,0],
		[0x13e214cc,0],
		[0x13e214f8,0],
		[0x13e214fc,0],
		[0x13e21500,0],
		[0x13e21504,0],
		[0x13e21508,0],
		[0x13e2150c,0],
		[0x13e21530,0],
		[0x13e21534,0],
		[0x13e21538,1],
		[0x13e2153c,0],
		[0x13e21548,0],
		[0x13e2154c,0],
		[0x13e21550,0],
		[0x13e21554,0],
		[0x13e21568,0],
		[0x13e2156c,0],
		[0x13e21570,0],
		[0x13e21574,0],
		[0x13e21578,0],
		[0x13e2157c,0],
		[0x13e21580,0],
		[0x13e21584,0],
		[0x13e21588,0],
		[0x13e2158c,0],
		[0x13e21598,164],
		[0x13e2159c,0],
		[0x13e215a0,32],
		[0x13e215a4,32],
		[0x13e215a8,32],
		[0x13e215ac,0],
		[0x13e215b8,0],
		[0x13e215bc,0],
		[0x13e215c8,0],
		[0x13e215cc,0],
		[0x13e215f8,0],
		[0x13e215fc,0],
		[0x13e21610,0],
		[0x13e21614,0],
		[0x13e21618,0],
		[0x13e2161c,0],
		[0x13e21620,0],
		[0x13e21624,0],
		[0x13e21630,0],
		[0x13e21634,0],
		[0x13e21638,0],
		[0x13e2163c,0],
		[0x13e21648,0],
		[0x13e2164c,0],
		[0x13e21650,0],
		[0x13e21654,0],
		[0x13e2166c,0],
		[0x13e21670,0],
		[0x13e21674,0],
		[0x13e21678,0],
		[0x13e2167c,0],
		[0x13e21680,0],
		[0x13e21684,0],
		[0x13e21688,0],
		[0x13e2168c,0],
		[0x13e21698,0],
		[0x13e2169c,0],
		[0x13e216a0,0],
		[0x13e216a4,0],
		[0x13e216a8,0],
		[0x13e216ac,0],
		[0x13e216b8,0],
		[0x13e216bc,0],
		[0x13e216c8,0],
		[0x13e216cc,0],
		[0x13e216f8,0],
		[0x13e216fc,0],
		[0x13e21700,0],
		[0x13e21704,0],
		[0x13e21708,0],
		[0x13e2170c,0],
		[0x13e21730,0],
		[0x13e21734,0],
		[0x13e21738,2],
		[0x13e2173c,0],
		[0x13e21740,2050],
		[0x13e21748,0],
		[0x13e2174c,0],
		[0x13e21750,0],
		[0x13e21754,0],
		[0x13e21768,0],
		[0x13e2176c,0],
		[0x13e21770,0],
		[0x13e21774,0],
		[0x13e21778,0],
		[0x13e2177c,0],
		[0x13e21780,0],
		[0x13e21784,0],
		[0x13e21788,0],
		[0x13e2178c,0],
		[0x13e21798,0],
		[0x13e2179c,0],
		[0x13e217a0,0],
		[0x13e217a4,0],
		[0x13e217a8,0],
		[0x13e217ac,0],
		[0x13e217b0,0],
		[0x13e217b4,0],
		[0x13e217b8,0],
		[0x13e217bc,0],
		[0x13e217f8,0],
		[0x13e217fc,0],
		[0x13e21810,0],
		[0x13e21814,0],
		[0x13e21818,0],
		[0x13e2181c,0],
		[0x13e21820,0],
		[0x13e21824,0],
		[0x13e21830,0],
		[0x13e21834,0],
		[0x13e21838,0],
		[0x13e2183c,0],
		[0x13e21848,0],
		[0x13e2184c,0],
		[0x13e21850,0],
		[0x13e21854,0],
		[0x13e2186c,0],
		[0x13e21870,0],
		[0x13e21874,0],
		[0x13e21878,0],
		[0x13e2187c,0],
		[0x13e21880,0],
		[0x13e21884,0],
		[0x13e21888,0],
		[0x13e2188c,0],
		[0x13e21898,0],
		[0x13e2189c,0],
		[0x13e218a0,0],
		[0x13e218a4,0],
		[0x13e218a8,0],
		[0x13e218ac,0],
		[0x13e218b8,0],
		[0x13e218bc,0],
		[0x13e218c8,0],
		[0x13e218cc,0],
		[0x13e218f8,0],
		[0x13e218fc,0],
		[0x13e21900,0],
		[0x13e21904,0],
		[0x13e21908,0],
		[0x13e2190c,0],
		[0x13e21930,0],
		[0x13e21934,0],
		[0x13e21938,3],
		[0x13e2193c,0],
		[0x13e21948,0],
		[0x13e2194c,0],
		[0x13e21950,0],
		[0x13e21954,0],
		[0x13e21968,0],
		[0x13e2196c,0],
		[0x13e21970,0],
		[0x13e21974,0],
		[0x13e21978,0],
		[0x13e2197c,0],
		[0x13e21980,0],
		[0x13e21984,0],
		[0x13e21988,0],
		[0x13e2198c,0],
		[0x13e21998,0],
		[0x13e2199c,0],
		[0x13e219a0,0],
		[0x13e219a4,0],
		[0x13e219a8,32],
		[0x13e219ac,0],
		[0x13e219b0,456],
		[0x13e219b4,0],
		[0x13e219b8,0],
		[0x13e219bc,0],
		[0x13e219c8,0],
		[0x13e219cc,0],
		[0x13e219f8,0],
		[0x13e219fc,0],
		[0x13e21a10,0],
		[0x13e21a14,0],
		[0x13e21a18,0],
		[0x13e21a1c,0],
		[0x13e21a20,0],
		[0x13e21a24,0],
		[0x13e21a30,0],
		[0x13e21a34,0],
		[0x13e21a38,0],
		[0x13e21a3c,0],
		[0x13e21a48,0],
		[0x13e21a4c,0],
		[0x13e21a50,0],
		[0x13e21a54,0],
		[0x13e21a6c,0],
		[0x13e21a70,0],
		[0x13e21a74,0],
		[0x13e21a78,0],
		[0x13e21a7c,0],
		[0x13e21a80,0],
		[0x13e21a84,0],
		[0x13e21a88,0],
		[0x13e21a8c,0],
		[0x13e21a98,0],
		[0x13e21a9c,0],
		[0x13e21aa0,0],
		[0x13e21aa4,0],
		[0x13e21aa8,0],
		[0x13e21aac,0],
		[0x13e21ab8,0],
		[0x13e21abc,0],
		[0x13e21ac8,0],
		[0x13e21acc,0],
		[0x13e21af8,0],
		[0x13e21afc,0],
		[0x13e21b00,0],
		[0x13e21b04,0],
		[0x13e21b08,0],
		[0x13e21b0c,0],
		[0x13e21b30,0],
		[0x13e21b34,0],
		[0x13e21b38,4],
		[0x13e21b3c,0],
		[0x13e21b48,0],
		[0x13e21b4c,0],
		[0x13e21b50,0],
		[0x13e21b54,0],
		[0x13e21b68,832],
		[0x13e21b6c,0],
		[0x13e21b70,0],
		[0x13e21b74,0],
		[0x13e21b78,0],
		[0x13e21b7c,0],
		[0x13e21b80,0],
		[0x13e21b84,0],
		[0x13e21b88,0],
		[0x13e21b8c,0],
		[0x13e21b98,0],
		[0x13e21b9c,0],
		[0x13e21ba0,0],
		[0x13e21ba4,0],
		[0x13e21ba8,32],
		[0x13e21bac,0],
		[0x13e21bb0,832],
		[0x13e21bb4,0],
		[0x13e21bb8,0],
		[0x13e21bbc,0],
		[0x13e21bc8,0],
		[0x13e21bcc,0],
		[0x13e21bf8,0],
		[0x13e21bfc,0],
		[0x13e21c00,0],
		[0x13e21c04,0],
		[0x13e21c10,0],
		[0x13e21c14,0],
		[0x13e21c18,0],
		[0x13e21c1c,0],
		[0x13e21c20,0],
		[0x13e21c24,0],
		[0x13e21c30,0],
		[0x13e21c34,0],
		[0x13e21c38,0],
		[0x13e21c3c,0],
		[0x13e21c48,0],
		[0x13e21c4c,0],
		[0x13e21c50,0],
		[0x13e21c54,0],
		[0x13e21c6c,0],
		[0x13e21c70,0],
		[0x13e21c74,0],
		[0x13e21c78,0],
		[0x13e21c7c,0],
		[0x13e21c80,0],
		[0x13e21c84,0],
		[0x13e21c88,0],
		[0x13e21c8c,0],
		[0x13e21c98,0],
		[0x13e21c9c,0],
		[0x13e21ca0,0],
		[0x13e21ca4,0],
		[0x13e21ca8,0],
		[0x13e21cac,0],
		[0x13e21cb8,0],
		[0x13e21cbc,0],
		[0x13e21cc8,0],
		[0x13e21ccc,0],
		[0x13e21cf8,0],
		[0x13e21cfc,0],
		[0x13e21d10,0],
		[0x13e21d14,0],
		[0x13e21d18,0],
		[0x13e21d1c,0],
		[0x13e21d20,0],
		[0x13e21d24,0],
		[0x13e21d30,0],
		[0x13e21d34,0],
		[0x13e21d38,0],
		[0x13e21d3c,0],
		[0x13e21d48,0],
		[0x13e21d4c,0],
		[0x13e21d50,0],
		[0x13e21d54,0],
		[0x13e21d6c,0],
		[0x13e21d70,0],
		[0x13e21d74,0],
		[0x13e21d78,0],
		[0x13e21d7c,0],
		[0x13e21d80,0],
		[0x13e21d84,0],
		[0x13e21d88,0],
		[0x13e21d8c,0],
		[0x13e21d98,0],
		[0x13e21d9c,0],
		[0x13e21da0,0],
		[0x13e21da4,0],
		[0x13e21da8,0],
		[0x13e21dac,0],
		[0x13e21db8,0],
		[0x13e21dbc,0],
		[0x13e21dc8,0],
		[0x13e21dcc,0],
		[0x13e21df8,0],
		[0x13e21dfc,0],
		[0x13e21e10,0],
		[0x13e21e14,0],
		[0x13e21e18,0],
		[0x13e21e1c,0],
		[0x13e21e20,0],
		[0x13e21e24,0],
		[0x13e21e30,0],
		[0x13e21e34,0],
		[0x13e21e38,0],
		[0x13e21e3c,0],
		[0x13e21e48,0],
		[0x13e21e4c,0],
		[0x13e21e50,0],
		[0x13e21e54,0],
		[0x13e21e6c,0],
		[0x13e21e70,0],
		[0x13e21e74,0],
		[0x13e21e78,0],
		[0x13e21e7c,0],
		[0x13e21e80,0],
		[0x13e21e84,0],
		[0x13e21e88,0],
		[0x13e21e8c,0],
		[0x13e21e98,0],
		[0x13e21e9c,0],
		[0x13e21ea0,0],
		[0x13e21ea4,0],
		[0x13e21ea8,0],
		[0x13e21eac,0],
		[0x13e21eb8,0],
		[0x13e21ebc,0],
		[0x13e21ec8,0],
		[0x13e21ecc,0],
		[0x13e21ef8,0],
		[0x13e21efc,0],
		[0x13e21f00,0],
		[0x13e21f04,0],
		[0x13e21f08,0],
		[0x13e21f0c,0],
		[0x13e21f30,0],
		[0x13e21f34,0],
		[0x13e21f38,4],
		[0x13e21f3c,0],
		[0x13e21f48,0],
		[0x13e21f4c,0],
		[0x13e21f50,0],
		[0x13e21f54,0],
		[0x13e21f68,832],
		[0x13e21f6c,0],
		[0x13e21f70,0],
		[0x13e21f74,0],
		[0x13e21f78,0],
		[0x13e21f7c,0],
		[0x13e21f80,0],
		[0x13e21f84,0],
		[0x13e21f88,0],
		[0x13e21f8c,0],
		[0x13e21f98,0],
		[0x13e21f9c,0],
		[0x13e21fa0,0],
		[0x13e21fa4,0],
		[0x13e21fa8,32],
		[0x13e21fac,0],
		[0x13e21fb0,832],
		[0x13e21fb4,0],
		[0x13e21fb8,0],
		[0x13e21fbc,0],
		[0x13e21fc8,0],
		[0x13e21fcc,0],
		[0x13e21ff8,0],
		[0x13e21ffc,0],
		[0x13e22010,0],
		[0x13e22014,0],
		[0x13e22018,0],
		[0x13e2201c,0],
		[0x13e22020,0],
		[0x13e22024,0],
		[0x13e22030,0],
		[0x13e22034,0],
		[0x13e22038,0],
		[0x13e2203c,0],
		[0x13e22048,0],
		[0x13e2204c,0],
		[0x13e22050,0],
		[0x13e22054,0],
		[0x13e2206c,0],
		[0x13e22070,0],
		[0x13e22074,0],
		[0x13e22078,0],
		[0x13e2207c,0],
		[0x13e22080,0],
		[0x13e22084,0],
		[0x13e22088,0],
		[0x13e2208c,0],
		[0x13e22098,0],
		[0x13e2209c,0],
		[0x13e220a0,0],
		[0x13e220a4,0],
		[0x13e220a8,0],
		[0x13e220ac,0],
		[0x13e220b8,0],
		[0x13e220bc,0],
		[0x13e220c8,0],
		[0x13e220cc,0],
		[0x13e220f8,0],
		[0x13e220fc,0],
		[0, 0]
]).
string_val([
		[0, 0]
]).
:- use_module(library(clpfd)).
:- use_module(reif).
:- style_check(-singleton).

isTrue([X, Y]):-
    X == 49.

isTrue([X|Tail]):-
    isTrue(Tail).

log(File_name, Name, Addr, Base):-
    Offset #= Addr - Base,
    open(File_name, append, Stream),
    write(Stream, Name),
    write(Stream, ':'),
    write(Stream, Offset),
    nl(Stream),
    close(Stream).

possible_task_struct(Base_addr) :-
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM2_addr, Pid_addr, Tgid_addr, Real_parent_addr, Parent_addr , Child_addr, 
           Group_leader_addr, Thread_group_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    %MM2_addr #> Base_addr + 1000,
    Tasks_addr #> MM2_addr - 100,
    %FS_struct_addr #< Base_addr + 4000,
    Tgid_addr #= Pid_addr + 4,
    Real_parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr - 8,
    Child_addr #= Parent_addr + 8,
    %FIXME This may be too strong
    Group_leader_addr #=< Child_addr +32,
    %Comm_addr #= Base_addr + 1656,
    %Tasks_addr #= Base_addr + 1072,
    %FS_struct_addr #= Base_addr + 2640,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    % make query after labeling
    MM2_val #> 0,
    integer(MM2_val),
    
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val,  Comm_addr, Comm_val ]),

    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_parent_addr, Real_parent_val, Group_leader_addr, Group_leader_val]),
    Real_parent_val #> 0,
    Group_leader_val #> 0,
    query_ts(Real_parent_val, Comm_offset, Tasks_offset),
    query_ts(Group_leader_val, Comm_offset, Tasks_offset),

    labeling([enum], [Cred_addr, Cred_val]),
    Cred_val #> 0,
    query_cred(Cred_val),

    labeling([enum], [FS_struct_addr, FS_struct_val]),
    FS_struct_val #> 0,
    %query_fs_struct(FS_struct_val),



    get_time(End),
    Time_past is End - Current,
    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    log("profile.txt", "tasks", Tasks_addr, Base_addr),
    log("profile.txt", "mm_struct", MM2_addr, Base_addr),
    log("profile.txt", "comm", Comm_addr, Base_addr),
    log("profile.txt", "parent", Parent_addr, Base_addr),
    log("profile.txt", "group_leader", Group_leader_addr, Base_addr),
    log("profile.txt", "cred", Cred_addr, Base_addr),

    
    print_nl('tasks offset', Tasks_offset),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).

possible_mm_struct(Current_addr) :- 
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    % TODO: ADD vm_area_struct *mmap
    Ptr_profile = [
        [Mmap_addr, Mmap_val],
        [Pgd_addr, Pgd_val]  
    ],
    Ulong_profile = [
        [Mmap_base_addr, Mmap_base_val],
        [Mmap_legacy_base_addr, Mmap_legacy_base_val],
        [Task_size_addr, Task_size_val],
        [High_vm_end_addr, High_vm_end_val],
        [Start_brk_addr, Start_brk_val],
        [Brk_addr, Brk_val],
        [Start_stack_addr, Start_stack_val],
        [ARG_start_addr, ARG_start_val]
    ],
    Mmap_addr #= Current_addr,


    Mmap_base_addr #> Mmap_addr,
    %FIXME mmap_base need more value constraint, because we removed mmap_legacy_base and highest_vm_end.
    Mmap_base_val #> 0x7f0000000000,
    %FIXME in old linux version, e.g., there is no mmap_legacy_base and highest_vm_enb
    %chain([Mmap_base_addr, Mmap_legacy_base_addr, Task_size_addr, High_vm_end_addr, Pgd_addr], #<),
    chain([Mmap_base_addr, Task_size_addr, Pgd_addr], #<),

    %FIXME: This rule may be too strong
    %High_vm_end_addr #= Mmap_base_addr + 24, 
    Pgd_addr #> Task_size_addr,
    Pgd_addr #=< Task_size_addr + 40,
    %FIXME: This rule may not be true for other mm_struct.
    Task_size_val #>= 0x7ffffffff000,

    %Mmap_base_addr #= Current_addr + 40,
    %Mmap_legacy_base_addr #= Current_addr + 40,
    %Task_size_addr #= Current_addr + 48,
    %High_vm_end_addr #= Current_addr + 72,

    Start_brk_addr #> Pgd_addr,
    Start_stack_val #> 0x7ff000000000,
    % TODO: Convert this to index comparison. 
    ARG_start_addr #< Current_addr + 500,
    chain([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr], #<),
    ARG_start_addr #= Start_brk_addr + 24,
    Brk_val #< 0x7ff000000000,
    ARG_start_val #> 0x7ff000000000,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),


    labeling([enum], [Mmap_addr, Mmap_val, Mmap_base_addr, Pgd_addr, Pgd_val]),
    Mmap_val #> 0,
    Pgd_val #> 0,
    
    process_create(path('python'),
                    ['subquery.py', Mmap_val, "vm_area_struct", 2],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    label([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr]),
    statistics(real_time, [End|_]),

    log("profile.txt", "mmap", Mmap_addr, Current_addr),
    log("profile.txt", "mmap_base", Mmap_base_addr, Current_addr),
    log("profile.txt", "pgd", Pgd_addr, Current_addr),
    log("profile.txt", "start_brk", Start_brk_addr, Current_addr),
    log("profile.txt", "brk", Brk_addr, Current_addr),
    log("profile.txt", "start_stack", Start_stack_addr, Current_addr),
    log("profile.txt", "arg_start", ARG_start_addr, Current_addr),
    log("profile.txt", "mm_struct time", End, Start).


possible_vm_area_struct(Base_addr, Level) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [VM_next_addr, VM_next_val],
        [VM_file_addr, VM_file_val]
    ],
    Ulong_profile = [
        [VM_start_addr, VM_start_val],
        [VM_end_addr, VM_end_val],
        [VM_flag_addr, VM_flag_val]
        %VM_pgoff is 0, and we do not consider 0 as ulong
        %[VM_pgoff_addr, VM_pgoff_val]
    ],
    VM_start_addr #>= Base_addr,
    chain([VM_start_addr, VM_end_addr, VM_next_addr, VM_flag_addr, VM_file_addr], #<),
    VM_end_addr #= VM_start_addr + 8,
    VM_next_addr #= VM_end_addr + 8,
    VM_next_addr #< Base_addr + 32,
    VM_file_addr #< Base_addr + 180,
    VM_pgoff_addr #= VM_file_addr - 8,
    %VM_file_addr #= Base_addr + 160,

    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    %FIXME: VM_flag may need value constraints.

    label([VM_next_addr, VM_next_val]),
    /*if_(Level = 2,
        call(check_vm_area_struct, VM_next_val, 1),
        1 = 1),*/
    %Level #> 1 #==> check_vm_area_struct(VM_next_val, 1),

    labeling([enum], [VM_start_addr, VM_end_addr, VM_flag_addr, VM_pgoff_addr, VM_file_addr, VM_file_val]),
    
    VM_file_val #> 0,
    process_create(path('python'),
                ['subquery.py', VM_file_val, "vm_file"],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    statistics(real_time, [End|_]),

    log("profile.txt", "vm_start", VM_start_addr, Base_addr),
    log("profile.txt", "vm_end", VM_end_addr, Base_addr),
    log("profile.txt", "vm_next", VM_next_addr, Base_addr),
    log("profile.txt", "vm_flag", VM_flag_addr, Base_addr),
    log("profile.txt", "vm_pgoff", VM_pgoff_addr, Base_addr),
    log("profile.txt", "vm_file", VM_file_addr, Base_addr),
    log("profile.txt", "vm_area_struct time", End, Start).

check_vm_area_struct(Base_addr, Level) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "vm_area_struct", Level],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vm_file(Base_addr) :-
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [Vfs_mount_addr, Vfs_mount_val],
        [Dentry_addr, Dentry_val]
    ],
    Vfs_mount_addr #> Base_addr,
    Dentry_addr #= Vfs_mount_addr + 8,
    Dentry_addr #< Base_addr + 40,
    tuples_in(Ptr_profile, Ptr),
    label([Vfs_mount_val, Dentry_val]),
    Vfs_mount_val #>0,
    Dentry_val #> 0,
    %FIXME seems like we do not need this, make sure the string is not addr=0
/*
    process_create(path('python'),
                    ['subquery.py', Vfs_mount_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vfs_mount(Base_addr) :-
    pointer(Ptr),
    Ptr_profile = [
        [Dentry_addr, Dentry_val]
    ],
    Dentry_addr #< Base_addr + 16,
    tuples_in(Ptr_profile, Ptr),
    label([Dentry_val]),
    Dentry_val #> 0,
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).
    
possible_dentry(Base_addr) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    string_val(Str),
    Ptr_profile = [
        [Dparent_addr, Dparent_val],
        [Dchild_addr, Dchild_val]
    ],
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    %log("profile.txt", "dentry addr", Base_addr, 0),
    Dparent_addr #> Base_addr,
    Dname_addr #> 0,
    Dname_addr #< Base_addr + 200,
    %Dname_addr #= Base_addr + 160,
    %FIXME This child rule is not applicable for old kernel version. 
    %chain([Dparent_addr, Dname_addr, Dchild_addr], #<),
    %Dchild_addr #< Base_addr + 200,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    labeling([enum], [Dparent_addr, Dparent_val, Dname_addr, Dchild_addr, Dchild_val]),
    Dname_offset #= Dname_addr - Base_addr,
    integer(Dname_offset),
    Dparent_val #> 0,
    
    %FIXME d_parent may not be initialized
    /*process_create(path('python'),
                ['subquery.py', Dparent_val, "d_entry", Dname_offset],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/

    %FIXME: may need to find another way for all list_head. 
    /*Dchild_offset #= Dchild_addr - Base_addr,
    integer(Dchild_offset),
    Dchild_base #= Dchild_val - Dchild_offset,
    integer(Dchild_base),
    Dchild_base #> 0,
    process_create(path('python'),
                ['subquery.py', Dchild_base, "d_entry", Dname_offset],
                [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    statistics(real_time, [End|_]).
/*
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    log("profile.txt", "d_parent", Dparent_addr, Base_addr),
    log("profile.txt", "d_child", Dchild_addr, Base_addr),
    log("profile.txt", "dentry time", End, Start).
*/
possible_d_entry(Base_addr, Dname_offset) :-
    current_predicate(string_val/1),
    string_val(Str),
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    Dname_addr #= Base_addr + Dname_offset,
    tuples_in(Str_profile, Str),
    label([Dname_addr]).

possible_list_head(Tasks_val, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_val, Tasks_addr]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],
    Comm_addr #= Tasks_val - Tasks_offset + Comm_offset,
    Tasks_addr #\= Tasks_val,
    tuples_in(Str_profile, Str),
    tuples_in(Ptr_profile, Ptr),
    label([Comm_addr]).

possible_ts(Base_addr, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_addr, Tasks_val]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],

    Comm_addr #= Base_addr + Comm_offset,
    Tasks_addr #= Base_addr + Tasks_offset,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),

    label([Tasks_val]),
    
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "list_head", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_cred(Base_addr) :-
    statistics(real_time, [Start|_]),

    int(Int),
    long(Ulg),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3],
        [Addr4, Val4],
        [Addr5, Val5],
        [Addr6, Val6],
        [Addr7, Val7],
        [Addr8, Val8],
        [Addr9, Val9]
    ],
    %FIXME For now, this rule is hard-coded because we do not consider 0 as a unsign long number. 
    %So that for cred whos val10 is 0, this rule does not apply.
    /*Ulong_profile = [
        [Addr10, Val10],
        [Addr11, Val11]
    ],*/
    Addr1 #> Base_addr,
    %chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9, Addr10, Addr11], #<),
    chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9], #<),
    Addr1 #= Base_addr + 4,
    Addr9 #= Addr1 + 32,
    %Addr11 #< Base_addr + 120,
    tuples_in(Int_profile, Int),
    %tuples_in(Ulong_profile, Ulg),
    statistics(real_time, [End|_]),
    labeling([enum], [Addr1, Addr2, Addr5, Addr6]),
    log("profile.txt", "cred time", End, Start),
    log('profile.txt', "uid", Addr1, Base_addr),
    log('profile.txt', "gid", Addr2, Base_addr),
    log('profile.txt', "euid", Addr5, Base_addr),
    log('profile.txt', "egid", Addr6, Base_addr).

possible_fs_struct(Base_addr) :-
    statistics(real_time, [Start|_]),
    int(Int),
    pointer(Ptr),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3]
    ],
    Ptr_profile = [
        [Root_addr, Root_val],
        [PWD_addr, PWD_val]
    ],
    Addr1 #>= Base_addr,
    chain([Addr1, Addr2, Addr3, Root_addr, PWD_addr], #<),
    PWD_addr #= Root_addr + 16,
    PWD_addr #< Base_addr + 50,
    tuples_in(Int_profile, Int),
    tuples_in(Ptr_profile, Ptr),
    label([Root_addr, Root_val]),
    
    process_create(path('python'),
                    ['subquery.py', Root_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    label([PWD_addr, PWD_val]),
    process_create(path('python'),
                    ['subquery.py', PWD_val, "dentry"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    statistics(real_time, [End|_]),
    log("profile.txt", "fs time", End, Start),
    log('profile.txt', "Root", Root_addr, Base_addr),
    log('profile.txt', "pwd", PWD_addr, Base_addr).
