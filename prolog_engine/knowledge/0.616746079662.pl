:- use_module(library(clpfd)).
:- style_check(-singleton).
pointer([
		[0x1030d610,0],
		[0x1030d618,407042912],
		[0x1030d620,179510080],
		[0x1030d628,407042912],
		[0x1030d630,179510080],
		[0x1030d638,0],
		[0x1030d640,271635712],
		[0x1030d648,271636192],
		[0x1030d650,272634400],
		[0x1030d658,267758436],
		[0x1030d660,271599200],
		[0x1030d668,271753632],
		[0x1030d670,271636240],
		[0x1030d678,271635760],
		[0x1030d688,271414656],
		[0x1030d690,267681406],
		[0x1030d698,0],
		[0x1030d6a0,0],
		[0x1030d6a8,271636352],
		[0x1030d6b8,0],
		[0x1030d6c0,0],
		[0x1030d6c8,0],
		[0x1030d6d0,0],
		[0x1030d6d8,0],
		[0x1030d6e0,271636032],
		[0x1030d6e8,271636896],
		[0x1030d6f0,272634496],
		[0x1030d6f8,267758451],
		[0x1030d700,271599360],
		[0x1030d708,271753792],
		[0x1030d710,271636944],
		[0x1030d718,271636080],
		[0x1030d728,271414688],
		[0x1030d730,515935808],
		[0x1030d738,0],
		[0x1030d740,0],
		[0x1030d748,271636352],
		[0x1030d758,0],
		[0x1030d760,0],
		[0x1030d768,0],
		[0x1030d770,0],
		[0x1030d778,0],
		[0x1030d780,267758467],
		[0x1030d790,271636432],
		[0x1030d798,271636416],
		[0x1030d7a0,519243600],
		[0x1030d7a8,519243696],
		[0x1030d7b0,271636192],
		[0x1030d7b8,271636032],
		[0x1030d7c0,268333903],
		[0x1030d7c8,267758477],
		[0x1030d7d0,267502414],
		[0x1030d7d8,267758482],
		[0x1030d7e0,0],
		[0x1030d7e8,0],
		[0x1030d7f0,272634400],
		[0x1030d7f8,267758497],
		[0x1030d800,0],
		[0x1030d808,0],
		[0x1030d810,0],
		[0x1030d818,0],
		[0x1030d820,0],
		[0x1030d828,271414656],
		[0x1030d830,0],
		[0x1030d838,0],
		[0x1030d840,0],
		[0x1030d848,271636768],
		[0x1030d858,0],
		[0x1030d860,0],
		[0x1030d868,0],
		[0x1030d870,0],
		[0x1030d878,0],
		[0x1030d880,0],
		[0x1030d888,0],
		[0x1030d890,272634496],
		[0x1030d898,267758516],
		[0x1030d8a0,0],
		[0x1030d8a8,0],
		[0x1030d8b0,0],
		[0x1030d8b8,0],
		[0x1030d8c0,0],
		[0x1030d8c8,271414688],
		[0x1030d8d0,0],
		[0x1030d8d8,0],
		[0x1030d8e0,0],
		[0x1030d8e8,271636768],
		[0x1030d8f8,0],
		[0x1030d900,0],
		[0x1030d908,0],
		[0x1030d910,0],
		[0x1030d918,0],
		[0x1030d920,267758536],
		[0x1030d930,271636864],
		[0x1030d938,271636832],
		[0x1030d940,271636800],
		[0x1030d948,271636800],
		[0x1030d950,271636608],
		[0x1030d958,271636448],
		[0x1030d960,267648756],
		[0x1030d968,267559774],
		[0x1030d970,267882354],
		[0x1030d978,0],
		[0x1030d980,267502343],
		[0x1030d988,267679568],
		[0x1030d990,267758550],
		[0x1030d998,0],
		[0x1030d9a0,271636192],
		[0x1030d9a8,271637056],
		[0x1030d9b0,272634400],
		[0x1030d9b8,267758568],
		[0x1030d9c0,271599648],
		[0x1030d9c8,271753952],
		[0x1030d9d0,271637104],
		[0x1030d9d8,271636240],
		[0x1030d9e8,271414656],
		[0x1030d9f0,267681406],
		[0x1030d9f8,0],
		[0x1030da00,0],
		[0x1030da08,271637216],
		[0x1030da18,0],
		[0x1030da20,0],
		[0x1030da28,0],
		[0x1030da30,0],
		[0x1030da38,0],
		[0x1030da40,271636896],
		[0x1030da48,271637760],
		[0x1030da50,272634496],
		[0x1030da58,267758585],
		[0x1030da60,271599808],
		[0x1030da68,271754112],
		[0x1030da70,271637808],
		[0x1030da78,271636944],
		[0x1030da88,271414688],
		[0x1030da90,515935904],
		[0x1030da98,0],
		[0x1030daa0,0],
		[0x1030daa8,271637216],
		[0x1030dab8,0],
		[0x1030dac0,0],
		[0x1030dac8,0],
		[0x1030dad0,0],
		[0x1030dad8,0],
		[0x1030dae0,267758603],
		[0x1030daf0,271637296],
		[0x1030daf8,271637280],
		[0x1030db00,519243168],
		[0x1030db08,519242064],
		[0x1030db10,271637056],
		[0x1030db18,271636896],
		[0x1030db20,267648756],
		[0x1030db28,267882354],
		[0x1030db30,267502343],
		[0x1030db38,267758615],
		[0x1030db40,0],
		[0x1030db48,0],
		[0x1030db50,272634400],
		[0x1030db58,267758631],
		[0x1030db60,0],
		[0x1030db68,0],
		[0x1030db70,0],
		[0x1030db78,0],
		[0x1030db80,0],
		[0x1030db88,271414656],
		[0x1030db90,0],
		[0x1030db98,0],
		[0x1030dba0,0],
		[0x1030dba8,271637632],
		[0x1030dbb8,0],
		[0x1030dbc0,0],
		[0x1030dbc8,0],
		[0x1030dbd0,0],
		[0x1030dbd8,0],
		[0x1030dbe0,0],
		[0x1030dbe8,0],
		[0x1030dbf0,272634496],
		[0x1030dbf8,267758649],
		[0x1030dc00,0],
		[0x1030dc08,0],
		[0x1030dc10,0],
		[0x1030dc18,0],
		[0x1030dc20,0],
		[0x1030dc28,271414688],
		[0x1030dc30,0],
		[0x1030dc38,0],
		[0x1030dc40,0],
		[0x1030dc48,271637632],
		[0x1030dc58,0],
		[0x1030dc60,0],
		[0x1030dc68,0],
		[0x1030dc70,0],
		[0x1030dc78,0],
		[0x1030dc80,267758668],
		[0x1030dc90,271637728],
		[0x1030dc98,271637696],
		[0x1030dca0,271637664],
		[0x1030dca8,271637664],
		[0x1030dcb0,271637472],
		[0x1030dcb8,271637312],
		[0x1030dcc0,268039912],
		[0x1030dcc8,267559774],
		[0x1030dcd0,267882354],
		[0x1030dcd8,0],
		[0x1030dce0,267625589],
		[0x1030dce8,267679568],
		[0x1030dcf0,267758550],
		[0x1030dcf8,0],
		[0x1030dd00,271637056],
		[0x1030dd08,271637920],
		[0x1030dd10,272634400],
		[0x1030dd18,267758681],
		[0x1030dd20,271600064],
		[0x1030dd28,271754272],
		[0x1030dd30,271637968],
		[0x1030dd38,271637104],
		[0x1030dd48,271414656],
		[0x1030dd50,267681406],
		[0x1030dd58,0],
		[0x1030dd60,0],
		[0x1030dd68,271638080],
		[0x1030dd78,0],
		[0x1030dd80,0],
		[0x1030dd88,0],
		[0x1030dd90,0],
		[0x1030dd98,0],
		[0x1030dda0,271637760],
		[0x1030dda8,271638272],
		[0x1030ddb0,272634496],
		[0x1030ddb8,267758697],
		[0x1030ddc0,271600224],
		[0x1030ddc8,271754432],
		[0x1030ddd0,271638320],
		[0x1030ddd8,271637808],
		[0x1030dde8,271414688],
		[0x1030ddf0,516298624],
		[0x1030ddf8,0],
		[0x1030de00,0],
		[0x1030de08,271638080],
		[0x1030de18,0],
		[0x1030de20,0],
		[0x1030de28,0],
		[0x1030de30,0],
		[0x1030de38,0],
		[0x1030de40,267758714],
		[0x1030de50,271638160],
		[0x1030de58,271638144],
		[0x1030de60,519245616],
		[0x1030de68,519245040],
		[0x1030de70,271637920],
		[0x1030de78,271637760],
		[0x1030de80,268039912],
		[0x1030de88,267882354],
		[0x1030de90,267625589],
		[0x1030de98,267758615],
		[0x1030dea0,267758761],
		[0x1030dea8,0],
		[0x1030deb0,250639760],
		[0x1030deb8,0],
		[0x1030dec0,0],
		[0x1030dec8,250399408],
		[0x1030ded0,0],
		[0x1030ded8,0],
		[0x1030dee0,517470440],
		[0x1030dee8,0],
		[0x1030def0,0],
		[0x1030def8,0],
		[0x1030df00,271637920],
		[0x1030df08,271638432],
		[0x1030df10,272634400],
		[0x1030df18,267760186],
		[0x1030df20,271600480],
		[0x1030df28,271754592],
		[0x1030df30,271638480],
		[0x1030df38,271637968],
		[0x1030df48,271414656],
		[0x1030df50,267681406],
		[0x1030df58,0],
		[0x1030df60,0],
		[0x1030df68,271638592],
		[0x1030df78,0],
		[0x1030df80,0],
		[0x1030df88,0],
		[0x1030df90,0],
		[0x1030df98,0],
		[0x1030dfa0,271638272],
		[0x1030dfa8,271638784],
		[0x1030dfb0,272634496],
		[0x1030dfb8,267760204],
		[0x1030dfc0,271600640],
		[0x1030dfc8,271754752],
		[0x1030dfd0,271638832],
		[0x1030dfd8,271638320],
		[0x1030dfe8,271414688],
		[0x1030dff0,516304128],
		[0x1030dff8,0],
		[0x1030e000,0],
		[0x1030e008,271638592],
		[0x1030e018,0],
		[0x1030e020,0],
		[0x1030e028,0],
		[0x1030e030,0],
		[0x1030e038,0],
		[0x1030e040,267760223],
		[0x1030e050,271638720],
		[0x1030e058,271638656],
		[0x1030e060,519242352],
		[0x1030e068,519244176],
		[0x1030e070,271638432],
		[0x1030e078,271638272],
		[0x1030e080,267648756],
		[0x1030e088,267992705],
		[0x1030e090,267885592],
		[0x1030e098,267702307],
		[0x1030e0a0,268322244],
		[0x1030e0a8,0],
		[0x1030e0b0,0],
		[0x1030e0b8,0],
		[0x1030e0c0,267502352],
		[0x1030e0c8,267502343],
		[0x1030e0d0,267625589],
		[0x1030e0d8,267502685],
		[0x1030e0e0,267502352],
		[0x1030e0e8,0],
		[0x1030e0f0,0],
		[0x1030e0f8,0],
		[0x1030e100,271638432],
		[0x1030e108,271638944],
		[0x1030e110,272634400],
		[0x1030e118,267760236],
		[0x1030e120,271600928],
		[0x1030e128,271754912],
		[0x1030e130,271638992],
		[0x1030e138,271638480],
		[0x1030e148,271414656],
		[0x1030e150,267681406],
		[0x1030e158,0],
		[0x1030e160,0],
		[0x1030e168,271639104],
		[0x1030e178,0],
		[0x1030e180,0],
		[0x1030e188,0],
		[0x1030e190,0],
		[0x1030e198,0],
		[0x1030e1a0,271638784],
		[0x1030e1a8,271639232],
		[0x1030e1b0,272634496],
		[0x1030e1b8,267760252],
		[0x1030e1c0,271601088],
		[0x1030e1c8,271755072],
		[0x1030e1d0,271639280],
		[0x1030e1d8,271638832],
		[0x1030e1e8,271414688],
		[0x1030e1f0,516306432],
		[0x1030e1f8,0],
		[0x1030e200,0],
		[0x1030e208,271639104],
		[0x1030e218,0],
		[0x1030e220,0],
		[0x1030e228,0],
		[0x1030e230,0],
		[0x1030e238,0],
		[0x1030e240,267760269],
		[0x1030e250,271639200],
		[0x1030e258,271639168],
		[0x1030e260,519245088],
		[0x1030e268,519245712],
		[0x1030e270,271638944],
		[0x1030e278,271638784],
		[0x1030e280,267753959],
		[0x1030e288,267759412],
		[0x1030e290,267704331],
		[0x1030e298,0],
		[0x1030e2a0,267502352],
		[0x1030e2a8,267625589],
		[0x1030e2b0,267502343],
		[0x1030e2b8,0],
		[0x1030e2c0,271638944],
		[0x1030e2c8,271639392],
		[0x1030e2d0,272634400],
		[0x1030e2d8,267760280],
		[0x1030e2e0,271601376],
		[0x1030e2e8,271755232],
		[0x1030e2f0,271639440],
		[0x1030e2f8,271638992],
		[0x1030e308,271414656],
		[0x1030e310,267681406],
		[0x1030e318,0],
		[0x1030e320,0],
		[0x1030e328,271639552],
		[0x1030e338,0],
		[0x1030e340,0],
		[0x1030e348,0],
		[0x1030e350,0],
		[0x1030e358,0],
		[0x1030e360,271639232],
		[0x1030e368,271640640],
		[0x1030e370,272634496],
		[0x1030e378,267760296],
		[0x1030e380,271601536],
		[0x1030e388,271755392],
		[0x1030e390,271640688],
		[0x1030e398,271639280],
		[0x1030e3a8,271414688],
		[0x1030e3b0,516296704],
		[0x1030e3b8,0],
		[0x1030e3c0,0],
		[0x1030e3c8,271639552],
		[0x1030e3d8,0],
		[0x1030e3e0,0],
		[0x1030e3e8,0],
		[0x1030e3f0,0],
		[0x1030e3f8,0],
		[0x1030e400,267760313],
		[0x1030e410,271639632],
		[0x1030e418,271639616],
		[0x1030e420,519249712],
		[0x1030e428,519249136],
		[0x1030e430,271639392],
		[0x1030e438,271639232],
		[0x1030e440,267760324],
		[0x1030e448,267704331],
		[0x1030e450,267625589],
		[0x1030e458,267502343],
		[0x1030e470,0],
		[0x1030e478,0],
		[0x1030e480,0],
		[0x1030e488,0],
		[0x1030e490,0],
		[0x1030e498,0],
		[0x1030e4b0,0],
		[0x1030e4b8,0],
		[0x1030e4c0,0],
		[0x1030e4c8,0],
		[0x1030e4d0,0],
		[0x1030e4d8,0],
		[0x1030e4e0,0],
		[0x1030e4e8,0],
		[0x1030e4f0,272634400],
		[0x1030e4f8,267760874],
		[0x1030e500,0],
		[0x1030e508,0],
		[0x1030e510,0],
		[0x1030e518,0],
		[0x1030e520,0],
		[0x1030e528,271414656],
		[0x1030e530,0],
		[0x1030e538,0],
		[0x1030e540,0],
		[0x1030e548,271640096],
		[0x1030e558,0],
		[0x1030e560,0],
		[0x1030e568,0],
		[0x1030e570,0],
		[0x1030e578,0],
		[0x1030e580,0],
		[0x1030e588,0],
		[0x1030e590,272634496],
		[0x1030e598,267760891],
		[0x1030e5a0,0],
		[0x1030e5a8,0],
		[0x1030e5b0,0],
		[0x1030e5b8,0],
		[0x1030e5c0,0],
		[0x1030e5c8,271414688],
		[0x1030e5d0,0],
		[0x1030e5d8,0],
		[0x1030e5e0,0],
		[0x1030e5e8,271640096],
		[0x1030e5f8,0],
		[0, 0]
]).
unknown([
		[0, 0]
]).
long([
		[0x1030d608,12],
		[0x1030d680,847],
		[0x1030d6b0,2],
		[0x1030d720,848],
		[0x1030d750,2],
		[0x1030d788,8589934728],
		[0x1030d850,2],
		[0x1030d8f0,2],
		[0x1030d928,17179869183],
		[0x1030d9e0,849],
		[0x1030da10,2],
		[0x1030da80,850],
		[0x1030dab0,2],
		[0x1030dae8,8589934730],
		[0x1030dbb0,2],
		[0x1030dc50,2],
		[0x1030dc88,17179869183],
		[0x1030dd40,851],
		[0x1030dd70,2],
		[0x1030dde0,852],
		[0x1030de10,2],
		[0x1030de48,8589934729],
		[0x1030df40,853],
		[0x1030df70,2],
		[0x1030dfe0,854],
		[0x1030e010,2],
		[0x1030e048,21474836911],
		[0x1030e140,855],
		[0x1030e170,2],
		[0x1030e1e0,856],
		[0x1030e210,2],
		[0x1030e248,12884902321],
		[0x1030e300,857],
		[0x1030e330,2],
		[0x1030e3a0,858],
		[0x1030e3d0,2],
		[0x1030e408,8589935022],
		[0x1030e460,1073741824000],
		[0x1030e468,1],
		[0x1030e4a0,5368709120000],
		[0x1030e4a8,10],
		[0x1030e550,2],
		[0x1030e5f0,2],
		[0, 0]
]).
int([
		[0x1030d600,54],
		[0x1030d604,0],
		[0x1030d608,12],
		[0x1030d60c,0],
		[0x1030d610,0],
		[0x1030d614,0],
		[0x1030d638,0],
		[0x1030d63c,0],
		[0x1030d680,847],
		[0x1030d684,0],
		[0x1030d698,0],
		[0x1030d69c,0],
		[0x1030d6a0,0],
		[0x1030d6a4,0],
		[0x1030d6b0,2],
		[0x1030d6b4,0],
		[0x1030d6b8,0],
		[0x1030d6bc,0],
		[0x1030d6c0,0],
		[0x1030d6c4,0],
		[0x1030d6c8,0],
		[0x1030d6cc,0],
		[0x1030d6d0,0],
		[0x1030d6d4,0],
		[0x1030d6d8,0],
		[0x1030d6dc,0],
		[0x1030d720,848],
		[0x1030d724,0],
		[0x1030d738,0],
		[0x1030d73c,0],
		[0x1030d740,0],
		[0x1030d744,0],
		[0x1030d750,2],
		[0x1030d754,0],
		[0x1030d758,0],
		[0x1030d75c,0],
		[0x1030d760,0],
		[0x1030d764,0],
		[0x1030d768,0],
		[0x1030d76c,0],
		[0x1030d770,0],
		[0x1030d774,0],
		[0x1030d778,0],
		[0x1030d77c,0],
		[0x1030d788,136],
		[0x1030d78c,2],
		[0x1030d7e0,0],
		[0x1030d7e4,0],
		[0x1030d7e8,0],
		[0x1030d7ec,0],
		[0x1030d800,0],
		[0x1030d804,0],
		[0x1030d808,0],
		[0x1030d80c,0],
		[0x1030d810,0],
		[0x1030d814,0],
		[0x1030d818,0],
		[0x1030d81c,0],
		[0x1030d820,0],
		[0x1030d824,0],
		[0x1030d830,0],
		[0x1030d834,0],
		[0x1030d838,0],
		[0x1030d83c,0],
		[0x1030d840,0],
		[0x1030d844,0],
		[0x1030d850,2],
		[0x1030d854,0],
		[0x1030d858,0],
		[0x1030d85c,0],
		[0x1030d860,0],
		[0x1030d864,0],
		[0x1030d868,0],
		[0x1030d86c,0],
		[0x1030d870,0],
		[0x1030d874,0],
		[0x1030d878,0],
		[0x1030d87c,0],
		[0x1030d880,0],
		[0x1030d884,0],
		[0x1030d888,0],
		[0x1030d88c,0],
		[0x1030d8a0,0],
		[0x1030d8a4,0],
		[0x1030d8a8,0],
		[0x1030d8ac,0],
		[0x1030d8b0,0],
		[0x1030d8b4,0],
		[0x1030d8b8,0],
		[0x1030d8bc,0],
		[0x1030d8c0,0],
		[0x1030d8c4,0],
		[0x1030d8d0,0],
		[0x1030d8d4,0],
		[0x1030d8d8,0],
		[0x1030d8dc,0],
		[0x1030d8e0,0],
		[0x1030d8e4,0],
		[0x1030d8f0,2],
		[0x1030d8f4,0],
		[0x1030d8f8,0],
		[0x1030d8fc,0],
		[0x1030d900,0],
		[0x1030d904,0],
		[0x1030d908,0],
		[0x1030d90c,0],
		[0x1030d910,0],
		[0x1030d914,0],
		[0x1030d918,0],
		[0x1030d91c,0],
		[0x1030d92c,3],
		[0x1030d978,0],
		[0x1030d97c,0],
		[0x1030d998,0],
		[0x1030d99c,0],
		[0x1030d9e0,849],
		[0x1030d9e4,0],
		[0x1030d9f8,0],
		[0x1030d9fc,0],
		[0x1030da00,0],
		[0x1030da04,0],
		[0x1030da10,2],
		[0x1030da14,0],
		[0x1030da18,0],
		[0x1030da1c,0],
		[0x1030da20,0],
		[0x1030da24,0],
		[0x1030da28,0],
		[0x1030da2c,0],
		[0x1030da30,0],
		[0x1030da34,0],
		[0x1030da38,0],
		[0x1030da3c,0],
		[0x1030da80,850],
		[0x1030da84,0],
		[0x1030da98,0],
		[0x1030da9c,0],
		[0x1030daa0,0],
		[0x1030daa4,0],
		[0x1030dab0,2],
		[0x1030dab4,0],
		[0x1030dab8,0],
		[0x1030dabc,0],
		[0x1030dac0,0],
		[0x1030dac4,0],
		[0x1030dac8,0],
		[0x1030dacc,0],
		[0x1030dad0,0],
		[0x1030dad4,0],
		[0x1030dad8,0],
		[0x1030dadc,0],
		[0x1030dae8,138],
		[0x1030daec,2],
		[0x1030db40,0],
		[0x1030db44,0],
		[0x1030db48,0],
		[0x1030db4c,0],
		[0x1030db60,0],
		[0x1030db64,0],
		[0x1030db68,0],
		[0x1030db6c,0],
		[0x1030db70,0],
		[0x1030db74,0],
		[0x1030db78,0],
		[0x1030db7c,0],
		[0x1030db80,0],
		[0x1030db84,0],
		[0x1030db90,0],
		[0x1030db94,0],
		[0x1030db98,0],
		[0x1030db9c,0],
		[0x1030dba0,0],
		[0x1030dba4,0],
		[0x1030dbb0,2],
		[0x1030dbb4,0],
		[0x1030dbb8,0],
		[0x1030dbbc,0],
		[0x1030dbc0,0],
		[0x1030dbc4,0],
		[0x1030dbc8,0],
		[0x1030dbcc,0],
		[0x1030dbd0,0],
		[0x1030dbd4,0],
		[0x1030dbd8,0],
		[0x1030dbdc,0],
		[0x1030dbe0,0],
		[0x1030dbe4,0],
		[0x1030dbe8,0],
		[0x1030dbec,0],
		[0x1030dc00,0],
		[0x1030dc04,0],
		[0x1030dc08,0],
		[0x1030dc0c,0],
		[0x1030dc10,0],
		[0x1030dc14,0],
		[0x1030dc18,0],
		[0x1030dc1c,0],
		[0x1030dc20,0],
		[0x1030dc24,0],
		[0x1030dc30,0],
		[0x1030dc34,0],
		[0x1030dc38,0],
		[0x1030dc3c,0],
		[0x1030dc40,0],
		[0x1030dc44,0],
		[0x1030dc50,2],
		[0x1030dc54,0],
		[0x1030dc58,0],
		[0x1030dc5c,0],
		[0x1030dc60,0],
		[0x1030dc64,0],
		[0x1030dc68,0],
		[0x1030dc6c,0],
		[0x1030dc70,0],
		[0x1030dc74,0],
		[0x1030dc78,0],
		[0x1030dc7c,0],
		[0x1030dc8c,3],
		[0x1030dcd8,0],
		[0x1030dcdc,0],
		[0x1030dcf8,0],
		[0x1030dcfc,0],
		[0x1030dd40,851],
		[0x1030dd44,0],
		[0x1030dd58,0],
		[0x1030dd5c,0],
		[0x1030dd60,0],
		[0x1030dd64,0],
		[0x1030dd70,2],
		[0x1030dd74,0],
		[0x1030dd78,0],
		[0x1030dd7c,0],
		[0x1030dd80,0],
		[0x1030dd84,0],
		[0x1030dd88,0],
		[0x1030dd8c,0],
		[0x1030dd90,0],
		[0x1030dd94,0],
		[0x1030dd98,0],
		[0x1030dd9c,0],
		[0x1030dde0,852],
		[0x1030dde4,0],
		[0x1030ddf8,0],
		[0x1030ddfc,0],
		[0x1030de00,0],
		[0x1030de04,0],
		[0x1030de10,2],
		[0x1030de14,0],
		[0x1030de18,0],
		[0x1030de1c,0],
		[0x1030de20,0],
		[0x1030de24,0],
		[0x1030de28,0],
		[0x1030de2c,0],
		[0x1030de30,0],
		[0x1030de34,0],
		[0x1030de38,0],
		[0x1030de3c,0],
		[0x1030de48,137],
		[0x1030de4c,2],
		[0x1030dea8,0],
		[0x1030deac,0],
		[0x1030deb8,0],
		[0x1030debc,0],
		[0x1030dec0,0],
		[0x1030dec4,0],
		[0x1030ded0,0],
		[0x1030ded4,0],
		[0x1030ded8,0],
		[0x1030dedc,0],
		[0x1030dee8,0],
		[0x1030deec,0],
		[0x1030def0,0],
		[0x1030def4,0],
		[0x1030def8,0],
		[0x1030defc,0],
		[0x1030df40,853],
		[0x1030df44,0],
		[0x1030df58,0],
		[0x1030df5c,0],
		[0x1030df60,0],
		[0x1030df64,0],
		[0x1030df70,2],
		[0x1030df74,0],
		[0x1030df78,0],
		[0x1030df7c,0],
		[0x1030df80,0],
		[0x1030df84,0],
		[0x1030df88,0],
		[0x1030df8c,0],
		[0x1030df90,0],
		[0x1030df94,0],
		[0x1030df98,0],
		[0x1030df9c,0],
		[0x1030dfe0,854],
		[0x1030dfe4,0],
		[0x1030dff8,0],
		[0x1030dffc,0],
		[0x1030e000,0],
		[0x1030e004,0],
		[0x1030e010,2],
		[0x1030e014,0],
		[0x1030e018,0],
		[0x1030e01c,0],
		[0x1030e020,0],
		[0x1030e024,0],
		[0x1030e028,0],
		[0x1030e02c,0],
		[0x1030e030,0],
		[0x1030e034,0],
		[0x1030e038,0],
		[0x1030e03c,0],
		[0x1030e048,431],
		[0x1030e04c,5],
		[0x1030e0a8,0],
		[0x1030e0ac,0],
		[0x1030e0b0,0],
		[0x1030e0b4,0],
		[0x1030e0b8,0],
		[0x1030e0bc,0],
		[0x1030e0e8,0],
		[0x1030e0ec,0],
		[0x1030e0f0,0],
		[0x1030e0f4,0],
		[0x1030e0f8,0],
		[0x1030e0fc,0],
		[0x1030e140,855],
		[0x1030e144,0],
		[0x1030e158,0],
		[0x1030e15c,0],
		[0x1030e160,0],
		[0x1030e164,0],
		[0x1030e170,2],
		[0x1030e174,0],
		[0x1030e178,0],
		[0x1030e17c,0],
		[0x1030e180,0],
		[0x1030e184,0],
		[0x1030e188,0],
		[0x1030e18c,0],
		[0x1030e190,0],
		[0x1030e194,0],
		[0x1030e198,0],
		[0x1030e19c,0],
		[0x1030e1e0,856],
		[0x1030e1e4,0],
		[0x1030e1f8,0],
		[0x1030e1fc,0],
		[0x1030e200,0],
		[0x1030e204,0],
		[0x1030e210,2],
		[0x1030e214,0],
		[0x1030e218,0],
		[0x1030e21c,0],
		[0x1030e220,0],
		[0x1030e224,0],
		[0x1030e228,0],
		[0x1030e22c,0],
		[0x1030e230,0],
		[0x1030e234,0],
		[0x1030e238,0],
		[0x1030e23c,0],
		[0x1030e248,433],
		[0x1030e24c,3],
		[0x1030e298,0],
		[0x1030e29c,0],
		[0x1030e2b8,0],
		[0x1030e2bc,0],
		[0x1030e300,857],
		[0x1030e304,0],
		[0x1030e318,0],
		[0x1030e31c,0],
		[0x1030e320,0],
		[0x1030e324,0],
		[0x1030e330,2],
		[0x1030e334,0],
		[0x1030e338,0],
		[0x1030e33c,0],
		[0x1030e340,0],
		[0x1030e344,0],
		[0x1030e348,0],
		[0x1030e34c,0],
		[0x1030e350,0],
		[0x1030e354,0],
		[0x1030e358,0],
		[0x1030e35c,0],
		[0x1030e3a0,858],
		[0x1030e3a4,0],
		[0x1030e3b8,0],
		[0x1030e3bc,0],
		[0x1030e3c0,0],
		[0x1030e3c4,0],
		[0x1030e3d0,2],
		[0x1030e3d4,0],
		[0x1030e3d8,0],
		[0x1030e3dc,0],
		[0x1030e3e0,0],
		[0x1030e3e4,0],
		[0x1030e3e8,0],
		[0x1030e3ec,0],
		[0x1030e3f0,0],
		[0x1030e3f4,0],
		[0x1030e3f8,0],
		[0x1030e3fc,0],
		[0x1030e408,430],
		[0x1030e40c,2],
		[0x1030e460,0],
		[0x1030e464,250],
		[0x1030e468,1],
		[0x1030e46c,0],
		[0x1030e470,0],
		[0x1030e474,0],
		[0x1030e478,0],
		[0x1030e47c,0],
		[0x1030e480,0],
		[0x1030e484,0],
		[0x1030e488,0],
		[0x1030e48c,0],
		[0x1030e490,0],
		[0x1030e494,0],
		[0x1030e498,0],
		[0x1030e49c,0],
		[0x1030e4a0,0],
		[0x1030e4a4,1250],
		[0x1030e4a8,10],
		[0x1030e4ac,0],
		[0x1030e4b0,0],
		[0x1030e4b4,0],
		[0x1030e4b8,0],
		[0x1030e4bc,0],
		[0x1030e4c0,0],
		[0x1030e4c4,0],
		[0x1030e4c8,0],
		[0x1030e4cc,0],
		[0x1030e4d0,0],
		[0x1030e4d4,0],
		[0x1030e4d8,0],
		[0x1030e4dc,0],
		[0x1030e4e0,0],
		[0x1030e4e4,0],
		[0x1030e4e8,0],
		[0x1030e4ec,0],
		[0x1030e500,0],
		[0x1030e504,0],
		[0x1030e508,0],
		[0x1030e50c,0],
		[0x1030e510,0],
		[0x1030e514,0],
		[0x1030e518,0],
		[0x1030e51c,0],
		[0x1030e520,0],
		[0x1030e524,0],
		[0x1030e530,0],
		[0x1030e534,0],
		[0x1030e538,0],
		[0x1030e53c,0],
		[0x1030e540,0],
		[0x1030e544,0],
		[0x1030e550,2],
		[0x1030e554,0],
		[0x1030e558,0],
		[0x1030e55c,0],
		[0x1030e560,0],
		[0x1030e564,0],
		[0x1030e568,0],
		[0x1030e56c,0],
		[0x1030e570,0],
		[0x1030e574,0],
		[0x1030e578,0],
		[0x1030e57c,0],
		[0x1030e580,0],
		[0x1030e584,0],
		[0x1030e588,0],
		[0x1030e58c,0],
		[0x1030e5a0,0],
		[0x1030e5a4,0],
		[0x1030e5a8,0],
		[0x1030e5ac,0],
		[0x1030e5b0,0],
		[0x1030e5b4,0],
		[0x1030e5b8,0],
		[0x1030e5bc,0],
		[0x1030e5c0,0],
		[0x1030e5c4,0],
		[0x1030e5d0,0],
		[0x1030e5d4,0],
		[0x1030e5d8,0],
		[0x1030e5dc,0],
		[0x1030e5e0,0],
		[0x1030e5e4,0],
		[0x1030e5f0,2],
		[0x1030e5f4,0],
		[0x1030e5f8,0],
		[0x1030e5fc,0],
		[0, 0]
]).
string_val([
		[0, 0]
]).
/* This file contains recursive predicates */
:- use_module(library(clpfd)).
:- use_module(reif).
:- style_check(-singleton).

isTrue([X, Y]):-
    X == 49.

isTrue([X|Tail]):-
    isTrue(Tail).

log(File_name, Name, Addr, Base):-
    Offset #= Addr - Base,
    open(File_name, append, Stream),
    write(Stream, Name),
    write(Stream, ':'),
    write(Stream, Offset),
    nl(Stream),
    close(Stream).

possible_task_struct(Base_addr) :-
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM2_addr, Pid_addr, Tgid_addr, Real_parent_addr, Parent_addr , Child_addr, 
           Group_leader_addr, Thread_group_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    %MM2_addr #> Base_addr + 1000,
    Tasks_addr #> MM2_addr - 100,
    %FS_struct_addr #< Base_addr + 4000,
    Tgid_addr #= Pid_addr + 4,
    Real_parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr - 8,
    Child_addr #= Parent_addr + 8,
    %FIXME This may be too strong
    Group_leader_addr #=< Child_addr +32,
    %Comm_addr #= Base_addr + 1656,
    %Tasks_addr #= Base_addr + 1072,
    %FS_struct_addr #= Base_addr + 2640,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    % make query after labeling
    MM2_val #> 0,
    integer(MM2_val),
    
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val,  Comm_addr, Comm_val ]),

    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_parent_addr, Real_parent_val, Group_leader_addr, Group_leader_val]),
    Real_parent_val #> 0,
    Group_leader_val #> 0,
    query_ts(Real_parent_val, Comm_offset, Tasks_offset),
    query_ts(Group_leader_val, Comm_offset, Tasks_offset),

    labeling([enum], [Cred_addr, Cred_val]),
    Cred_val #> 0,
    query_cred(Cred_val),

    labeling([enum], [FS_struct_addr, FS_struct_val]),
    FS_struct_val #> 0,
    %query_fs_struct(FS_struct_val),



    get_time(End),
    Time_past is End - Current,
    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    log("profile.txt", "tasks", Tasks_addr, Base_addr),
    log("profile.txt", "mm_struct", MM2_addr, Base_addr),
    log("profile.txt", "comm", Comm_addr, Base_addr),
    log("profile.txt", "parent", Parent_addr, Base_addr),
    log("profile.txt", "group_leader", Group_leader_addr, Base_addr),
    log("profile.txt", "cred", Cred_addr, Base_addr),

    
    print_nl('tasks offset', Tasks_offset),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).

possible_string_pointer(Base_addr) :-
    /* Verify if this pointer points to a stirng */
    string_val(Str),
    Str_profile = [
        [Name_addr, Name_val]
    ],
    tuples_in(Str_profile, Str),
    Name_addr #= Base_addr.

query_string_pointer(Val) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "string_pointer"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_mount_struct(Base_addr, Offset) :-
    pointer(Ptr),
    Ptr_profile = ([
        [Mnt_devname_addr, Mnt_devname_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Mnt_devname_addr #= Base_addr + Offset,
    labeling([enum], [Mnt_devname_addr, Mnt_devname_val]),
    query_string_pointer(Mnt_devname_val).



possible_kernel_param(Base_addr) :-
    string_val(Str),
    Str_profile = [
        [Name_addr, Name_val]
    ],
    tuples_in(Str_profile, Str),
    Name_addr #= Base_addr.

possible_in_device(Base_addr) :-
    /* in_ifaddr remains the same across kernel versions 
       but we need this query to find ip_ptr in net_device struct
    */
    /*
        struct net_device *dev;
        int               refcnt;
        int               dead;
        struct in_ifaddr  *ifa_list;
    */
    pointer(Ptr),
    int(Int),
    Ptr_profile = ([
        [Dev_addr, Dev_val],
        [Ifa_list_addr, Ifa_list_val]
    ]),
    Int_profile = ([
        [Refcnt_addr, Refcnt_val],
        [Dead_addr, Dead_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Dead_addr #= Refcnt_addr + 4,
    chain([Dev_addr, Refcnt_addr, Dead_addr, Ifa_list_addr], #<),
    Dev_addr #= Base_addr,
    Ifa_list_addr #= Base_addr + 16,
    labeling([enum], [Ifa_list_addr, Ifa_list_val]),

    process_create(path('python'),
                    ['subquery.py', Ifa_list_val, "in_ifaddr"],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_in_ifaddr(Base_addr) :-
    /* in_ifaddr remains the same across kernel versions */
    pointer(Ptr),
    Ptr_profile = ([
        [Hash_addr, Hash_val],
        [Ifa_next_addr, Ifa_next_val],
        [Ifa_dev_addr, Ifa_dev_val],
        [Rcu_head_addr, Rcu_head_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([Hash_addr, Ifa_next_addr, Ifa_dev_addr, Rcu_head_addr], #<),
    Hash_addr #= Base_addr,
    Ifa_next_addr #= Hash_addr + 16,
    Ifa_dev_addr #= Ifa_next_addr + 8,
    Rcu_head_addr #= Ifa_dev_addr + 8,
    labeling([enum], [Hash_addr, Ifa_next_addr, Ifa_dev_addr, Rcu_head_addr]).



possible_mm_struct(Current_addr) :- 
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    % TODO: ADD vm_area_struct *mmap
    Ptr_profile = [
        [Mmap_addr, Mmap_val],
        [Pgd_addr, Pgd_val]  
    ],
    Ulong_profile = [
        [Mmap_base_addr, Mmap_base_val],
        [Mmap_legacy_base_addr, Mmap_legacy_base_val],
        [Task_size_addr, Task_size_val],
        [High_vm_end_addr, High_vm_end_val],
        [Start_brk_addr, Start_brk_val],
        [Brk_addr, Brk_val],
        [Start_stack_addr, Start_stack_val],
        [ARG_start_addr, ARG_start_val]
    ],
    Mmap_addr #= Current_addr,


    Mmap_base_addr #> Mmap_addr,
    %FIXME mmap_base need more value constraint, because we removed mmap_legacy_base and highest_vm_end.
    Mmap_base_val #> 0x7f0000000000,
    %FIXME in old linux version, e.g., there is no mmap_legacy_base and highest_vm_enb
    %chain([Mmap_base_addr, Mmap_legacy_base_addr, Task_size_addr, High_vm_end_addr, Pgd_addr], #<),
    chain([Mmap_base_addr, Task_size_addr, Pgd_addr], #<),

    %FIXME: This rule may be too strong
    %High_vm_end_addr #= Mmap_base_addr + 24, 
    Pgd_addr #> Task_size_addr,
    Pgd_addr #=< Task_size_addr + 40,
    %FIXME: This rule may not be true for other mm_struct.
    Task_size_val #>= 0x7ffffffff000,

    %Mmap_base_addr #= Current_addr + 40,
    %Mmap_legacy_base_addr #= Current_addr + 40,
    %Task_size_addr #= Current_addr + 48,
    %High_vm_end_addr #= Current_addr + 72,

    Start_brk_addr #> Pgd_addr,
    Start_stack_val #> 0x7ff000000000,
    % TODO: Convert this to index comparison. 
    ARG_start_addr #< Current_addr + 500,
    chain([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr], #<),
    ARG_start_addr #= Start_brk_addr + 24,
    Brk_val #< 0x7ff000000000,
    ARG_start_val #> 0x7ff000000000,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),


    labeling([enum], [Mmap_addr, Mmap_val, Mmap_base_addr, Pgd_addr, Pgd_val]),
    Mmap_val #> 0,
    Pgd_val #> 0,
    
    process_create(path('python'),
                    ['subquery.py', Mmap_val, "vm_area_struct", 2],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    label([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr]),
    statistics(real_time, [End|_]),

    log("./profile/mm_struct", "mmap", Mmap_addr, Current_addr),
    log("./profile/mm_struct", "mmap_base", Mmap_base_addr, Current_addr),
    log("./profile/mm_struct", "pgd", Pgd_addr, Current_addr),
    log("./profile/mm_struct", "start_brk", Start_brk_addr, Current_addr),
    log("./profile/mm_struct", "brk", Brk_addr, Current_addr),
    log("./profile/mm_struct", "start_stack", Start_stack_addr, Current_addr),
    log("./profile/mm_struct", "arg_start", ARG_start_addr, Current_addr),
    log("./profile/mm_struct", "mm_struct", End, Start).


possible_vm_area_struct(Base_addr, Level) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [VM_next_addr, VM_next_val],
        [VM_file_addr, VM_file_val]
    ],
    Ulong_profile = [
        [VM_start_addr, VM_start_val],
        [VM_end_addr, VM_end_val],
        [VM_flag_addr, VM_flag_val]
        /*VM_pgoff is 0, and we do not consider 0 as ulong*/
        %[VM_pgoff_addr, VM_pgoff_val]
    ],
    VM_start_addr #>= Base_addr,
    chain([VM_start_addr, VM_end_addr, VM_next_addr, VM_flag_addr, VM_file_addr], #<),
    VM_end_addr #= VM_start_addr + 8,
    VM_next_addr #= VM_end_addr + 8,
    VM_next_addr #< Base_addr + 32,
    VM_file_addr #< Base_addr + 180,
    VM_pgoff_addr #= VM_file_addr - 8,
    VM_file_addr #= Base_addr + 160,

    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    %FIXME: VM_flag may need value constraints.

    label([VM_next_addr, VM_next_val]),

    labeling([enum], [VM_start_addr, VM_end_addr, VM_flag_addr, VM_pgoff_addr, VM_file_addr, VM_file_val]),
    
    VM_file_val #> 0,
    process_create(path('python'),
                ['subquery.py', VM_file_val, "vm_file"],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    statistics(real_time, [End|_]),

    log("./profile/vm_area_struct", "vm_start", VM_start_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_end", VM_end_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_next", VM_next_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_flag", VM_flag_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_pgoff", VM_pgoff_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_file", VM_file_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_area_struct", End, Start).

check_vm_area_struct(Base_addr, Level) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "vm_area_struct", Level],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vm_file(Base_addr) :-
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [Vfs_mount_addr, Vfs_mount_val],
        [Dentry_addr, Dentry_val],
        [F_op_addr, F_op_val]
    ],
    tuples_in(Ptr_profile, Ptr),
    Vfs_mount_addr #> Base_addr,
    Dentry_addr #= Vfs_mount_addr + 8,
    Dentry_addr #< Base_addr + 40,
    Vfs_mount_val #> 0,
    Dentry_val #> 0,
    F_op_addr #= Base_addr + 40, 
    F_op_val #> 0,
    chain([Vfs_mount_addr, Dentry_addr, F_op_addr], #<),
    labeling([enum], [Vfs_mount_val, Dentry_val, F_op_addr, F_op_val]),


    process_create(path('python'),
                    ['subquery.py', Vfs_mount_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    /*
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/
    

    %query_file_operation(F_op_addr),

    log("./profile/file", "vfs_mount", Vfs_mount_addr, Base_addr),
    log("./profile/file", "dentry", Dentry_addr, Base_addr),
    log("./profile/file", "f_op", F_op_addr, Base_addr).



query_file_operation(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result).

possible_name_pointer(Val, Name_offset) :-
    /* The value at val+name_offset is a string pointer */
    current_predicate(pointer/1),
    pointer(Ptr),
    Ptr_profile = ([
        [Name_addr, Name_val]
    ]),
    Name_addr #= Val + Name_offset,
    tuples_in(Ptr_profile, Ptr),
    labeling([enum], [Name_addr, Name_val]),
    query_string_pointer(Name_val).

possible_vfs_mount(Base_addr) :-
    pointer(Ptr),
    int(Int),
    Ptr_profile = [
        [Dentry_addr, Dentry_val],
        [Mnt_sb_addr, Mnt_sb_val]
    ],
    Int_profile = [
        [Mnt_flags_addr, Mnt_flags_val]
    ],
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Dentry_addr #= Base_addr,
    Dentry_val #> 0,
    Mnt_flags_addr #= Dentry_addr + 16,
    Mnt_flags_val #>= 0,
    Mnt_sb_val #> 0,
    chain([Dentry_addr, Mnt_sb_addr, Mnt_flags_addr], #<),
    label([Dentry_addr, Dentry_val, Mnt_flags_addr, Mnt_flags_val]).
 
possible_dentry(Base_addr) :-
    /*
        struct dentry *d_parent;
        struct qstr d_name -> char *name; it's a name pointer
        struct inode *d_inode;
        unsigned char d_iname[LEN];
        const struct dentry_operations *d_op;
        struct list_head d_child;
        struct list_head d_subdirs;
        union {
	        struct hlist_node d_alias;
	        struct rcu_head d_rcu;
        } d_u;
    */
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    string_val(Str),
    Ptr_profile = [
        [Dparent_addr, Dparent_val],
        [Dname_addr, Dname_val],
        [D_inode_addr, D_inode_val],
        [D_op_addr, D_op_val],
        [Dchild_addr, Dchild_val],
        [D_subdirs_addr, D_subdirs_val]
    ],
    Str_profile = [
        [D_iname_addr, D_iname_val]
    ],
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    Dparent_addr #> Base_addr,
    chain([Dparent_addr, Dname_addr, D_inode_addr, D_iname_addr, 
            D_op_addr, Dchild_addr, D_subdirs_addr], #<),
    D_subdirs_addr #= Dchild_addr + 16,
    D_subdirs_addr #< Base_addr + 200,
    Dparent_val #> 0,
    labeling([enum], [Dname_addr, Dname_val]),
    query_string_pointer(Dname_val),
    labeling([enum], [D_iname_addr, D_iname_val]),
    D_iname_offset #= D_iname_addr - Base_addr,
    Dname_offset #= Dname_addr - Base_addr,
    labeling([enum], [Dparent_addr, Dparent_val]),
    Parent_dname #= Dparent_val + Dname_offset,
    process_create(path('python'),
                    ['subquery.py', Parent_dname, "name_pointer", Dname_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    %labeling([enum], [D_inode_addr, D_inode_val]),
    %query_inode(D_inode_val),

    labeling([enum], [Dchild_addr, Dchild_val]),
    Dchild_offset #= Dchild_addr - Base_addr,
    Dchild_init #= Dchild_val - Dchild_offset,
    query_name_pointer(Dchild_init, Dname_offset),

    /* This can be hardcoded as d_child_addr + 16 */
    labeling([enum], [D_subdirs_addr, D_subdirs_val]),
    Dsubdirs_offset #= D_subdirs_addr - Base_addr,
    D_subdirs_init #= D_subdirs_val - Dsubdirs_offset,
    query_name_pointer(D_subdirs_init, Dname_offset),

    statistics(real_time, [End|_]),

    log("./profile/dentry", "parent", Dparent_addr, Base_addr),
    log("./profile/dentry", "inode", D_inode_val, Base_addr),
    log("./profile/dentry", "d_iname", D_iname_addr, Base_addr),
    log("./profile/dentry", "dchild", Dchild_addr, Base_addr),
    log("./profile/dentry", "d_subdirs", D_subdirs_addr, Base_addr),
    log("./profile/dentry", "dentry", End, Start).

query_inode(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_inode(Base_addr) :-
    /*
        struct inode_operations *i_op;
        struct super_block      *i_sb;
        struct address_space    *i_mapping;
    */
    statistics(real_time, [Start|_]),

    pointer(Ptr),
    long(Ulg),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [I_op_addr, I_op_val],
        [I_sb_addr, I_sb_val],
        [I_mapping_addr, I_mapping_val],
        [I_fop_addr, I_fop_val]
    ]),
    Ulong_profile = ([
        /* i_mode is actually not long type. */
        [I_mode_addr, I_mode_val],
        [I_ino_addr, I_ino_val],
        [I_size_addr, I_size_val],
        [I_atime_addr, I_atime_val],
        [_I_atime_addr, _I_atime_val],
        [I_mtime_addr, I_mtime_val],
        [I_ctime_addr, I_ctime_val],
        [_I_ctime_addr, _I_ctime_val]
    ]),
    Int_profile = ([
        [I_uid_addr, I_uid_val],
        [I_gid_addr, I_gid_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    tuples_in(Int_profile, Int),

    chain([I_mode_addr, I_uid_addr, I_gid_addr, I_op_addr, I_sb_addr, I_mapping_addr, I_ino_addr,
           I_size_addr, I_atime_addr, _I_atime_addr, I_mtime_addr, I_ctime_addr, _I_ctime_addr, I_fop_addr], #<),

    I_mode_addr #= Base_addr,
    I_mode_val #> 0,
    I_gid_addr #= I_mode_addr + 8,
    %I_op_addr #= Base_addr + 32,
    I_op_addr #=< Base_addr + 32,
    I_op_val #> 0,
    labeling([enum], [I_op_addr, I_op_val]),
    query_inode_operations(I_op_val),

    I_sb_addr #= I_op_addr + 8,
    I_mapping_addr #= I_sb_addr + 8,
    I_atime_addr #= I_size_addr + 8,
    I_mtime_addr #= I_atime_addr + 16,
    I_ctime_addr #= I_mtime_addr + 16,
    _I_ctime_addr #= I_ctime_addr + 8,
    I_size_val #> 0,
    I_atime_val #> 4096,
    I_mtime_val #> 4096,
    I_ctime_val #> 4096,
    I_fop_addr #< Base_addr + 400,
    labeling([enum], [I_sb_addr, I_mapping_addr, I_atime_addr, I_mtime_addr, I_ctime_addr]),


    labeling([enum], [I_fop_addr, I_fop_val]),
    I_fop_val #> 0,
    query_inode_operations(I_fop_val),
    statistics(real_time, [End|_]),


    log("./profile/inode", "I_mode_addr", I_mode_addr, Base_addr),
    log("./profile/inode", "I_uid_addr", I_uid_addr, Base_addr),
    log("./profile/inode", "I_gid_addr", I_gid_addr, Base_addr),
    log("./profile/inode", "I_op_addr", I_op_addr, Base_addr),
    log("./profile/inode", "I_sb_addr", I_sb_addr, Base_addr),
    log("./profile/inode", "I_mapping_addr", I_mapping_addr, Base_addr),
    log("./profile/inode", "I_size_addr", I_size_addr, Base_addr),
    log("./profile/inode", "I_atime_addr", I_atime_addr, Base_addr),
    log("./profile/inode", "I_mtime_addr", I_mtime_addr, Base_addr),
    log("./profile/inode", "I_ctime_addr", I_ctime_addr, Base_addr),
    log("./profile/inode", "I_fop_addr", I_fop_addr, Base_addr),
    log("./profile/inode", "inode", End, Start).


query_inode_operations(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_name_pointer(Base_addr, Offset) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "name_pointer", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_inode_operations(Base_addr) :-
    /* a bunch of function pointers. */
    pointer(Ptr),
    Ptr_profile = ([
        [_L1_addr, _L1_val],
        [_L2_addr, _L2_val],
        [_L3_addr, _L3_val],
        [_L4_addr, _L4_val],
        [_L5_addr, _L5_val],
        [_L6_addr, _L6_val],
        [_L7_addr, _L7_val],
        [_L8_addr, _L8_val],
        [_L9_addr, _L9_val],
        [_L10_addr, _L10_val],
        [_L11_addr, _L11_val],
        [_L12_addr, _L12_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([_L1_addr, _L2_addr, _L3_addr, _L4_addr, _L5_addr, _L6_addr, _L7_addr,
           _L8_addr, _L9_addr, _L10_addr, _L11_addr, _L12_addr], #<),
    _L1_addr #= Base_addr,
    _L12_addr #= Base_addr + 88.




possible_nothing() :-

    %log("profile.txt", "dentry addr", Base_addr, 0),
    Dparent_addr #> Base_addr,
    Dname_addr #> 0,
    Dname_addr #< Base_addr + 200,
    %Dname_addr #= Base_addr + 160,
    %FIXME This child rule is not applicable for old kernel version. 
    %chain([Dparent_addr, Dname_addr, Dchild_addr], #<),
    %Dchild_addr #< Base_addr + 200,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    labeling([enum], [Dparent_addr, Dparent_val, Dname_addr, Dchild_addr, Dchild_val]),
    Dname_offset #= Dname_addr - Base_addr,
    integer(Dname_offset),
    Dparent_val #> 0,
    
    %FIXME d_parent may not be initialized
    /*process_create(path('python'),
                ['subquery.py', Dparent_val, "d_entry", Dname_offset],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/

    %FIXME: may need to find another way for all list_head. 
    /*Dchild_offset #= Dchild_addr - Base_addr,
    integer(Dchild_offset),
    Dchild_base #= Dchild_val - Dchild_offset,
    integer(Dchild_base),
    Dchild_base #> 0,
    process_create(path('python'),
                ['subquery.py', Dchild_base, "d_entry", Dname_offset],
                [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    statistics(real_time, [End|_]).
/*
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    log("profile.txt", "d_parent", Dparent_addr, Base_addr),
    log("profile.txt", "d_child", Dchild_addr, Base_addr),
    log("profile.txt", "dentry time", End, Start).
*/
possible_d_entry(Base_addr, Dname_offset) :-
    current_predicate(string_val/1),
    string_val(Str),
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    Dname_addr #= Base_addr + Dname_offset,
    tuples_in(Str_profile, Str),
    label([Dname_addr]).

possible_list_head(Tasks_val, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_val, Tasks_addr]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],
    Comm_addr #= Tasks_val - Tasks_offset + Comm_offset,
    Tasks_addr #\= Tasks_val,
    tuples_in(Str_profile, Str),
    tuples_in(Ptr_profile, Ptr),
    label([Comm_addr]).

possible_ts(Base_addr, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_addr, Tasks_val]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],

    Comm_addr #= Base_addr + Comm_offset,
    Tasks_addr #= Base_addr + Tasks_offset,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),

    label([Tasks_val]),
    
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "list_head", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_cred(Base_addr) :-
    statistics(real_time, [Start|_]),

    int(Int),
    long(Ulg),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3],
        [Addr4, Val4],
        [Addr5, Val5],
        [Addr6, Val6],
        [Addr7, Val7],
        [Addr8, Val8],
        [Addr9, Val9]
    ],
    %FIXME For now, this rule is hard-coded because we do not consider 0 as a unsign long number. 
    %So that for cred whos val10 is 0, this rule does not apply.
    /*Ulong_profile = [
        [Addr10, Val10],
        [Addr11, Val11]
    ],*/
    Addr1 #> Base_addr,
    %chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9, Addr10, Addr11], #<),
    chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9], #<),
    Addr1 #= Base_addr + 4,
    Addr9 #= Addr1 + 32,
    %Addr11 #< Base_addr + 120,
    tuples_in(Int_profile, Int),
    %tuples_in(Ulong_profile, Ulg),
    statistics(real_time, [End|_]),
    labeling([enum], [Addr1, Addr2, Addr5, Addr6]),
    log("./profile/cred", "cred", End, Start),
    log('./profile/cred', "uid", Addr1, Base_addr),
    log('./profile/cred', "gid", Addr2, Base_addr),
    log('./profile/cred', "euid", Addr5, Base_addr),
    log('./profile/cred', "egid", Addr6, Base_addr).

possible_fs_struct(Base_addr) :-
    statistics(real_time, [Start|_]),
    int(Int),
    pointer(Ptr),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3]
    ],
    Ptr_profile = [
        [Root_addr, Root_val],
        [PWD_addr, PWD_val]
    ],
    Addr1 #>= Base_addr,
    chain([Addr1, Addr2, Addr3, Root_addr, PWD_addr], #<),
    PWD_addr #= Root_addr + 16,
    PWD_addr #< Base_addr + 50,
    tuples_in(Int_profile, Int),
    tuples_in(Ptr_profile, Ptr),
    Root_val #> 0,
    PWD_val #> 0,
    label([Root_addr, Root_val]),
    
    process_create(path('python'),
                    ['subquery.py', Root_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    label([PWD_addr, PWD_val]),
    process_create(path('python'),
                    ['subquery.py', PWD_val, "dentry"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    statistics(real_time, [End|_]),
    log("profile.txt", "fs time", End, Start),
    log('profile.txt', "Root", Root_addr, Base_addr),
    log('profile.txt', "pwd", PWD_addr, Base_addr),
    log('profile.txt', "fs_struct", End, Start),

possible_mount(Base_addr) :-
    /* struct hlist_head mnt_hash;
       struct mount *mnt_parent; 
       struct vfsmount mnt;
       struct list_head mnt_mounts;
       struct list_head mnt_child;
       struct list_head mnt_instance;
       const char *mnt_devname;
       struct list_head mnt_list;
    */
    statistics(real_time, [Start|_]),
    %get_time(Current),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Mnt_hash_addr, Mnt_hash_val],
        [Mnt_parent_addr, Mnt_parent_val],
        [Vfsmount_addr, Vfsmount_val],
        [Mnt_child_addr, Mnt_child_val],
        [Mnt_devname_addr, Mnt_devname_val],
        [Mnt_list_addr, Mnt_list_val]
    ]),
    Int_profile = ([
        [Mnt_flags_addr, Mnt_flags_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    /* Order Invariants */
    chain([Mnt_hash_addr, Mnt_parent_addr, Vfsmount_addr, Mnt_flags_addr,
            Mnt_child_addr, Mnt_devname_addr, Mnt_list_addr], #<),
    Mnt_hash_addr #= Base_addr,
    /* mnt_hash_addr is a list_head */
    Mnt_parent_addr #> Base_addr + 8,
    Mnt_list_addr - Base_addr #< 200,
    labeling([enum], [Mnt_devname_addr, Mnt_devname_val]),
    query_string_pointer(Mnt_devname_val),
    Mnt_devname_offset #= Mnt_devname_addr - Base_addr,
    /* the offset from mnt_mounts to mnt_list remains the same, so it's safe to use fixed offsets. */
    Mnt_child_addr #= Mnt_devname_addr - 32,
    Mnt_list_addr #= Mnt_devname_addr + 8,
    Mnt_flags_addr #= Vfsmount_addr + 16,
    labeling([enum], [Mnt_child_addr, Mnt_list_addr, Vfsmount_addr, Vfsmount_val]),
    /* Seems unnecessary 
    Mnt_list_offset #= Mnt_list_addr - Base_addr,
    Mnt_list #= Mnt_list_val - Mnt_list_offset,
    Mnt_list #> 0,
    query_mount_struct(Mnt_list, Mnt_devname_offset),
    */
    Vfsmount_val #>= 0,
    /* Here we can infer layout of dentry structure 
       Maybe need to infer using another dentry, somehow it may not be initialized. 
    */
    Vfsmount_addr #> 0,
    %query_dentry(Vfsmount_addr),

    labeling([enum], [Mnt_parent_addr, Mnt_parent_val]),
    /* To verify another mount struct, only one-level query, so it does not direct call query_mount recursively */
    
    query_mount_struct(Mnt_parent_val, Mnt_devname_offset),
    

    %get_time(End),
    %Time_past is End - Current,
    statistics(real_time, [End|_]),
    log("./profile/mount", "mnt_hash", Mnt_hash_addr, Base_addr),
    log("./profile/mount", "mnt_parent", Mnt_parent_addr, Base_addr),
    log("./profile/mount", "mnt_child", Mnt_child_addr, Base_addr),
    log("./profile/mount", "mnt_devname", Mnt_devname_addr, Base_addr),
    log("./profile/mount", "mnt_list", Mnt_list_addr, Base_addr),
    log("./profile/mount", "mount", End, Start).


possible_neigh_hash_table(Base_addr) :-
    /* neighbour **hash_buckets */
    pointer(Ptr),
    Ptr_profile = ([
        [Hash_buckest_addr, Hash_buckets_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Hash_buckest_addr #= Base_addr,
    labeling([enum], [Hash_buckest_addr, Hash_buckets_val]),
    process_create(path('python'),
                    ['subquery.py', Hash_buckets_val, "hash_buckets"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_hash_buckets(Base_addr) :-
    /* hash_buckets is an array of neighbour pointer 
       note that not all element are non-zero
    */
    pointer(Ptr),
    Ptr_profile = ([
        [Neighbour_addr, Neighbour_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Neighbour_addr #< Base_addr + 32,
    Neighbour_val #> 0,
    labeling([enum], [Neighbour_addr, Neighbour_val]),
    process_create(path('python'),
                    ['subquery.py', Neighbour_val, "neighbour"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_neighbour(Base_addr) :-
    /* net_device *dev at offset 464 */
    pointer(Ptr),
    Ptr_profile = ([
        [Dev_addr, Dev_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Dev_addr #= Base_addr + 368,
    labeling([enum], [Dev_addr, Dev_val]),
    process_create(path('python'),
                    ['subquery.py', Dev_val, "net_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).


possible_net_device(Base_addr) :- 
    /*
        char             name[NAMSIZ];
        struct list_head dev_list;
        unsigned char    addr_len;
        unsigned int     promiscuity;
        struct in_device *ip_ptr;
    */
    statistics(real_time, [Start|_]),
    %get_time(Current),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Dev_list_addr, Dev_list_val],
        [IP_ptr_addr, IP_ptr_val]
    ]),
    Str_profile = ([
        [Name_addr, Name_val]
    ]),
    Int_profile = ([
        [Promisc_addr, Promisc_val],
        [Addr_len_addr, Addr_len_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),
    /* Hard to determine offsets for addr_len and promisc */
    chain([Name_addr, Dev_list_addr, Addr_len_addr, Promisc_addr, IP_ptr_addr], #<),
    Name_addr #>= Base_addr,
    Name_offset #= Name_addr - Base_addr,
    IP_ptr_addr #< Base_addr + 1000,
    /* dev_list offset can be hardcoded since it remains the same */
    Dev_list_addr #= Base_addr + 80,
    labeling([enum], [Name_addr, Dev_list_addr, Dev_list_val]),
    /* do not have a good constrain to narrow down ip_ptr, use its rough offset
       to reduce the search space. 
     */
    IP_ptr_addr #> Base_addr + 700,
    IP_ptr_val #> 0,
    labeling([enum], [IP_ptr_addr, IP_ptr_val]),
    query_in_device(IP_ptr_val),

    %get_time(End),
    %Time_past is End - Current,
    statistics(real_time, [End|_]),

    log("./profile/net_device", "name", Name_addr, Base_addr),
    log("./profile/net_device", "ip_ptr", IP_ptr_addr, Base_addr),
    log("./profile/net_device", "dev_list", Dev_list_addr, Base_addr),
    log("./profile/net_device", "net_device", End, Start).

query_in_device(IP_ptr_val) :-
    process_create(path('python'),
                    ['subquery.py', IP_ptr_val, "in_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).


query_mount_struct(Val, Offset) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "mount_struct", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).
