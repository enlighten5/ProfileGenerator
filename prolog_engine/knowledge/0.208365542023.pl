:- use_module(library(clpfd)).
:- style_check(-singleton).
pointer([
		[0x1f38b490,523809344],
		[0x1f38b498,0],
		[0x1f38b4a0,523809377],
		[0x1f38b4a8,0],
		[0x1f38b4b0,0],
		[0x1f38b4c0,521095168],
		[0x1f38b4d8,387512473],
		[0x1f38b4e0,0],
		[0x1f38b4e8,0],
		[0x1f38b4f8,523810040],
		[0x1f38b500,523810040],
		[0x1f38b508,0],
		[0x1f38b510,367316480],
		[0x1f38b518,0],
		[0x1f38b520,520215808],
		[0x1f38b528,0],
		[0x1f38b530,0],
		[0x1f38b538,0],
		[0x1f38b550,523810688],
		[0x1f38b558,523810496],
		[0x1f38b560,523810720],
		[0x1f38b568,0],
		[0x1f38b570,0],
		[0x1f38b580,521095168],
		[0x1f38b598,0],
		[0x1f38b5a0,0],
		[0x1f38b5a8,0],
		[0x1f38b5b0,0],
		[0x1f38b5b8,522218000],
		[0x1f38b5c0,522218000],
		[0x1f38b5c8,522147712],
		[0x1f38b5d0,0],
		[0x1f38b5e0,0],
		[0x1f38b5e8,0],
		[0x1f38b5f0,0],
		[0x1f38b5f8,0],
		[0x1f38b610,523812416],
		[0x1f38b618,523808960],
		[0x1f38b620,523808800],
		[0x1f38b628,523809760],
		[0x1f38b630,523808992],
		[0x1f38b638,0],
		[0x1f38b640,521095168],
		[0x1f38b658,523809049],
		[0x1f38b660,394254680],
		[0x1f38b668,391296216],
		[0x1f38b678,522217168],
		[0x1f38b680,522217168],
		[0x1f38b688,522146032],
		[0x1f38b690,367316480],
		[0x1f38b6a0,418857216],
		[0x1f38b6a8,0],
		[0x1f38b6b0,0],
		[0x1f38b6b8,0],
		[0x1f38b6d0,523810112],
		[0x1f38b6d8,310304320],
		[0x1f38b6e0,523811872],
		[0x1f38b6e8,523810720],
		[0x1f38b6f0,310304352],
		[0x1f38b700,521095168],
		[0x1f38b718,0],
		[0x1f38b720,0],
		[0x1f38b728,0],
		[0x1f38b730,0],
		[0x1f38b738,522217744],
		[0x1f38b740,522217744],
		[0x1f38b748,522146832],
		[0x1f38b750,0],
		[0x1f38b760,0],
		[0x1f38b768,0],
		[0x1f38b770,0],
		[0x1f38b778,0],
		[0x1f38b790,523812224],
		[0x1f38b798,523810112],
		[0x1f38b7a0,523810529],
		[0x1f38b7a8,523812256],
		[0x1f38b7b0,523810144],
		[0x1f38b7c0,521095168],
		[0x1f38b7d8,0],
		[0x1f38b7e0,0],
		[0x1f38b7e8,0],
		[0x1f38b7f0,0],
		[0x1f38b7f8,523810808],
		[0x1f38b800,523810808],
		[0x1f38b808,0],
		[0x1f38b810,367257280],
		[0x1f38b818,0],
		[0x1f38b820,0],
		[0x1f38b828,367006464],
		[0x1f38b830,0],
		[0x1f38b838,0],
		[0x1f38b850,523812608],
		[0x1f38b858,523809728],
		[0x1f38b860,467736097],
		[0x1f38b868,523811872],
		[0x1f38b870,523808800],
		[0x1f38b880,521095168],
		[0x1f38b898,448393880],
		[0x1f38b8a0,0],
		[0x1f38b8a8,0],
		[0x1f38b8b8,523811000],
		[0x1f38b8c0,523811000],
		[0x1f38b8c8,0],
		[0x1f38b8d0,367316480],
		[0x1f38b8d8,0],
		[0x1f38b8e0,520529408],
		[0x1f38b8e8,0],
		[0x1f38b8f0,0],
		[0x1f38b8f8,0],
		[0x1f38b910,309662080],
		[0x1f38b918,521255168],
		[0x1f38b920,521255200],
		[0x1f38b928,0],
		[0x1f38b930,0],
		[0x1f38b938,0],
		[0x1f38b940,521095168],
		[0x1f38b958,387667929],
		[0x1f38b960,384125656],
		[0x1f38b968,447904088],
		[0x1f38b978,522218832],
		[0x1f38b980,522218832],
		[0x1f38b988,522147312],
		[0x1f38b990,367316480],
		[0x1f38b9a0,412160512],
		[0x1f38b9a8,0],
		[0x1f38b9b0,0],
		[0x1f38b9b8,0],
		[0x1f38b9d0,309662848],
		[0x1f38b9d8,309662656],
		[0x1f38b9e0,309662880],
		[0x1f38b9e8,0],
		[0x1f38b9f0,0],
		[0x1f38b9f8,0],
		[0x1f38ba00,521095168],
		[0x1f38ba18,309710105],
		[0x1f38ba20,448372568],
		[0x1f38ba28,415089880],
		[0x1f38ba38,522219088],
		[0x1f38ba40,522219088],
		[0x1f38ba48,522148832],
		[0x1f38ba50,367316480],
		[0x1f38ba60,412160768],
		[0x1f38ba68,0],
		[0x1f38ba70,0],
		[0x1f38ba78,0],
		[0x1f38ba90,310303744],
		[0x1f38ba98,310300672],
		[0x1f38baa0,521255969],
		[0x1f38baa8,413373792],
		[0x1f38bab0,523809376],
		[0x1f38bac0,521095168],
		[0x1f38bad8,0],
		[0x1f38bae0,0],
		[0x1f38bae8,0],
		[0x1f38baf0,0],
		[0x1f38baf8,522216016],
		[0x1f38bb00,522216016],
		[0x1f38bb08,522148752],
		[0x1f38bb10,0],
		[0x1f38bb20,0],
		[0x1f38bb28,0],
		[0x1f38bb30,0],
		[0x1f38bb38,0],
		[0x1f38bb50,521256128],
		[0x1f38bb58,521256320],
		[0x1f38bb60,521256352],
		[0x1f38bb68,0],
		[0x1f38bb70,0],
		[0x1f38bb78,0],
		[0x1f38bb80,521095168],
		[0x1f38bb98,309710297],
		[0x1f38bba0,405059160],
		[0x1f38bba8,405059352],
		[0x1f38bbb8,522217616],
		[0x1f38bbc0,522217616],
		[0x1f38bbc8,522149552],
		[0x1f38bbd0,367316480],
		[0x1f38bbe0,412161024],
		[0x1f38bbe8,0],
		[0x1f38bbf0,0],
		[0x1f38bbf8,0],
		[0x1f38bc10,310304320],
		[0x1f38bc18,523812608],
		[0x1f38bc20,523810913],
		[0x1f38bc28,523810528],
		[0x1f38bc30,523812640],
		[0x1f38bc40,521095168],
		[0x1f38bc58,417895640],
		[0x1f38bc60,521724376],
		[0x1f38bc68,418143512],
		[0x1f38bc78,522217488],
		[0x1f38bc80,522217488],
		[0x1f38bc88,522148992],
		[0x1f38bc90,367316480],
		[0x1f38bca0,520529408],
		[0x1f38bca8,0],
		[0x1f38bcb0,0],
		[0x1f38bcb8,0],
		[0x1f38bcd0,522205632],
		[0x1f38bcd8,522204864],
		[0x1f38bce0,522205664],
		[0x1f38bce8,0],
		[0x1f38bcf0,0],
		[0x1f38bcf8,0],
		[0x1f38bd00,309624832],
		[0x1f38bd18,0],
		[0x1f38bd20,0],
		[0x1f38bd28,0],
		[0x1f38bd30,0],
		[0x1f38bd38,521570576],
		[0x1f38bd40,521570576],
		[0x1f38bd48,440602784],
		[0x1f38bd50,0],
		[0x1f38bd60,0],
		[0x1f38bd68,0],
		[0x1f38bd70,0],
		[0x1f38bd78,0],
		[0x1f38bd90,0],
		[0x1f38bd98,523810688],
		[0x1f38bda0,523810720],
		[0x1f38bda8,0],
		[0x1f38bdb0,0],
		[0x1f38bdb8,0],
		[0x1f38bdc0,521095168],
		[0x1f38bdd8,0],
		[0x1f38bde0,0],
		[0x1f38bde8,0],
		[0x1f38bdf0,0],
		[0x1f38bdf8,523812344],
		[0x1f38be00,523812344],
		[0x1f38be08,0],
		[0x1f38be10,367257280],
		[0x1f38be18,0],
		[0x1f38be20,0],
		[0x1f38be28,367006496],
		[0x1f38be30,0],
		[0x1f38be38,0],
		[0x1f38be50,523809728],
		[0x1f38be58,523810304],
		[0x1f38be60,523809760],
		[0x1f38be68,0],
		[0x1f38be70,0],
		[0x1f38be78,0],
		[0x1f38be80,521095168],
		[0x1f38be98,448394649],
		[0x1f38bea0,0],
		[0x1f38bea8,448396952],
		[0x1f38beb8,522218128],
		[0x1f38bec0,522218128],
		[0x1f38bec8,522146032],
		[0x1f38bed0,367316480],
		[0x1f38bee0,418857216],
		[0x1f38bee8,0],
		[0x1f38bef0,0],
		[0x1f38bef8,0],
		[0x1f38bf10,523811840],
		[0x1f38bf18,523810880],
		[0x1f38bf20,523811873],
		[0x1f38bf28,0],
		[0x1f38bf30,0],
		[0x1f38bf40,521095168],
		[0x1f38bf58,0],
		[0x1f38bf60,0],
		[0x1f38bf68,0],
		[0x1f38bf70,0],
		[0x1f38bf78,522215440],
		[0x1f38bf80,522215440],
		[0x1f38bf88,522147792],
		[0x1f38bf90,0],
		[0x1f38bfa0,0],
		[0x1f38bfa8,0],
		[0x1f38bfb0,0],
		[0x1f38bfb8,0],
		[0x1f38bfc0,0],
		[0x1f38bfc8,0],
		[0x1f38bfd0,0],
		[0x1f38bfd8,0],
		[0x1f38bfe0,0],
		[0x1f38bfe8,0],
		[0x1f38bff0,0],
		[0x1f38bff8,0],
		[0x1f38c010,523814400],
		[0x1f38c018,446829312],
		[0x1f38c020,310216800],
		[0x1f38c028,344392672],
		[0x1f38c030,523915680],
		[0x1f38c040,310339584],
		[0x1f38c058,387666393],
		[0x1f38c060,446829976],
		[0x1f38c068,446986008],
		[0x1f38c078,523812984],
		[0x1f38c080,523812984],
		[0x1f38c088,0],
		[0x1f38c090,367316480],
		[0x1f38c098,0],
		[0x1f38c0a0,412453632],
		[0x1f38c0a8,0],
		[0x1f38c0b0,0],
		[0x1f38c0b8,0],
		[0x1f38c0d0,344393792],
		[0x1f38c0d8,523816128],
		[0x1f38c0e0,310353121],
		[0x1f38c0e8,344393824],
		[0x1f38c0f0,523816160],
		[0x1f38c100,521105408],
		[0x1f38c120,344393880],
		[0x1f38c128,523816216],
		[0x1f38c138,322068240],
		[0x1f38c140,322068240],
		[0x1f38c148,393885488],
		[0x1f38c150,367316480],
		[0x1f38c160,310182144],
		[0x1f38c168,0],
		[0x1f38c170,0],
		[0x1f38c178,0],
		[0x1f38c190,383973440],
		[0x1f38c198,440537472],
		[0x1f38c1a0,391552609],
		[0x1f38c1a8,383973472],
		[0x1f38c1b0,0],
		[0x1f38c1b8,0],
		[0x1f38c1c0,389001216],
		[0x1f38c1d8,440537561],
		[0x1f38c1e0,0],
		[0x1f38c1e8,0],
		[0x1f38c1f8,520229968],
		[0x1f38c200,520229968],
		[0x1f38c208,446205136],
		[0x1f38c210,367316480],
		[0x1f38c220,520347904],
		[0x1f38c228,0],
		[0x1f38c230,0],
		[0x1f38c238,0],
		[0x1f38c250,523814784],
		[0x1f38c258,521509312],
		[0x1f38c260,521509344],
		[0x1f38c268,0],
		[0x1f38c270,0],
		[0x1f38c278,0],
		[0x1f38c280,310343680],
		[0x1f38c298,0],
		[0x1f38c2a0,0],
		[0x1f38c2a8,0],
		[0x1f38c2b0,0],
		[0x1f38c2b8,520370064],
		[0x1f38c2c0,520370064],
		[0x1f38c2c8,521287152],
		[0x1f38c2d0,0],
		[0x1f38c2e0,0],
		[0x1f38c2e8,0],
		[0x1f38c2f0,0],
		[0x1f38c2f8,0],
		[0x1f38c310,446832384],
		[0x1f38c318,418735424],
		[0x1f38c320,418735073],
		[0x1f38c328,446832416],
		[0x1f38c330,418735456],
		[0x1f38c338,0],
		[0x1f38c340,310339584],
		[0x1f38c358,415067609],
		[0x1f38c360,447290072],
		[0x1f38c368,440415448],
		[0x1f38c378,446005904],
		[0x1f38c380,446005904],
		[0x1f38c388,412139424],
		[0x1f38c390,367316480],
		[0x1f38c3a0,412451328],
		[0x1f38c3a8,0],
		[0x1f38c3b0,0],
		[0x1f38c3b8,0],
		[0x1f38c3d0,523815552],
		[0x1f38c3d8,523932224],
		[0x1f38c3e0,523932256],
		[0x1f38c3e8,0],
		[0x1f38c3f0,0],
		[0x1f38c3f8,0],
		[0x1f38c400,309624832],
		[0x1f38c418,440538136],
		[0x1f38c420,0],
		[0x1f38c428,0],
		[0x1f38c438,523813944],
		[0x1f38c440,523813944],
		[0x1f38c448,0],
		[0x1f38c450,367316480],
		[0x1f38c458,0],
		[0x1f38c460,404996608],
		[0x1f38c468,0],
		[0x1f38c470,0],
		[0x1f38c478,0],
		[0, 0]
]).
unknown([
		[0x1f38b588,9223372036854775845],
		[0x1f38b648,9223372036854775845],
		[0x1f38b708,9223372036854775845],
		[0x1f38b7c8,9223372036854775845],
		[0x1f38b948,9223372036854775845],
		[0x1f38ba08,9223372036854775845],
		[0x1f38bac8,9223372036854775845],
		[0x1f38bb88,9223372036854775845],
		[0x1f38bc48,9223372036854775845],
		[0x1f38bd08,9223372036854775845],
		[0x1f38be88,9223372036854775845],
		[0x1f38bf48,9223372036854775845],
		[0x1f38c108,9223372036854775845],
		[0x1f38c1c8,9223372036854775845],
		[0x1f38c288,9223372036854775845],
		[0x1f38c348,9223372036854775845],
		[0, 0]
]).
long([
		[0x1f38b480,94837724053504],
		[0x1f38b488,94837725478912],
		[0x1f38b4b8,94837724053504],
		[0x1f38b4c8,37],
		[0x1f38b4d0,134219893],
		[0x1f38b4f0,347],
		[0x1f38b540,140737140637696],
		[0x1f38b548,140737140772864],
		[0x1f38b578,548187623424],
		[0x1f38b590,1048947],
		[0x1f38b5d8,34359738334],
		[0x1f38b600,140188949688320],
		[0x1f38b608,140188949692416],
		[0x1f38b650,135266417],
		[0x1f38b670,30],
		[0x1f38b698,30],
		[0x1f38b6c0,140188951961600],
		[0x1f38b6c8,140188951965696],
		[0x1f38b6f8,548187623424],
		[0x1f38b710,135266419],
		[0x1f38b758,34225818350],
		[0x1f38b780,140737141915648],
		[0x1f38b788,140737141927936],
		[0x1f38b7b8,548187623424],
		[0x1f38b7d0,201606161],
		[0x1f38b840,140188949704704],
		[0x1f38b848,140188949860352],
		[0x1f38b878,548187623424],
		[0x1f38b888,37],
		[0x1f38b890,134219893],
		[0x1f38b8b0,37],
		[0x1f38b900,140188923518976],
		[0x1f38b908,140188923523072],
		[0x1f38b950,135266419],
		[0x1f38b970,621],
		[0x1f38b998,111],
		[0x1f38b9c0,140188929691648],
		[0x1f38b9c8,140188929695744],
		[0x1f38ba10,135266419],
		[0x1f38ba30,534],
		[0x1f38ba58,24],
		[0x1f38ba80,94837725634560],
		[0x1f38ba88,94837725638656],
		[0x1f38bab8,94837724053504],
		[0x1f38bad0,135266419],
		[0x1f38bb18,23153741610],
		[0x1f38bb40,140188920963072],
		[0x1f38bb48,140188920967168],
		[0x1f38bb90,135266419],
		[0x1f38bbb0,513],
		[0x1f38bbd8,3],
		[0x1f38bc00,140188951953408],
		[0x1f38bc08,140188951957504],
		[0x1f38bc38,548187623424],
		[0x1f38bc50,135268465],
		[0x1f38bc70,37],
		[0x1f38bc98,37],
		[0x1f38bcc0,140737353998336],
		[0x1f38bcc8,140737354031104],
		[0x1f38bd10,135266419],
		[0x1f38bd58,34359705566],
		[0x1f38bd80,140737141927936],
		[0x1f38bd88,140737141936128],
		[0x1f38bdc8,37],
		[0x1f38bdd0,134479989],
		[0x1f38be40,140188949692416],
		[0x1f38be48,140188949696512],
		[0x1f38be90,135266419],
		[0x1f38beb0,541],
		[0x1f38bed8,31],
		[0x1f38bf00,140188951842816],
		[0x1f38bf08,140188951883776],
		[0x1f38bf38,1982464],
		[0x1f38bf50,135266419],
		[0x1f38bf98,34225818321],
		[0x1f38c000,140737274163200],
		[0x1f38c008,140737274613760],
		[0x1f38c038,140736806805504],
		[0x1f38c048,37],
		[0x1f38c050,134217845],
		[0x1f38c070,109],
		[0x1f38c0c0,7348224],
		[0x1f38c0c8,7356416],
		[0x1f38c0f8,4194304],
		[0x1f38c110,135268465],
		[0x1f38c118,1],
		[0x1f38c130,263],
		[0x1f38c158,258],
		[0x1f38c180,140737351839744],
		[0x1f38c188,140737351856128],
		[0x1f38c1d0,135266417],
		[0x1f38c1f0,387],
		[0x1f38c218,384],
		[0x1f38c240,140737219919872],
		[0x1f38c248,140737220055040],
		[0x1f38c290,136314995],
		[0x1f38c2d8,34359672832],
		[0x1f38c300,140737278840832],
		[0x1f38c308,140737278844928],
		[0x1f38c350,135266417],
		[0x1f38c370,6],
		[0x1f38c398,6],
		[0x1f38c3c0,140737308811264],
		[0x1f38c3c8,140737308856320],
		[0x1f38c408,37],
		[0x1f38c410,134217845],
		[0x1f38c430,10],
		[0, 0]
]).
int([
		[0x1f38b484,22081],
		[0x1f38b48c,22081],
		[0x1f38b498,0],
		[0x1f38b49c,0],
		[0x1f38b4a8,0],
		[0x1f38b4ac,0],
		[0x1f38b4b0,0],
		[0x1f38b4b4,0],
		[0x1f38b4bc,22081],
		[0x1f38b4c8,37],
		[0x1f38b4cc,0],
		[0x1f38b4d4,0],
		[0x1f38b4e0,0],
		[0x1f38b4e4,0],
		[0x1f38b4e8,0],
		[0x1f38b4ec,0],
		[0x1f38b4f0,347],
		[0x1f38b4f4,0],
		[0x1f38b508,0],
		[0x1f38b50c,0],
		[0x1f38b518,0],
		[0x1f38b51c,0],
		[0x1f38b528,0],
		[0x1f38b52c,0],
		[0x1f38b530,0],
		[0x1f38b534,0],
		[0x1f38b538,0],
		[0x1f38b53c,0],
		[0x1f38b568,0],
		[0x1f38b56c,0],
		[0x1f38b570,0],
		[0x1f38b574,0],
		[0x1f38b57c,127],
		[0x1f38b588,37],
		[0x1f38b594,0],
		[0x1f38b598,0],
		[0x1f38b59c,0],
		[0x1f38b5a0,0],
		[0x1f38b5a4,0],
		[0x1f38b5a8,0],
		[0x1f38b5ac,0],
		[0x1f38b5b0,0],
		[0x1f38b5b4,0],
		[0x1f38b5d0,0],
		[0x1f38b5d4,0],
		[0x1f38b5dc,7],
		[0x1f38b5e0,0],
		[0x1f38b5e4,0],
		[0x1f38b5e8,0],
		[0x1f38b5ec,0],
		[0x1f38b5f0,0],
		[0x1f38b5f4,0],
		[0x1f38b5f8,0],
		[0x1f38b5fc,0],
		[0x1f38b604,32640],
		[0x1f38b60c,32640],
		[0x1f38b638,0],
		[0x1f38b63c,0],
		[0x1f38b648,37],
		[0x1f38b654,0],
		[0x1f38b670,30],
		[0x1f38b674,0],
		[0x1f38b698,30],
		[0x1f38b69c,0],
		[0x1f38b6a8,0],
		[0x1f38b6ac,0],
		[0x1f38b6b0,0],
		[0x1f38b6b4,0],
		[0x1f38b6b8,0],
		[0x1f38b6bc,0],
		[0x1f38b6c4,32640],
		[0x1f38b6cc,32640],
		[0x1f38b6fc,127],
		[0x1f38b708,37],
		[0x1f38b714,0],
		[0x1f38b718,0],
		[0x1f38b71c,0],
		[0x1f38b720,0],
		[0x1f38b724,0],
		[0x1f38b728,0],
		[0x1f38b72c,0],
		[0x1f38b730,0],
		[0x1f38b734,0],
		[0x1f38b750,0],
		[0x1f38b754,0],
		[0x1f38b75c,7],
		[0x1f38b760,0],
		[0x1f38b764,0],
		[0x1f38b768,0],
		[0x1f38b76c,0],
		[0x1f38b770,0],
		[0x1f38b774,0],
		[0x1f38b778,0],
		[0x1f38b77c,0],
		[0x1f38b7bc,127],
		[0x1f38b7c8,37],
		[0x1f38b7d4,0],
		[0x1f38b7d8,0],
		[0x1f38b7dc,0],
		[0x1f38b7e0,0],
		[0x1f38b7e4,0],
		[0x1f38b7e8,0],
		[0x1f38b7ec,0],
		[0x1f38b7f0,0],
		[0x1f38b7f4,0],
		[0x1f38b808,0],
		[0x1f38b80c,0],
		[0x1f38b818,0],
		[0x1f38b81c,0],
		[0x1f38b820,0],
		[0x1f38b824,0],
		[0x1f38b830,0],
		[0x1f38b834,0],
		[0x1f38b838,0],
		[0x1f38b83c,0],
		[0x1f38b844,32640],
		[0x1f38b84c,32640],
		[0x1f38b87c,127],
		[0x1f38b888,37],
		[0x1f38b88c,0],
		[0x1f38b894,0],
		[0x1f38b8a0,0],
		[0x1f38b8a4,0],
		[0x1f38b8a8,0],
		[0x1f38b8ac,0],
		[0x1f38b8b0,37],
		[0x1f38b8b4,0],
		[0x1f38b8c8,0],
		[0x1f38b8cc,0],
		[0x1f38b8d8,0],
		[0x1f38b8dc,0],
		[0x1f38b8e8,0],
		[0x1f38b8ec,0],
		[0x1f38b8f0,0],
		[0x1f38b8f4,0],
		[0x1f38b8f8,0],
		[0x1f38b8fc,0],
		[0x1f38b904,32640],
		[0x1f38b90c,32640],
		[0x1f38b928,0],
		[0x1f38b92c,0],
		[0x1f38b930,0],
		[0x1f38b934,0],
		[0x1f38b938,0],
		[0x1f38b93c,0],
		[0x1f38b948,37],
		[0x1f38b954,0],
		[0x1f38b970,621],
		[0x1f38b974,0],
		[0x1f38b998,111],
		[0x1f38b99c,0],
		[0x1f38b9a8,0],
		[0x1f38b9ac,0],
		[0x1f38b9b0,0],
		[0x1f38b9b4,0],
		[0x1f38b9b8,0],
		[0x1f38b9bc,0],
		[0x1f38b9c4,32640],
		[0x1f38b9cc,32640],
		[0x1f38b9e8,0],
		[0x1f38b9ec,0],
		[0x1f38b9f0,0],
		[0x1f38b9f4,0],
		[0x1f38b9f8,0],
		[0x1f38b9fc,0],
		[0x1f38ba08,37],
		[0x1f38ba14,0],
		[0x1f38ba30,534],
		[0x1f38ba34,0],
		[0x1f38ba58,24],
		[0x1f38ba5c,0],
		[0x1f38ba68,0],
		[0x1f38ba6c,0],
		[0x1f38ba70,0],
		[0x1f38ba74,0],
		[0x1f38ba78,0],
		[0x1f38ba7c,0],
		[0x1f38ba84,22081],
		[0x1f38ba8c,22081],
		[0x1f38babc,22081],
		[0x1f38bac8,37],
		[0x1f38bad4,0],
		[0x1f38bad8,0],
		[0x1f38badc,0],
		[0x1f38bae0,0],
		[0x1f38bae4,0],
		[0x1f38bae8,0],
		[0x1f38baec,0],
		[0x1f38baf0,0],
		[0x1f38baf4,0],
		[0x1f38bb10,0],
		[0x1f38bb14,0],
		[0x1f38bb1c,5],
		[0x1f38bb20,0],
		[0x1f38bb24,0],
		[0x1f38bb28,0],
		[0x1f38bb2c,0],
		[0x1f38bb30,0],
		[0x1f38bb34,0],
		[0x1f38bb38,0],
		[0x1f38bb3c,0],
		[0x1f38bb44,32640],
		[0x1f38bb4c,32640],
		[0x1f38bb68,0],
		[0x1f38bb6c,0],
		[0x1f38bb70,0],
		[0x1f38bb74,0],
		[0x1f38bb78,0],
		[0x1f38bb7c,0],
		[0x1f38bb88,37],
		[0x1f38bb94,0],
		[0x1f38bbb0,513],
		[0x1f38bbb4,0],
		[0x1f38bbd8,3],
		[0x1f38bbdc,0],
		[0x1f38bbe8,0],
		[0x1f38bbec,0],
		[0x1f38bbf0,0],
		[0x1f38bbf4,0],
		[0x1f38bbf8,0],
		[0x1f38bbfc,0],
		[0x1f38bc04,32640],
		[0x1f38bc0c,32640],
		[0x1f38bc3c,127],
		[0x1f38bc48,37],
		[0x1f38bc54,0],
		[0x1f38bc70,37],
		[0x1f38bc74,0],
		[0x1f38bc98,37],
		[0x1f38bc9c,0],
		[0x1f38bca8,0],
		[0x1f38bcac,0],
		[0x1f38bcb0,0],
		[0x1f38bcb4,0],
		[0x1f38bcb8,0],
		[0x1f38bcbc,0],
		[0x1f38bce8,0],
		[0x1f38bcec,0],
		[0x1f38bcf0,0],
		[0x1f38bcf4,0],
		[0x1f38bcf8,0],
		[0x1f38bcfc,0],
		[0x1f38bd08,37],
		[0x1f38bd14,0],
		[0x1f38bd18,0],
		[0x1f38bd1c,0],
		[0x1f38bd20,0],
		[0x1f38bd24,0],
		[0x1f38bd28,0],
		[0x1f38bd2c,0],
		[0x1f38bd30,0],
		[0x1f38bd34,0],
		[0x1f38bd50,0],
		[0x1f38bd54,0],
		[0x1f38bd5c,7],
		[0x1f38bd60,0],
		[0x1f38bd64,0],
		[0x1f38bd68,0],
		[0x1f38bd6c,0],
		[0x1f38bd70,0],
		[0x1f38bd74,0],
		[0x1f38bd78,0],
		[0x1f38bd7c,0],
		[0x1f38bd90,0],
		[0x1f38bd94,0],
		[0x1f38bda8,0],
		[0x1f38bdac,0],
		[0x1f38bdb0,0],
		[0x1f38bdb4,0],
		[0x1f38bdb8,0],
		[0x1f38bdbc,0],
		[0x1f38bdc8,37],
		[0x1f38bdcc,0],
		[0x1f38bdd4,0],
		[0x1f38bdd8,0],
		[0x1f38bddc,0],
		[0x1f38bde0,0],
		[0x1f38bde4,0],
		[0x1f38bde8,0],
		[0x1f38bdec,0],
		[0x1f38bdf0,0],
		[0x1f38bdf4,0],
		[0x1f38be08,0],
		[0x1f38be0c,0],
		[0x1f38be18,0],
		[0x1f38be1c,0],
		[0x1f38be20,0],
		[0x1f38be24,0],
		[0x1f38be30,0],
		[0x1f38be34,0],
		[0x1f38be38,0],
		[0x1f38be3c,0],
		[0x1f38be44,32640],
		[0x1f38be4c,32640],
		[0x1f38be68,0],
		[0x1f38be6c,0],
		[0x1f38be70,0],
		[0x1f38be74,0],
		[0x1f38be78,0],
		[0x1f38be7c,0],
		[0x1f38be88,37],
		[0x1f38be94,0],
		[0x1f38bea0,0],
		[0x1f38bea4,0],
		[0x1f38beb0,541],
		[0x1f38beb4,0],
		[0x1f38bed8,31],
		[0x1f38bedc,0],
		[0x1f38bee8,0],
		[0x1f38beec,0],
		[0x1f38bef0,0],
		[0x1f38bef4,0],
		[0x1f38bef8,0],
		[0x1f38befc,0],
		[0x1f38bf04,32640],
		[0x1f38bf0c,32640],
		[0x1f38bf28,0],
		[0x1f38bf2c,0],
		[0x1f38bf30,0],
		[0x1f38bf34,0],
		[0x1f38bf3c,0],
		[0x1f38bf48,37],
		[0x1f38bf54,0],
		[0x1f38bf58,0],
		[0x1f38bf5c,0],
		[0x1f38bf60,0],
		[0x1f38bf64,0],
		[0x1f38bf68,0],
		[0x1f38bf6c,0],
		[0x1f38bf70,0],
		[0x1f38bf74,0],
		[0x1f38bf90,0],
		[0x1f38bf94,0],
		[0x1f38bf9c,7],
		[0x1f38bfa0,0],
		[0x1f38bfa4,0],
		[0x1f38bfa8,0],
		[0x1f38bfac,0],
		[0x1f38bfb0,0],
		[0x1f38bfb4,0],
		[0x1f38bfb8,0],
		[0x1f38bfbc,0],
		[0x1f38bfc0,0],
		[0x1f38bfc4,0],
		[0x1f38bfc8,0],
		[0x1f38bfcc,0],
		[0x1f38bfd0,0],
		[0x1f38bfd4,0],
		[0x1f38bfd8,0],
		[0x1f38bfdc,0],
		[0x1f38bfe0,0],
		[0x1f38bfe4,0],
		[0x1f38bfe8,0],
		[0x1f38bfec,0],
		[0x1f38bff0,0],
		[0x1f38bff4,0],
		[0x1f38bff8,0],
		[0x1f38bffc,0],
		[0x1f38c048,37],
		[0x1f38c04c,0],
		[0x1f38c054,0],
		[0x1f38c070,109],
		[0x1f38c074,0],
		[0x1f38c088,0],
		[0x1f38c08c,0],
		[0x1f38c098,0],
		[0x1f38c09c,0],
		[0x1f38c0a8,0],
		[0x1f38c0ac,0],
		[0x1f38c0b0,0],
		[0x1f38c0b4,0],
		[0x1f38c0b8,0],
		[0x1f38c0bc,0],
		[0x1f38c0c4,0],
		[0x1f38c0cc,0],
		[0x1f38c0fc,0],
		[0x1f38c108,37],
		[0x1f38c114,0],
		[0x1f38c118,1],
		[0x1f38c11c,0],
		[0x1f38c130,263],
		[0x1f38c134,0],
		[0x1f38c158,258],
		[0x1f38c15c,0],
		[0x1f38c168,0],
		[0x1f38c16c,0],
		[0x1f38c170,0],
		[0x1f38c174,0],
		[0x1f38c178,0],
		[0x1f38c17c,0],
		[0x1f38c1b0,0],
		[0x1f38c1b4,0],
		[0x1f38c1b8,0],
		[0x1f38c1bc,0],
		[0x1f38c1c8,37],
		[0x1f38c1d4,0],
		[0x1f38c1e0,0],
		[0x1f38c1e4,0],
		[0x1f38c1e8,0],
		[0x1f38c1ec,0],
		[0x1f38c1f0,387],
		[0x1f38c1f4,0],
		[0x1f38c218,384],
		[0x1f38c21c,0],
		[0x1f38c228,0],
		[0x1f38c22c,0],
		[0x1f38c230,0],
		[0x1f38c234,0],
		[0x1f38c238,0],
		[0x1f38c23c,0],
		[0x1f38c268,0],
		[0x1f38c26c,0],
		[0x1f38c270,0],
		[0x1f38c274,0],
		[0x1f38c278,0],
		[0x1f38c27c,0],
		[0x1f38c288,37],
		[0x1f38c294,0],
		[0x1f38c298,0],
		[0x1f38c29c,0],
		[0x1f38c2a0,0],
		[0x1f38c2a4,0],
		[0x1f38c2a8,0],
		[0x1f38c2ac,0],
		[0x1f38c2b0,0],
		[0x1f38c2b4,0],
		[0x1f38c2d0,0],
		[0x1f38c2d4,0],
		[0x1f38c2dc,7],
		[0x1f38c2e0,0],
		[0x1f38c2e4,0],
		[0x1f38c2e8,0],
		[0x1f38c2ec,0],
		[0x1f38c2f0,0],
		[0x1f38c2f4,0],
		[0x1f38c2f8,0],
		[0x1f38c2fc,0],
		[0x1f38c338,0],
		[0x1f38c33c,0],
		[0x1f38c348,37],
		[0x1f38c354,0],
		[0x1f38c370,6],
		[0x1f38c374,0],
		[0x1f38c398,6],
		[0x1f38c39c,0],
		[0x1f38c3a8,0],
		[0x1f38c3ac,0],
		[0x1f38c3b0,0],
		[0x1f38c3b4,0],
		[0x1f38c3b8,0],
		[0x1f38c3bc,0],
		[0x1f38c3e8,0],
		[0x1f38c3ec,0],
		[0x1f38c3f0,0],
		[0x1f38c3f4,0],
		[0x1f38c3f8,0],
		[0x1f38c3fc,0],
		[0x1f38c408,37],
		[0x1f38c40c,0],
		[0x1f38c414,0],
		[0x1f38c420,0],
		[0x1f38c424,0],
		[0x1f38c428,0],
		[0x1f38c42c,0],
		[0x1f38c430,10],
		[0x1f38c434,0],
		[0x1f38c448,0],
		[0x1f38c44c,0],
		[0x1f38c458,0],
		[0x1f38c45c,0],
		[0x1f38c468,0],
		[0x1f38c46c,0],
		[0x1f38c470,0],
		[0x1f38c474,0],
		[0x1f38c478,0],
		[0x1f38c47c,0],
		[0, 0]
]).
string_val([
		[0, 0]
]).
:- use_module(library(clpfd)).
:- use_module(reif).
:- style_check(-singleton).

isTrue([X, Y]):-
    X == 49.

isTrue([X|Tail]):-
    isTrue(Tail).

log(File_name, Name, Addr, Base):-
    Offset #= Addr - Base,
    open(File_name, append, Stream),
    write(Stream, Name),
    write(Stream, ':'),
    write(Stream, Offset),
    nl(Stream),
    close(Stream).

possible_task_struct(Base_addr) :-
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM2_addr, Pid_addr, Tgid_addr, Real_parent_addr, Parent_addr , Child_addr, 
           Group_leader_addr, Thread_group_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    %MM2_addr #> Base_addr + 1000,
    Tasks_addr #> MM2_addr - 100,
    %FS_struct_addr #< Base_addr + 4000,
    Tgid_addr #= Pid_addr + 4,
    Real_parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr - 8,
    Child_addr #= Parent_addr + 8,
    %FIXME This may be too strong
    Group_leader_addr #=< Child_addr +32,
    %Comm_addr #= Base_addr + 1656,
    %Tasks_addr #= Base_addr + 1072,
    %FS_struct_addr #= Base_addr + 2640,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    % make query after labeling
    MM2_val #> 0,
    integer(MM2_val),
    
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val,  Comm_addr, Comm_val ]),

    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_parent_addr, Real_parent_val, Group_leader_addr, Group_leader_val]),
    Real_parent_val #> 0,
    Group_leader_val #> 0,
    query_ts(Real_parent_val, Comm_offset, Tasks_offset),
    query_ts(Group_leader_val, Comm_offset, Tasks_offset),

    labeling([enum], [Cred_addr, Cred_val]),
    Cred_val #> 0,
    query_cred(Cred_val),

    labeling([enum], [FS_struct_addr, FS_struct_val]),
    FS_struct_val #> 0,
    %query_fs_struct(FS_struct_val),



    get_time(End),
    Time_past is End - Current,
    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    log("profile.txt", "tasks", Tasks_addr, Base_addr),
    log("profile.txt", "mm_struct", MM2_addr, Base_addr),
    log("profile.txt", "comm", Comm_addr, Base_addr),
    log("profile.txt", "parent", Parent_addr, Base_addr),
    log("profile.txt", "group_leader", Group_leader_addr, Base_addr),
    log("profile.txt", "cred", Cred_addr, Base_addr),

    
    print_nl('tasks offset', Tasks_offset),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).

possible_mm_struct(Current_addr) :- 
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    % TODO: ADD vm_area_struct *mmap
    Ptr_profile = [
        [Mmap_addr, Mmap_val],
        [Pgd_addr, Pgd_val]  
    ],
    Ulong_profile = [
        [Mmap_base_addr, Mmap_base_val],
        [Mmap_legacy_base_addr, Mmap_legacy_base_val],
        [Task_size_addr, Task_size_val],
        [High_vm_end_addr, High_vm_end_val],
        [Start_brk_addr, Start_brk_val],
        [Brk_addr, Brk_val],
        [Start_stack_addr, Start_stack_val],
        [ARG_start_addr, ARG_start_val]
    ],
    Mmap_addr #= Current_addr,


    Mmap_base_addr #> Mmap_addr,
    %FIXME mmap_base need more value constraint, because we removed mmap_legacy_base and highest_vm_end.
    Mmap_base_val #> 0x7f0000000000,
    %FIXME in old linux version, e.g., there is no mmap_legacy_base and highest_vm_enb
    %chain([Mmap_base_addr, Mmap_legacy_base_addr, Task_size_addr, High_vm_end_addr, Pgd_addr], #<),
    chain([Mmap_base_addr, Task_size_addr, Pgd_addr], #<),

    %FIXME: This rule may be too strong
    %High_vm_end_addr #= Mmap_base_addr + 24, 
    Pgd_addr #> Task_size_addr,
    Pgd_addr #=< Task_size_addr + 40,
    %FIXME: This rule may not be true for other mm_struct.
    Task_size_val #>= 0x7ffffffff000,

    %Mmap_base_addr #= Current_addr + 40,
    %Mmap_legacy_base_addr #= Current_addr + 40,
    %Task_size_addr #= Current_addr + 48,
    %High_vm_end_addr #= Current_addr + 72,

    Start_brk_addr #> Pgd_addr,
    Start_stack_val #> 0x7ff000000000,
    % TODO: Convert this to index comparison. 
    ARG_start_addr #< Current_addr + 500,
    chain([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr], #<),
    ARG_start_addr #= Start_brk_addr + 24,
    Brk_val #< 0x7ff000000000,
    ARG_start_val #> 0x7ff000000000,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),


    labeling([enum], [Mmap_addr, Mmap_val, Mmap_base_addr, Pgd_addr, Pgd_val]),
    Mmap_val #> 0,
    Pgd_val #> 0,
    
    process_create(path('python'),
                    ['subquery.py', Mmap_val, "vm_area_struct", 2],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    label([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr]),
    statistics(real_time, [End|_]),

    log("profile.txt", "mmap", Mmap_addr, Current_addr),
    log("profile.txt", "mmap_base", Mmap_base_addr, Current_addr),
    log("profile.txt", "pgd", Pgd_addr, Current_addr),
    log("profile.txt", "start_brk", Start_brk_addr, Current_addr),
    log("profile.txt", "brk", Brk_addr, Current_addr),
    log("profile.txt", "start_stack", Start_stack_addr, Current_addr),
    log("profile.txt", "arg_start", ARG_start_addr, Current_addr),
    log("profile.txt", "mm_struct time", End, Start).


possible_vm_area_struct(Base_addr, Level) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [VM_next_addr, VM_next_val],
        [VM_file_addr, VM_file_val]
    ],
    Ulong_profile = [
        [VM_start_addr, VM_start_val],
        [VM_end_addr, VM_end_val],
        [VM_flag_addr, VM_flag_val]
        %VM_pgoff is 0, and we do not consider 0 as ulong
        %[VM_pgoff_addr, VM_pgoff_val]
    ],
    VM_start_addr #>= Base_addr,
    chain([VM_start_addr, VM_end_addr, VM_next_addr, VM_flag_addr, VM_file_addr], #<),
    VM_end_addr #= VM_start_addr + 8,
    VM_next_addr #= VM_end_addr + 8,
    VM_next_addr #< Base_addr + 32,
    VM_file_addr #< Base_addr + 180,
    VM_pgoff_addr #= VM_file_addr - 8,
    %VM_file_addr #= Base_addr + 160,

    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    %FIXME: VM_flag may need value constraints.

    label([VM_next_addr, VM_next_val]),
    /*if_(Level = 2,
        call(check_vm_area_struct, VM_next_val, 1),
        1 = 1),*/
    %Level #> 1 #==> check_vm_area_struct(VM_next_val, 1),

    labeling([enum], [VM_start_addr, VM_end_addr, VM_flag_addr, VM_pgoff_addr, VM_file_addr, VM_file_val]),
    
    VM_file_val #> 0,
    process_create(path('python'),
                ['subquery.py', VM_file_val, "vm_file"],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    statistics(real_time, [End|_]),

    log("profile.txt", "vm_start", VM_start_addr, Base_addr),
    log("profile.txt", "vm_end", VM_end_addr, Base_addr),
    log("profile.txt", "vm_next", VM_next_addr, Base_addr),
    log("profile.txt", "vm_flag", VM_flag_addr, Base_addr),
    log("profile.txt", "vm_pgoff", VM_pgoff_addr, Base_addr),
    log("profile.txt", "vm_file", VM_file_addr, Base_addr),
    log("profile.txt", "vm_area_struct time", End, Start).

check_vm_area_struct(Base_addr, Level) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "vm_area_struct", Level],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vm_file(Base_addr) :-
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [Vfs_mount_addr, Vfs_mount_val],
        [Dentry_addr, Dentry_val]
    ],
    Vfs_mount_addr #> Base_addr,
    Dentry_addr #= Vfs_mount_addr + 8,
    Dentry_addr #< Base_addr + 40,
    tuples_in(Ptr_profile, Ptr),
    label([Vfs_mount_val, Dentry_val]),
    Vfs_mount_val #>0,
    Dentry_val #> 0,
    %FIXME seems like we do not need this, make sure the string is not addr=0
/*
    process_create(path('python'),
                    ['subquery.py', Vfs_mount_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vfs_mount(Base_addr) :-
    pointer(Ptr),
    Ptr_profile = [
        [Dentry_addr, Dentry_val]
    ],
    Dentry_addr #< Base_addr + 16,
    tuples_in(Ptr_profile, Ptr),
    label([Dentry_val]),
    Dentry_val #> 0,
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).
    
possible_dentry(Base_addr) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    string_val(Str),
    Ptr_profile = [
        [Dparent_addr, Dparent_val],
        [Dchild_addr, Dchild_val]
    ],
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    %log("profile.txt", "dentry addr", Base_addr, 0),
    Dparent_addr #> Base_addr,
    Dname_addr #> 0,
    Dname_addr #< Base_addr + 200,
    %Dname_addr #= Base_addr + 160,
    %FIXME This child rule is not applicable for old kernel version. 
    %chain([Dparent_addr, Dname_addr, Dchild_addr], #<),
    %Dchild_addr #< Base_addr + 200,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    labeling([enum], [Dparent_addr, Dparent_val, Dname_addr, Dchild_addr, Dchild_val]),
    Dname_offset #= Dname_addr - Base_addr,
    integer(Dname_offset),
    Dparent_val #> 0,
    
    %FIXME d_parent may not be initialized
    /*process_create(path('python'),
                ['subquery.py', Dparent_val, "d_entry", Dname_offset],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/

    %FIXME: may need to find another way for all list_head. 
    /*Dchild_offset #= Dchild_addr - Base_addr,
    integer(Dchild_offset),
    Dchild_base #= Dchild_val - Dchild_offset,
    integer(Dchild_base),
    Dchild_base #> 0,
    process_create(path('python'),
                ['subquery.py', Dchild_base, "d_entry", Dname_offset],
                [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    statistics(real_time, [End|_]).
/*
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    log("profile.txt", "d_parent", Dparent_addr, Base_addr),
    log("profile.txt", "d_child", Dchild_addr, Base_addr),
    log("profile.txt", "dentry time", End, Start).
*/
possible_d_entry(Base_addr, Dname_offset) :-
    current_predicate(string_val/1),
    string_val(Str),
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    Dname_addr #= Base_addr + Dname_offset,
    tuples_in(Str_profile, Str),
    label([Dname_addr]).

possible_list_head(Tasks_val, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_val, Tasks_addr]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],
    Comm_addr #= Tasks_val - Tasks_offset + Comm_offset,
    Tasks_addr #\= Tasks_val,
    tuples_in(Str_profile, Str),
    tuples_in(Ptr_profile, Ptr),
    label([Comm_addr]).

possible_ts(Base_addr, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_addr, Tasks_val]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],

    Comm_addr #= Base_addr + Comm_offset,
    Tasks_addr #= Base_addr + Tasks_offset,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),

    label([Tasks_val]),
    
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "list_head", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_cred(Base_addr) :-
    statistics(real_time, [Start|_]),

    int(Int),
    long(Ulg),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3],
        [Addr4, Val4],
        [Addr5, Val5],
        [Addr6, Val6],
        [Addr7, Val7],
        [Addr8, Val8],
        [Addr9, Val9]
    ],
    %FIXME For now, this rule is hard-coded because we do not consider 0 as a unsign long number. 
    %So that for cred whos val10 is 0, this rule does not apply.
    /*Ulong_profile = [
        [Addr10, Val10],
        [Addr11, Val11]
    ],*/
    Addr1 #> Base_addr,
    %chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9, Addr10, Addr11], #<),
    chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9], #<),
    Addr1 #= Base_addr + 4,
    Addr9 #= Addr1 + 32,
    %Addr11 #< Base_addr + 120,
    tuples_in(Int_profile, Int),
    %tuples_in(Ulong_profile, Ulg),
    statistics(real_time, [End|_]),
    labeling([enum], [Addr1, Addr2, Addr5, Addr6]),
    log("profile.txt", "cred time", End, Start),
    log('profile.txt', "uid", Addr1, Base_addr),
    log('profile.txt', "gid", Addr2, Base_addr),
    log('profile.txt', "euid", Addr5, Base_addr),
    log('profile.txt', "egid", Addr6, Base_addr).

possible_fs_struct(Base_addr) :-
    statistics(real_time, [Start|_]),
    int(Int),
    pointer(Ptr),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3]
    ],
    Ptr_profile = [
        [Root_addr, Root_val],
        [PWD_addr, PWD_val]
    ],
    Addr1 #>= Base_addr,
    chain([Addr1, Addr2, Addr3, Root_addr, PWD_addr], #<),
    PWD_addr #= Root_addr + 16,
    PWD_addr #< Base_addr + 50,
    tuples_in(Int_profile, Int),
    tuples_in(Ptr_profile, Ptr),
    label([Root_addr, Root_val]),
    
    process_create(path('python'),
                    ['subquery.py', Root_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    label([PWD_addr, PWD_val]),
    process_create(path('python'),
                    ['subquery.py', PWD_val, "dentry"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    statistics(real_time, [End|_]),
    log("profile.txt", "fs time", End, Start),
    log('profile.txt', "Root", Root_addr, Base_addr),
    log('profile.txt', "pwd", PWD_addr, Base_addr).
