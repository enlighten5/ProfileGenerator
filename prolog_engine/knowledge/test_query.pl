:- use_module(library(clpfd)).
:- style_check(-singleton).
pointer([
		[0x7c88d700,0],
		[0x7c88d710,0],
		[0x7c88d718,0],
		[0x7c88d720,0],
		[0x7c88d728,0],
		[0x7c88d730,0],
		[0x7c88d738,0],
		[0x7c88d740,2089156608],
		[0x7c88d750,0],
		[0x7c88d758,0],
		[0x7c88d760,0],
		[0x7c88d768,0],
		[0x7c88d770,0],
		[0x7c88d778,0],
		[0x7c88d780,0],
		[0x7c88d798,344101600],
		[0x7c88d7a0,0],
		[0x7c88d7a8,0],
		[0x7c88d7b0,0],
		[0x7c88d7b8,0],
		[0x7c88d7e0,0],
		[0x7c88d7e8,0],
		[0x7c88d7f0,2089342960],
		[0x7c88d7f8,2089342960],
		[0x7c88d800,0],
		[0x7c88d828,0],
		[0x7c88d830,0],
		[0x7c88d838,0],
		[0x7c88d840,0],
		[0x7c88d848,0],
		[0x7c88d850,0],
		[0x7c88d858,0],
		[0x7c88d860,0],
		[0x7c88d868,0],
		[0x7c88d870,0],
		[0x7c88d878,0],
		[0x7c88d880,0],
		[0x7c88d888,0],
		[0x7c88d890,0],
		[0x7c88d898,0],
		[0x7c88d8a0,0],
		[0x7c88d8a8,0],
		[0x7c88d8b0,0],
		[0x7c88d8b8,0],
		[0x7c88d8c0,0],
		[0x7c88d8c8,0],
		[0x7c88d8d0,0],
		[0x7c88d8d8,0],
		[0x7c88d8e0,0],
		[0x7c88d8e8,0],
		[0x7c88d8f0,0],
		[0x7c88d8f8,0],
		[0x7c88d900,0],
		[0x7c88d910,890666496],
		[0x7c88d918,890665472],
		[0x7c88d920,0],
		[0x7c88d928,0],
		[0x7c88d930,0],
		[0x7c88d938,0],
		[0x7c88d978,0],
		[0x7c88d980,2089343360],
		[0x7c88d988,2089343360],
		[0x7c88d990,0],
		[0x7c88d998,0],
		[0x7c88d9a8,0],
		[0x7c88d9b0,890045568],
		[0x7c88d9b8,2089343416],
		[0x7c88d9c0,0],
		[0x7c88d9c8,0],
		[0x7c88d9d0,0],
		[0x7c88d9d8,0],
		[0x7c88d9e0,0],
		[0x7c88d9e8,0],
		[0x7c88d9f0,0],
		[0x7c88d9f8,0],
		[0x7c88da00,0],
		[0x7c88da08,0],
		[0x7c88da10,2089343504],
		[0x7c88da18,0],
		[0x7c88da20,0],
		[0x7c88da28,0],
		[0x7c88da30,0],
		[0x7c88da38,330097952],
		[0x7c88da40,2143407104],
		[0x7c88da48,0],
		[0x7c88da50,2089343568],
		[0x7c88da58,0],
		[0x7c88da60,0],
		[0x7c88da68,0],
		[0x7c88da70,0],
		[0x7c88da78,330090832],
		[0x7c88da80,2143407104],
		[0x7c88da88,0],
		[0x7c88da90,0],
		[0x7c88da98,0],
		[0x7c88dea8,0],
		[0x7c88deb8,2089344696],
		[0x7c88dec0,2089344696],
		[0x7c88dee0,0],
		[0x7c88dee8,2089328040],
		[0x7c88def0,350301288],
		[0x7c88df00,2089344768],
		[0x7c88df08,2089344768],
		[0x7c88df10,2089344784],
		[0x7c88df18,2089344784],
		[0x7c88df20,2089344800],
		[0x7c88df28,0],
		[0x7c88df30,0],
		[0x7c88df38,892582336],
		[0x7c88df40,892582336],
		[0x7c88df50,0],
		[0x7c88df58,890073688],
		[0x7c88df60,0],
		[0x7c88df68,0],
		[0x7c88df78,0],
		[0x7c88df80,0],
		[0x7c88df90,0],
		[0x7c88df98,0],
		[0x7c88dfa0,0],
		[0x7c88dfa8,0],
		[0x7c88dfb0,0],
		[0x7c88dfb8,329889184],
		[0x7c88dfc0,0],
		[0x7c88dfc8,0],
		[0x7c88dfd0,0],
		[0x7c88dfd8,0],
		[0x7c88dfe0,0],
		[0x7c88dff8,350299264],
		[0x7c88e000,350299264],
		[0x7c88e008,1952330904],
		[0x7c88e010,2075347544],
		[0x7c88e018,2089328344],
		[0x7c88e020,350301576],
		[0x7c88e028,2089342720],
		[0x7c88e030,2089345072],
		[0x7c88e038,2089345072],
		[0x7c88e040,2089345088],
		[0x7c88e048,2089345088],
		[0x7c88e050,0],
		[0x7c88e058,2089151624],
		[0x7c88e060,2089151616],
		[0x7c88e068,0],
		[0x7c88e070,2089151632],
		[0x7c88e078,2089151616],
		[0x7c88e080,0],
		[0x7c88e088,2089151640],
		[0x7c88e090,2089151616],
		[0x7c88e098,2089345176],
		[0x7c88e0a0,2089345176],
		[0x7c88e0a8,2089308176],
		[0x7c88e0b0,2089308176],
		[0x7c88e0b8,0],
		[0x7c88e0c0,0],
		[0x7c88e0e0,0],
		[0x7c88e0e8,0],
		[0x7c88e0f0,0],
		[0x7c88e0f8,0],
		[0x7c88e130,0],
		[0x7c88e138,0],
		[0x7c88e140,0],
		[0x7c88e148,2089345352],
		[0x7c88e150,2089345352],
		[0x7c88e158,2089345368],
		[0x7c88e160,2089345368],
		[0x7c88e168,2089345384],
		[0x7c88e170,2089345384],
		[0x7c88e178,0],
		[0x7c88e180,1951978432],
		[0x7c88e188,1951978432],
		[0x7c88e198,0],
		[0x7c88e1a0,0],
		[0x7c88e1a8,2083858208],
		[0x7c88e1b0,2089345456],
		[0x7c88e1b8,2089345456],
		[0x7c88e1c0,0],
		[0x7c88e1c8,351436768],
		[0x7c88e1d0,2089299392],
		[0x7c88e1d8,350592864],
		[0x7c88e1e0,2089308160],
		[0x7c88e1e8,2089355328],
		[0x7c88e1f8,0],
		[0x7c88e200,0],
		[0x7c88e208,2089345544],
		[0x7c88e210,2089345544],
		[0x7c88e218,0],
		[0x7c88e220,0],
		[0x7c88e228,0],
		[0x7c88e238,0],
		[0x7c88e240,0],
		[0x7c88e250,0],
		[0x7c88e258,0],
		[0x7c88e268,0],
		[0x7c88e270,0],
		[0x7c88e278,0],
		[0x7c88e280,0],
		[0x7c88e288,0],
		[0x7c88e290,0],
		[0x7c88e298,0],
		[0x7c88e2a0,0],
		[0x7c88e2a8,0],
		[0x7c88e2b0,0],
		[0x7c88e2b8,0],
		[0x7c88e2c0,2098452824],
		[0x7c88e2c8,0],
		[0x7c88e2d0,0],
		[0x7c88e300,0],
		[0x7c88e308,0],
		[0x7c88e330,0],
		[0x7c88e338,0],
		[0x7c88e340,0],
		[0x7c88e348,0],
		[0x7c88e350,0],
		[0x7c88e358,0],
		[0x7c88e360,0],
		[0x7c88e368,0],
		[0x7c88e370,0],
		[0x7c88e378,0],
		[0x7c88e380,0],
		[0x7c88e388,0],
		[0x7c88e390,0],
		[0x7c88e398,0],
		[0x7c88e3a0,0],
		[0x7c88e3b8,894232576],
		[0x7c88e3c0,894232712],
		[0x7c88e3c8,894232712],
		[0x7c88e3d0,0],
		[0x7c88e3e0,0],
		[0x7c88e3e8,2089346024],
		[0x7c88e3f0,2089346024],
		[0x7c88e3f8,0],
		[0x7c88e400,0],
		[0x7c88e408,0],
		[0x7c88e410,0],
		[0x7c88e418,0],
		[0x7c88e420,2089346080],
		[0x7c88e428,2089346080],
		[0x7c88e430,2089346096],
		[0x7c88e438,2089346096],
		[0x7c88e440,0],
		[0x7c88e448,0],
		[0x7c88e460,0],
		[0x7c88e468,0],
		[0x7c88e470,0],
		[0x7c88e478,0],
		[0x7c88e480,2089346176],
		[0x7c88e488,0],
		[0x7c88e490,0],
		[0x7c88e498,0],
		[0x7c88e4a0,0],
		[0x7c88e4a8,0],
		[0x7c88e4b0,0],
		[0x7c88e4b8,0],
		[0x7c88e4c0,0],
		[0x7c88e4c8,0],
		[0x7c88e4d0,0],
		[0x7c88e4d8,0],
		[0x7c88e4e0,0],
		[0x7c88e4e8,0],
		[0x7c88e4f0,0],
		[0x7c88e4f8,0],
		[0x7c88e500,0],
		[0x7c88e508,0],
		[0x7c88e510,0],
		[0x7c88e518,0],
		[0x7c88e520,0],
		[0x7c88e528,0],
		[0x7c88e530,0],
		[0x7c88e538,0],
		[0x7c88e540,0],
		[0x7c88e548,0],
		[0x7c88e550,0],
		[0x7c88e558,0],
		[0x7c88e560,0],
		[0x7c88e568,0],
		[0x7c88e570,0],
		[0x7c88e578,0],
		[0x7c88e580,0],
		[0x7c88e588,0],
		[0x7c88e590,0],
		[0x7c88e598,0],
		[0x7c88e5a0,0],
		[0x7c88e5a8,0],
		[0x7c88e5b0,0],
		[0x7c88e5b8,0],
		[0x7c88e5c0,0],
		[0x7c88e5c8,0],
		[0x7c88e5d0,0],
		[0x7c88e5d8,0],
		[0x7c88e5e0,0],
		[0x7c88e5e8,0],
		[0x7c88e5f0,0],
		[0x7c88e5f8,0],
		[0x7c88e600,0],
		[0x7c88e608,0],
		[0x7c88e610,0],
		[0x7c88e618,0],
		[0x7c88e620,0],
		[0x7c88e628,0],
		[0x7c88e630,0],
		[0x7c88e638,0],
		[0x7c88e640,0],
		[0x7c88e648,0],
		[0x7c88e650,0],
		[0x7c88e658,0],
		[0x7c88e660,0],
		[0x7c88e668,0],
		[0x7c88e670,0],
		[0x7c88e678,0],
		[0x7c88e680,0],
		[0x7c88e688,0],
		[0x7c88e690,0],
		[0x7c88e698,0],
		[0x7c88e6a0,0],
		[0x7c88e6a8,0],
		[0x7c88e6b0,0],
		[0x7c88e6b8,0],
		[0x7c88e6c0,0],
		[0x7c88e6c8,0],
		[0x7c88e6d0,0],
		[0x7c88e6d8,0],
		[0x7c88e6e0,0],
		[0x7c88e6e8,0],
		[0x7c88e6f0,0],
		[0x7c88e6f8,0],
		[0, 0]
]).
unknown([
		[0x7c88d748,18015498021109762],
		[0x7c88deb0,18446744069414584320],
		[0x7c88dff0,11030442485359730176],
		[0x7c88e1f0,8927191084203854339],
		[0x7c88e3a8,18446744069414584322],
		[0, 0]
]).
long([
		[0x7c88d708,1],
		[0x7c88d788,515396075640],
		[0x7c88d7c0,1048576],
		[0x7c88d7c8,4194304],
		[0x7c88d7d0,1048576],
		[0x7c88d7d8,1],
		[0x7c88d808,142070627076],
		[0x7c88d810,5202674768],
		[0x7c88d818,2073918922],
		[0x7c88d820,5202261948],
		[0x7c88d908,1],
		[0x7c88d940,142070626304],
		[0x7c88d948,2236],
		[0x7c88d950,2236],
		[0x7c88d958,472448602535],
		[0x7c88d9a0,25],
		[0x7c88daa0,1],
		[0x7c88daa8,1],
		[0x7c88dec8,2887],
		[0x7c88ded0,7520521121],
		[0x7c88ded8,142070214256],
		[0x7c88def8,140],
		[0x7c88df88,73014444032],
		[0x7c88dfe8,4294967297],
		[0x7c88e0c8,140424673725328],
		[0x7c88e0d0,1304000000],
		[0x7c88e0d8,4008000000],
		[0x7c88e100,720],
		[0x7c88e108,2167],
		[0x7c88e110,236000000],
		[0x7c88e118,236000000],
		[0x7c88e120,6568],
		[0x7c88e230,2],
		[0x7c88e260,12884901888],
		[0x7c88e2d8,364313],
		[0x7c88e2e0,123003104],
		[0x7c88e2e8,2753],
		[0x7c88e2f0,5815],
		[0x7c88e2f8,9994240],
		[0x7c88e310,2785921735],
		[0x7c88e318,22161550562],
		[0x7c88e320,5312000000],
		[0x7c88e328,1],
		[0x7c88e3b0,4294967295],
		[0x7c88e3d8,140424673725344],
		[0x7c88e450,1000],
		[0x7c88e458,4294967295],
		[0, 0]
]).
int([
		[0x7c88d700,0],
		[0x7c88d704,0],
		[0x7c88d708,1],
		[0x7c88d70c,0],
		[0x7c88d710,0],
		[0x7c88d714,0],
		[0x7c88d718,0],
		[0x7c88d71c,0],
		[0x7c88d720,0],
		[0x7c88d724,0],
		[0x7c88d728,0],
		[0x7c88d72c,0],
		[0x7c88d730,0],
		[0x7c88d734,0],
		[0x7c88d738,0],
		[0x7c88d73c,0],
		[0x7c88d748,2],
		[0x7c88d750,0],
		[0x7c88d754,0],
		[0x7c88d758,0],
		[0x7c88d75c,0],
		[0x7c88d760,0],
		[0x7c88d764,0],
		[0x7c88d768,0],
		[0x7c88d76c,0],
		[0x7c88d770,0],
		[0x7c88d774,0],
		[0x7c88d778,0],
		[0x7c88d77c,0],
		[0x7c88d780,0],
		[0x7c88d784,0],
		[0x7c88d788,120],
		[0x7c88d78c,120],
		[0x7c88d790,120],
		[0x7c88d794,0],
		[0x7c88d7a0,0],
		[0x7c88d7a4,0],
		[0x7c88d7a8,0],
		[0x7c88d7ac,0],
		[0x7c88d7b0,0],
		[0x7c88d7b4,0],
		[0x7c88d7b8,0],
		[0x7c88d7bc,0],
		[0x7c88d7c4,0],
		[0x7c88d7cc,0],
		[0x7c88d7d4,0],
		[0x7c88d7d8,1],
		[0x7c88d7dc,0],
		[0x7c88d7e0,0],
		[0x7c88d7e4,0],
		[0x7c88d7e8,0],
		[0x7c88d7ec,0],
		[0x7c88d800,0],
		[0x7c88d804,0],
		[0x7c88d80c,33],
		[0x7c88d814,1],
		[0x7c88d81c,0],
		[0x7c88d824,1],
		[0x7c88d828,0],
		[0x7c88d82c,0],
		[0x7c88d830,0],
		[0x7c88d834,0],
		[0x7c88d838,0],
		[0x7c88d83c,0],
		[0x7c88d840,0],
		[0x7c88d844,0],
		[0x7c88d848,0],
		[0x7c88d84c,0],
		[0x7c88d850,0],
		[0x7c88d854,0],
		[0x7c88d858,0],
		[0x7c88d85c,0],
		[0x7c88d860,0],
		[0x7c88d864,0],
		[0x7c88d868,0],
		[0x7c88d86c,0],
		[0x7c88d870,0],
		[0x7c88d874,0],
		[0x7c88d878,0],
		[0x7c88d87c,0],
		[0x7c88d880,0],
		[0x7c88d884,0],
		[0x7c88d888,0],
		[0x7c88d88c,0],
		[0x7c88d890,0],
		[0x7c88d894,0],
		[0x7c88d898,0],
		[0x7c88d89c,0],
		[0x7c88d8a0,0],
		[0x7c88d8a4,0],
		[0x7c88d8a8,0],
		[0x7c88d8ac,0],
		[0x7c88d8b0,0],
		[0x7c88d8b4,0],
		[0x7c88d8b8,0],
		[0x7c88d8bc,0],
		[0x7c88d8c0,0],
		[0x7c88d8c4,0],
		[0x7c88d8c8,0],
		[0x7c88d8cc,0],
		[0x7c88d8d0,0],
		[0x7c88d8d4,0],
		[0x7c88d8d8,0],
		[0x7c88d8dc,0],
		[0x7c88d8e0,0],
		[0x7c88d8e4,0],
		[0x7c88d8e8,0],
		[0x7c88d8ec,0],
		[0x7c88d8f0,0],
		[0x7c88d8f4,0],
		[0x7c88d8f8,0],
		[0x7c88d8fc,0],
		[0x7c88d900,0],
		[0x7c88d904,0],
		[0x7c88d908,1],
		[0x7c88d90c,0],
		[0x7c88d920,0],
		[0x7c88d924,0],
		[0x7c88d928,0],
		[0x7c88d92c,0],
		[0x7c88d930,0],
		[0x7c88d934,0],
		[0x7c88d938,0],
		[0x7c88d93c,0],
		[0x7c88d944,33],
		[0x7c88d948,2236],
		[0x7c88d94c,0],
		[0x7c88d950,2236],
		[0x7c88d954,0],
		[0x7c88d95c,110],
		[0x7c88d960,48],
		[0x7c88d964,0],
		[0x7c88d968,48],
		[0x7c88d96c,0],
		[0x7c88d970,46],
		[0x7c88d974,0],
		[0x7c88d978,0],
		[0x7c88d97c,0],
		[0x7c88d990,0],
		[0x7c88d994,0],
		[0x7c88d998,0],
		[0x7c88d99c,0],
		[0x7c88d9a0,25],
		[0x7c88d9a4,0],
		[0x7c88d9a8,0],
		[0x7c88d9ac,0],
		[0x7c88d9c0,0],
		[0x7c88d9c4,0],
		[0x7c88d9c8,0],
		[0x7c88d9cc,0],
		[0x7c88d9d0,0],
		[0x7c88d9d4,0],
		[0x7c88d9d8,0],
		[0x7c88d9dc,0],
		[0x7c88d9e0,0],
		[0x7c88d9e4,0],
		[0x7c88d9e8,0],
		[0x7c88d9ec,0],
		[0x7c88d9f0,0],
		[0x7c88d9f4,0],
		[0x7c88d9f8,0],
		[0x7c88d9fc,0],
		[0x7c88da00,0],
		[0x7c88da04,0],
		[0x7c88da08,0],
		[0x7c88da0c,0],
		[0x7c88da18,0],
		[0x7c88da1c,0],
		[0x7c88da20,0],
		[0x7c88da24,0],
		[0x7c88da28,0],
		[0x7c88da2c,0],
		[0x7c88da30,0],
		[0x7c88da34,0],
		[0x7c88da48,0],
		[0x7c88da4c,0],
		[0x7c88da58,0],
		[0x7c88da5c,0],
		[0x7c88da60,0],
		[0x7c88da64,0],
		[0x7c88da68,0],
		[0x7c88da6c,0],
		[0x7c88da70,0],
		[0x7c88da74,0],
		[0x7c88da88,0],
		[0x7c88da8c,0],
		[0x7c88da90,0],
		[0x7c88da94,0],
		[0x7c88da98,0],
		[0x7c88da9c,0],
		[0x7c88daa0,1],
		[0x7c88daa4,0],
		[0x7c88daa8,1],
		[0x7c88daac,0],
		[0x7c88dea8,0],
		[0x7c88deac,0],
		[0x7c88deb0,0],
		[0x7c88dec8,2887],
		[0x7c88decc,0],
		[0x7c88ded4,1],
		[0x7c88dedc,33],
		[0x7c88dee0,0],
		[0x7c88dee4,0],
		[0x7c88def8,140],
		[0x7c88defc,0],
		[0x7c88df28,0],
		[0x7c88df2c,0],
		[0x7c88df30,0],
		[0x7c88df34,0],
		[0x7c88df48,39],
		[0x7c88df4c,0],
		[0x7c88df50,0],
		[0x7c88df54,0],
		[0x7c88df60,0],
		[0x7c88df64,0],
		[0x7c88df68,0],
		[0x7c88df6c,0],
		[0x7c88df70,38],
		[0x7c88df74,0],
		[0x7c88df78,0],
		[0x7c88df7c,0],
		[0x7c88df80,0],
		[0x7c88df84,0],
		[0x7c88df88,0],
		[0x7c88df8c,17],
		[0x7c88df90,0],
		[0x7c88df94,0],
		[0x7c88df98,0],
		[0x7c88df9c,0],
		[0x7c88dfa0,0],
		[0x7c88dfa4,0],
		[0x7c88dfa8,0],
		[0x7c88dfac,0],
		[0x7c88dfb0,0],
		[0x7c88dfb4,0],
		[0x7c88dfc0,0],
		[0x7c88dfc4,0],
		[0x7c88dfc8,0],
		[0x7c88dfcc,0],
		[0x7c88dfd0,0],
		[0x7c88dfd4,0],
		[0x7c88dfd8,0],
		[0x7c88dfdc,0],
		[0x7c88dfe0,0],
		[0x7c88dfe4,0],
		[0x7c88dfe8,1],
		[0x7c88dfec,1],
		[0x7c88e050,0],
		[0x7c88e054,0],
		[0x7c88e068,0],
		[0x7c88e06c,0],
		[0x7c88e080,0],
		[0x7c88e084,0],
		[0x7c88e0b8,0],
		[0x7c88e0bc,0],
		[0x7c88e0c0,0],
		[0x7c88e0c4,0],
		[0x7c88e0cc,32695],
		[0x7c88e0d4,0],
		[0x7c88e0dc,0],
		[0x7c88e0e0,0],
		[0x7c88e0e4,0],
		[0x7c88e0e8,0],
		[0x7c88e0ec,0],
		[0x7c88e0f0,0],
		[0x7c88e0f4,0],
		[0x7c88e0f8,0],
		[0x7c88e0fc,0],
		[0x7c88e100,720],
		[0x7c88e104,0],
		[0x7c88e108,2167],
		[0x7c88e10c,0],
		[0x7c88e114,0],
		[0x7c88e11c,0],
		[0x7c88e120,6568],
		[0x7c88e124,0],
		[0x7c88e128,52],
		[0x7c88e12c,0],
		[0x7c88e130,0],
		[0x7c88e134,0],
		[0x7c88e138,0],
		[0x7c88e13c,0],
		[0x7c88e140,0],
		[0x7c88e144,0],
		[0x7c88e178,0],
		[0x7c88e17c,0],
		[0x7c88e198,0],
		[0x7c88e19c,0],
		[0x7c88e1a0,0],
		[0x7c88e1a4,0],
		[0x7c88e1c0,0],
		[0x7c88e1c4,0],
		[0x7c88e1f8,0],
		[0x7c88e1fc,0],
		[0x7c88e200,0],
		[0x7c88e204,0],
		[0x7c88e218,0],
		[0x7c88e21c,0],
		[0x7c88e220,0],
		[0x7c88e224,0],
		[0x7c88e228,0],
		[0x7c88e22c,0],
		[0x7c88e230,2],
		[0x7c88e234,0],
		[0x7c88e238,0],
		[0x7c88e23c,0],
		[0x7c88e240,0],
		[0x7c88e244,0],
		[0x7c88e250,0],
		[0x7c88e254,0],
		[0x7c88e258,0],
		[0x7c88e25c,0],
		[0x7c88e260,0],
		[0x7c88e264,3],
		[0x7c88e268,0],
		[0x7c88e26c,0],
		[0x7c88e270,0],
		[0x7c88e274,0],
		[0x7c88e278,0],
		[0x7c88e27c,0],
		[0x7c88e280,0],
		[0x7c88e284,0],
		[0x7c88e288,0],
		[0x7c88e28c,0],
		[0x7c88e290,0],
		[0x7c88e294,0],
		[0x7c88e298,0],
		[0x7c88e29c,0],
		[0x7c88e2a0,0],
		[0x7c88e2a4,0],
		[0x7c88e2a8,0],
		[0x7c88e2ac,0],
		[0x7c88e2b0,0],
		[0x7c88e2b4,0],
		[0x7c88e2b8,0],
		[0x7c88e2bc,0],
		[0x7c88e2c8,0],
		[0x7c88e2cc,0],
		[0x7c88e2d0,0],
		[0x7c88e2d4,0],
		[0x7c88e2dc,0],
		[0x7c88e2e4,0],
		[0x7c88e2e8,2753],
		[0x7c88e2ec,0],
		[0x7c88e2f0,5815],
		[0x7c88e2f4,0],
		[0x7c88e2fc,0],
		[0x7c88e300,0],
		[0x7c88e304,0],
		[0x7c88e308,0],
		[0x7c88e30c,0],
		[0x7c88e314,0],
		[0x7c88e31c,5],
		[0x7c88e324,1],
		[0x7c88e328,1],
		[0x7c88e32c,0],
		[0x7c88e330,0],
		[0x7c88e334,0],
		[0x7c88e338,0],
		[0x7c88e33c,0],
		[0x7c88e340,0],
		[0x7c88e344,0],
		[0x7c88e348,0],
		[0x7c88e34c,0],
		[0x7c88e350,0],
		[0x7c88e354,0],
		[0x7c88e358,0],
		[0x7c88e35c,0],
		[0x7c88e360,0],
		[0x7c88e364,0],
		[0x7c88e368,0],
		[0x7c88e36c,0],
		[0x7c88e370,0],
		[0x7c88e374,0],
		[0x7c88e378,0],
		[0x7c88e37c,0],
		[0x7c88e380,0],
		[0x7c88e384,0],
		[0x7c88e388,0],
		[0x7c88e38c,0],
		[0x7c88e390,0],
		[0x7c88e394,0],
		[0x7c88e398,0],
		[0x7c88e39c,0],
		[0x7c88e3a0,0],
		[0x7c88e3a4,0],
		[0x7c88e3a8,2],
		[0x7c88e3b4,0],
		[0x7c88e3d0,0],
		[0x7c88e3d4,0],
		[0x7c88e3dc,32695],
		[0x7c88e3e0,0],
		[0x7c88e3e4,0],
		[0x7c88e3f8,0],
		[0x7c88e3fc,0],
		[0x7c88e400,0],
		[0x7c88e404,0],
		[0x7c88e408,0],
		[0x7c88e40c,0],
		[0x7c88e410,0],
		[0x7c88e414,0],
		[0x7c88e418,0],
		[0x7c88e41c,0],
		[0x7c88e440,0],
		[0x7c88e444,0],
		[0x7c88e448,0],
		[0x7c88e44c,0],
		[0x7c88e450,1000],
		[0x7c88e454,0],
		[0x7c88e45c,0],
		[0x7c88e460,0],
		[0x7c88e464,0],
		[0x7c88e468,0],
		[0x7c88e46c,0],
		[0x7c88e470,0],
		[0x7c88e474,0],
		[0x7c88e478,0],
		[0x7c88e47c,0],
		[0x7c88e488,0],
		[0x7c88e48c,0],
		[0x7c88e490,0],
		[0x7c88e494,0],
		[0x7c88e498,0],
		[0x7c88e49c,0],
		[0x7c88e4a0,0],
		[0x7c88e4a4,0],
		[0x7c88e4a8,0],
		[0x7c88e4ac,0],
		[0x7c88e4b0,0],
		[0x7c88e4b4,0],
		[0x7c88e4b8,0],
		[0x7c88e4bc,0],
		[0x7c88e4c0,0],
		[0x7c88e4c4,0],
		[0x7c88e4c8,0],
		[0x7c88e4cc,0],
		[0x7c88e4d0,0],
		[0x7c88e4d4,0],
		[0x7c88e4d8,0],
		[0x7c88e4dc,0],
		[0x7c88e4e0,0],
		[0x7c88e4e4,0],
		[0x7c88e4e8,0],
		[0x7c88e4ec,0],
		[0x7c88e4f0,0],
		[0x7c88e4f4,0],
		[0x7c88e4f8,0],
		[0x7c88e4fc,0],
		[0x7c88e500,0],
		[0x7c88e504,0],
		[0x7c88e508,0],
		[0x7c88e50c,0],
		[0x7c88e510,0],
		[0x7c88e514,0],
		[0x7c88e518,0],
		[0x7c88e51c,0],
		[0x7c88e520,0],
		[0x7c88e524,0],
		[0x7c88e528,0],
		[0x7c88e52c,0],
		[0x7c88e530,0],
		[0x7c88e534,0],
		[0x7c88e538,0],
		[0x7c88e53c,0],
		[0x7c88e540,0],
		[0x7c88e544,0],
		[0x7c88e548,0],
		[0x7c88e54c,0],
		[0x7c88e550,0],
		[0x7c88e554,0],
		[0x7c88e558,0],
		[0x7c88e55c,0],
		[0x7c88e560,0],
		[0x7c88e564,0],
		[0x7c88e568,0],
		[0x7c88e56c,0],
		[0x7c88e570,0],
		[0x7c88e574,0],
		[0x7c88e578,0],
		[0x7c88e57c,0],
		[0x7c88e580,0],
		[0x7c88e584,0],
		[0x7c88e588,0],
		[0x7c88e58c,0],
		[0x7c88e590,0],
		[0x7c88e594,0],
		[0x7c88e598,0],
		[0x7c88e59c,0],
		[0x7c88e5a0,0],
		[0x7c88e5a4,0],
		[0x7c88e5a8,0],
		[0x7c88e5ac,0],
		[0x7c88e5b0,0],
		[0x7c88e5b4,0],
		[0x7c88e5b8,0],
		[0x7c88e5bc,0],
		[0x7c88e5c0,0],
		[0x7c88e5c4,0],
		[0x7c88e5c8,0],
		[0x7c88e5cc,0],
		[0x7c88e5d0,0],
		[0x7c88e5d4,0],
		[0x7c88e5d8,0],
		[0x7c88e5dc,0],
		[0x7c88e5e0,0],
		[0x7c88e5e4,0],
		[0x7c88e5e8,0],
		[0x7c88e5ec,0],
		[0x7c88e5f0,0],
		[0x7c88e5f4,0],
		[0x7c88e5f8,0],
		[0x7c88e5fc,0],
		[0x7c88e600,0],
		[0x7c88e604,0],
		[0x7c88e608,0],
		[0x7c88e60c,0],
		[0x7c88e610,0],
		[0x7c88e614,0],
		[0x7c88e618,0],
		[0x7c88e61c,0],
		[0x7c88e620,0],
		[0x7c88e624,0],
		[0x7c88e628,0],
		[0x7c88e62c,0],
		[0x7c88e630,0],
		[0x7c88e634,0],
		[0x7c88e638,0],
		[0x7c88e63c,0],
		[0x7c88e640,0],
		[0x7c88e644,0],
		[0x7c88e648,0],
		[0x7c88e64c,0],
		[0x7c88e650,0],
		[0x7c88e654,0],
		[0x7c88e658,0],
		[0x7c88e65c,0],
		[0x7c88e660,0],
		[0x7c88e664,0],
		[0x7c88e668,0],
		[0x7c88e66c,0],
		[0x7c88e670,0],
		[0x7c88e674,0],
		[0x7c88e678,0],
		[0x7c88e67c,0],
		[0x7c88e680,0],
		[0x7c88e684,0],
		[0x7c88e688,0],
		[0x7c88e68c,0],
		[0x7c88e690,0],
		[0x7c88e694,0],
		[0x7c88e698,0],
		[0x7c88e69c,0],
		[0x7c88e6a0,0],
		[0x7c88e6a4,0],
		[0x7c88e6a8,0],
		[0x7c88e6ac,0],
		[0x7c88e6b0,0],
		[0x7c88e6b4,0],
		[0x7c88e6b8,0],
		[0x7c88e6bc,0],
		[0x7c88e6c0,0],
		[0x7c88e6c4,0],
		[0x7c88e6c8,0],
		[0x7c88e6cc,0],
		[0x7c88e6d0,0],
		[0x7c88e6d4,0],
		[0x7c88e6d8,0],
		[0x7c88e6dc,0],
		[0x7c88e6e0,0],
		[0x7c88e6e4,0],
		[0x7c88e6e8,0],
		[0x7c88e6ec,0],
		[0x7c88e6f0,0],
		[0x7c88e6f4,0],
		[0x7c88e6f8,0],
		[0x7c88e6fc,0],
		[0, 0]
]).
string_val([
		[0x7c88d790,120],
		[0x7c88d960,48],
		[0x7c88d968,48],
		[0x7c88d970,46],
		[0x7c88df48,39],
		[0x7c88df70,38],
		[0x7c88e128,52],
		[0x7c88e190,28267780183914867],
		[0, 0]
]).
:- use_module(library(clpfd)).
:- table query_task_struct/1.

isTrue([X, _]):-
    X == 49.

isTrue([_|Tail]):-
    isTrue(Tail).

log(File_name, Name, Addr, Base):-
    Offset #= Addr - Base,
    open(File_name, append, Stream),
    write(Stream, Name),
    write(Stream, ':'),
    write(Stream, Offset),
    nl(Stream),
    close(Stream).

print_time(Name, Start_time) :-
    get_time(Now),
    Time_past is Now - Start_time,
    print_nl(Name, Time_past).

start_query(Base_addr) :- 
    pointer(Ptr),
    string_val(Str),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Real_parent_addr, Real_parent_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    chain([MM2_addr, Real_parent_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    Real_parent_addr #> Comm_addr - 500,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    labeling([enum], [Real_parent_addr, Real_parent_val,  Comm_addr, Comm_val]),
    process_create(path('python'),
                ['subquery.py', Real_parent_val, "task_struct"],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_test(Base_addr) :-
    statistics(real_time, [Start|_]),
    get_time(Current),
    %current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM_addr, MM_val],
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Real_cred_addr, Real_cred_val],
        [Cred_addr, Cred_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM_addr, MM2_addr, Pid_addr, Tgid_addr, Real_parent_addr, Parent_addr , Child_addr, 
           Group_leader_addr, Thread_group_addr, Real_cred_addr, Cred_addr, Comm_addr], #<),
    Tasks_addr #> Base_addr,
    Comm_addr #= Base_addr + 968,
    Tasks_addr #= Base_addr + 544,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),
    labeling([enum], [Tasks_addr, Tasks_val, Comm_addr, Comm_val]),
    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset).


query_task_struct(Base_addr) :-
    statistics(real_time, [Start|_]),
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM_addr, MM_val],
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Tasks2_addr, Tasks2_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Real_cred_addr, Real_cred_val],
        [Cred_addr, Cred_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    
    %MM2_addr #> Base_addr + 1000,
    MM2_addr #= MM_addr + 8,
    MM2_val #> 0,
    Tasks_addr #> MM2_addr - 100,
    Tasks2_addr #= Tasks_addr + 8,

    Tgid_addr #= Pid_addr + 4,
    Real_parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr - 8,
    Child_addr #= Parent_addr + 8,
    %FIXME This may be too strong
    %Children next and prev 16 
    %Sibling next and prev  16
    Group_leader_addr #=< Child_addr +32,
    Cred_addr #= Real_cred_addr + 8,
    /*MM2_addr #= Base_addr + 1992,
    Comm_addr #= Base_addr + 1656,
    Tasks_addr #= Base_addr + 1904,*/
    chain([Tasks_addr, Tasks2_addr, MM_addr, MM2_addr, Pid_addr, Tgid_addr, Real_parent_addr, Parent_addr , Child_addr, 
           Group_leader_addr, Thread_group_addr, Real_cred_addr, Cred_addr, Comm_addr], #<),

    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),
    %print_time('before label mm', Current),

    label([MM2_addr, MM2_val]),
    label([MM_addr, MM_val]),
    %print_time('after label mm', Current),
    %query_mm_struct_arm(MM2_val),
    query_mm_struct(MM2_val),
    %print_time('after query mm', Current),

    labeling([], [Tasks_addr, Tasks_val, Comm_addr, Comm_val, Pid_addr, Tgid_addr]),

    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),
    %print_time('after query list_head', Current),
    

    labeling([enum], [Tasks2_addr, Tasks2_val]),

    labeling([enum], [Real_parent_addr, Real_parent_val, Group_leader_addr, Group_leader_val, Child_addr, Child_val]),
    Real_parent_val #> 0,
    Group_leader_val #> 0,
    query_ts(Real_parent_val, Comm_offset, Tasks_offset),
    %print_time('after query ts1', Current),
    %query_list_head(Child_val-16, Comm_offset, Tasks_offset),
    query_ts(Group_leader_val, Comm_offset, Tasks_offset),
    %print_time('after query ts2', Current),

    labeling([enum], [Real_cred_addr, Real_cred_val, Cred_addr, Cred_val]),
    Cred_val #> 0,
    query_cred(Real_cred_val),
    %print_time('after query cred1', Current),
    query_cred(Cred_val),
    %print_time('after query cred2', Current),


    get_time(Now),
    Time_past is Now - Current,
    statistics(real_time, [End|_]),

    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    log("./profile/task_struct", "tasks", Tasks_addr, Base_addr),
    log("./profile/task_struct", "active_mm_struct", MM2_addr, Base_addr),
    log("./profile/task_struct", "comm", Comm_addr, Base_addr),
    log("./profile/task_struct", "parent", Parent_addr, Base_addr),
    log("./profile/task_struct", "group_leader", Group_leader_addr, Base_addr),
    log("./profile/task_struct", "cred", Cred_addr, Base_addr),
    log("./profile/task_struct", "pid", Pid_addr, Base_addr),
    log("./profile/task_struct", "task_struct time", End, Start).
/*
    print_nl('tasks offset', Tasks_offset),
    print_nl('tasks offset', Tasks_val),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).
*/
query_module(Base_addr) :-
    /* struct list_head list;
       char name[LEN]; 
       struct kernel_param *kp;
       struct module_layout core_layout;
       struct module_layout init_layout; 
       unsigned int core_size, init_size;
       unsigned int init_text_size, core_text_size;
    */
    %get_time(Current),
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [List_addr, List_val],
        [KP_addr, KP_val],
        [Core_base_addr, Core_base_val]
    ]),
    Str_profile = ([
        [Name_addr, Name_val]    
    ]),
    Int_profile = ([
        [Core_size_addr, Core_size_val],
        [Core_text_size_addr, Core_text_size_val],
        [RO_size_addr, RO_size_val],
        [RO_init_size_addr, RO_init_size_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),
    /* Order Invariants */
    chain([List_addr, Name_addr, KP_addr, Core_base_addr, Core_size_addr, 
            Core_text_size_addr, RO_size_addr, RO_init_size_addr], #<),
    RO_init_size_addr - Base_addr #< 1000,
    
    labeling([enum], [Name_addr, Name_val]),
    List_addr #= Name_addr - 16,
    labeling([enum], [List_addr, List_val]),
    Name_offset #= Name_addr - Base_addr,
    List_offset #= List_addr - Base_addr,
    query_list_head(List_val, Name_offset, List_offset),
    KP_val #> 0,
    labeling([enum], [KP_addr, KP_val]),
    query_kernel_param(KP_val),
    Core_size_addr #= Core_base_addr + 8,
    Core_size_val #> 0,
    Core_text_size_addr #= Core_size_addr + 4,
    Core_text_size_val #> 0,
    RO_size_addr #= Core_text_size_addr + 4,
    RO_init_size_addr #= RO_size_addr + 4,

    labeling([enum], [Core_base_addr, Core_size_addr, 
            Core_text_size_addr, RO_size_addr, RO_init_size_addr]),

    %get_time(End),
    statistics(real_time, [End|_]),
    %Time_past is End - Current,
    log("./profile/module", "list", List_addr, Base_addr),
    log("./profile/module", "name", Name_addr, Base_addr),
    log("./profile/module", "kp", KP_addr, Base_addr),
    log("./profile/module", "core_base", Core_base_addr, Base_addr),
    log("./profile/module", "core_size", Core_size_addr, Base_addr),
    log("./profile/module", "core_text_size", Core_text_size_addr, Base_addr),
    log("./profile/module", "module time", End, Start).
    %print_nl("Finished, total time", Time_past).

query_mount_hash(Base_addr) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    Ptr_profile = ([
        [Mount_addr, Mount_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Mount_addr #< Base_addr + 250,
    Mount_val #> 0,
    labeling([enum], [Mount_addr, Mount_val]),
    query_mount(Mount_val),
    statistics(real_time, [End|_]),
    log("./profile/mount_hash", "mount", Mount_addr, Base_addr),
    log("./profile/mount_hash", "mount_hash time", End, Start).

query_net_device(Base_addr) :- 
    /*
        char             name[NAMSIZ];
        struct list_head dev_list;
        unsigned char    addr_len;
        unsigned int     promiscuity;
        struct in_device *ip_ptr;
    */
    statistics(real_time, [Start|_]),
    %get_time(Current),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Dev_list_addr, Dev_list_val],
        [IP_ptr_addr, IP_ptr_val]
    ]),
    Str_profile = ([
        [Name_addr, Name_val]
    ]),
    Int_profile = ([
        [Promisc_addr, Promisc_val],
        [Addr_len_addr, Addr_len_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),
    /* Hard to determine offsets for addr_len and promisc */
    chain([Name_addr, Dev_list_addr, Addr_len_addr, Promisc_addr, IP_ptr_addr], #<),
    Name_addr #>= Base_addr,
    Name_offset #= Name_addr - Base_addr,
    IP_ptr_addr #< Base_addr + 1000,
    /* dev_list offset can be hardcoded since it remains the same */
    Dev_list_addr #= Base_addr + 80,
    labeling([enum], [Name_addr, Dev_list_addr, Dev_list_val]),
    /* do not have a good constrain to narrow down ip_ptr, use its rough offset
       to reduce the search space. 
     */
    IP_ptr_addr #> Base_addr + 700,
    IP_ptr_val #> 0,
    labeling([enum], [IP_ptr_addr, IP_ptr_val]),
    query_in_device(IP_ptr_val),

    %get_time(End),
    %Time_past is End - Current,
    statistics(real_time, [End|_]),

    log("./profile/net_device", "name", Name_addr, Base_addr),
    log("./profile/net_device", "ip_ptr", IP_ptr_addr, Base_addr),
    log("./profile/net_device", "dev_list", Dev_list_addr, Base_addr),
    log("./profile/net_device", "net_device time", End, Start).


query_inet_sock(Base_addr) :-
    /* As defined in source code, sk and pinet6 has to be 
       the first two members of inet_sock, which means we
       can hardcode this rule.
    */
    /*skc_family at offset 16 short contained in a unsigned number 
     First half of sock_common can be viewed as unchanged, so it's safe to use
       some hardcoded ruels to help pinpoint some offsets.  
    sk_buff_head, two non-zero pointers, one unsigned long, one integer.
    sk_protocol is a unsigned long number after sk_write_buffer, and they have the same offset. */
    %get_time(Current),
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Sk_receive_queue_addr, Sk_receive_queue_val],
        [Sk_receive_queue_prev_addr, Sk_receive_queue_prev_val],
        [Sk_send_head_addr, Sk_send_head_val],
        [Sk_write_queue_addr, Sk_write_queue_val],
        [Sk_write_queue_prev_addr, Sk_write_queue_prev_val]
    ]),
    Ulong_profile = ([
        [Skc_family_addr, Skc_family_val],
        [Sk_protocol_addr, Sk_protocol_val]
    ]),
    Int_profile = ([
        [Sk_rcvlowat_addr, Sk_rcvlowat_val],
        [Receive_lock_addr, Receive_lock_val],
        [Write_lock_addr, Write_lock_val],
        [Qlen_receive_addr, Qlen_receive_val],
        [Qlen_write_addr, Qlen_write_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    tuples_in(Int_profile, Int),

    Sk_protocol_val #> 0,
    Skc_family_addr #= Base_addr + 16,
    Skc_family_val #> 0,
    Sk_receive_queue_val #> 0,
    Sk_receive_queue_prev_val #> 0,
    Sk_write_queue_val #> 0,
    Sk_write_queue_prev_val #> 0,
    chain([Skc_family_addr, Sk_rcvlowat_addr, Sk_receive_queue_addr, Sk_receive_queue_prev_addr, Qlen_receive_addr, Receive_lock_addr,
          Sk_send_head_addr, Sk_write_queue_addr, Sk_write_queue_prev_addr, Qlen_write_addr, Write_lock_addr,
          Sk_protocol_addr], #<),
    /* sock_common is at least 136 */
    Sk_receive_queue_addr #> Base_addr + 136,
    Sk_receive_queue_addr #=< Sk_rcvlowat_addr + 28,
    Sk_protocol_addr #= Sk_write_queue_addr + 160,
    Sk_protocol_addr #< Base_addr + 700,
    Sk_receive_queue_prev_addr #= Sk_receive_queue_addr + 8,
    Qlen_receive_addr #= Sk_receive_queue_prev_addr + 8,
    Receive_lock_addr #= Qlen_receive_addr + 4,
    Sk_write_queue_addr #= Sk_send_head_addr + 8,
    Sk_write_queue_prev_addr #= Sk_write_queue_addr + 8,
    Qlen_write_addr #= Sk_write_queue_prev_addr + 8,
    Write_lock_addr #= Qlen_write_addr + 4,

    labeling([enum], [Skc_family_addr, Sk_receive_queue_addr, Sk_write_queue_addr, Sk_protocol_addr]),

    %get_time(End),
    %Time_past is End - Current,
    statistics(real_time, [End|_]),


    log("./profile/inet_sock", "sk_receive_queue", Sk_receive_queue_addr, Base_addr),
    log("./profile/inet_sock", "Sk_write_queue", Sk_write_queue_addr, Base_addr),
    log("./profile/inet_sock", "Skc_family", Skc_family_addr, Base_addr),
    log("./profile/inet_sock", "Sk_protocol", Sk_protocol_addr, Base_addr),
    log("./profile/inet_sock", "inet_sock time", End, Start).

query_resource(Base_addr) :-
    /*
        start
        end
        *name
        *parent
        *sibling
        *child -> non-zero
    */
    /* This structure remains unchanged, thus we can have some
       hardcoded rules to help inference. */

    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Name_addr, Name_val],
        [Parent_addr, Parent_val],
        [Sibling_addr, Sibling_val],
        [Child_addr, Child_val]
    ]),
    Ulong_profile = ([
        [End_addr, End_val],
        [Flags_addr, Flags_val]
    ]),
    Int_profile = ([
        [Start_addr, Start_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    tuples_in(Int_profile, Int),

    Child_val #> 0,
    Start_addr #>= Base_addr,
    chain([Start_addr, End_addr, Name_addr, Flags_addr, Parent_addr, Sibling_addr, Child_addr], #<),
    %Name_addr #= Base_addr + 16,
    Child_addr #=< Base_addr + 64,
    labeling([enum], [Start_addr, End_addr, Name_addr, Name_val]),
    query_string_pointer(Name_val),
    Name_offset #= Name_addr - Base_addr,
    labeling([enum], [Child_addr, Child_val]),
    query_name_pointer(Child_val, Name_offset),

    statistics(real_time, [End|_]),


    log("./profile/resource", "Start_addr", Start_addr, Base_addr),
    log("./profile/resource", "End_addr", End_addr, Base_addr),
    log("./profile/resource", "Name_addr", Name_addr, Base_addr),
    log("./profile/resource", "Child_addr", Child_addr, Base_addr),
    log("./profile/resource", "resource time", End, Start).

query_neigh_tables(Base_addr) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    Ptr_profile = ([
        [Neigh_table_addr, Neigh_table_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Neigh_table_addr #=< Base_addr + 32,
    labeling([enum], [Neigh_table_addr, Neigh_table_val]),
    query_neigh_table(Neigh_table_val),

    statistics(real_time, [End|_]),
    log("./profile/neigh_tables", "neigh_table", Neigh_table_addr, Base_addr),
    log("./profile/neigh_tables", "neigh_tables time", End, Start).

query_seq_operations(Base_addr) :-
    statistics(real_time, [Start|_]),
    /* Four successive function pointers */
    pointer(Ptr),
    Ptr_profile = ([
        [Start_addr, Start_val],
        [Stop_addr, Stop_val],
        [Next_addr, Next_val],
        [Show_addr, Show_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([Start_addr, Stop_addr, Next_addr, Show_addr], #<),
    Start_addr #= Base_addr,
    Show_addr #= Base_addr + 24,
    Start_val #> 0,
    Stop_val #> 0,
    Next_val #> 0,
    Show_val #> 0,
    statistics(real_time, [End|_]),
    log("./profile/seq_operations", "seq_operations time", End, Start).


query_tcp_seq_afinfo(Base_addr) :-
    statistics(real_time, [Start|_]),

    pointer(Ptr),
    int(Int),
    Ptr_profile = ([
        [Name_addr, Name_val],
        [F_ops_addr, F_ops_val],
        [Ops_addr, Ops_val]
    ]),
    Int_profile = ([
        [Family_addr, Family_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Name_addr #= Base_addr,
    Ops_addr #= Base_addr + 24,
    chain([Name_addr, Family_addr, F_ops_addr, Ops_addr], #<),
    
    labeling([enum], [Name_addr, Name_val]),
    query_string_pointer(Name_val),
    statistics(real_time, [End|_]),
    log("./profile/tcp_seq_afinfo", "tcp_seq_afinfo time", End, Start).

query_udp_seq_afinfo(Base_addr) :-
    statistics(real_time, [Start|_]),

    pointer(Ptr),
    int(Int),
    Ptr_profile = ([
        [Name_addr, Name_val],
        [Udp_table_addr, Udp_table_val],
        [F_ops_addr, F_ops_val],
        [Ops_addr, Ops_val]
    ]),
    Int_profile = ([
        [Family_addr, Family_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Name_addr #= Base_addr,
    Ops_addr #= Base_addr + 32,
    chain([Name_addr, Family_addr, Udp_table_addr, F_ops_addr, Ops_addr], #<),
    
    labeling([enum], [Name_addr, Name_val]),
    query_string_pointer(Name_val),
    statistics(real_time, [End|_]),
    log("./profile/udp_seq_afinfo", "udp_seq_afinfo time", End, Start).

query_tty_driver(Base_addr) :-
    statistics(real_time, [Start|_]),

    /* tty_driver remains unchanged, some rules are hardcoded. */
    pointer(Ptr),
    int(Int),
    Ptr_profile = ([
        [Driver_name_addr, Driver_name_val],
        [Name_addr, Name_val],
        [Ttys_addr, Ttys_val],
        [Tty_drivers_addr, Tty_drivers_val]
    ]),
    Int_profile = ([
        [Magic_addr, Magic_val],
        [Kref_addr, Kref_val],
        [Name_base_addr, Name_base_val],
        [Major_addr, Major_val],
        [Minor_start_addr, Minor_start_val],
        [Num_addr, Num_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Magic_addr #= Base_addr,
    Kref_addr #= Magic_addr + 4,
    Num_addr #= Name_base + 12,
    Ttys_addr #= Base_addr + 128,
    Tty_drivers_addr #= Base_addr + 168,
    chain([Magic_addr, Kref_addr, Driver_name_addr, Name_addr, Name_base_addr, Major_addr, Minor_start_addr,
            Num_addr, Ttys_addr, Tty_drivers_addr], #<),
    labeling([enum], [Driver_name_addr, Driver_name_val, Name_addr, Name_val]),
    query_string_pointer(Driver_name_val),
    query_string_pointer(Name_val),
    statistics(real_time, [End|_]),
    log("./profile/tty_driver", "tty_driver time", End, Start).

query_proc_dir_entry(Base_addr) :-
    statistics(real_time, [Start|_]),

    pointer(Ptr),
    int(Int),
    long(Ulg),
    Ptr_profile = ([
        [Proc_iops_addr, Proc_iops_val],
        [Proc_fops_addr, Proc_fops_val]
    ]),
    Int_profile = ([
        [Low_ino_addr, Low_ino_val],
        [Mode_addr, Mode_val],
        [Nlink_addr, Nlink_val],
        [Uid_addr, Uid_val],
        [Gid_addr, Gid_val]
    ]),

    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Low_ino_addr #= Base_addr,
    Gid_addr #= Low_ino_addr + 16,
    Proc_fops_addr #= Proc_iops_addr + 8,
    Proc_fops_addr #=< Base_addr + 40,
    chain([Low_ino_addr, Mode_addr, Nlink_addr, Uid_addr, Gid_addr, Proc_iops_addr, Proc_fops_addr], #<),
    labeling([enum], [Proc_iops_addr, Proc_iops_val, Proc_fops_addr, Proc_fops_val]),
    Proc_fops_val #> 0,
    %Proc_iops_val #> 0,
    %query_inode_operations(Proc_iops_val),
    query_inode_operations(Proc_fops_val),
    statistics(real_time, [End|_]),
    log("./profile/proc_dir_entry", "proc_dir_entry time", End, Start).

query_kset(Base_addr) :-
    /* skip */
    1 #= 1.



test(Base_addr) :-
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM2_addr, Pid_addr, Tgid_addr, Parent_addr, Real_parent_addr, Child_addr, 
           Group_leader_addr, Thread_group_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    MM2_addr #> Base_addr + 1000,
    Tasks_addr #> MM2_addr - 100,
    FS_struct_addr #< Base_addr + 3000,
    Tgid_addr #= Pid_addr + 4,
    Parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr + 8,
    Child_addr #= Real_parent_addr +8,
    Group_leader_addr #=< Child_addr +32,
    %Comm_addr #= Base_addr + 2584,
    %Tasks_addr #= Base_addr + 1904,
    %FS_struct_addr #= Base_addr + 2640,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    % make query after labeling
    MM2_val #> 0,
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val,  Comm_addr, Comm_val ]),
    %Tasks_addr #= Base_addr + 2040,
    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    


    get_time(End),
    Time_past is End - Current,
    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    
    print_nl('tasks offset', Tasks_offset),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).

query_neigh_table(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "neigh_table"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_string_pointer(Val) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "string_pointer"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_name_pointer(Val, Name_offset) :-
    process_create(path('python'),
                    ['subquery.py', Val, "name_pointer", Name_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_mount(Base_addr) :- 
    process_create(path('python'),
                    ['subquery.py', Base_addr, "mount"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_mount_struct(Val, Offset) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "mount_struct", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_vfs_mount(Vfsmount_val) :-
    process_create(path('python'),
                    ['subquery.py', Vfsmount_val, "vfs_mount"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_dentry(Dentry_val) :-
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_kernel_param(KP_val) :-
    process_create(path('python'),
                    ['subquery.py', KP_val, "kernel_param"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_in_device(IP_ptr_val) :-
    process_create(path('python'),
                    ['subquery.py', IP_ptr_val, "in_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_inode_operations(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_mm_struct(MM2_val) :-
    process_create(path('python'),
                    ['subquery.py', MM2_val, "mm_struct"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_mm_struct_arm(MM2_val) :-
    process_create(path('python'),
                    ['subquery.py', MM2_val, "mm_struct_arm"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_list_head(Tasks_val, Comm_offset, Tasks_offset) :-
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "list_head", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_tasks(Tasks_val, Comm_offset, Tasks_offset) :-
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "tasks", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_child(Child_val, Comm_offset, Child_offset) :-
    process_create(path('python'),
                    ['subquery.py', Child_val, "child", Comm_offset, Child_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_ts(Base_addr, Comm_offset, Tasks_offset) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "ts", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_cred(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "cred"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).
query_fs_struct(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "fs_struct"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

print_nl(Name, Content):- 
    print(Name),
    print(':'),
    print(Content),
    nl.
