:- use_module(library(clpfd)).
:- style_check(-singleton).
pointer([
		[0x13e104c0,0],
		[0x13e104c8,0],
		[0x13e104d0,333447168],
		[0x13e104e0,0],
		[0x13e104e8,0],
		[0x13e104f8,0],
		[0x13e10500,0],
		[0x13e10508,0],
		[0x13e10528,329417056],
		[0x13e10530,0],
		[0x13e10538,0],
		[0x13e10550,0],
		[0x13e10558,0],
		[0x13e10560,0],
		[0x13e10568,333514088],
		[0x13e10570,333514088],
		[0x13e10578,0],
		[0x13e10588,0],
		[0x13e10590,0],
		[0x13e10598,0],
		[0x13e105a0,0],
		[0x13e105a8,0],
		[0x13e105b0,0],
		[0x13e105b8,0],
		[0x13e105c0,0],
		[0x13e105c8,0],
		[0x13e105d0,0],
		[0x13e105d8,0],
		[0x13e105e0,0],
		[0x13e105e8,0],
		[0x13e105f0,0],
		[0x13e105f8,0],
		[0x13e10600,0],
		[0x13e10608,0],
		[0x13e10610,0],
		[0x13e10618,0],
		[0x13e10620,0],
		[0x13e10628,0],
		[0x13e10630,0],
		[0x13e10638,0],
		[0x13e10640,0],
		[0x13e10648,0],
		[0x13e10650,0],
		[0x13e10658,0],
		[0x13e10660,0],
		[0x13e10668,0],
		[0x13e10670,0],
		[0x13e10678,0],
		[0x13e10680,0],
		[0x13e10688,0],
		[0x13e10690,532787752],
		[0x13e10698,0],
		[0x13e106a0,0],
		[0x13e106a8,0],
		[0x13e106b0,0],
		[0x13e106b8,0],
		[0x13e106c0,0],
		[0x13e106c8,0],
		[0x13e106d0,0],
		[0x13e106d8,0],
		[0x13e106e0,0],
		[0x13e106e8,0],
		[0x13e106f0,0],
		[0x13e106f8,0],
		[0x13e10700,333514496],
		[0x13e10708,333514496],
		[0x13e10710,0],
		[0x13e10718,0],
		[0x13e10728,0],
		[0x13e10730,337937984],
		[0x13e10738,333514552],
		[0x13e10740,0],
		[0x13e10748,0],
		[0x13e10750,0],
		[0x13e10758,0],
		[0x13e10760,0],
		[0x13e10768,0],
		[0x13e10770,0],
		[0x13e10778,0],
		[0x13e10780,0],
		[0x13e10788,0],
		[0x13e10790,333514640],
		[0x13e10798,0],
		[0x13e107a0,0],
		[0x13e107a8,0],
		[0x13e107b0,0],
		[0x13e107b8,319593344],
		[0x13e107c0,532759040],
		[0x13e107c8,0],
		[0x13e107d0,0],
		[0x13e107d8,0],
		[0x13e10be8,0],
		[0x13e10bf0,0],
		[0x13e10bf8,333515768],
		[0x13e10c00,333515768],
		[0x13e10c10,0],
		[0x13e10c18,0],
		[0x13e10c20,0],
		[0x13e10c28,0],
		[0x13e10c30,467273584],
		[0x13e10c38,310516912],
		[0x13e10c48,333515848],
		[0x13e10c50,333515848],
		[0x13e10c58,333515864],
		[0x13e10c60,333515864],
		[0x13e10c68,0],
		[0x13e10c70,0],
		[0x13e10c78,0],
		[0x13e10c80,0],
		[0x13e10c88,390268864],
		[0x13e10c90,0],
		[0x13e10c98,0],
		[0x13e10ca0,0],
		[0x13e10ca8,0],
		[0x13e10cb0,0],
		[0x13e10cb8,0],
		[0x13e10cc0,0],
		[0x13e10cc8,0],
		[0x13e10cd0,0],
		[0x13e10cd8,0],
		[0x13e10ce0,0],
		[0x13e10ce8,0],
		[0x13e10cf0,0],
		[0x13e10cf8,0],
		[0x13e10d00,319386352],
		[0x13e10d08,0],
		[0x13e10d10,0],
		[0x13e10d18,0],
		[0x13e10d20,0],
		[0x13e10d28,0],
		[0x13e10d30,0],
		[0x13e10d40,333513920],
		[0x13e10d48,333513920],
		[0x13e10d50,467273888],
		[0x13e10d58,467301088],
		[0x13e10d60,333516128],
		[0x13e10d68,333516128],
		[0x13e10d70,333513920],
		[0x13e10d78,333516152],
		[0x13e10d80,333516152],
		[0x13e10d88,333516168],
		[0x13e10d90,333516168],
		[0x13e10d98,0],
		[0x13e10da0,0],
		[0x13e10da8,333807552],
		[0x13e10db0,0],
		[0x13e10db8,0],
		[0x13e10dc0,333807552],
		[0x13e10dc8,0],
		[0x13e10dd0,0],
		[0x13e10dd8,333807552],
		[0x13e10de0,333516256],
		[0x13e10de8,333516256],
		[0x13e10df0,333525072],
		[0x13e10df8,333525072],
		[0x13e10e00,0],
		[0x13e10e08,0],
		[0x13e10e10,0],
		[0x13e10e18,0],
		[0x13e10e28,0],
		[0x13e10e30,0],
		[0x13e10e38,0],
		[0x13e10e40,0],
		[0x13e10e48,0],
		[0x13e10e58,0],
		[0x13e10e60,0],
		[0x13e10e68,0],
		[0x13e10e70,0],
		[0x13e10e78,0],
		[0x13e10e80,0],
		[0x13e10e88,0],
		[0x13e10e90,333516432],
		[0x13e10e98,333516432],
		[0x13e10ea0,333516448],
		[0x13e10ea8,333516448],
		[0x13e10eb0,333516464],
		[0x13e10eb8,333516464],
		[0x13e10ec0,0],
		[0x13e10ec8,333808832],
		[0x13e10ed0,333808832],
		[0x13e10ee8,0],
		[0x13e10ef0,0],
		[0x13e10ef8,0],
		[0x13e10f00,0],
		[0x13e10f08,0],
		[0x13e10f10,334202432],
		[0x13e10f18,334177472],
		[0x13e10f20,333808224],
		[0x13e10f28,333525056],
		[0x13e10f30,333522944],
		[0x13e10f38,0],
		[0x13e10f40,0],
		[0x13e10f48,0],
		[0x13e10f50,333516624],
		[0x13e10f58,333516624],
		[0x13e10f60,0],
		[0x13e10f68,0],
		[0x13e10f70,0],
		[0x13e10f78,0],
		[0x13e10f80,0],
		[0x13e10f88,0],
		[0x13e10f98,0],
		[0x13e10fa0,0],
		[0x13e10fa8,0],
		[0x13e10fb0,0],
		[0x13e10fb8,0],
		[0x13e10fc0,0],
		[0x13e10fc8,0],
		[0x13e10fd0,0],
		[0x13e10fd8,0],
		[0x13e10fe0,0],
		[0x13e10fe8,0],
		[0x13e10ff0,0],
		[0x13e10ff8,0],
		[0x13e11000,0],
		[0x13e11008,0],
		[0x13e11010,0],
		[0x13e11018,0],
		[0x13e11020,0],
		[0x13e11028,0],
		[0x13e11030,0],
		[0x13e11038,0],
		[0x13e11040,0],
		[0x13e11048,0],
		[0x13e11050,0],
		[0x13e11058,0],
		[0x13e11060,0],
		[0x13e110e8,0],
		[0x13e110f0,0],
		[0x13e110f8,334012448],
		[0x13e11100,0],
		[0x13e11108,0],
		[0x13e11110,0],
		[0x13e11118,0],
		[0x13e11120,0],
		[0x13e11128,0],
		[0x13e11130,0],
		[0x13e11138,0],
		[0x13e11140,0],
		[0x13e11148,0],
		[0x13e11150,0],
		[0x13e11158,0],
		[0x13e11160,333517152],
		[0x13e11168,333517152],
		[0x13e11170,333517168],
		[0x13e11178,333517168],
		[0x13e11180,0],
		[0x13e11188,0],
		[0x13e111a0,0],
		[0x13e111a8,0],
		[0x13e111b0,0],
		[0x13e111b8,0],
		[0x13e111c0,333517248],
		[0x13e111c8,0],
		[0x13e111d0,0],
		[0x13e111d8,0],
		[0x13e111e0,0],
		[0x13e111e8,0],
		[0x13e111f0,0],
		[0x13e111f8,0],
		[0x13e11200,0],
		[0x13e11208,0],
		[0x13e11210,0],
		[0x13e11218,0],
		[0x13e11220,0],
		[0x13e11228,0],
		[0x13e11230,0],
		[0x13e11238,0],
		[0x13e11240,0],
		[0x13e11248,0],
		[0x13e11250,0],
		[0x13e11258,0],
		[0x13e11260,0],
		[0x13e11268,0],
		[0x13e11270,0],
		[0x13e11278,0],
		[0x13e11280,0],
		[0x13e11288,0],
		[0x13e11290,0],
		[0x13e11298,0],
		[0x13e112a0,0],
		[0x13e112a8,0],
		[0x13e112b0,0],
		[0x13e112b8,0],
		[0x13e112c0,0],
		[0x13e112c8,0],
		[0x13e112d0,0],
		[0x13e112d8,0],
		[0x13e112e0,0],
		[0x13e112e8,0],
		[0x13e112f0,0],
		[0x13e112f8,0],
		[0x13e11300,0],
		[0x13e11308,0],
		[0x13e11310,0],
		[0x13e11318,0],
		[0x13e11320,0],
		[0x13e11328,0],
		[0x13e11330,0],
		[0x13e11338,0],
		[0x13e11340,0],
		[0x13e11348,0],
		[0x13e11350,0],
		[0x13e11358,0],
		[0x13e11360,0],
		[0x13e11368,0],
		[0x13e11370,0],
		[0x13e11378,0],
		[0x13e11380,0],
		[0x13e11388,0],
		[0x13e11390,0],
		[0x13e11398,0],
		[0x13e113a0,0],
		[0x13e113a8,0],
		[0x13e113b0,0],
		[0x13e113b8,0],
		[0x13e113c0,0],
		[0x13e113c8,0],
		[0x13e113d0,0],
		[0x13e113d8,0],
		[0x13e113e0,0],
		[0x13e113e8,0],
		[0x13e113f0,0],
		[0x13e113f8,0],
		[0x13e11400,0],
		[0x13e11408,0],
		[0x13e11410,0],
		[0x13e11418,0],
		[0x13e11420,0],
		[0x13e11428,0],
		[0x13e11430,0],
		[0x13e11438,0],
		[0x13e11440,0],
		[0x13e11448,0],
		[0x13e11450,0],
		[0x13e11458,0],
		[0x13e11460,0],
		[0x13e11468,0],
		[0x13e11470,0],
		[0x13e11478,0],
		[0x13e11480,0],
		[0x13e11488,0],
		[0x13e11490,0],
		[0x13e11498,0],
		[0x13e114a0,0],
		[0x13e114a8,0],
		[0x13e114b0,0],
		[0x13e114b8,0],
		[0, 0]
]).
unknown([
		[0x13e104d8,9008307356303362],
		[0x13e10d38,14593495508423839559],
		[0, 0]
]).
long([
		[0x13e104f0,1],
		[0x13e10510,4294967296],
		[0x13e10518,515396075640],
		[0x13e10540,1048576],
		[0x13e10548,4194304],
		[0x13e10580,5038873],
		[0x13e10720,25],
		[0x13e107e0,1],
		[0x13e107e8,1],
		[0x13e10c08,4294967295],
		[0x13e10c40,140],
		[0x13e10e20,939610791],
		[0x13e10e50,19398],
		[0x13e11190,1000],
		[0x13e11198,4294967295],
		[0, 0]
]).
int([
		[0x13e104c0,0],
		[0x13e104c4,0],
		[0x13e104c8,0],
		[0x13e104cc,0],
		[0x13e104d8,2],
		[0x13e104e0,0],
		[0x13e104e4,0],
		[0x13e104e8,0],
		[0x13e104ec,0],
		[0x13e104f0,1],
		[0x13e104f4,0],
		[0x13e104f8,0],
		[0x13e104fc,0],
		[0x13e10500,0],
		[0x13e10504,0],
		[0x13e10508,0],
		[0x13e1050c,0],
		[0x13e10510,0],
		[0x13e10514,1],
		[0x13e10518,120],
		[0x13e1051c,120],
		[0x13e10520,120],
		[0x13e10524,0],
		[0x13e10530,0],
		[0x13e10534,0],
		[0x13e10538,0],
		[0x13e1053c,0],
		[0x13e10544,0],
		[0x13e1054c,0],
		[0x13e10550,0],
		[0x13e10554,0],
		[0x13e10558,0],
		[0x13e1055c,0],
		[0x13e10560,0],
		[0x13e10564,0],
		[0x13e10578,0],
		[0x13e1057c,0],
		[0x13e10584,0],
		[0x13e10588,0],
		[0x13e1058c,0],
		[0x13e10590,0],
		[0x13e10594,0],
		[0x13e10598,0],
		[0x13e1059c,0],
		[0x13e105a0,0],
		[0x13e105a4,0],
		[0x13e105a8,0],
		[0x13e105ac,0],
		[0x13e105b0,0],
		[0x13e105b4,0],
		[0x13e105b8,0],
		[0x13e105bc,0],
		[0x13e105c0,0],
		[0x13e105c4,0],
		[0x13e105c8,0],
		[0x13e105cc,0],
		[0x13e105d0,0],
		[0x13e105d4,0],
		[0x13e105d8,0],
		[0x13e105dc,0],
		[0x13e105e0,0],
		[0x13e105e4,0],
		[0x13e105e8,0],
		[0x13e105ec,0],
		[0x13e105f0,0],
		[0x13e105f4,0],
		[0x13e105f8,0],
		[0x13e105fc,0],
		[0x13e10600,0],
		[0x13e10604,0],
		[0x13e10608,0],
		[0x13e1060c,0],
		[0x13e10610,0],
		[0x13e10614,0],
		[0x13e10618,0],
		[0x13e1061c,0],
		[0x13e10620,0],
		[0x13e10624,0],
		[0x13e10628,0],
		[0x13e1062c,0],
		[0x13e10630,0],
		[0x13e10634,0],
		[0x13e10638,0],
		[0x13e1063c,0],
		[0x13e10640,0],
		[0x13e10644,0],
		[0x13e10648,0],
		[0x13e1064c,0],
		[0x13e10650,0],
		[0x13e10654,0],
		[0x13e10658,0],
		[0x13e1065c,0],
		[0x13e10660,0],
		[0x13e10664,0],
		[0x13e10668,0],
		[0x13e1066c,0],
		[0x13e10670,0],
		[0x13e10674,0],
		[0x13e10678,0],
		[0x13e1067c,0],
		[0x13e10680,0],
		[0x13e10684,0],
		[0x13e10688,0],
		[0x13e1068c,0],
		[0x13e10698,0],
		[0x13e1069c,0],
		[0x13e106a0,0],
		[0x13e106a4,0],
		[0x13e106a8,0],
		[0x13e106ac,0],
		[0x13e106b0,0],
		[0x13e106b4,0],
		[0x13e106b8,0],
		[0x13e106bc,0],
		[0x13e106c0,0],
		[0x13e106c4,0],
		[0x13e106c8,0],
		[0x13e106cc,0],
		[0x13e106d0,0],
		[0x13e106d4,0],
		[0x13e106d8,0],
		[0x13e106dc,0],
		[0x13e106e0,0],
		[0x13e106e4,0],
		[0x13e106e8,0],
		[0x13e106ec,0],
		[0x13e106f0,0],
		[0x13e106f4,0],
		[0x13e106f8,0],
		[0x13e106fc,0],
		[0x13e10710,0],
		[0x13e10714,0],
		[0x13e10718,0],
		[0x13e1071c,0],
		[0x13e10720,25],
		[0x13e10724,0],
		[0x13e10728,0],
		[0x13e1072c,0],
		[0x13e10740,0],
		[0x13e10744,0],
		[0x13e10748,0],
		[0x13e1074c,0],
		[0x13e10750,0],
		[0x13e10754,0],
		[0x13e10758,0],
		[0x13e1075c,0],
		[0x13e10760,0],
		[0x13e10764,0],
		[0x13e10768,0],
		[0x13e1076c,0],
		[0x13e10770,0],
		[0x13e10774,0],
		[0x13e10778,0],
		[0x13e1077c,0],
		[0x13e10780,0],
		[0x13e10784,0],
		[0x13e10788,0],
		[0x13e1078c,0],
		[0x13e10798,0],
		[0x13e1079c,0],
		[0x13e107a0,0],
		[0x13e107a4,0],
		[0x13e107a8,0],
		[0x13e107ac,0],
		[0x13e107b0,0],
		[0x13e107b4,0],
		[0x13e107c8,0],
		[0x13e107cc,0],
		[0x13e107d0,0],
		[0x13e107d4,0],
		[0x13e107d8,0],
		[0x13e107dc,0],
		[0x13e107e0,1],
		[0x13e107e4,0],
		[0x13e107e8,1],
		[0x13e107ec,0],
		[0x13e10be8,0],
		[0x13e10bec,0],
		[0x13e10bf0,0],
		[0x13e10bf4,0],
		[0x13e10c0c,0],
		[0x13e10c10,0],
		[0x13e10c14,0],
		[0x13e10c18,0],
		[0x13e10c1c,0],
		[0x13e10c20,0],
		[0x13e10c24,0],
		[0x13e10c28,0],
		[0x13e10c2c,0],
		[0x13e10c40,140],
		[0x13e10c44,0],
		[0x13e10c68,0],
		[0x13e10c6c,0],
		[0x13e10c70,0],
		[0x13e10c74,0],
		[0x13e10c78,0],
		[0x13e10c7c,0],
		[0x13e10c80,0],
		[0x13e10c84,0],
		[0x13e10c90,0],
		[0x13e10c94,0],
		[0x13e10c98,0],
		[0x13e10c9c,0],
		[0x13e10ca0,0],
		[0x13e10ca4,0],
		[0x13e10ca8,0],
		[0x13e10cac,0],
		[0x13e10cb0,0],
		[0x13e10cb4,0],
		[0x13e10cb8,0],
		[0x13e10cbc,0],
		[0x13e10cc0,0],
		[0x13e10cc4,0],
		[0x13e10cc8,0],
		[0x13e10ccc,0],
		[0x13e10cd0,0],
		[0x13e10cd4,0],
		[0x13e10cd8,0],
		[0x13e10cdc,0],
		[0x13e10ce0,0],
		[0x13e10ce4,0],
		[0x13e10ce8,0],
		[0x13e10cec,0],
		[0x13e10cf0,0],
		[0x13e10cf4,0],
		[0x13e10cf8,0],
		[0x13e10cfc,0],
		[0x13e10d08,0],
		[0x13e10d0c,0],
		[0x13e10d10,0],
		[0x13e10d14,0],
		[0x13e10d18,0],
		[0x13e10d1c,0],
		[0x13e10d20,0],
		[0x13e10d24,0],
		[0x13e10d28,0],
		[0x13e10d2c,0],
		[0x13e10d30,0],
		[0x13e10d34,0],
		[0x13e10d98,0],
		[0x13e10d9c,0],
		[0x13e10da0,0],
		[0x13e10da4,0],
		[0x13e10db0,0],
		[0x13e10db4,0],
		[0x13e10db8,0],
		[0x13e10dbc,0],
		[0x13e10dc8,0],
		[0x13e10dcc,0],
		[0x13e10dd0,0],
		[0x13e10dd4,0],
		[0x13e10e00,0],
		[0x13e10e04,0],
		[0x13e10e08,0],
		[0x13e10e0c,0],
		[0x13e10e10,0],
		[0x13e10e14,0],
		[0x13e10e18,0],
		[0x13e10e1c,0],
		[0x13e10e24,0],
		[0x13e10e28,0],
		[0x13e10e2c,0],
		[0x13e10e30,0],
		[0x13e10e34,0],
		[0x13e10e38,0],
		[0x13e10e3c,0],
		[0x13e10e40,0],
		[0x13e10e44,0],
		[0x13e10e48,0],
		[0x13e10e4c,0],
		[0x13e10e50,19398],
		[0x13e10e54,0],
		[0x13e10e58,0],
		[0x13e10e5c,0],
		[0x13e10e60,0],
		[0x13e10e64,0],
		[0x13e10e68,0],
		[0x13e10e6c,0],
		[0x13e10e70,0],
		[0x13e10e74,0],
		[0x13e10e78,0],
		[0x13e10e7c,0],
		[0x13e10e80,0],
		[0x13e10e84,0],
		[0x13e10e88,0],
		[0x13e10e8c,0],
		[0x13e10ec0,0],
		[0x13e10ec4,0],
		[0x13e10ee0,48],
		[0x13e10ee4,0],
		[0x13e10ee8,0],
		[0x13e10eec,0],
		[0x13e10ef0,0],
		[0x13e10ef4,0],
		[0x13e10ef8,0],
		[0x13e10efc,0],
		[0x13e10f00,0],
		[0x13e10f04,0],
		[0x13e10f08,0],
		[0x13e10f0c,0],
		[0x13e10f38,0],
		[0x13e10f3c,0],
		[0x13e10f40,0],
		[0x13e10f44,0],
		[0x13e10f48,0],
		[0x13e10f4c,0],
		[0x13e10f60,0],
		[0x13e10f64,0],
		[0x13e10f68,0],
		[0x13e10f6c,0],
		[0x13e10f70,0],
		[0x13e10f74,0],
		[0x13e10f78,0],
		[0x13e10f7c,0],
		[0x13e10f80,0],
		[0x13e10f84,0],
		[0x13e10f88,0],
		[0x13e10f8c,0],
		[0x13e10f98,0],
		[0x13e10f9c,0],
		[0x13e10fa0,0],
		[0x13e10fa4,0],
		[0x13e10fa8,0],
		[0x13e10fac,0],
		[0x13e10fb0,0],
		[0x13e10fb4,0],
		[0x13e10fb8,0],
		[0x13e10fbc,0],
		[0x13e10fc0,0],
		[0x13e10fc4,0],
		[0x13e10fc8,0],
		[0x13e10fcc,0],
		[0x13e10fd0,0],
		[0x13e10fd4,0],
		[0x13e10fd8,0],
		[0x13e10fdc,0],
		[0x13e10fe0,0],
		[0x13e10fe4,0],
		[0x13e10fe8,0],
		[0x13e10fec,0],
		[0x13e10ff0,0],
		[0x13e10ff4,0],
		[0x13e10ff8,0],
		[0x13e10ffc,0],
		[0x13e11000,0],
		[0x13e11004,0],
		[0x13e11008,0],
		[0x13e1100c,0],
		[0x13e11010,0],
		[0x13e11014,0],
		[0x13e11018,0],
		[0x13e1101c,0],
		[0x13e11020,0],
		[0x13e11024,0],
		[0x13e11028,0],
		[0x13e1102c,0],
		[0x13e11030,0],
		[0x13e11034,0],
		[0x13e11038,0],
		[0x13e1103c,0],
		[0x13e11040,0],
		[0x13e11044,0],
		[0x13e11048,0],
		[0x13e1104c,0],
		[0x13e11050,0],
		[0x13e11054,0],
		[0x13e11058,0],
		[0x13e1105c,0],
		[0x13e11060,0],
		[0x13e11064,0],
		[0x13e110e8,0],
		[0x13e110ec,0],
		[0x13e110f0,0],
		[0x13e110f4,0],
		[0x13e11100,0],
		[0x13e11104,0],
		[0x13e11108,0],
		[0x13e1110c,0],
		[0x13e11110,0],
		[0x13e11114,0],
		[0x13e11118,0],
		[0x13e1111c,0],
		[0x13e11120,0],
		[0x13e11124,0],
		[0x13e11128,0],
		[0x13e1112c,0],
		[0x13e11130,0],
		[0x13e11134,0],
		[0x13e11138,0],
		[0x13e1113c,0],
		[0x13e11140,0],
		[0x13e11144,0],
		[0x13e11148,0],
		[0x13e1114c,0],
		[0x13e11150,0],
		[0x13e11154,0],
		[0x13e11158,0],
		[0x13e1115c,0],
		[0x13e11180,0],
		[0x13e11184,0],
		[0x13e11188,0],
		[0x13e1118c,0],
		[0x13e11190,1000],
		[0x13e11194,0],
		[0x13e1119c,0],
		[0x13e111a0,0],
		[0x13e111a4,0],
		[0x13e111a8,0],
		[0x13e111ac,0],
		[0x13e111b0,0],
		[0x13e111b4,0],
		[0x13e111b8,0],
		[0x13e111bc,0],
		[0x13e111c8,0],
		[0x13e111cc,0],
		[0x13e111d0,0],
		[0x13e111d4,0],
		[0x13e111d8,0],
		[0x13e111dc,0],
		[0x13e111e0,0],
		[0x13e111e4,0],
		[0x13e111e8,0],
		[0x13e111ec,0],
		[0x13e111f0,0],
		[0x13e111f4,0],
		[0x13e111f8,0],
		[0x13e111fc,0],
		[0x13e11200,0],
		[0x13e11204,0],
		[0x13e11208,0],
		[0x13e1120c,0],
		[0x13e11210,0],
		[0x13e11214,0],
		[0x13e11218,0],
		[0x13e1121c,0],
		[0x13e11220,0],
		[0x13e11224,0],
		[0x13e11228,0],
		[0x13e1122c,0],
		[0x13e11230,0],
		[0x13e11234,0],
		[0x13e11238,0],
		[0x13e1123c,0],
		[0x13e11240,0],
		[0x13e11244,0],
		[0x13e11248,0],
		[0x13e1124c,0],
		[0x13e11250,0],
		[0x13e11254,0],
		[0x13e11258,0],
		[0x13e1125c,0],
		[0x13e11260,0],
		[0x13e11264,0],
		[0x13e11268,0],
		[0x13e1126c,0],
		[0x13e11270,0],
		[0x13e11274,0],
		[0x13e11278,0],
		[0x13e1127c,0],
		[0x13e11280,0],
		[0x13e11284,0],
		[0x13e11288,0],
		[0x13e1128c,0],
		[0x13e11290,0],
		[0x13e11294,0],
		[0x13e11298,0],
		[0x13e1129c,0],
		[0x13e112a0,0],
		[0x13e112a4,0],
		[0x13e112a8,0],
		[0x13e112ac,0],
		[0x13e112b0,0],
		[0x13e112b4,0],
		[0x13e112b8,0],
		[0x13e112bc,0],
		[0x13e112c0,0],
		[0x13e112c4,0],
		[0x13e112c8,0],
		[0x13e112cc,0],
		[0x13e112d0,0],
		[0x13e112d4,0],
		[0x13e112d8,0],
		[0x13e112dc,0],
		[0x13e112e0,0],
		[0x13e112e4,0],
		[0x13e112e8,0],
		[0x13e112ec,0],
		[0x13e112f0,0],
		[0x13e112f4,0],
		[0x13e112f8,0],
		[0x13e112fc,0],
		[0x13e11300,0],
		[0x13e11304,0],
		[0x13e11308,0],
		[0x13e1130c,0],
		[0x13e11310,0],
		[0x13e11314,0],
		[0x13e11318,0],
		[0x13e1131c,0],
		[0x13e11320,0],
		[0x13e11324,0],
		[0x13e11328,0],
		[0x13e1132c,0],
		[0x13e11330,0],
		[0x13e11334,0],
		[0x13e11338,0],
		[0x13e1133c,0],
		[0x13e11340,0],
		[0x13e11344,0],
		[0x13e11348,0],
		[0x13e1134c,0],
		[0x13e11350,0],
		[0x13e11354,0],
		[0x13e11358,0],
		[0x13e1135c,0],
		[0x13e11360,0],
		[0x13e11364,0],
		[0x13e11368,0],
		[0x13e1136c,0],
		[0x13e11370,0],
		[0x13e11374,0],
		[0x13e11378,0],
		[0x13e1137c,0],
		[0x13e11380,0],
		[0x13e11384,0],
		[0x13e11388,0],
		[0x13e1138c,0],
		[0x13e11390,0],
		[0x13e11394,0],
		[0x13e11398,0],
		[0x13e1139c,0],
		[0x13e113a0,0],
		[0x13e113a4,0],
		[0x13e113a8,0],
		[0x13e113ac,0],
		[0x13e113b0,0],
		[0x13e113b4,0],
		[0x13e113b8,0],
		[0x13e113bc,0],
		[0x13e113c0,0],
		[0x13e113c4,0],
		[0x13e113c8,0],
		[0x13e113cc,0],
		[0x13e113d0,0],
		[0x13e113d4,0],
		[0x13e113d8,0],
		[0x13e113dc,0],
		[0x13e113e0,0],
		[0x13e113e4,0],
		[0x13e113e8,0],
		[0x13e113ec,0],
		[0x13e113f0,0],
		[0x13e113f4,0],
		[0x13e113f8,0],
		[0x13e113fc,0],
		[0x13e11400,0],
		[0x13e11404,0],
		[0x13e11408,0],
		[0x13e1140c,0],
		[0x13e11410,0],
		[0x13e11414,0],
		[0x13e11418,0],
		[0x13e1141c,0],
		[0x13e11420,0],
		[0x13e11424,0],
		[0x13e11428,0],
		[0x13e1142c,0],
		[0x13e11430,0],
		[0x13e11434,0],
		[0x13e11438,0],
		[0x13e1143c,0],
		[0x13e11440,0],
		[0x13e11444,0],
		[0x13e11448,0],
		[0x13e1144c,0],
		[0x13e11450,0],
		[0x13e11454,0],
		[0x13e11458,0],
		[0x13e1145c,0],
		[0x13e11460,0],
		[0x13e11464,0],
		[0x13e11468,0],
		[0x13e1146c,0],
		[0x13e11470,0],
		[0x13e11474,0],
		[0x13e11478,0],
		[0x13e1147c,0],
		[0x13e11480,0],
		[0x13e11484,0],
		[0x13e11488,0],
		[0x13e1148c,0],
		[0x13e11490,0],
		[0x13e11494,0],
		[0x13e11498,0],
		[0x13e1149c,0],
		[0x13e114a0,0],
		[0x13e114a4,0],
		[0x13e114a8,0],
		[0x13e114ac,0],
		[0x13e114b0,0],
		[0x13e114b4,0],
		[0x13e114b8,0],
		[0x13e114bc,0],
		[0, 0]
]).
string_val([
		[0x13e10520,120],
		[0x13e10ed8,3418906600723806067],
		[0x13e10ee0,48],
		[0, 0]
]).
:- use_module(library(clpfd)).

isTrue([X, _]):-
    X == 49.

isTrue([_|Tail]):-
    isTrue(Tail).

log(File_name, Name, Addr, Base):-
    Offset #= Addr - Base,
    open(File_name, append, Stream),
    write(Stream, Name),
    write(Stream, ':'),
    write(Stream, Offset),
    nl(Stream),
    close(Stream).

start_query(Base_addr) :- 
    pointer(Ptr),
    string_val(Str),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Real_parent_addr, Real_parent_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    chain([MM2_addr, Real_parent_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    Real_parent_addr #> Comm_addr - 500,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    labeling([enum], [Real_parent_addr, Real_parent_val,  Comm_addr, Comm_val]),
    process_create(path('python'),
                ['subquery.py', Real_parent_val, "task_struct"],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_test(Base_addr) :-
    statistics(real_time, [Start|_]),
    get_time(Current),
    %current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM_addr, MM_val],
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Real_cred_addr, Real_cred_val],
        [Cred_addr, Cred_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM_addr, MM2_addr, Pid_addr, Tgid_addr, Real_parent_addr, Parent_addr , Child_addr, 
           Group_leader_addr, Thread_group_addr, Real_cred_addr, Cred_addr, Comm_addr], #<),
    Tasks_addr #> Base_addr,
    Comm_addr #= Base_addr + 968,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),
    labeling([enum], [Tasks_addr, Tasks_val, Comm_addr, Comm_val, Pid_addr, Tgid_addr]),
    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset).


query_task_struct(Base_addr) :-
    statistics(real_time, [Start|_]),
    get_time(Current),
    %current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM_addr, MM_val],
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Real_cred_addr, Real_cred_val],
        [Cred_addr, Cred_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM_addr, MM2_addr, Pid_addr, Tgid_addr, Real_parent_addr, Parent_addr , Child_addr, 
           Group_leader_addr, Thread_group_addr, Real_cred_addr, Cred_addr, Comm_addr], #<),
    %MM2_addr #> Base_addr + 1000,
    MM2_addr #= MM_addr + 8,
    Tasks_addr #> MM2_addr - 100,

    Tgid_addr #= Pid_addr + 4,
    Real_parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr - 8,
    Child_addr #= Parent_addr + 8,
    %FIXME This may be too strong
    %Children next and prev 16 
    %Sibling next and prev  16
    Group_leader_addr #=< Child_addr +32,
    Cred_addr #= Real_cred_addr + 8,
    /*MM2_addr #= Base_addr + 1160,
    Comm_addr #= Base_addr + 1656,
    Tasks_addr #= Base_addr + 1096,*/


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    label([MM_addr, MM_val]),
    % make query after labeling
    MM2_val #> 0,
    integer(MM2_val),
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val, Comm_addr, Comm_val, Pid_addr, Tgid_addr]),

    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_parent_addr, Real_parent_val, Group_leader_addr, Group_leader_val, Child_addr, Child_val]),
    Real_parent_val #> 0,
    Group_leader_val #> 0,
    query_ts(Real_parent_val, Comm_offset, Tasks_offset),
    %query_list_head(Child_val-16, Comm_offset, Tasks_offset),
    query_ts(Group_leader_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_cred_addr, Real_cred_val, Cred_addr, Cred_val]),
    Cred_val #> 0,
    query_cred(Real_cred_val),
    query_cred(Cred_val),


    get_time(Now),
    Time_past is Now - Current,
    statistics(real_time, [End|_]),

    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    log("./profile/task_struct", "tasks", Tasks_addr, Base_addr),
    log("./profile/task_struct", "active_mm_struct", MM2_addr, Base_addr),
    log("./profile/task_struct", "comm", Comm_addr, Base_addr),
    log("./profile/task_struct", "parent", Parent_addr, Base_addr),
    log("./profile/task_struct", "group_leader", Group_leader_addr, Base_addr),
    log("./profile/task_struct", "cred", Cred_addr, Base_addr),
    log("./profile/task_struct", "pid", Pid_addr, Base_addr),
    log("./profile/task_struct", "task_struct", End, Start),

    print_nl('tasks offset', Tasks_offset),
    print_nl('tasks offset', Tasks_val),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).

query_module(Base_addr) :-
    /* struct list_head list;
       char name[LEN]; 
       struct kernel_param *kp;
       struct module_layout core_layout;
       struct module_layout init_layout; 
       unsigned int core_size, init_size;
       unsigned int init_text_size, core_text_size;
    */
    %get_time(Current),
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [List_addr, List_val],
        [KP_addr, KP_val],
        [Core_base_addr, Core_base_val]
    ]),
    Str_profile = ([
        [Name_addr, Name_val]    
    ]),
    Int_profile = ([
        [Core_size_addr, Core_size_val],
        [Core_text_size_addr, Core_text_size_val],
        [RO_size_addr, RO_size_val],
        [RO_init_size_addr, RO_init_size_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),
    /* Order Invariants */
    chain([List_addr, Name_addr, KP_addr, Core_base_addr, Core_size_addr, 
            Core_text_size_addr, RO_size_addr, RO_init_size_addr], #<),
    RO_init_size_addr - Base_addr #< 1000,
    
    labeling([enum], [Name_addr, Name_val]),
    List_addr #= Name_addr - 16,
    labeling([enum], [List_addr, List_val]),
    Name_offset #= Name_addr - Base_addr,
    List_offset #= List_addr - Base_addr,
    query_list_head(List_val, Name_offset, List_offset),
    KP_val #> 0,
    labeling([enum], [KP_addr, KP_val]),
    query_kernel_param(KP_val),
    Core_size_addr #= Core_base_addr + 8,
    Core_size_val #> 0,
    Core_text_size_addr #= Core_size_addr + 4,
    Core_text_size_val #> 0,
    RO_size_addr #= Core_text_size_addr + 4,
    RO_init_size_addr #= RO_size_addr + 4,

    labeling([enum], [Core_base_addr, Core_size_addr, 
            Core_text_size_addr, RO_size_addr, RO_init_size_addr]),

    %get_time(End),
    statistics(real_time, [End|_]),
    %Time_past is End - Current,
    log("./profile/module", "list", List_addr, Base_addr),
    log("./profile/module", "name", Name_addr, Base_addr),
    log("./profile/module", "kp", KP_addr, Base_addr),
    log("./profile/module", "core_base", Core_base_addr, Base_addr),
    log("./profile/module", "core_size", Core_size_addr, Base_addr),
    log("./profile/module", "core_text_size", Core_text_size_addr, Base_addr),
    log("./profile/module", "module", End, Start).
    %print_nl("Finished, total time", Time_past).


query_mount_hash(Base_addr) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    Ptr_profile = ([
        [Mount_addr, Mount_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Mount_addr #< Base_addr + 150,
    Mount_val #> 0,
    labeling([enum], [Mount_addr, Mount_val]),
    query_mount(Mount_val),
    statistics(real_time, [End|_]),
    log("./profile/mount_hash", "mount", Mount_addr, Base_addr),
    log("./profile/mount_hash", "mount_hash", End, Start).



query_net_device(Base_addr) :- 
    /*
        char             name[NAMSIZ];
        struct list_head dev_list;
        unsigned char    addr_len;
        unsigned int     promiscuity;
        struct in_device *ip_ptr;
    */
    statistics(real_time, [Start|_]),
    %get_time(Current),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Dev_list_addr, Dev_list_val],
        [IP_ptr_addr, IP_ptr_val]
    ]),
    Str_profile = ([
        [Name_addr, Name_val]
    ]),
    Int_profile = ([
        [Promisc_addr, Promisc_val],
        [Addr_len_addr, Addr_len_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),
    /* Hard to determine offsets for addr_len and promisc */
    chain([Name_addr, Dev_list_addr, Addr_len_addr, Promisc_addr, IP_ptr_addr], #<),
    Name_addr #>= Base_addr,
    Name_offset #= Name_addr - Base_addr,
    IP_ptr_addr #< Base_addr + 1000,
    /* dev_list offset can be hardcoded since it remains the same */
    Dev_list_addr #= Base_addr + 80,
    labeling([enum], [Name_addr, Dev_list_addr, Dev_list_val]),
    /* do not have a good constrain to narrow down ip_ptr, use its rough offset
       to reduce the search space. 
     */
    IP_ptr_addr #> Base_addr + 700,
    IP_ptr_val #> 0,
    labeling([enum], [IP_ptr_addr, IP_ptr_val]),
    query_in_device(IP_ptr_val),

    %get_time(End),
    %Time_past is End - Current,
    statistics(real_time, [End|_]),

    log("./profile/net_device", "name", Name_addr, Base_addr),
    log("./profile/net_device", "ip_ptr", IP_ptr_addr, Base_addr),
    log("./profile/net_device", "dev_list", Dev_list_addr, Base_addr),
    log("./profile/net_device", "time", End, Start).


query_inet_sock(Base_addr) :-
    /* As defined in source code, sk and pinet6 has to be 
       the first two members of inet_sock, which means we
       can hardcode this rule.
    */
    /*skc_family at offset 16 short contained in a unsigned number 
     First half of sock_common can be viewed as unchanged, so it's safe to use
       some hardcoded ruels to help pinpoint some offsets.  
    sk_buff_head, two non-zero pointers, one unsigned long, one integer.
    sk_protocol is a unsigned long number after sk_write_buffer, and they have the same offset. */
    %get_time(Current),
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Sk_receive_queue_addr, Sk_receive_queue_val],
        [Sk_receive_queue_prev_addr, Sk_receive_queue_prev_val],
        [Sk_send_head_addr, Sk_send_head_val],
        [Sk_write_queue_addr, Sk_write_queue_val],
        [Sk_write_queue_prev_addr, Sk_write_queue_prev_val]
    ]),
    Ulong_profile = ([
        [Skc_family_addr, Skc_family_val],
        [Sk_protocol_addr, Sk_protocol_val]
    ]),
    Int_profile = ([
        [Sk_rcvlowat_addr, Sk_rcvlowat_val],
        [Receive_lock_addr, Receive_lock_val],
        [Write_lock_addr, Write_lock_val],
        [Qlen_receive_addr, Qlen_receive_val],
        [Qlen_write_addr, Qlen_write_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    tuples_in(Int_profile, Int),

    Sk_protocol_val #> 0,
    Skc_family_addr #= Base_addr + 16,
    Skc_family_val #> 0,
    Sk_receive_queue_val #> 0,
    Sk_receive_queue_prev_val #> 0,
    Sk_write_queue_val #> 0,
    Sk_write_queue_prev_val #> 0,
    chain([Skc_family_addr, Sk_rcvlowat_addr, Sk_receive_queue_addr, Sk_receive_queue_prev_addr, Qlen_receive_addr, Receive_lock_addr,
          Sk_send_head_addr, Sk_write_queue_addr, Sk_write_queue_prev_addr, Qlen_write_addr, Write_lock_addr,
          Sk_protocol_addr], #<),
    /* sock_common is at least 136 */
    Sk_receive_queue_addr #> Base_addr + 136,
    Sk_receive_queue_addr #=< Sk_rcvlowat_addr + 28,
    Sk_protocol_addr #= Sk_write_queue_addr + 160,
    Sk_protocol_addr #< Base_addr + 700,
    Sk_receive_queue_prev_addr #= Sk_receive_queue_addr + 8,
    Qlen_receive_addr #= Sk_receive_queue_prev_addr + 8,
    Receive_lock_addr #= Qlen_receive_addr + 4,
    Sk_write_queue_addr #= Sk_send_head_addr + 8,
    Sk_write_queue_prev_addr #= Sk_write_queue_addr + 8,
    Qlen_write_addr #= Sk_write_queue_prev_addr + 8,
    Write_lock_addr #= Qlen_write_addr + 4,

    labeling([enum], [Skc_family_addr, Sk_receive_queue_addr, Sk_write_queue_addr, Sk_protocol_addr]),

    %get_time(End),
    %Time_past is End - Current,
    statistics(real_time, [End|_]),


    log("./profile/inet_sock", "sk_receive_queue", Sk_receive_queue_addr, Base_addr),
    log("./profile/inet_sock", "Sk_write_queue", Sk_write_queue_addr, Base_addr),
    log("./profile/inet_sock", "Skc_family", Skc_family_addr, Base_addr),
    log("./profile/inet_sock", "Sk_protocol", Sk_protocol_addr, Base_addr),
    log("./profile/inet_sock", "time", End, Start).

query_resource(Base_addr) :-
    /*
        start
        end
        *name
        *parent
        *sibling
        *child -> non-zero
    */
    /* This structure remains unchanged, thus we can have some
       hardcoded rules to help inference. */

    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Name_addr, Name_val],
        [Parent_addr, Parent_val],
        [Sibling_addr, Sibling_val],
        [Child_addr, Child_val]
    ]),
    Ulong_profile = ([
        [End_addr, End_val],
        [Flags_addr, Flags_val]
    ]),
    Int_profile = ([
        [Start_addr, Start_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    tuples_in(Int_profile, Int),

    Child_val #> 0,
    Start_addr #>= Base_addr,
    chain([Start_addr, End_addr, Name_addr, Flags_addr, Parent_addr, Sibling_addr, Child_addr], #<),
    %Name_addr #= Base_addr + 16,
    Child_addr #=< Base_addr + 64,
    labeling([enum], [Start_addr, End_addr, Name_addr, Name_val]),
    query_string_pointer(Name_val),
    Name_offset #= Name_addr - Base_addr,
    labeling([enum], [Child_addr, Child_val]),
    query_name_pointer(Child_val, Name_offset),

    statistics(real_time, [End|_]),


    log("./profile/resource", "Start_addr", Start_addr, Base_addr),
    log("./profile/resource", "End_addr", End_addr, Base_addr),
    log("./profile/resource", "Name_addr", Name_addr, Base_addr),
    log("./profile/resource", "Child_addr", Child_addr, Base_addr),
    log("./profile/resource", "resource", End, Start).


query_neigh_table(Base_addr) :- 
    /* nht at offset 464 */
    pointer(Ptr),
    Ptr_profile = ([
        [Nht_addr, Nht_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Nht_addr #>= Base_addr + 448,
    Nht_addr #=< Base_addr + 472,
    labeling([enum], [Nht_addr, Nht_val]),
    query_neigh_hash_table(Nht_val).


query_seq_operations(Base_addr) :-
    /* Four successive function pointers */
    pointer(Ptr),
    Ptr_profile = ([
        [Start_addr, Start_val],
        [Stop_addr, Stop_val],
        [Next_addr, Next_val],
        [Show_addr, Show_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([Start_addr, Stop_addr, Next_addr, Show_addr], #<),
    Start_addr #= Base_addr,
    Show_addr #= Base_addr + 24,
    Start_val #> 0,
    Stop_val #> 0,
    Next_val #> 0,
    Show_val #> 0.

query_tcp_seq_afinfo(Base_addr) :-
    pointer(Ptr),
    int(Int),
    Ptr_profile = ([
        [Name_addr, Name_val],
        [F_ops_addr, F_ops_val],
        [Ops_addr, Ops_val]
    ]),
    Int_profile = ([
        [Family_addr, Family_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Name_addr #= Base_addr,
    Ops_addr #= Base_addr + 24,
    chain([Name_addr, Family_addr, F_ops_addr, Ops_addr], #<),
    
    labeling([enum], [Name_addr, Name_val]),
    query_string_pointer(Name_val).

query_udp_seq_afinfo(Base_addr) :-
    pointer(Ptr),
    int(Int),
    Ptr_profile = ([
        [Name_addr, Name_val],
        [Udp_table_addr, Udp_table_val],
        [F_ops_addr, F_ops_val],
        [Ops_addr, Ops_val]
    ]),
    Int_profile = ([
        [Family_addr, Family_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Name_addr #= Base_addr,
    Ops_addr #= Base_addr + 32,
    chain([Name_addr, Family_addr, Udp_table_addr, F_ops_addr, Ops_addr], #<),
    
    labeling([enum], [Name_addr, Name_val]),
    query_string_pointer(Name_val).

query_tty_driver(Base_addr) :-
    /* tty_driver remains unchanged, some rules are hardcoded. */
    pointer(Ptr),
    int(Int),
    Ptr_profile = ([
        [Driver_name_addr, Driver_name_val],
        [Name_addr, Name_val],
        [Ttys_addr, Ttys_val],
        [Tty_drivers_addr, Tty_drivers_val]
    ]),
    Int_profile = ([
        [Magic_addr, Magic_val],
        [Kref_addr, Kref_val],
        [Name_base_addr, Name_base_val],
        [Major_addr, Major_val],
        [Minor_start_addr, Minor_start_val],
        [Num_addr, Num_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Magic_addr #= Base_addr,
    Kref_addr #= Magic_addr + 4,
    Num_addr #= Name_base + 12,
    Ttys_addr #= Base_addr + 128,
    Tty_drivers_addr #= Base_addr + 168,
    chain([Magic_addr, Kref_addr, Driver_name_addr, Name_addr, Name_base_addr, Major_addr, Minor_start_addr,
            Num_addr, Ttys_addr, Tty_drivers_addr], #<),
    labeling([enum], [Driver_name_addr, Driver_name_val, Name_addr, Name_val]),
    query_string_pointer(Driver_name_val),
    query_string_pointer(Name_val).

query_proc_dir_entry(Base_addr) :-
    pointer(Ptr),
    int(Int),
    long(Ulg),
    Ptr_profile = ([
        [Proc_iops_addr, Proc_iops_val],
        [Proc_fops_addr, Proc_fops_val]
    ]),
    Int_profile = ([
        [Low_ino_addr, Low_ino_val],
        [Mode_addr, Mode_val],
        [Nlink_addr, Nlink_val],
        [Uid_addr, Uid_val],
        [Gid_addr, Gid_val]
    ]),

    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Low_ino_addr #= Base_addr,
    Gid_addr #= Low_ino_addr + 16,
    Proc_fops_addr #= Proc_iops_addr + 8,
    Proc_fops_addr #=< Base_addr + 40,
    chain([Low_ino_addr, Mode_addr, Nlink_addr, Uid_addr, Gid_addr, Proc_iops_addr, Proc_fops_addr], #<),
    labeling([enum], [Proc_iops_addr, Proc_iops_val, Proc_fops_addr, Proc_fops_val]),
    Proc_fops_val #> 0,
    %Proc_iops_val #> 0,
    %query_inode_operations(Proc_iops_val),
    query_inode_operations(Proc_fops_val).

query_kset(Base_addr) :-
    /* skip */
    1 #= 1.



test(Base_addr) :-
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM2_addr, Pid_addr, Tgid_addr, Parent_addr, Real_parent_addr, Child_addr, 
           Group_leader_addr, Thread_group_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    MM2_addr #> Base_addr + 1000,
    Tasks_addr #> MM2_addr - 100,
    FS_struct_addr #< Base_addr + 3000,
    Tgid_addr #= Pid_addr + 4,
    Parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr + 8,
    Child_addr #= Real_parent_addr +8,
    Group_leader_addr #=< Child_addr +32,
    %Comm_addr #= Base_addr + 2584,
    %Tasks_addr #= Base_addr + 1904,
    %FS_struct_addr #= Base_addr + 2640,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    % make query after labeling
    MM2_val #> 0,
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val,  Comm_addr, Comm_val ]),
    %Tasks_addr #= Base_addr + 2040,
    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    


    get_time(End),
    Time_past is End - Current,
    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    
    print_nl('tasks offset', Tasks_offset),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).


query_neigh_hash_table(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "neigh_hash_table"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_string_pointer(Val) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "string_pointer"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_name_pointer(Val, Name_offset) :-
    process_create(path('python'),
                    ['subquery.py', Val, "name_pointer", Name_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_mount(Base_addr) :- 
    process_create(path('python'),
                    ['subquery.py', Base_addr, "mount"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_mount_struct(Val, Offset) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "mount_struct", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_vfs_mount(Vfsmount_val) :-
    process_create(path('python'),
                    ['subquery.py', Vfsmount_val, "vfs_mount"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_dentry(Dentry_val) :-
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_kernel_param(KP_val) :-
    process_create(path('python'),
                    ['subquery.py', KP_val, "kernel_param"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_in_device(IP_ptr_val) :-
    process_create(path('python'),
                    ['subquery.py', IP_ptr_val, "in_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_inode_operations(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_mm_struct(MM2_val) :-
    process_create(path('python'),
                    ['subquery.py', MM2_val, "mm_struct"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_list_head(Tasks_val, Comm_offset, Tasks_offset) :-
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "list_head", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_ts(Base_addr, Comm_offset, Tasks_offset) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "ts", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_cred(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "cred"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).
query_fs_struct(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "fs_struct"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

print_nl(Name, Content):- 
    print(Name),
    print(':'),
    print(Content),
    nl.
