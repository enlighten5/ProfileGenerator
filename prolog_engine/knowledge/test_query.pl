:- use_module(library(clpfd)).
:- style_check(-singleton).
pointer([
		[0x1c233fc0,0],
		[0x1c233fd0,471928832],
		[0x1c233fe0,0],
		[0x1c233fe8,0],
		[0x1c233ff0,0],
		[0x1c233ff8,0],
		[0x1c234000,0],
		[0x1c234008,0],
		[0x1c234010,0],
		[0x1c234028,436372512],
		[0x1c234030,0],
		[0x1c234038,0],
		[0x1c234058,450988048],
		[0x1c234060,0],
		[0x1c234068,472072296],
		[0x1c234070,472072296],
		[0x1c234078,0],
		[0x1c2340a0,0],
		[0x1c2340a8,0],
		[0x1c2340b0,0],
		[0x1c2340b8,0],
		[0x1c2340c0,0],
		[0x1c2340c8,0],
		[0x1c2340d0,0],
		[0x1c2340d8,0],
		[0x1c2340e0,0],
		[0x1c2340e8,0],
		[0x1c2340f0,0],
		[0x1c2340f8,0],
		[0x1c234100,0],
		[0x1c234108,0],
		[0x1c234110,0],
		[0x1c234118,0],
		[0x1c234120,0],
		[0x1c234128,0],
		[0x1c234130,0],
		[0x1c234138,0],
		[0x1c234140,0],
		[0x1c234148,0],
		[0x1c234150,0],
		[0x1c234158,0],
		[0x1c234160,0],
		[0x1c234168,0],
		[0x1c234170,0],
		[0x1c234178,0],
		[0x1c234180,0],
		[0x1c234188,0],
		[0x1c234190,532791144],
		[0x1c234198,0],
		[0x1c2341a0,0],
		[0x1c2341a8,0],
		[0x1c2341b0,0],
		[0x1c2341b8,0],
		[0x1c2341d8,0],
		[0x1c2341e0,0],
		[0x1c2341e8,0],
		[0x1c2341f0,0],
		[0x1c2341f8,0],
		[0x1c234200,472072704],
		[0x1c234208,472072704],
		[0x1c234210,0],
		[0x1c234218,0],
		[0x1c234228,0],
		[0x1c234230,445814272],
		[0x1c234238,472072760],
		[0x1c234240,0],
		[0x1c234248,0],
		[0x1c234250,0],
		[0x1c234258,0],
		[0x1c234260,0],
		[0x1c234268,0],
		[0x1c234270,0],
		[0x1c234278,0],
		[0x1c234280,0],
		[0x1c234288,0],
		[0x1c234290,472072848],
		[0x1c234298,0],
		[0x1c2342a0,0],
		[0x1c2342a8,0],
		[0x1c2342b0,0],
		[0x1c2342b8,426539824],
		[0x1c2342c0,532759680],
		[0x1c2342c8,0],
		[0x1c2342d0,0],
		[0x1c2342d8,0],
		[0x1c2346e8,0],
		[0x1c2346f0,0],
		[0x1c2346f8,472073976],
		[0x1c234700,472073976],
		[0x1c234728,0],
		[0x1c234730,472063152],
		[0x1c234738,472079472],
		[0x1c234748,472074056],
		[0x1c234750,472074056],
		[0x1c234758,472074072],
		[0x1c234760,472074072],
		[0x1c234768,472074088],
		[0x1c234770,0],
		[0x1c234778,0],
		[0x1c234780,0],
		[0x1c234788,0],
		[0x1c234790,0],
		[0x1c234798,0],
		[0x1c2347a0,0],
		[0x1c2347a8,0],
		[0x1c2347b0,0],
		[0x1c2347b8,0],
		[0x1c2347c0,0],
		[0x1c2347c8,0],
		[0x1c2347d0,0],
		[0x1c2347d8,0],
		[0x1c2347e0,0],
		[0x1c2347e8,0],
		[0x1c2347f8,0],
		[0x1c234800,426339200],
		[0x1c234808,0],
		[0x1c234810,0],
		[0x1c234818,0],
		[0x1c234820,0],
		[0x1c234828,0],
		[0x1c234840,440468672],
		[0x1c234848,440468672],
		[0x1c234850,472063456],
		[0x1c234858,318605472],
		[0x1c234860,440470864],
		[0x1c234868,472079776],
		[0x1c234870,472072128],
		[0x1c234878,472074360],
		[0x1c234880,472074360],
		[0x1c234888,472074376],
		[0x1c234890,472074376],
		[0x1c234898,0],
		[0x1c2348a0,471926152],
		[0x1c2348a8,471926144],
		[0x1c2348b0,0],
		[0x1c2348b8,472063536],
		[0x1c2348c0,440764224],
		[0x1c2348c8,0],
		[0x1c2348d0,472063560],
		[0x1c2348d8,440764224],
		[0x1c2348e0,472074464],
		[0x1c2348e8,472074464],
		[0x1c2348f0,472040464],
		[0x1c2348f8,472040464],
		[0x1c234900,0],
		[0x1c234908,0],
		[0x1c234910,0],
		[0x1c234918,0],
		[0x1c234920,0],
		[0x1c234928,0],
		[0x1c234930,0],
		[0x1c234938,0],
		[0x1c234940,0],
		[0x1c234950,0],
		[0x1c234968,0],
		[0x1c234970,0],
		[0x1c234978,0],
		[0x1c234980,0],
		[0x1c234988,0],
		[0x1c234990,472074640],
		[0x1c234998,472074640],
		[0x1c2349a0,472074656],
		[0x1c2349a8,472074656],
		[0x1c2349b0,472074672],
		[0x1c2349b8,472074672],
		[0x1c2349c0,0],
		[0x1c2349c8,471922560],
		[0x1c2349d0,471922560],
		[0x1c2349e0,0],
		[0x1c2349e8,0],
		[0x1c2349f0,0],
		[0x1c2349f8,472074744],
		[0x1c234a00,472074744],
		[0x1c234a08,0],
		[0x1c234a10,441659264],
		[0x1c234a18,441634304],
		[0x1c234a20,440764896],
		[0x1c234a28,472040448],
		[0x1c234a30,472109696],
		[0x1c234a38,0],
		[0x1c234a40,0],
		[0x1c234a48,0],
		[0x1c234a50,472074832],
		[0x1c234a58,472074832],
		[0x1c234a60,0],
		[0x1c234a68,0],
		[0x1c234a70,0],
		[0x1c234a80,0],
		[0x1c234a88,0],
		[0x1c234a98,0],
		[0x1c234aa0,0],
		[0x1c234aa8,0],
		[0x1c234ab0,0],
		[0x1c234ab8,0],
		[0x1c234ac0,0],
		[0x1c234ac8,0],
		[0x1c234ad0,0],
		[0x1c234ad8,0],
		[0x1c234ae0,0],
		[0x1c234ae8,0],
		[0x1c234af0,0],
		[0x1c234af8,0],
		[0x1c234b00,0],
		[0x1c234b08,0],
		[0x1c234b10,0],
		[0x1c234b18,0],
		[0x1c234b20,0],
		[0x1c234b28,0],
		[0x1c234b30,0],
		[0x1c234b38,0],
		[0x1c234b40,0],
		[0x1c234b48,0],
		[0x1c234b50,0],
		[0x1c234b58,0],
		[0x1c234b60,0],
		[0x1c234b68,0],
		[0x1c234b78,0],
		[0x1c234b80,0],
		[0x1c234b88,0],
		[0x1c234b90,0],
		[0x1c234b98,0],
		[0x1c234ba0,0],
		[0x1c234ba8,0],
		[0x1c234bb0,0],
		[0x1c234bb8,0],
		[0x1c234bc0,0],
		[0x1c234bc8,0],
		[0x1c234bd0,0],
		[0x1c234bd8,0],
		[0x1c234be0,0],
		[0x1c234be8,0],
		[0x1c234c00,441419008],
		[0x1c234c08,472064392],
		[0x1c234c10,441419128],
		[0x1c234c18,0],
		[0x1c234c20,0],
		[0x1c234c28,0],
		[0x1c234c30,472075312],
		[0x1c234c38,472075312],
		[0x1c234c40,0],
		[0x1c234c48,0],
		[0x1c234c50,0],
		[0x1c234c58,0],
		[0x1c234c60,0],
		[0x1c234c68,472075368],
		[0x1c234c70,472075368],
		[0x1c234c78,472075384],
		[0x1c234c80,472075384],
		[0x1c234c88,0],
		[0x1c234ca8,0],
		[0x1c234cb0,0],
		[0x1c234cb8,0],
		[0x1c234cc0,0],
		[0x1c234cc8,472075464],
		[0x1c234cd0,0],
		[0x1c234cd8,0],
		[0x1c234ce0,0],
		[0x1c234ce8,0],
		[0x1c234cf0,0],
		[0x1c234cf8,0],
		[0x1c234d00,0],
		[0x1c234d08,0],
		[0x1c234d10,0],
		[0x1c234d18,0],
		[0x1c234d20,0],
		[0x1c234d28,0],
		[0x1c234d30,0],
		[0x1c234d38,0],
		[0x1c234d40,0],
		[0x1c234d48,0],
		[0x1c234d50,0],
		[0x1c234d58,0],
		[0x1c234d60,0],
		[0x1c234d68,0],
		[0x1c234d70,0],
		[0x1c234d78,0],
		[0x1c234d80,0],
		[0x1c234d88,0],
		[0x1c234d90,0],
		[0x1c234d98,0],
		[0x1c234da0,0],
		[0x1c234da8,0],
		[0x1c234db0,0],
		[0x1c234db8,0],
		[0x1c234dc0,0],
		[0x1c234dc8,0],
		[0x1c234dd0,0],
		[0x1c234dd8,0],
		[0x1c234de0,0],
		[0x1c234de8,0],
		[0x1c234df0,0],
		[0x1c234df8,0],
		[0x1c234e00,0],
		[0x1c234e08,0],
		[0x1c234e10,0],
		[0x1c234e18,0],
		[0x1c234e20,0],
		[0x1c234e28,0],
		[0x1c234e30,0],
		[0x1c234e38,0],
		[0x1c234e40,0],
		[0x1c234e48,0],
		[0x1c234e50,0],
		[0x1c234e58,0],
		[0x1c234e60,0],
		[0x1c234e68,0],
		[0x1c234e70,0],
		[0x1c234e78,0],
		[0x1c234e80,0],
		[0x1c234e88,0],
		[0x1c234e90,0],
		[0x1c234e98,0],
		[0x1c234ea0,0],
		[0x1c234ea8,0],
		[0x1c234eb0,0],
		[0x1c234eb8,0],
		[0x1c234ec0,0],
		[0x1c234ec8,0],
		[0x1c234ed0,0],
		[0x1c234ed8,0],
		[0x1c234ee0,0],
		[0x1c234ee8,0],
		[0x1c234ef0,0],
		[0x1c234ef8,0],
		[0x1c234f00,0],
		[0x1c234f08,0],
		[0x1c234f10,0],
		[0x1c234f18,0],
		[0x1c234f20,0],
		[0x1c234f28,0],
		[0x1c234f30,0],
		[0x1c234f38,0],
		[0x1c234f40,0],
		[0x1c234f48,0],
		[0x1c234f50,0],
		[0x1c234f58,0],
		[0x1c234f60,0],
		[0x1c234f68,0],
		[0x1c234f70,0],
		[0x1c234f78,0],
		[0x1c234f80,0],
		[0x1c234f88,0],
		[0x1c234f90,0],
		[0x1c234f98,0],
		[0x1c234fa0,0],
		[0x1c234fa8,0],
		[0x1c234fb0,0],
		[0x1c234fb8,0],
		[0, 0]
]).
unknown([
		[0x1c233fd8,9148211621003266],
		[0x1c234838,17379276842007915302],
		[0x1c234bf0,18446744069414584322],
		[0, 0]
]).
long([
		[0x1c233fc8,1],
		[0x1c234018,515396075640],
		[0x1c234020,120],
		[0x1c234040,1048576],
		[0x1c234048,4194304],
		[0x1c234050,1],
		[0x1c234080,2543523584],
		[0x1c234088,409161],
		[0x1c234090,1767792042],
		[0x1c234098,403978],
		[0x1c2341c0,2543522816],
		[0x1c2341c8,6144],
		[0x1c2341d0,1374389539840],
		[0x1c234220,25],
		[0x1c2342e0,1],
		[0x1c2342e8,1],
		[0x1c234708,4294967295],
		[0x1c234710,122],
		[0x1c234718,1510973],
		[0x1c234720,2543518401],
		[0x1c234740,140],
		[0x1c2347f0,32],
		[0x1c234830,8589934594],
		[0x1c234948,122],
		[0x1c234958,4000000],
		[0x1c234960,4000000],
		[0x1c234a78,2],
		[0x1c234b70,1],
		[0x1c234bf8,4294967295],
		[0x1c234c90,4294901760],
		[0x1c234c98,1000],
		[0x1c234ca0,4294967295],
		[0, 0]
]).
int([
		[0x1c233fc0,0],
		[0x1c233fc4,0],
		[0x1c233fc8,1],
		[0x1c233fcc,0],
		[0x1c233fd8,2],
		[0x1c233fe0,0],
		[0x1c233fe4,0],
		[0x1c233fe8,0],
		[0x1c233fec,0],
		[0x1c233ff0,0],
		[0x1c233ff4,0],
		[0x1c233ff8,0],
		[0x1c233ffc,0],
		[0x1c234000,0],
		[0x1c234004,0],
		[0x1c234008,0],
		[0x1c23400c,0],
		[0x1c234010,0],
		[0x1c234014,0],
		[0x1c234018,120],
		[0x1c23401c,120],
		[0x1c234020,120],
		[0x1c234024,0],
		[0x1c234030,0],
		[0x1c234034,0],
		[0x1c234038,0],
		[0x1c23403c,0],
		[0x1c234044,0],
		[0x1c23404c,0],
		[0x1c234050,1],
		[0x1c234054,0],
		[0x1c234060,0],
		[0x1c234064,0],
		[0x1c234078,0],
		[0x1c23407c,0],
		[0x1c234084,0],
		[0x1c23408c,0],
		[0x1c234094,0],
		[0x1c23409c,0],
		[0x1c2340a0,0],
		[0x1c2340a4,0],
		[0x1c2340a8,0],
		[0x1c2340ac,0],
		[0x1c2340b0,0],
		[0x1c2340b4,0],
		[0x1c2340b8,0],
		[0x1c2340bc,0],
		[0x1c2340c0,0],
		[0x1c2340c4,0],
		[0x1c2340c8,0],
		[0x1c2340cc,0],
		[0x1c2340d0,0],
		[0x1c2340d4,0],
		[0x1c2340d8,0],
		[0x1c2340dc,0],
		[0x1c2340e0,0],
		[0x1c2340e4,0],
		[0x1c2340e8,0],
		[0x1c2340ec,0],
		[0x1c2340f0,0],
		[0x1c2340f4,0],
		[0x1c2340f8,0],
		[0x1c2340fc,0],
		[0x1c234100,0],
		[0x1c234104,0],
		[0x1c234108,0],
		[0x1c23410c,0],
		[0x1c234110,0],
		[0x1c234114,0],
		[0x1c234118,0],
		[0x1c23411c,0],
		[0x1c234120,0],
		[0x1c234124,0],
		[0x1c234128,0],
		[0x1c23412c,0],
		[0x1c234130,0],
		[0x1c234134,0],
		[0x1c234138,0],
		[0x1c23413c,0],
		[0x1c234140,0],
		[0x1c234144,0],
		[0x1c234148,0],
		[0x1c23414c,0],
		[0x1c234150,0],
		[0x1c234154,0],
		[0x1c234158,0],
		[0x1c23415c,0],
		[0x1c234160,0],
		[0x1c234164,0],
		[0x1c234168,0],
		[0x1c23416c,0],
		[0x1c234170,0],
		[0x1c234174,0],
		[0x1c234178,0],
		[0x1c23417c,0],
		[0x1c234180,0],
		[0x1c234184,0],
		[0x1c234188,0],
		[0x1c23418c,0],
		[0x1c234198,0],
		[0x1c23419c,0],
		[0x1c2341a0,0],
		[0x1c2341a4,0],
		[0x1c2341a8,0],
		[0x1c2341ac,0],
		[0x1c2341b0,0],
		[0x1c2341b4,0],
		[0x1c2341b8,0],
		[0x1c2341bc,0],
		[0x1c2341c4,0],
		[0x1c2341c8,6144],
		[0x1c2341cc,0],
		[0x1c2341d0,5120],
		[0x1c2341d4,320],
		[0x1c2341d8,0],
		[0x1c2341dc,0],
		[0x1c2341e0,0],
		[0x1c2341e4,0],
		[0x1c2341e8,0],
		[0x1c2341ec,0],
		[0x1c2341f0,0],
		[0x1c2341f4,0],
		[0x1c2341f8,0],
		[0x1c2341fc,0],
		[0x1c234210,0],
		[0x1c234214,0],
		[0x1c234218,0],
		[0x1c23421c,0],
		[0x1c234220,25],
		[0x1c234224,0],
		[0x1c234228,0],
		[0x1c23422c,0],
		[0x1c234240,0],
		[0x1c234244,0],
		[0x1c234248,0],
		[0x1c23424c,0],
		[0x1c234250,0],
		[0x1c234254,0],
		[0x1c234258,0],
		[0x1c23425c,0],
		[0x1c234260,0],
		[0x1c234264,0],
		[0x1c234268,0],
		[0x1c23426c,0],
		[0x1c234270,0],
		[0x1c234274,0],
		[0x1c234278,0],
		[0x1c23427c,0],
		[0x1c234280,0],
		[0x1c234284,0],
		[0x1c234288,0],
		[0x1c23428c,0],
		[0x1c234298,0],
		[0x1c23429c,0],
		[0x1c2342a0,0],
		[0x1c2342a4,0],
		[0x1c2342a8,0],
		[0x1c2342ac,0],
		[0x1c2342b0,0],
		[0x1c2342b4,0],
		[0x1c2342c8,0],
		[0x1c2342cc,0],
		[0x1c2342d0,0],
		[0x1c2342d4,0],
		[0x1c2342d8,0],
		[0x1c2342dc,0],
		[0x1c2342e0,1],
		[0x1c2342e4,0],
		[0x1c2342e8,1],
		[0x1c2342ec,0],
		[0x1c2346e8,0],
		[0x1c2346ec,0],
		[0x1c2346f0,0],
		[0x1c2346f4,0],
		[0x1c23470c,0],
		[0x1c234710,122],
		[0x1c234714,0],
		[0x1c23471c,0],
		[0x1c234724,0],
		[0x1c234728,0],
		[0x1c23472c,0],
		[0x1c234740,140],
		[0x1c234744,0],
		[0x1c234770,0],
		[0x1c234774,0],
		[0x1c234778,0],
		[0x1c23477c,0],
		[0x1c234780,0],
		[0x1c234784,0],
		[0x1c234788,0],
		[0x1c23478c,0],
		[0x1c234790,0],
		[0x1c234794,0],
		[0x1c234798,0],
		[0x1c23479c,0],
		[0x1c2347a0,0],
		[0x1c2347a4,0],
		[0x1c2347a8,0],
		[0x1c2347ac,0],
		[0x1c2347b0,0],
		[0x1c2347b4,0],
		[0x1c2347b8,0],
		[0x1c2347bc,0],
		[0x1c2347c0,0],
		[0x1c2347c4,0],
		[0x1c2347c8,0],
		[0x1c2347cc,0],
		[0x1c2347d0,0],
		[0x1c2347d4,0],
		[0x1c2347d8,0],
		[0x1c2347dc,0],
		[0x1c2347e0,0],
		[0x1c2347e4,0],
		[0x1c2347e8,0],
		[0x1c2347ec,0],
		[0x1c2347f0,32],
		[0x1c2347f4,0],
		[0x1c2347f8,0],
		[0x1c2347fc,0],
		[0x1c234808,0],
		[0x1c23480c,0],
		[0x1c234810,0],
		[0x1c234814,0],
		[0x1c234818,0],
		[0x1c23481c,0],
		[0x1c234820,0],
		[0x1c234824,0],
		[0x1c234828,0],
		[0x1c23482c,0],
		[0x1c234830,2],
		[0x1c234834,2],
		[0x1c234898,0],
		[0x1c23489c,0],
		[0x1c2348b0,0],
		[0x1c2348b4,0],
		[0x1c2348c8,0],
		[0x1c2348cc,0],
		[0x1c234900,0],
		[0x1c234904,0],
		[0x1c234908,0],
		[0x1c23490c,0],
		[0x1c234910,0],
		[0x1c234914,0],
		[0x1c234918,0],
		[0x1c23491c,0],
		[0x1c234920,0],
		[0x1c234924,0],
		[0x1c234928,0],
		[0x1c23492c,0],
		[0x1c234930,0],
		[0x1c234934,0],
		[0x1c234938,0],
		[0x1c23493c,0],
		[0x1c234940,0],
		[0x1c234944,0],
		[0x1c234948,122],
		[0x1c23494c,0],
		[0x1c234950,0],
		[0x1c234954,0],
		[0x1c23495c,0],
		[0x1c234964,0],
		[0x1c234968,0],
		[0x1c23496c,0],
		[0x1c234970,0],
		[0x1c234974,0],
		[0x1c234978,0],
		[0x1c23497c,0],
		[0x1c234980,0],
		[0x1c234984,0],
		[0x1c234988,0],
		[0x1c23498c,0],
		[0x1c2349c0,0],
		[0x1c2349c4,0],
		[0x1c2349e0,0],
		[0x1c2349e4,0],
		[0x1c2349e8,0],
		[0x1c2349ec,0],
		[0x1c2349f0,0],
		[0x1c2349f4,0],
		[0x1c234a08,0],
		[0x1c234a0c,0],
		[0x1c234a38,0],
		[0x1c234a3c,0],
		[0x1c234a40,0],
		[0x1c234a44,0],
		[0x1c234a48,0],
		[0x1c234a4c,0],
		[0x1c234a60,0],
		[0x1c234a64,0],
		[0x1c234a68,0],
		[0x1c234a6c,0],
		[0x1c234a70,0],
		[0x1c234a74,0],
		[0x1c234a78,2],
		[0x1c234a7c,0],
		[0x1c234a80,0],
		[0x1c234a84,0],
		[0x1c234a88,0],
		[0x1c234a8c,0],
		[0x1c234a98,0],
		[0x1c234a9c,0],
		[0x1c234aa0,0],
		[0x1c234aa4,0],
		[0x1c234aa8,0],
		[0x1c234aac,0],
		[0x1c234ab0,0],
		[0x1c234ab4,0],
		[0x1c234ab8,0],
		[0x1c234abc,0],
		[0x1c234ac0,0],
		[0x1c234ac4,0],
		[0x1c234ac8,0],
		[0x1c234acc,0],
		[0x1c234ad0,0],
		[0x1c234ad4,0],
		[0x1c234ad8,0],
		[0x1c234adc,0],
		[0x1c234ae0,0],
		[0x1c234ae4,0],
		[0x1c234ae8,0],
		[0x1c234aec,0],
		[0x1c234af0,0],
		[0x1c234af4,0],
		[0x1c234af8,0],
		[0x1c234afc,0],
		[0x1c234b00,0],
		[0x1c234b04,0],
		[0x1c234b08,0],
		[0x1c234b0c,0],
		[0x1c234b10,0],
		[0x1c234b14,0],
		[0x1c234b18,0],
		[0x1c234b1c,0],
		[0x1c234b20,0],
		[0x1c234b24,0],
		[0x1c234b28,0],
		[0x1c234b2c,0],
		[0x1c234b30,0],
		[0x1c234b34,0],
		[0x1c234b38,0],
		[0x1c234b3c,0],
		[0x1c234b40,0],
		[0x1c234b44,0],
		[0x1c234b48,0],
		[0x1c234b4c,0],
		[0x1c234b50,0],
		[0x1c234b54,0],
		[0x1c234b58,0],
		[0x1c234b5c,0],
		[0x1c234b60,0],
		[0x1c234b64,0],
		[0x1c234b68,0],
		[0x1c234b6c,0],
		[0x1c234b70,1],
		[0x1c234b74,0],
		[0x1c234b78,0],
		[0x1c234b7c,0],
		[0x1c234b80,0],
		[0x1c234b84,0],
		[0x1c234b88,0],
		[0x1c234b8c,0],
		[0x1c234b90,0],
		[0x1c234b94,0],
		[0x1c234b98,0],
		[0x1c234b9c,0],
		[0x1c234ba0,0],
		[0x1c234ba4,0],
		[0x1c234ba8,0],
		[0x1c234bac,0],
		[0x1c234bb0,0],
		[0x1c234bb4,0],
		[0x1c234bb8,0],
		[0x1c234bbc,0],
		[0x1c234bc0,0],
		[0x1c234bc4,0],
		[0x1c234bc8,0],
		[0x1c234bcc,0],
		[0x1c234bd0,0],
		[0x1c234bd4,0],
		[0x1c234bd8,0],
		[0x1c234bdc,0],
		[0x1c234be0,0],
		[0x1c234be4,0],
		[0x1c234be8,0],
		[0x1c234bec,0],
		[0x1c234bf0,2],
		[0x1c234bfc,0],
		[0x1c234c18,0],
		[0x1c234c1c,0],
		[0x1c234c20,0],
		[0x1c234c24,0],
		[0x1c234c28,0],
		[0x1c234c2c,0],
		[0x1c234c40,0],
		[0x1c234c44,0],
		[0x1c234c48,0],
		[0x1c234c4c,0],
		[0x1c234c50,0],
		[0x1c234c54,0],
		[0x1c234c58,0],
		[0x1c234c5c,0],
		[0x1c234c60,0],
		[0x1c234c64,0],
		[0x1c234c88,0],
		[0x1c234c8c,0],
		[0x1c234c94,0],
		[0x1c234c98,1000],
		[0x1c234c9c,0],
		[0x1c234ca4,0],
		[0x1c234ca8,0],
		[0x1c234cac,0],
		[0x1c234cb0,0],
		[0x1c234cb4,0],
		[0x1c234cb8,0],
		[0x1c234cbc,0],
		[0x1c234cc0,0],
		[0x1c234cc4,0],
		[0x1c234cd0,0],
		[0x1c234cd4,0],
		[0x1c234cd8,0],
		[0x1c234cdc,0],
		[0x1c234ce0,0],
		[0x1c234ce4,0],
		[0x1c234ce8,0],
		[0x1c234cec,0],
		[0x1c234cf0,0],
		[0x1c234cf4,0],
		[0x1c234cf8,0],
		[0x1c234cfc,0],
		[0x1c234d00,0],
		[0x1c234d04,0],
		[0x1c234d08,0],
		[0x1c234d0c,0],
		[0x1c234d10,0],
		[0x1c234d14,0],
		[0x1c234d18,0],
		[0x1c234d1c,0],
		[0x1c234d20,0],
		[0x1c234d24,0],
		[0x1c234d28,0],
		[0x1c234d2c,0],
		[0x1c234d30,0],
		[0x1c234d34,0],
		[0x1c234d38,0],
		[0x1c234d3c,0],
		[0x1c234d40,0],
		[0x1c234d44,0],
		[0x1c234d48,0],
		[0x1c234d4c,0],
		[0x1c234d50,0],
		[0x1c234d54,0],
		[0x1c234d58,0],
		[0x1c234d5c,0],
		[0x1c234d60,0],
		[0x1c234d64,0],
		[0x1c234d68,0],
		[0x1c234d6c,0],
		[0x1c234d70,0],
		[0x1c234d74,0],
		[0x1c234d78,0],
		[0x1c234d7c,0],
		[0x1c234d80,0],
		[0x1c234d84,0],
		[0x1c234d88,0],
		[0x1c234d8c,0],
		[0x1c234d90,0],
		[0x1c234d94,0],
		[0x1c234d98,0],
		[0x1c234d9c,0],
		[0x1c234da0,0],
		[0x1c234da4,0],
		[0x1c234da8,0],
		[0x1c234dac,0],
		[0x1c234db0,0],
		[0x1c234db4,0],
		[0x1c234db8,0],
		[0x1c234dbc,0],
		[0x1c234dc0,0],
		[0x1c234dc4,0],
		[0x1c234dc8,0],
		[0x1c234dcc,0],
		[0x1c234dd0,0],
		[0x1c234dd4,0],
		[0x1c234dd8,0],
		[0x1c234ddc,0],
		[0x1c234de0,0],
		[0x1c234de4,0],
		[0x1c234de8,0],
		[0x1c234dec,0],
		[0x1c234df0,0],
		[0x1c234df4,0],
		[0x1c234df8,0],
		[0x1c234dfc,0],
		[0x1c234e00,0],
		[0x1c234e04,0],
		[0x1c234e08,0],
		[0x1c234e0c,0],
		[0x1c234e10,0],
		[0x1c234e14,0],
		[0x1c234e18,0],
		[0x1c234e1c,0],
		[0x1c234e20,0],
		[0x1c234e24,0],
		[0x1c234e28,0],
		[0x1c234e2c,0],
		[0x1c234e30,0],
		[0x1c234e34,0],
		[0x1c234e38,0],
		[0x1c234e3c,0],
		[0x1c234e40,0],
		[0x1c234e44,0],
		[0x1c234e48,0],
		[0x1c234e4c,0],
		[0x1c234e50,0],
		[0x1c234e54,0],
		[0x1c234e58,0],
		[0x1c234e5c,0],
		[0x1c234e60,0],
		[0x1c234e64,0],
		[0x1c234e68,0],
		[0x1c234e6c,0],
		[0x1c234e70,0],
		[0x1c234e74,0],
		[0x1c234e78,0],
		[0x1c234e7c,0],
		[0x1c234e80,0],
		[0x1c234e84,0],
		[0x1c234e88,0],
		[0x1c234e8c,0],
		[0x1c234e90,0],
		[0x1c234e94,0],
		[0x1c234e98,0],
		[0x1c234e9c,0],
		[0x1c234ea0,0],
		[0x1c234ea4,0],
		[0x1c234ea8,0],
		[0x1c234eac,0],
		[0x1c234eb0,0],
		[0x1c234eb4,0],
		[0x1c234eb8,0],
		[0x1c234ebc,0],
		[0x1c234ec0,0],
		[0x1c234ec4,0],
		[0x1c234ec8,0],
		[0x1c234ecc,0],
		[0x1c234ed0,0],
		[0x1c234ed4,0],
		[0x1c234ed8,0],
		[0x1c234edc,0],
		[0x1c234ee0,0],
		[0x1c234ee4,0],
		[0x1c234ee8,0],
		[0x1c234eec,0],
		[0x1c234ef0,0],
		[0x1c234ef4,0],
		[0x1c234ef8,0],
		[0x1c234efc,0],
		[0x1c234f00,0],
		[0x1c234f04,0],
		[0x1c234f08,0],
		[0x1c234f0c,0],
		[0x1c234f10,0],
		[0x1c234f14,0],
		[0x1c234f18,0],
		[0x1c234f1c,0],
		[0x1c234f20,0],
		[0x1c234f24,0],
		[0x1c234f28,0],
		[0x1c234f2c,0],
		[0x1c234f30,0],
		[0x1c234f34,0],
		[0x1c234f38,0],
		[0x1c234f3c,0],
		[0x1c234f40,0],
		[0x1c234f44,0],
		[0x1c234f48,0],
		[0x1c234f4c,0],
		[0x1c234f50,0],
		[0x1c234f54,0],
		[0x1c234f58,0],
		[0x1c234f5c,0],
		[0x1c234f60,0],
		[0x1c234f64,0],
		[0x1c234f68,0],
		[0x1c234f6c,0],
		[0x1c234f70,0],
		[0x1c234f74,0],
		[0x1c234f78,0],
		[0x1c234f7c,0],
		[0x1c234f80,0],
		[0x1c234f84,0],
		[0x1c234f88,0],
		[0x1c234f8c,0],
		[0x1c234f90,0],
		[0x1c234f94,0],
		[0x1c234f98,0],
		[0x1c234f9c,0],
		[0x1c234fa0,0],
		[0x1c234fa4,0],
		[0x1c234fa8,0],
		[0x1c234fac,0],
		[0x1c234fb0,0],
		[0x1c234fb4,0],
		[0x1c234fb8,0],
		[0x1c234fbc,0],
		[0, 0]
]).
string_val([
		[0x1c2349d8,7234013989802898539],
		[0, 0]
]).
:- use_module(library(clpfd)).

isTrue([X, _]):-
    X == 49.

isTrue([_|Tail]):-
    isTrue(Tail).

log(File_name, Name, Addr, Base):-
    Offset #= Addr - Base,
    open(File_name, append, Stream),
    write(Stream, Name),
    write(Stream, ':'),
    write(Stream, Offset),
    nl(Stream),
    close(Stream).

start_query(Base_addr) :- 
    pointer(Ptr),
    string_val(Str),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Real_parent_addr, Real_parent_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    chain([MM2_addr, Real_parent_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    Real_parent_addr #> Comm_addr - 500,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    labeling([enum], [Real_parent_addr, Real_parent_val,  Comm_addr, Comm_val]),
    process_create(path('python'),
                ['subquery.py', Real_parent_val, "task_struct"],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

    

query_task_struct(Base_addr) :-
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM_addr, MM_val],
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Real_cred_addr, Real_cred_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM_addr, MM2_addr, Pid_addr, Tgid_addr, Real_parent_addr, Parent_addr , Child_addr, 
           Group_leader_addr, Thread_group_addr, Real_cred_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    %MM2_addr #> Base_addr + 1000,
    MM2_addr #= MM_addr + 8,
    Tasks_addr #> MM2_addr - 100,
    %FS_struct_addr #< Base_addr + 4000,
    Tgid_addr #= Pid_addr + 4,
    Real_parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr - 8,
    Child_addr #= Parent_addr + 8,
    %FIXME This may be too strong
    %Children next and prev 16 
    %Sibling next and prev  16
    Group_leader_addr #=< Child_addr +32,
    Cred_addr #= Real_cred_addr + 8,
    /*MM2_addr #= Base_addr + 1160,
    Comm_addr #= Base_addr + 1656,
    Tasks_addr #= Base_addr + 1096,*/
    %FS_struct_addr #= Base_addr + 2640,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    label([MM_addr, MM_val]),
    % make query after labeling
    MM2_val #> 0,
    integer(MM2_val),
    %Is it safe to do this?
    %query_mm_struct(MM_val),
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val,  Comm_addr, Comm_val, Pid_addr, Tgid_addr ]),

    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_parent_addr, Real_parent_val, Group_leader_addr, Group_leader_val, Child_addr, Child_val]),
    Real_parent_val #> 0,
    Group_leader_val #> 0,
    query_ts(Real_parent_val, Comm_offset, Tasks_offset),
    %query_list_head(Child_val-16, Comm_offset, Tasks_offset),
    query_ts(Group_leader_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_cred_addr, Real_cred_val, Cred_addr, Cred_val]),
    Cred_val #> 0,
    query_cred(Real_cred_val),
    query_cred(Cred_val),
/*
    labeling([enum], [FS_struct_addr, FS_struct_val]),
    FS_struct_val #> 0,
    %query_fs_struct(FS_struct_val),
*/


    get_time(End),
    Time_past is End - Current,
    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    log("profile.txt", "tasks", Tasks_addr, Base_addr),
    log("profile.txt", "mm_struct", MM2_addr, Base_addr),
    log("profile.txt", "comm", Comm_addr, Base_addr),
    log("profile.txt", "parent", Parent_addr, Base_addr),
    log("profile.txt", "group_leader", Group_leader_addr, Base_addr),
    log("profile.txt", "cred", Cred_addr, Base_addr),
    log("profile.txt", "pid", Pid_addr, Base_addr),


    
    print_nl('tasks offset', Tasks_offset),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).


test(Base_addr) :-
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM2_addr, Pid_addr, Tgid_addr, Parent_addr, Real_parent_addr, Child_addr, 
           Group_leader_addr, Thread_group_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    MM2_addr #> Base_addr + 1000,
    Tasks_addr #> MM2_addr - 100,
    FS_struct_addr #< Base_addr + 3000,
    Tgid_addr #= Pid_addr + 4,
    Parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr + 8,
    Child_addr #= Real_parent_addr +8,
    Group_leader_addr #=< Child_addr +32,
    %Comm_addr #= Base_addr + 2584,
    %Tasks_addr #= Base_addr + 1904,
    %FS_struct_addr #= Base_addr + 2640,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    % make query after labeling
    MM2_val #> 0,
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val,  Comm_addr, Comm_val ]),
    %Tasks_addr #= Base_addr + 2040,
    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    


    get_time(End),
    Time_past is End - Current,
    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    
    print_nl('tasks offset', Tasks_offset),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).



query_mm_struct(MM2_val) :-
    process_create(path('python'),
                    ['subquery.py', MM2_val, "mm_struct"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_list_head(Tasks_val, Comm_offset, Tasks_offset) :-
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "list_head", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_ts(Base_addr, Comm_offset, Tasks_offset) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "ts", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_cred(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "cred"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).
query_fs_struct(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "fs_struct"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

print_nl(Name, Content):- 
    print(Name),
    print(':'),
    print(Content),
    nl.
