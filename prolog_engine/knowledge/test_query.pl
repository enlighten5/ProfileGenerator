:- use_module(library(clpfd)).
:- style_check(-singleton).
pointer([
		[0x1a532f90,0],
		[0x1a532f98,518898080],
		[0x1a532fa0,400681792],
		[0x1a532fa8,518898080],
		[0x1a532fb0,400681792],
		[0x1a532fb8,0],
		[0x1a532fc0,441659008],
		[0x1a532fc8,441659488],
		[0x1a532fd0,442551968],
		[0x1a532fd8,439190329],
		[0x1a532fe0,441624384],
		[0x1a532fe8,441772384],
		[0x1a532ff0,441659536],
		[0x1a532ff8,441659056],
		[0x1a533008,441454688],
		[0x1a533010,439070651],
		[0x1a533018,0],
		[0x1a533020,0],
		[0x1a533028,441659648],
		[0x1a533038,0],
		[0x1a533040,0],
		[0x1a533048,0],
		[0x1a533050,0],
		[0x1a533058,0],
		[0x1a533060,441659328],
		[0x1a533068,441660192],
		[0x1a533070,442552064],
		[0x1a533078,439190344],
		[0x1a533080,441624544],
		[0x1a533088,441772544],
		[0x1a533090,441660240],
		[0x1a533098,441659376],
		[0x1a5330a8,441454720],
		[0x1a5330b0,469785888],
		[0x1a5330b8,0],
		[0x1a5330c0,0],
		[0x1a5330c8,441659648],
		[0x1a5330d8,0],
		[0x1a5330e0,0],
		[0x1a5330e8,0],
		[0x1a5330f0,0],
		[0x1a5330f8,0],
		[0x1a533100,439190360],
		[0x1a533110,441659728],
		[0x1a533118,441659712],
		[0x1a533120,473954032],
		[0x1a533128,473952400],
		[0x1a533130,441659488],
		[0x1a533138,441659328],
		[0x1a533140,439420987],
		[0x1a533148,439190370],
		[0x1a533150,438952890],
		[0x1a533158,439190375],
		[0x1a533160,0],
		[0x1a533168,0],
		[0x1a533170,442551968],
		[0x1a533178,439190390],
		[0x1a533180,0],
		[0x1a533188,0],
		[0x1a533190,0],
		[0x1a533198,0],
		[0x1a5331a0,0],
		[0x1a5331a8,441454688],
		[0x1a5331b0,0],
		[0x1a5331b8,0],
		[0x1a5331c0,0],
		[0x1a5331c8,441660064],
		[0x1a5331d8,0],
		[0x1a5331e0,0],
		[0x1a5331e8,0],
		[0x1a5331f0,0],
		[0x1a5331f8,0],
		[0x1a533200,0],
		[0x1a533208,0],
		[0x1a533210,442552064],
		[0x1a533218,439190409],
		[0x1a533220,0],
		[0x1a533228,0],
		[0x1a533230,0],
		[0x1a533238,0],
		[0x1a533240,0],
		[0x1a533248,441454720],
		[0x1a533250,0],
		[0x1a533258,0],
		[0x1a533260,0],
		[0x1a533268,441660064],
		[0x1a533278,0],
		[0x1a533280,0],
		[0x1a533288,0],
		[0x1a533290,0],
		[0x1a533298,0],
		[0x1a5332a0,439190429],
		[0x1a5332b0,441660160],
		[0x1a5332b8,441660128],
		[0x1a5332c0,441660096],
		[0x1a5332c8,441660096],
		[0x1a5332d0,441659904],
		[0x1a5332d8,441659744],
		[0x1a5332e0,439060967],
		[0x1a5332e8,438966308],
		[0x1a5332f0,439364099],
		[0x1a5332f8,0],
		[0x1a533300,438952912],
		[0x1a533308,439070317],
		[0x1a533310,439190443],
		[0x1a533318,0],
		[0x1a533320,441659488],
		[0x1a533328,441660352],
		[0x1a533330,442551968],
		[0x1a533338,439190461],
		[0x1a533340,441624800],
		[0x1a533348,441772704],
		[0x1a533350,441660400],
		[0x1a533358,441659536],
		[0x1a533368,441454688],
		[0x1a533370,439070651],
		[0x1a533378,0],
		[0x1a533380,0],
		[0x1a533388,441660512],
		[0x1a533398,0],
		[0x1a5333a0,0],
		[0x1a5333a8,0],
		[0x1a5333b0,0],
		[0x1a5333b8,0],
		[0x1a5333c0,441660192],
		[0x1a5333c8,441661056],
		[0x1a5333d0,442552064],
		[0x1a5333d8,439190478],
		[0x1a5333e0,441624960],
		[0x1a5333e8,441772864],
		[0x1a5333f0,441661104],
		[0x1a5333f8,441660240],
		[0x1a533408,441454720],
		[0x1a533410,469785984],
		[0x1a533418,0],
		[0x1a533420,0],
		[0x1a533428,441660512],
		[0x1a533438,0],
		[0x1a533440,0],
		[0x1a533448,0],
		[0x1a533450,0],
		[0x1a533458,0],
		[0x1a533460,439190496],
		[0x1a533470,441660592],
		[0x1a533478,441660576],
		[0x1a533480,473955712],
		[0x1a533488,473953888],
		[0x1a533490,441660352],
		[0x1a533498,441660192],
		[0x1a5334a0,439060967],
		[0x1a5334a8,439364099],
		[0x1a5334b0,438952912],
		[0x1a5334b8,439190508],
		[0x1a5334c0,0],
		[0x1a5334c8,0],
		[0x1a5334d0,442551968],
		[0x1a5334d8,439190524],
		[0x1a5334e0,0],
		[0x1a5334e8,0],
		[0x1a5334f0,0],
		[0x1a5334f8,0],
		[0x1a533500,0],
		[0x1a533508,441454688],
		[0x1a533510,0],
		[0x1a533518,0],
		[0x1a533520,0],
		[0x1a533528,441660928],
		[0x1a533538,0],
		[0x1a533540,0],
		[0x1a533548,0],
		[0x1a533550,0],
		[0x1a533558,0],
		[0x1a533560,0],
		[0x1a533568,0],
		[0x1a533570,442552064],
		[0x1a533578,439190542],
		[0x1a533580,0],
		[0x1a533588,0],
		[0x1a533590,0],
		[0x1a533598,0],
		[0x1a5335a0,0],
		[0x1a5335a8,441454720],
		[0x1a5335b0,0],
		[0x1a5335b8,0],
		[0x1a5335c0,0],
		[0x1a5335c8,441660928],
		[0x1a5335d8,0],
		[0x1a5335e0,0],
		[0x1a5335e8,0],
		[0x1a5335f0,0],
		[0x1a5335f8,0],
		[0x1a533600,439190561],
		[0x1a533610,441661024],
		[0x1a533618,441660992],
		[0x1a533620,441660960],
		[0x1a533628,441660960],
		[0x1a533630,441660768],
		[0x1a533638,441660608],
		[0x1a533640,439183250],
		[0x1a533648,438966308],
		[0x1a533650,439364099],
		[0x1a533658,0],
		[0x1a533660,439053023],
		[0x1a533668,439070317],
		[0x1a533670,439190443],
		[0x1a533678,0],
		[0x1a533680,441660352],
		[0x1a533688,441661216],
		[0x1a533690,442551968],
		[0x1a533698,439190574],
		[0x1a5336a0,441625248],
		[0x1a5336a8,441773024],
		[0x1a5336b0,441661264],
		[0x1a5336b8,441660400],
		[0x1a5336c8,441454688],
		[0x1a5336d0,439070651],
		[0x1a5336d8,0],
		[0x1a5336e0,0],
		[0x1a5336e8,441661376],
		[0x1a5336f8,0],
		[0x1a533700,0],
		[0x1a533708,0],
		[0x1a533710,0],
		[0x1a533718,0],
		[0x1a533720,441661056],
		[0x1a533728,441662432],
		[0x1a533730,442552064],
		[0x1a533738,439190590],
		[0x1a533740,441625408],
		[0x1a533748,441773184],
		[0x1a533750,441662480],
		[0x1a533758,441661104],
		[0x1a533768,441454720],
		[0x1a533770,470018816],
		[0x1a533778,0],
		[0x1a533780,0],
		[0x1a533788,441661376],
		[0x1a533798,0],
		[0x1a5337a0,0],
		[0x1a5337a8,0],
		[0x1a5337b0,0],
		[0x1a5337b8,0],
		[0x1a5337c0,439190607],
		[0x1a5337d0,441661456],
		[0x1a5337d8,441661440],
		[0x1a5337e0,473953936],
		[0x1a5337e8,473953792],
		[0x1a5337f0,441661216],
		[0x1a5337f8,441661056],
		[0x1a533800,439183250],
		[0x1a533808,439364099],
		[0x1a533810,439053023],
		[0x1a533818,439190508],
		[0x1a533820,439190660],
		[0x1a533828,0],
		[0x1a533830,428344416],
		[0x1a533838,428117952],
		[0x1a533840,0],
		[0x1a533848,0],
		[0x1a533850,472037608],
		[0x1a533858,0],
		[0x1a533870,0],
		[0x1a533878,0],
		[0x1a533880,0],
		[0x1a533888,0],
		[0x1a533890,0],
		[0x1a533898,0],
		[0x1a5338a0,0],
		[0x1a5338a8,0],
		[0x1a5338b0,442551968],
		[0x1a5338b8,439190915],
		[0x1a5338c0,0],
		[0x1a5338c8,0],
		[0x1a5338d0,0],
		[0x1a5338d8,0],
		[0x1a5338e0,0],
		[0x1a5338e8,441454688],
		[0x1a5338f0,0],
		[0x1a5338f8,0],
		[0x1a533900,0],
		[0x1a533908,441661920],
		[0x1a533918,0],
		[0x1a533920,0],
		[0x1a533928,0],
		[0x1a533930,0],
		[0x1a533938,0],
		[0x1a533940,0],
		[0x1a533948,0],
		[0x1a533950,442552064],
		[0x1a533958,439190932],
		[0x1a533960,0],
		[0x1a533968,0],
		[0x1a533970,0],
		[0x1a533978,0],
		[0x1a533980,0],
		[0x1a533988,441454720],
		[0x1a533990,0],
		[0x1a533998,0],
		[0x1a5339a0,0],
		[0x1a5339a8,441661920],
		[0x1a5339b8,0],
		[0x1a5339c0,0],
		[0x1a5339c8,0],
		[0x1a5339d0,0],
		[0x1a5339d8,0],
		[0x1a5339e0,439190950],
		[0x1a5339f0,441662000],
		[0x1a5339f8,441661984],
		[0x1a533a00,441661952],
		[0x1a533a08,441661952],
		[0x1a533a10,441661760],
		[0x1a533a18,441661600],
		[0x1a533a20,439071369],
		[0x1a533a28,439304887],
		[0x1a533a30,438952921],
		[0x1a533a38,438952565],
		[0x1a533a50,0],
		[0x1a533a58,0],
		[0x1a533a60,0],
		[0x1a533a68,0],
		[0x1a533a70,0],
		[0x1a533a78,0],
		[0x1a533a90,0],
		[0x1a533a98,0],
		[0x1a533aa0,0],
		[0x1a533aa8,0],
		[0x1a533ab0,465720344],
		[0x1a533ab8,465729496],
		[0x1a533ac0,439188852],
		[0x1a533ac8,0],
		[0x1a533ad0,428365168],
		[0x1a533ad8,428117952],
		[0x1a533ae0,0],
		[0x1a533ae8,441739680],
		[0x1a533af0,469803240],
		[0x1a533af8,0],
		[0x1a533b08,441662216],
		[0x1a533b10,441662216],
		[0x1a533b18,428401120],
		[0x1a533b28,441662248],
		[0x1a533b30,441662248],
		[0x1a533b38,428401296],
		[0x1a533b48,0],
		[0x1a533b58,426370416],
		[0x1a533b60,441662240],
		[0x1a533b70,469883904],
		[0x1a533b80,441662336],
		[0x1a533b88,441662336],
		[0x1a533b90,0],
		[0x1a533b98,0],
		[0x1a533ba0,428405728],
		[0x1a533ba8,0],
		[0x1a533bb0,0],
		[0x1a533bb8,0],
		[0x1a533bc0,428405600],
		[0x1a533bc8,0],
		[0x1a533bd0,0],
		[0x1a533bd8,0],
		[0x1a533be0,441661216],
		[0x1a533be8,441662592],
		[0x1a533bf0,442551968],
		[0x1a533bf8,439191522],
		[0x1a533c00,441625664],
		[0x1a533c08,441773344],
		[0x1a533c10,441662640],
		[0x1a533c18,441661264],
		[0x1a533c28,441454688],
		[0x1a533c30,439070651],
		[0x1a533c38,0],
		[0x1a533c40,0],
		[0x1a533c48,441662752],
		[0x1a533c58,0],
		[0x1a533c60,0],
		[0x1a533c68,0],
		[0x1a533c70,0],
		[0x1a533c78,0],
		[0x1a533c80,441662432],
		[0x1a533c88,441662848],
		[0x1a533c90,442552064],
		[0x1a533c98,439191548],
		[0x1a533ca0,441625824],
		[0x1a533ca8,441773504],
		[0x1a533cb0,441662896],
		[0x1a533cb8,441662480],
		[0x1a533cc8,441454720],
		[0x1a533cd0,469786080],
		[0x1a533cd8,0],
		[0x1a533ce0,0],
		[0x1a533ce8,441662752],
		[0x1a533cf8,0],
		[0x1a533d00,0],
		[0x1a533d08,0],
		[0x1a533d10,0],
		[0x1a533d18,0],
		[0x1a533d20,439191575],
		[0x1a533d30,441662832],
		[0x1a533d38,441662816],
		[0x1a533d40,473954992],
		[0x1a533d48,473952832],
		[0x1a533d50,441662592],
		[0x1a533d58,441662432],
		[0x1a533d60,439060967],
		[0x1a533d68,439187357],
		[0x1a533d70,438952921],
		[0x1a533d78,439191596],
		[0x1a533d80,441662592],
		[0x1a533d88,441663008],
		[0x1a533d90,442551968],
		[0x1a533d98,439191602],
		[0x1a533da0,441626112],
		[0x1a533da8,441773664],
		[0x1a533db0,441663056],
		[0x1a533db8,441662640],
		[0x1a533dc8,441454688],
		[0x1a533dd0,439070651],
		[0x1a533dd8,0],
		[0x1a533de0,0],
		[0x1a533de8,441663168],
		[0x1a533df8,0],
		[0x1a533e00,0],
		[0x1a533e08,0],
		[0x1a533e10,0],
		[0x1a533e18,0],
		[0x1a533e20,441662848],
		[0x1a533e28,441663296],
		[0x1a533e30,442552064],
		[0x1a533e38,439191629],
		[0x1a533e40,441626272],
		[0x1a533e48,441773824],
		[0x1a533e50,441663344],
		[0x1a533e58,441662896],
		[0x1a533e68,441454720],
		[0x1a533e70,470010688],
		[0x1a533e78,0],
		[0x1a533e80,0],
		[0x1a533e88,441663168],
		[0x1a533e98,0],
		[0x1a533ea0,0],
		[0x1a533ea8,0],
		[0x1a533eb0,0],
		[0x1a533eb8,0],
		[0x1a533ec0,439191657],
		[0x1a533ed0,441663264],
		[0x1a533ed8,441663232],
		[0x1a533ee0,473953168],
		[0x1a533ee8,473953504],
		[0x1a533ef0,441663008],
		[0x1a533ef8,441662848],
		[0x1a533f00,439060967],
		[0x1a533f08,439183250],
		[0x1a533f10,439388772],
		[0x1a533f18,0],
		[0x1a533f20,438952921],
		[0x1a533f28,439053023],
		[0x1a533f30,439201579],
		[0x1a533f38,0],
		[0x1a533f40,441663008],
		[0x1a533f48,441663456],
		[0x1a533f50,442551968],
		[0x1a533f58,439191679],
		[0x1a533f60,441626528],
		[0x1a533f68,441773984],
		[0x1a533f70,441663504],
		[0x1a533f78,441663056],
		[0, 0]
]).
unknown([
		[0x1a533b40,16045481047390945792],
		[0, 0]
]).
long([
		[0x1a532f80,70],
		[0x1a532f88,12],
		[0x1a533000,772],
		[0x1a533030,2],
		[0x1a5330a0,773],
		[0x1a5330d0,2],
		[0x1a533108,8589934728],
		[0x1a5331d0,2],
		[0x1a533270,2],
		[0x1a5332a8,17179869183],
		[0x1a533360,774],
		[0x1a533390,2],
		[0x1a533400,775],
		[0x1a533430,2],
		[0x1a533468,8589934730],
		[0x1a533530,2],
		[0x1a5335d0,2],
		[0x1a533608,17179869183],
		[0x1a5336c0,776],
		[0x1a5336f0,2],
		[0x1a533760,777],
		[0x1a533790,2],
		[0x1a5337c8,8589934729],
		[0x1a533860,5368709120000],
		[0x1a533868,10],
		[0x1a533910,2],
		[0x1a5339b0,2],
		[0x1a5339e8,12884901887],
		[0x1a533a40,5368709120000],
		[0x1a533a48,10],
		[0x1a533a80,5368709120000],
		[0x1a533a88,10],
		[0x1a533b00,64],
		[0x1a533b20,64],
		[0x1a533b50,4294894338],
		[0x1a533b68,14680064],
		[0x1a533b78,8192],
		[0x1a533c20,778],
		[0x1a533c50,2],
		[0x1a533cc0,779],
		[0x1a533cf0,2],
		[0x1a533d28,8589934847],
		[0x1a533dc0,780],
		[0x1a533df0,2],
		[0x1a533e60,781],
		[0x1a533e90,2],
		[0x1a533ec8,12884902142],
		[0, 0]
]).
int([
		[0x1a532f80,70],
		[0x1a532f84,0],
		[0x1a532f88,12],
		[0x1a532f8c,0],
		[0x1a532f90,0],
		[0x1a532f94,0],
		[0x1a532fb8,0],
		[0x1a532fbc,0],
		[0x1a533000,772],
		[0x1a533004,0],
		[0x1a533018,0],
		[0x1a53301c,0],
		[0x1a533020,0],
		[0x1a533024,0],
		[0x1a533030,2],
		[0x1a533034,0],
		[0x1a533038,0],
		[0x1a53303c,0],
		[0x1a533040,0],
		[0x1a533044,0],
		[0x1a533048,0],
		[0x1a53304c,0],
		[0x1a533050,0],
		[0x1a533054,0],
		[0x1a533058,0],
		[0x1a53305c,0],
		[0x1a5330a0,773],
		[0x1a5330a4,0],
		[0x1a5330b8,0],
		[0x1a5330bc,0],
		[0x1a5330c0,0],
		[0x1a5330c4,0],
		[0x1a5330d0,2],
		[0x1a5330d4,0],
		[0x1a5330d8,0],
		[0x1a5330dc,0],
		[0x1a5330e0,0],
		[0x1a5330e4,0],
		[0x1a5330e8,0],
		[0x1a5330ec,0],
		[0x1a5330f0,0],
		[0x1a5330f4,0],
		[0x1a5330f8,0],
		[0x1a5330fc,0],
		[0x1a533108,136],
		[0x1a53310c,2],
		[0x1a533160,0],
		[0x1a533164,0],
		[0x1a533168,0],
		[0x1a53316c,0],
		[0x1a533180,0],
		[0x1a533184,0],
		[0x1a533188,0],
		[0x1a53318c,0],
		[0x1a533190,0],
		[0x1a533194,0],
		[0x1a533198,0],
		[0x1a53319c,0],
		[0x1a5331a0,0],
		[0x1a5331a4,0],
		[0x1a5331b0,0],
		[0x1a5331b4,0],
		[0x1a5331b8,0],
		[0x1a5331bc,0],
		[0x1a5331c0,0],
		[0x1a5331c4,0],
		[0x1a5331d0,2],
		[0x1a5331d4,0],
		[0x1a5331d8,0],
		[0x1a5331dc,0],
		[0x1a5331e0,0],
		[0x1a5331e4,0],
		[0x1a5331e8,0],
		[0x1a5331ec,0],
		[0x1a5331f0,0],
		[0x1a5331f4,0],
		[0x1a5331f8,0],
		[0x1a5331fc,0],
		[0x1a533200,0],
		[0x1a533204,0],
		[0x1a533208,0],
		[0x1a53320c,0],
		[0x1a533220,0],
		[0x1a533224,0],
		[0x1a533228,0],
		[0x1a53322c,0],
		[0x1a533230,0],
		[0x1a533234,0],
		[0x1a533238,0],
		[0x1a53323c,0],
		[0x1a533240,0],
		[0x1a533244,0],
		[0x1a533250,0],
		[0x1a533254,0],
		[0x1a533258,0],
		[0x1a53325c,0],
		[0x1a533260,0],
		[0x1a533264,0],
		[0x1a533270,2],
		[0x1a533274,0],
		[0x1a533278,0],
		[0x1a53327c,0],
		[0x1a533280,0],
		[0x1a533284,0],
		[0x1a533288,0],
		[0x1a53328c,0],
		[0x1a533290,0],
		[0x1a533294,0],
		[0x1a533298,0],
		[0x1a53329c,0],
		[0x1a5332ac,3],
		[0x1a5332f8,0],
		[0x1a5332fc,0],
		[0x1a533318,0],
		[0x1a53331c,0],
		[0x1a533360,774],
		[0x1a533364,0],
		[0x1a533378,0],
		[0x1a53337c,0],
		[0x1a533380,0],
		[0x1a533384,0],
		[0x1a533390,2],
		[0x1a533394,0],
		[0x1a533398,0],
		[0x1a53339c,0],
		[0x1a5333a0,0],
		[0x1a5333a4,0],
		[0x1a5333a8,0],
		[0x1a5333ac,0],
		[0x1a5333b0,0],
		[0x1a5333b4,0],
		[0x1a5333b8,0],
		[0x1a5333bc,0],
		[0x1a533400,775],
		[0x1a533404,0],
		[0x1a533418,0],
		[0x1a53341c,0],
		[0x1a533420,0],
		[0x1a533424,0],
		[0x1a533430,2],
		[0x1a533434,0],
		[0x1a533438,0],
		[0x1a53343c,0],
		[0x1a533440,0],
		[0x1a533444,0],
		[0x1a533448,0],
		[0x1a53344c,0],
		[0x1a533450,0],
		[0x1a533454,0],
		[0x1a533458,0],
		[0x1a53345c,0],
		[0x1a533468,138],
		[0x1a53346c,2],
		[0x1a5334c0,0],
		[0x1a5334c4,0],
		[0x1a5334c8,0],
		[0x1a5334cc,0],
		[0x1a5334e0,0],
		[0x1a5334e4,0],
		[0x1a5334e8,0],
		[0x1a5334ec,0],
		[0x1a5334f0,0],
		[0x1a5334f4,0],
		[0x1a5334f8,0],
		[0x1a5334fc,0],
		[0x1a533500,0],
		[0x1a533504,0],
		[0x1a533510,0],
		[0x1a533514,0],
		[0x1a533518,0],
		[0x1a53351c,0],
		[0x1a533520,0],
		[0x1a533524,0],
		[0x1a533530,2],
		[0x1a533534,0],
		[0x1a533538,0],
		[0x1a53353c,0],
		[0x1a533540,0],
		[0x1a533544,0],
		[0x1a533548,0],
		[0x1a53354c,0],
		[0x1a533550,0],
		[0x1a533554,0],
		[0x1a533558,0],
		[0x1a53355c,0],
		[0x1a533560,0],
		[0x1a533564,0],
		[0x1a533568,0],
		[0x1a53356c,0],
		[0x1a533580,0],
		[0x1a533584,0],
		[0x1a533588,0],
		[0x1a53358c,0],
		[0x1a533590,0],
		[0x1a533594,0],
		[0x1a533598,0],
		[0x1a53359c,0],
		[0x1a5335a0,0],
		[0x1a5335a4,0],
		[0x1a5335b0,0],
		[0x1a5335b4,0],
		[0x1a5335b8,0],
		[0x1a5335bc,0],
		[0x1a5335c0,0],
		[0x1a5335c4,0],
		[0x1a5335d0,2],
		[0x1a5335d4,0],
		[0x1a5335d8,0],
		[0x1a5335dc,0],
		[0x1a5335e0,0],
		[0x1a5335e4,0],
		[0x1a5335e8,0],
		[0x1a5335ec,0],
		[0x1a5335f0,0],
		[0x1a5335f4,0],
		[0x1a5335f8,0],
		[0x1a5335fc,0],
		[0x1a53360c,3],
		[0x1a533658,0],
		[0x1a53365c,0],
		[0x1a533678,0],
		[0x1a53367c,0],
		[0x1a5336c0,776],
		[0x1a5336c4,0],
		[0x1a5336d8,0],
		[0x1a5336dc,0],
		[0x1a5336e0,0],
		[0x1a5336e4,0],
		[0x1a5336f0,2],
		[0x1a5336f4,0],
		[0x1a5336f8,0],
		[0x1a5336fc,0],
		[0x1a533700,0],
		[0x1a533704,0],
		[0x1a533708,0],
		[0x1a53370c,0],
		[0x1a533710,0],
		[0x1a533714,0],
		[0x1a533718,0],
		[0x1a53371c,0],
		[0x1a533760,777],
		[0x1a533764,0],
		[0x1a533778,0],
		[0x1a53377c,0],
		[0x1a533780,0],
		[0x1a533784,0],
		[0x1a533790,2],
		[0x1a533794,0],
		[0x1a533798,0],
		[0x1a53379c,0],
		[0x1a5337a0,0],
		[0x1a5337a4,0],
		[0x1a5337a8,0],
		[0x1a5337ac,0],
		[0x1a5337b0,0],
		[0x1a5337b4,0],
		[0x1a5337b8,0],
		[0x1a5337bc,0],
		[0x1a5337c8,137],
		[0x1a5337cc,2],
		[0x1a533828,0],
		[0x1a53382c,0],
		[0x1a533840,0],
		[0x1a533844,0],
		[0x1a533848,0],
		[0x1a53384c,0],
		[0x1a533858,0],
		[0x1a53385c,0],
		[0x1a533860,0],
		[0x1a533864,1250],
		[0x1a533868,10],
		[0x1a53386c,0],
		[0x1a533870,0],
		[0x1a533874,0],
		[0x1a533878,0],
		[0x1a53387c,0],
		[0x1a533880,0],
		[0x1a533884,0],
		[0x1a533888,0],
		[0x1a53388c,0],
		[0x1a533890,0],
		[0x1a533894,0],
		[0x1a533898,0],
		[0x1a53389c,0],
		[0x1a5338a0,0],
		[0x1a5338a4,0],
		[0x1a5338a8,0],
		[0x1a5338ac,0],
		[0x1a5338c0,0],
		[0x1a5338c4,0],
		[0x1a5338c8,0],
		[0x1a5338cc,0],
		[0x1a5338d0,0],
		[0x1a5338d4,0],
		[0x1a5338d8,0],
		[0x1a5338dc,0],
		[0x1a5338e0,0],
		[0x1a5338e4,0],
		[0x1a5338f0,0],
		[0x1a5338f4,0],
		[0x1a5338f8,0],
		[0x1a5338fc,0],
		[0x1a533900,0],
		[0x1a533904,0],
		[0x1a533910,2],
		[0x1a533914,0],
		[0x1a533918,0],
		[0x1a53391c,0],
		[0x1a533920,0],
		[0x1a533924,0],
		[0x1a533928,0],
		[0x1a53392c,0],
		[0x1a533930,0],
		[0x1a533934,0],
		[0x1a533938,0],
		[0x1a53393c,0],
		[0x1a533940,0],
		[0x1a533944,0],
		[0x1a533948,0],
		[0x1a53394c,0],
		[0x1a533960,0],
		[0x1a533964,0],
		[0x1a533968,0],
		[0x1a53396c,0],
		[0x1a533970,0],
		[0x1a533974,0],
		[0x1a533978,0],
		[0x1a53397c,0],
		[0x1a533980,0],
		[0x1a533984,0],
		[0x1a533990,0],
		[0x1a533994,0],
		[0x1a533998,0],
		[0x1a53399c,0],
		[0x1a5339a0,0],
		[0x1a5339a4,0],
		[0x1a5339b0,2],
		[0x1a5339b4,0],
		[0x1a5339b8,0],
		[0x1a5339bc,0],
		[0x1a5339c0,0],
		[0x1a5339c4,0],
		[0x1a5339c8,0],
		[0x1a5339cc,0],
		[0x1a5339d0,0],
		[0x1a5339d4,0],
		[0x1a5339d8,0],
		[0x1a5339dc,0],
		[0x1a5339ec,2],
		[0x1a533a40,0],
		[0x1a533a44,1250],
		[0x1a533a48,10],
		[0x1a533a4c,0],
		[0x1a533a50,0],
		[0x1a533a54,0],
		[0x1a533a58,0],
		[0x1a533a5c,0],
		[0x1a533a60,0],
		[0x1a533a64,0],
		[0x1a533a68,0],
		[0x1a533a6c,0],
		[0x1a533a70,0],
		[0x1a533a74,0],
		[0x1a533a78,0],
		[0x1a533a7c,0],
		[0x1a533a80,0],
		[0x1a533a84,1250],
		[0x1a533a88,10],
		[0x1a533a8c,0],
		[0x1a533a90,0],
		[0x1a533a94,0],
		[0x1a533a98,0],
		[0x1a533a9c,0],
		[0x1a533aa0,0],
		[0x1a533aa4,0],
		[0x1a533aa8,0],
		[0x1a533aac,0],
		[0x1a533ac8,0],
		[0x1a533acc,0],
		[0x1a533ae0,0],
		[0x1a533ae4,0],
		[0x1a533af8,0],
		[0x1a533afc,0],
		[0x1a533b00,64],
		[0x1a533b04,0],
		[0x1a533b20,64],
		[0x1a533b24,0],
		[0x1a533b40,512],
		[0x1a533b48,0],
		[0x1a533b4c,0],
		[0x1a533b54,0],
		[0x1a533b6c,0],
		[0x1a533b78,8192],
		[0x1a533b7c,0],
		[0x1a533b90,0],
		[0x1a533b94,0],
		[0x1a533b98,0],
		[0x1a533b9c,0],
		[0x1a533ba8,0],
		[0x1a533bac,0],
		[0x1a533bb0,0],
		[0x1a533bb4,0],
		[0x1a533bb8,0],
		[0x1a533bbc,0],
		[0x1a533bc8,0],
		[0x1a533bcc,0],
		[0x1a533bd0,0],
		[0x1a533bd4,0],
		[0x1a533bd8,0],
		[0x1a533bdc,0],
		[0x1a533c20,778],
		[0x1a533c24,0],
		[0x1a533c38,0],
		[0x1a533c3c,0],
		[0x1a533c40,0],
		[0x1a533c44,0],
		[0x1a533c50,2],
		[0x1a533c54,0],
		[0x1a533c58,0],
		[0x1a533c5c,0],
		[0x1a533c60,0],
		[0x1a533c64,0],
		[0x1a533c68,0],
		[0x1a533c6c,0],
		[0x1a533c70,0],
		[0x1a533c74,0],
		[0x1a533c78,0],
		[0x1a533c7c,0],
		[0x1a533cc0,779],
		[0x1a533cc4,0],
		[0x1a533cd8,0],
		[0x1a533cdc,0],
		[0x1a533ce0,0],
		[0x1a533ce4,0],
		[0x1a533cf0,2],
		[0x1a533cf4,0],
		[0x1a533cf8,0],
		[0x1a533cfc,0],
		[0x1a533d00,0],
		[0x1a533d04,0],
		[0x1a533d08,0],
		[0x1a533d0c,0],
		[0x1a533d10,0],
		[0x1a533d14,0],
		[0x1a533d18,0],
		[0x1a533d1c,0],
		[0x1a533d28,255],
		[0x1a533d2c,2],
		[0x1a533dc0,780],
		[0x1a533dc4,0],
		[0x1a533dd8,0],
		[0x1a533ddc,0],
		[0x1a533de0,0],
		[0x1a533de4,0],
		[0x1a533df0,2],
		[0x1a533df4,0],
		[0x1a533df8,0],
		[0x1a533dfc,0],
		[0x1a533e00,0],
		[0x1a533e04,0],
		[0x1a533e08,0],
		[0x1a533e0c,0],
		[0x1a533e10,0],
		[0x1a533e14,0],
		[0x1a533e18,0],
		[0x1a533e1c,0],
		[0x1a533e60,781],
		[0x1a533e64,0],
		[0x1a533e78,0],
		[0x1a533e7c,0],
		[0x1a533e80,0],
		[0x1a533e84,0],
		[0x1a533e90,2],
		[0x1a533e94,0],
		[0x1a533e98,0],
		[0x1a533e9c,0],
		[0x1a533ea0,0],
		[0x1a533ea4,0],
		[0x1a533ea8,0],
		[0x1a533eac,0],
		[0x1a533eb0,0],
		[0x1a533eb4,0],
		[0x1a533eb8,0],
		[0x1a533ebc,0],
		[0x1a533ec8,254],
		[0x1a533ecc,3],
		[0x1a533f18,0],
		[0x1a533f1c,0],
		[0x1a533f38,0],
		[0x1a533f3c,0],
		[0, 0]
]).
string_val([
		[0, 0]
]).
:- use_module(library(clpfd)).

isTrue([X, _]):-
    X == 49.

isTrue([_|Tail]):-
    isTrue(Tail).

log(File_name, Name, Addr, Base):-
    Offset #= Addr - Base,
    open(File_name, append, Stream),
    write(Stream, Name),
    write(Stream, ':'),
    write(Stream, Offset),
    nl(Stream),
    close(Stream).

start_query(Base_addr) :- 
    pointer(Ptr),
    string_val(Str),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Real_parent_addr, Real_parent_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    chain([MM2_addr, Real_parent_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    Real_parent_addr #> Comm_addr - 500,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    labeling([enum], [Real_parent_addr, Real_parent_val,  Comm_addr, Comm_val]),
    process_create(path('python'),
                ['subquery.py', Real_parent_val, "task_struct"],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

    

query_task_struct(Base_addr) :-
    get_time(Current),
    %current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM_addr, MM_val],
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Real_cred_addr, Real_cred_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM_addr, MM2_addr, Pid_addr, Tgid_addr, Real_parent_addr, Parent_addr , Child_addr, 
           Group_leader_addr, Thread_group_addr, Real_cred_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    %MM2_addr #> Base_addr + 1000,
    MM2_addr #= MM_addr + 8,
    Tasks_addr #> MM2_addr - 100,
    %FS_struct_addr #< Base_addr + 4000,
    Tgid_addr #= Pid_addr + 4,
    Real_parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr - 8,
    Child_addr #= Parent_addr + 8,
    %FIXME This may be too strong
    %Children next and prev 16 
    %Sibling next and prev  16
    Group_leader_addr #=< Child_addr +32,
    Cred_addr #= Real_cred_addr + 8,
    /*MM2_addr #= Base_addr + 1160,
    Comm_addr #= Base_addr + 1656,
    Tasks_addr #= Base_addr + 1096,*/
    %FS_struct_addr #= Base_addr + 2640,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    label([MM_addr, MM_val]),
    % make query after labeling
    MM2_val #> 0,
    integer(MM2_val),
    %Is it safe to do this?
    %query_mm_struct(MM_val),
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val, Comm_addr, Comm_val, Pid_addr, Tgid_addr]),
/*
    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_parent_addr, Real_parent_val, Group_leader_addr, Group_leader_val, Child_addr, Child_val]),
    Real_parent_val #> 0,
    Group_leader_val #> 0,
    query_ts(Real_parent_val, Comm_offset, Tasks_offset),
    %query_list_head(Child_val-16, Comm_offset, Tasks_offset),
    query_ts(Group_leader_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_cred_addr, Real_cred_val, Cred_addr, Cred_val]),
    Cred_val #> 0,
    query_cred(Real_cred_val),
    query_cred(Cred_val),
*/
/*
    labeling([enum], [FS_struct_addr, FS_struct_val]),
    FS_struct_val #> 0,
    %query_fs_struct(FS_struct_val),
*/


    get_time(End),
    Time_past is End - Current,
    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    log("profile.txt", "tasks", Tasks_addr, Base_addr),
    log("profile.txt", "active_mm_struct", MM2_addr, Base_addr),
    log("profile.txt", "comm", Comm_addr, Base_addr),
    log("profile.txt", "parent", Parent_addr, Base_addr),
    log("profile.txt", "group_leader", Group_leader_addr, Base_addr),
    log("profile.txt", "cred", Cred_addr, Base_addr),
    log("profile.txt", "pid", Pid_addr, Base_addr),


    
    print_nl('tasks offset', Tasks_offset),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).

query_module(Base_addr) :-
    /* struct list_head list;
       char name[LEN]; 
       struct kernel_param *kp;
       struct module_layout core_layout;
       struct module_layout init_layout; 
       unsigned int core_size, init_size;
       unsigned int init_text_size, core_text_size;
    */
    get_time(Current),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [List_addr, List_val],
        [KP_addr, KP_val],
        [Core_base_addr, Core_base_val]
    ]),
    Str_profile = ([
        [Name_addr, Name_val]    
    ]),
    Int_profile = ([
        [Core_size_addr, Core_size_val],
        [Core_text_size_addr, Core_text_size_val],
        [RO_size_addr, RO_size_val],
        [RO_init_size_addr, RO_init_size_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),
    /* Order Invariants */
    chain([List_addr, Name_addr, KP_addr, Core_base_addr, Core_size_addr, 
            Core_text_size_addr, RO_size_addr, RO_init_size_addr], #<),
    RO_init_size_addr - Base_addr #< 1000,
    
    labeling([enum], [Name_addr, Name_val]),
    List_addr #= Name_addr - 16,
    labeling([enum], [List_addr, List_val]),
    Name_offset #= Name_addr - Base_addr,
    List_offset #= List_addr - Base_addr,
    query_list_head(List_val, Name_offset, List_offset),
    KP_val #> 0,
    labeling([enum], [KP_addr, KP_val]),
    query_kernel_param(KP_val),
    Core_size_addr #= Core_base_addr + 8,
    Core_size_val #> 0,
    Core_text_size_addr #= Core_size_addr + 4,
    Core_text_size_val #> 0,
    RO_size_addr #= Core_text_size_addr + 4,
    RO_init_size_addr #= RO_size_addr + 4,

    labeling([enum], [Core_base_addr, Core_size_addr, 
            Core_text_size_addr, RO_size_addr, RO_init_size_addr]),

    get_time(End),
    Time_past is End - Current,
    log("module", "list", List_addr, Base_addr),
    log("module", "name", Name_addr, Base_addr),
    log("module", "kp", KP_addr, Base_addr),
    log("module", "core_base", Core_base_addr, Base_addr),
    log("module", "core_size", Core_size_addr, Base_addr),
    log("module", "core_text_size", Core_text_size_addr, Base_addr).

query_mount(Base_addr) :-
    /* struct hlist_head mnt_hash;
       struct mount *mnt_parent; 
       struct vfsmount mnt;
       struct list_head mnt_mounts;
       struct list_head mnt_child;
       struct list_head mnt_instance;
       const char *mnt_devname;
       struct list_head mnt_list;
    */
    get_time(Current),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Mnt_hash_addr, Mnt_hash_val],
        [Mnt_parent_addr, Mnt_parent_val],
        [Vfsmount_addr, Vfsmount_val],
        [Mnt_child_addr, Mnt_child_val],
        [Mnt_devname_addr, Mnt_devname_val],
        [Mnt_list_addr, Mnt_list_val]
    ]),
    Int_profile = ([
        [Mnt_flags_addr, Mnt_flags_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    /* Order Invariants */
    chain([Mnt_hash_addr, Mnt_parent_addr, Vfsmount_addr, Mnt_flags_addr,
            Mnt_child_addr, Mnt_devname_addr, Mnt_list_addr], #<),
    Mnt_hash_addr #= Base_addr,
    /* mnt_hash_addr is a list_head */
    Mnt_parent_addr #> Base_addr + 8,
    Mnt_list_addr - Base_addr #< 200,
    labeling([enum], [Mnt_devname_addr, Mnt_devname_val]),
    query_string_pointer(Mnt_devname_val),
    Mnt_devname_offset #= Mnt_devname_addr - Base_addr,
    /* the offset from mnt_mounts to mnt_list remains the same, so it's safe to use fixed offsets. */
    Mnt_child_addr #= Mnt_devname_addr - 32,
    Mnt_list_addr #= Mnt_devname_addr + 8,
    Mnt_flags_addr #= Vfsmount_addr + 16,
    labeling([enum], [Mnt_child_addr, Mnt_list_addr, Vfsmount_addr, Vfsmount_val]),
    /* Seems unnecessary 
    Mnt_list_offset #= Mnt_list_addr - Base_addr,
    Mnt_list #= Mnt_list_val - Mnt_list_offset,
    Mnt_list #> 0,
    query_mount_struct(Mnt_list, Mnt_devname_offset),
    */
    Vfsmount_val #>= 0,
    /* Here we can infer layout of dentry structure 
       Maybe need to infer using another dentry, somehow it may not be initialized. 
    */
    Vfsmount_addr #> 0,
    %query_dentry(Vfsmount_addr),

    labeling([enum], [Mnt_parent_addr, Mnt_parent_val]),
    /* To verify another mount struct, only one-level query, so it does not direct call query_mount recursively */
    
    query_mount_struct(Mnt_parent_val, Mnt_devname_offset),
    

    get_time(End),
    Time_past is End - Current,

    log("mount", "mnt_hash", Mnt_hash_addr, Base_addr),
    log("mount", "mnt_parent", Mnt_parent_addr, Base_addr),
    log("mount", "mnt_child", Mnt_child_addr, Base_addr),
    log("mount", "mnt_devname", Mnt_devname_addr, Base_addr),
    log("mount", "mnt_list", Mnt_list_addr, Base_addr).

query_net_device(Base_addr) :- 
    /*
        char             name[NAMSIZ];
        struct list_head dev_list;
        unsigned char    addr_len;
        unsigned int     promiscuity;
        struct in_device *ip_ptr;
    */
    get_time(Current),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Dev_list_addr, Dev_list_val],
        [IP_ptr_addr, IP_ptr_val]
    ]),
    Str_profile = ([
        [Name_addr, Name_val]
    ]),
    Int_profile = ([
        [Promisc_addr, Promisc_val],
        [Addr_len_addr, Addr_len_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),
    /* Hard to determine offsets for addr_len and promisc */
    chain([Name_addr, Dev_list_addr, Addr_len_addr, Promisc_addr, IP_ptr_addr], #<),
    Name_addr #>= Base_addr,
    Name_offset #= Name_addr - Base_addr,
    IP_ptr_addr #< Base_addr + 1000,
    /* dev_list offset can be hardcoded since it remains the same */
    Dev_list_addr #= Base_addr + 80,
    labeling([enum], [Name_addr, Dev_list_addr, Dev_list_val]),
    /* do not have a good constrain to narrow down ip_ptr, use its rough offset
       to reduce the search space. 
     */
    IP_ptr_addr #> Base_addr + 700,
    IP_ptr_val #> 0,
    labeling([enum], [IP_ptr_addr, IP_ptr_val]),
    query_in_device(IP_ptr_val),

    get_time(End),
    Time_past is End - Current,

    log("net_device", "name", Name_addr, Base_addr),
    log("net_device", "ip_ptr", IP_ptr_addr, Base_addr),
    log("net_device", "dev_list", Dev_list_addr, Base_addr).


query_inet_sock(Base_addr) :-
    /* As defined in source code, sk and pinet6 has to be 
       the first two members of inet_sock, which means we
       can hardcode this rule.
    */
    /*skc_family at offset 16 short contained in a unsigned number 
     First half of sock_common can be viewed as unchanged, so it's safe to use
       some hardcoded ruels to help pinpoint some offsets.  
    sk_buff_head, two non-zero pointers, one unsigned long, one integer.
    sk_protocol is a unsigned long number after sk_write_buffer, and they have the same offset. */
    get_time(Current),
    pointer(Ptr),
    long(Ulg),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Sk_receive_queue_addr, Sk_receive_queue_val],
        [Sk_receive_queue_prev_addr, Sk_receive_queue_prev_val],
        [Sk_write_queue_addr, Sk_write_queue_val],
        [Sk_write_queue_prev_addr, Sk_write_queue_prev_val]
    ]),
    Ulong_profile = ([
        [Skc_family_addr, Skc_family_val],
        [Sk_protocol_addr, Sk_protocol_val]
    ]),
    Int_profile = ([
        [Receive_lock_addr, Receive_lock_val],
        [Write_lock_addr, Write_lock_val],
        [Qlen_receive_addr, Qlen_receive_val],
        [Qlen_write_addr, Qlen_write_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    tuples_in(Int_profile, Int),

    Sk_protocol_val #> 0,
    Skc_family_addr #= Base_addr + 16,
    Skc_family_val #> 0,
    Sk_receive_queue_val #> 0,
    Sk_receive_queue_prev_val #> 0,
    Sk_write_queue_val #> 0,
    Sk_write_queue_prev_val #> 0,
    chain([Skc_family_addr, Sk_receive_queue_addr, Sk_receive_queue_prev_addr, Qlen_receive_addr, Receive_lock_addr,
          Sk_write_queue_addr, Sk_write_queue_prev_addr, Qlen_write_addr, Write_lock_addr,
          Sk_protocol_addr], #<),
    /* sock_common is at least 136 */
    Sk_receive_queue_addr #> Base_addr + 136,
    Sk_protocol_addr #< Base_addr + 700,
    Sk_receive_queue_prev_addr #= Sk_receive_queue_addr + 8,
    Qlen_receive_addr #= Sk_receive_queue_prev_addr + 8,
    Receive_lock_addr #= Qlen_receive_addr + 4,

    Sk_write_queue_prev_addr #= Sk_write_queue_addr + 8,
    Qlen_write_addr #= Sk_write_queue_prev_addr + 8,
    Write_lock_addr #= Qlen_write_addr + 4,

    labeling([enum], [Skc_family_addr, Sk_receive_queue_addr, Sk_write_queue_addr, Sk_protocol_addr]),

    get_time(End),
    Time_past is End - Current,

    log("inet_sock", "sk_receive_queue", Sk_receive_queue_addr, Base_addr),
    log("inet_sock", "Sk_write_queue", Sk_write_queue_addr, Base_addr),
    log("inet_sock", "Skc_family", Skc_family_addr, Base_addr),
    log("inet_sock", "Sk_protocol", Sk_protocol_addr, Base_addr).

query_resource(Base_addr) :-
    /*
        start
        end
        *name
        *parent
        *sibling
        *child -> non-zero
    */
    /* This structure remains unchanged, thus we can have some
       hardcoded rules to help inference. */

    get_time(Current),
    pointer(Ptr),
    long(Ulg),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Name_addr, Name_val],
        [Parent_addr, Parent_val],
        [Sibling_addr, Sibling_val],
        [Child_addr, Child_val]
    ]),
    Ulong_profile = ([
        [End_addr, End_val],
        [Flags_addr, Flags_val]
    ]),
    Int_profile = ([
        [Start_addr, Start_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    tuples_in(Int_profile, Int),

    Child_val #> 0,
    chain([Start_addr, End_addr, Name_addr, Flags_addr, Parent_addr, Sibling_addr, Child_addr], #<),
    %Name_addr #= Base_addr + 16,
    Child_addr #=< Base_addr + 64,
    labeling([enum], [Name_addr, Name_val]),
    query_string_pointer(Name_val),
    Name_offset #= Name_addr - Base_addr,
    labeling([enum], [Child_addr, Child_val]),
    query_name_pointer(Child_val, Name_offset),

    get_time(End),
    Time_past is End - Current,

    log("resource", "Start_addr", Start_addr, Base_addr),
    log("resource", "End_addr", End_addr, Base_addr),
    log("resource", "Name_addr", Name_addr, Base_addr),
    log("resource", "Child_addr", Child_addr, Base_addr).

query_inode(Base_addr) :-
    /*
        struct inode_operations *i_op;
        struct super_block      *i_sb;
        struct address_space    *i_mapping;
    */
    get_time(Current),
    pointer(Ptr),
    long(Ulg),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [I_op_addr, I_op_val],
        [I_sb_addr, I_sb_val],
        [I_mapping_addr, I_mapping_val],
        [I_fop_addr, I_fop_val]
    ]),
    Ulong_profile = ([
        /* i_mode is actually not long type. */
        [I_mode_addr, I_mode_val],
        [I_ino_addr, I_ino_val],
        [I_size_addr, I_size_val],
        [I_atime_addr, I_atime_val],
        [_I_atime_addr, _I_atime_val],
        [I_mtime_addr, I_mtime_val],
        [I_ctime_addr, I_ctime_val],
        [_I_ctime_addr, _I_ctime_val]
    ]),
    Int_profile = ([
        [I_uid_addr, I_uid_val],
        [I_gid_addr, I_gid_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    tuples_in(Int_profile, Int),

    chain([I_mode_addr, I_uid_addr, I_gid_addr, I_op_addr, I_sb_addr, I_mapping_addr, I_ino_addr,
           I_size_addr, I_atime_addr, _I_atime_addr, I_mtime_addr, I_ctime_addr, _I_ctime_addr, I_fop_addr], #<),

    I_mode_addr #= Base_addr,
    I_mode_val #> 0,
    I_gid_addr #= I_mode_addr + 8,
    %I_op_addr #= Base_addr + 32,
    I_op_val #> 0,
    labeling([enum], [I_op_addr, I_op_val]),
    query_inode_operations(I_op_val),

    I_sb_addr #= I_op_addr + 8,
    I_mapping_addr #= I_sb_addr + 8,
    I_atime_addr #= I_size_addr + 8,
    I_mtime_addr #= I_atime_addr + 16,
    I_ctime_addr #= I_mtime_addr + 16,
    _I_ctime_addr #= I_ctime_addr + 8,
    I_size_val #> 0,
    I_atime_val #> 4096,
    I_mtime_val #> 4096,
    I_ctime_val #> 4096,
    I_fop_addr #< Base_addr + 400,
    labeling([enum], [I_sb_addr, I_mapping_addr, I_atime_addr, I_mtime_addr, I_ctime_addr]),


    labeling([enum], [I_fop_addr, I_fop_val]),
    I_fop_val #> 0,
    query_inode_operations(I_fop_val),

    log("./profile/inode", "I_mode_addr", I_mode_addr, Base_addr),
    log("./profile/inode", "I_uid_addr", I_uid_addr, Base_addr),
    log("./profile/inode", "I_gid_addr", I_gid_addr, Base_addr),
    log("./profile/inode", "I_op_addr", I_op_addr, Base_addr),
    log("./profile/inode", "I_sb_addr", I_sb_addr, Base_addr),
    log("./profile/inode", "I_mapping_addr", I_mapping_addr, Base_addr),
    log("./profile/inode", "I_size_addr", I_size_addr, Base_addr),
    log("./profile/inode", "I_atime_addr", I_atime_addr, Base_addr),
    log("./profile/inode", "I_mtime_addr", I_mtime_addr, Base_addr),
    log("./profile/inode", "I_ctime_addr", I_ctime_addr, Base_addr),
    log("./profile/inode", "I_fop_addr", I_fop_addr, Base_addr).


test(Base_addr) :-
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM2_addr, Pid_addr, Tgid_addr, Parent_addr, Real_parent_addr, Child_addr, 
           Group_leader_addr, Thread_group_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    MM2_addr #> Base_addr + 1000,
    Tasks_addr #> MM2_addr - 100,
    FS_struct_addr #< Base_addr + 3000,
    Tgid_addr #= Pid_addr + 4,
    Parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr + 8,
    Child_addr #= Real_parent_addr +8,
    Group_leader_addr #=< Child_addr +32,
    %Comm_addr #= Base_addr + 2584,
    %Tasks_addr #= Base_addr + 1904,
    %FS_struct_addr #= Base_addr + 2640,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    % make query after labeling
    MM2_val #> 0,
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val,  Comm_addr, Comm_val ]),
    %Tasks_addr #= Base_addr + 2040,
    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    


    get_time(End),
    Time_past is End - Current,
    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    
    print_nl('tasks offset', Tasks_offset),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).


query_string_pointer(Val) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "string_pointer"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_name_pointer(Val, Name_offset) :-
    process_create(path('python'),
                    ['subquery.py', Val, "name_pointer", Name_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).


query_mount_struct(Val, Offset) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "mount_struct", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_vfs_mount(Vfsmount_val) :-
    process_create(path('python'),
                    ['subquery.py', Vfsmount_val, "vfs_mount"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_dentry(Dentry_val) :-
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_kernel_param(KP_val) :-
    process_create(path('python'),
                    ['subquery.py', KP_val, "kernel_param"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_in_device(IP_ptr_val) :-
    process_create(path('python'),
                    ['subquery.py', IP_ptr_val, "in_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_inode_operations(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_mm_struct(MM2_val) :-
    process_create(path('python'),
                    ['subquery.py', MM2_val, "mm_struct"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_list_head(Tasks_val, Comm_offset, Tasks_offset) :-
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "list_head", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_ts(Base_addr, Comm_offset, Tasks_offset) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "ts", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_cred(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "cred"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).
query_fs_struct(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "fs_struct"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

print_nl(Name, Content):- 
    print(Name),
    print(':'),
    print(Content),
    nl.
