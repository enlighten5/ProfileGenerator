:- use_module(library(clpfd)).
:- style_check(-singleton).
pointer([
		[0x178693f0,394273536],
		[0x178693f8,394293088],
		[0x17869400,0],
		[0x17869408,1043073280],
		[0x17869410,1043836928],
		[0x17869418,0],
		[0x17869420,0],
		[0x17869428,0],
		[0x17869430,389073504],
		[0x17869438,0],
		[0x17869440,389073376],
		[0x17869448,389105568],
		[0x17869450,389059456],
		[0x17869458,0],
		[0x17869468,0],
		[0x17869470,385760592],
		[0x17869478,385760416],
		[0x17869480,394693920],
		[0x17869488,394707904],
		[0x17869490,0],
		[0x17869498,0],
		[0x178694a0,394696736],
		[0x178694a8,0],
		[0x178694c8,385765536],
		[0x178694d0,385763728],
		[0x178694d8,385763552],
		[0x178694e0,385763600],
		[0x178694e8,385764176],
		[0x178694f0,0],
		[0x178694f8,0],
		[0x17869500,0],
		[0x17869508,385764032],
		[0x17869510,0],
		[0x17869518,0],
		[0x17869520,394696352],
		[0x17869528,0],
		[0x17869538,0],
		[0x17869540,0],
		[0x17869548,385763472],
		[0x17869550,385763504],
		[0x17869558,385763504],
		[0x17869560,385763520],
		[0x17869568,0],
		[0x17869570,0],
		[0x17869578,0],
		[0x17869580,0],
		[0x17869588,0],
		[0x17869590,0],
		[0x17869598,0],
		[0x178695a0,0],
		[0x178695a8,0],
		[0x178695b8,0],
		[0x178695c0,0],
		[0x178695c8,385763472],
		[0x178695d0,385763504],
		[0x178695d8,385763504],
		[0x178695e0,0],
		[0x178695e8,0],
		[0x178695f0,0],
		[0x178695f8,0],
		[0x17869600,0],
		[0x17869608,0],
		[0x17869610,0],
		[0x17869618,0],
		[0x17869620,394695968],
		[0x17869628,389060160],
		[0x17869638,0],
		[0x17869648,385763472],
		[0x17869650,385763504],
		[0x17869658,385763504],
		[0x17869660,385770304],
		[0x17869668,0],
		[0x17869670,385769920],
		[0x17869678,0],
		[0x17869680,385769760],
		[0x17869688,385769472],
		[0x17869690,0],
		[0x17869698,0],
		[0x178696a0,0],
		[0x178696a8,0],
		[0x178696c0,0],
		[0x178696c8,385784304],
		[0x178696d0,385784336],
		[0x178696d8,385784336],
		[0x178696e0,0],
		[0x178696e8,0],
		[0x178696f0,0],
		[0x178696f8,0],
		[0x17869700,0],
		[0x17869708,0],
		[0x17869710,0],
		[0x17869718,0],
		[0x17869720,394696224],
		[0x17869728,0],
		[0x17869740,0],
		[0x17869748,385799024],
		[0x17869750,385798768],
		[0x17869758,385798480],
		[0x17869760,385798496],
		[0x17869768,385798896],
		[0x17869770,0],
		[0x17869778,385798496],
		[0x17869780,0],
		[0x17869788,385798656],
		[0x17869790,0],
		[0x17869798,0],
		[0x178697a0,394696480],
		[0x178697a8,0],
		[0x178697b8,0],
		[0x178697c0,0],
		[0x178697c8,385799312],
		[0x178697d0,385798768],
		[0x178697d8,385798480],
		[0x178697e0,385798496],
		[0x178697e8,385798896],
		[0x178697f0,0],
		[0x178697f8,385798496],
		[0x17869800,0],
		[0x17869808,385798656],
		[0x17869810,0],
		[0x17869818,0],
		[0x17869820,394696608],
		[0x17869828,0],
		[0x17869838,0],
		[0x17869840,0],
		[0x17869848,385799712],
		[0x17869850,385798768],
		[0x17869858,385798480],
		[0x17869860,385798496],
		[0x17869868,385798896],
		[0x17869870,0],
		[0x17869878,385798496],
		[0x17869880,0],
		[0x17869888,385798656],
		[0x17869890,0],
		[0x17869898,0],
		[0x178698a0,394696864],
		[0x178698a8,394696864],
		[0x178698b0,1043955712],
		[0x178698b8,0],
		[0x178698c0,0],
		[0x178698c8,0],
		[0x178698d0,0],
		[0x178698d8,389101120],
		[0x178698e0,0],
		[0x178698e8,0],
		[0x178698f0,389079520],
		[0x178698f8,0],
		[0x17869900,0],
		[0x17869908,0],
		[0x17869910,0],
		[0x17869918,0],
		[0x17869920,0],
		[0x17869928,0],
		[0x17869930,389101056],
		[0x17869938,0],
		[0x17869940,0],
		[0x17869948,0],
		[0x17869950,0],
		[0x17869958,0],
		[0x17869960,0],
		[0x17869968,0],
		[0x17869970,0],
		[0x17869978,0],
		[0x17869980,0],
		[0x17869988,0],
		[0x17869990,0],
		[0x17869998,0],
		[0x178699a0,0],
		[0x178699a8,0],
		[0x178699b0,0],
		[0x178699b8,0],
		[0x178699c0,0],
		[0x178699c8,0],
		[0x178699d0,0],
		[0x178699d8,0],
		[0x178699e0,0],
		[0x178699e8,0],
		[0x178699f0,0],
		[0x178699f8,0],
		[0x17869a00,0],
		[0x17869a08,0],
		[0x17869a10,0],
		[0x17869a18,0],
		[0x17869a20,0],
		[0x17869a28,0],
		[0x17869a30,0],
		[0x17869a38,0],
		[0x17869a40,0],
		[0x17869a48,0],
		[0x17869a50,0],
		[0x17869a58,0],
		[0x17869a80,1043980288],
		[0x17869a88,1043963904],
		[0x17869ac8,1040192256],
		[0x17869ad0,0],
		[0x17869ad8,0],
		[0x17869ae0,0],
		[0x17869ae8,0],
		[0x17869af0,0],
		[0x17869af8,0],
		[0x17869b00,389069312],
		[0x17869b08,0],
		[0x17869b10,389066112],
		[0x17869b18,0],
		[0x17869b20,0],
		[0x17869b28,0],
		[0x17869b30,0],
		[0x17869b38,0],
		[0x17869b40,0],
		[0x17869b48,0],
		[0x17869b50,0],
		[0x17869b58,0],
		[0x17869b60,0],
		[0x17869b68,389067168],
		[0x17869b70,0],
		[0x17869b78,0],
		[0x17869b80,0],
		[0x17869b88,0],
		[0x17869b90,0],
		[0x17869b98,0],
		[0x17869ba0,0],
		[0x17869ba8,0],
		[0x17869bb0,0],
		[0x17869bb8,0],
		[0x17869bc0,0],
		[0x17869bc8,0],
		[0x17869bd0,0],
		[0x17869bd8,0],
		[0x17869be0,0],
		[0x17869be8,0],
		[0x17869bf0,0],
		[0x17869bf8,0],
		[0x17869c00,0],
		[0x17869c08,0],
		[0x17869c10,0],
		[0x17869c18,0],
		[0x17869c20,0],
		[0x17869c28,389105984],
		[0x17869c30,0],
		[0x17869c38,0],
		[0x17869c40,0],
		[0x17869c48,0],
		[0x17869c50,0],
		[0x17869c58,389073632],
		[0x17869c60,0],
		[0x17869c68,0],
		[0x17869c70,0],
		[0x17869c78,0],
		[0x17869c80,0],
		[0x17869c88,0],
		[0x17869c90,0],
		[0x17869c98,0],
		[0x17869ca0,0],
		[0x17869ca8,0],
		[0x17869cb0,0],
		[0x17869cb8,0],
		[0x17869cc0,0],
		[0x17869cc8,0],
		[0x17869cd0,0],
		[0x17869cd8,0],
		[0x17869ce0,0],
		[0x17869ce8,0],
		[0x17869cf0,0],
		[0x17869cf8,0],
		[0x17869d00,0],
		[0x17869d08,0],
		[0x17869d10,0],
		[0x17869d18,0],
		[0x17869d20,0],
		[0x17869d28,0],
		[0x17869d30,0],
		[0x17869d38,0],
		[0x17869d40,0],
		[0x17869d48,0],
		[0x17869d50,0],
		[0x17869d58,0],
		[0x17869d60,0],
		[0x17869d68,0],
		[0x17869d70,0],
		[0x17869d78,0],
		[0x17869d80,0],
		[0x17869d88,0],
		[0x17869d90,0],
		[0x17869d98,0],
		[0x17869da0,0],
		[0x17869da8,0],
		[0x17869db0,0],
		[0x17869db8,0],
		[0x17869dc0,0],
		[0x17869dc8,0],
		[0x17869dd0,0],
		[0x17869dd8,0],
		[0x17869de0,0],
		[0x17869de8,0],
		[0x17869df0,0],
		[0x17869df8,0],
		[0x17869e00,0],
		[0x17869e08,0],
		[0x17869e10,0],
		[0x17869e18,0],
		[0x17869e20,0],
		[0x17869e28,0],
		[0x17869e30,0],
		[0x17869e38,0],
		[0x17869e40,0],
		[0x17869e48,0],
		[0x17869e50,0],
		[0x17869e58,0],
		[0x17869e60,0],
		[0x17869e68,0],
		[0x17869e70,0],
		[0x17869e78,0],
		[0x17869e80,0],
		[0x17869e88,0],
		[0x17869e90,0],
		[0x17869e98,0],
		[0x17869ea0,0],
		[0x17869ea8,0],
		[0x17869eb0,0],
		[0x17869eb8,0],
		[0x17869ec0,0],
		[0x17869ec8,0],
		[0x17869ed0,0],
		[0x17869ed8,0],
		[0x17869ee0,0],
		[0x17869ee8,0],
		[0x17869ef0,0],
		[0x17869ef8,0],
		[0x17869f00,0],
		[0x17869f08,0],
		[0x17869f10,0],
		[0x17869f18,0],
		[0x17869f20,0],
		[0x17869f28,0],
		[0x17869f30,0],
		[0x17869f38,0],
		[0x17869f40,0],
		[0x17869f48,0],
		[0x17869f50,0],
		[0x17869f58,0],
		[0x17869f60,0],
		[0x17869f68,0],
		[0x17869f70,0],
		[0x17869f78,0],
		[0x17869f80,0],
		[0x17869f88,0],
		[0x17869f90,0],
		[0x17869f98,0],
		[0x17869fa0,0],
		[0x17869fa8,0],
		[0x17869fb0,0],
		[0x17869fb8,0],
		[0x17869fc0,0],
		[0x17869fc8,0],
		[0x17869fd0,0],
		[0x17869fd8,0],
		[0x17869fe0,0],
		[0x17869fe8,0],
		[0x17869ff0,0],
		[0x17869ff8,0],
		[0x1786a000,0],
		[0x1786a008,0],
		[0x1786a010,0],
		[0x1786a018,0],
		[0x1786a020,0],
		[0x1786a028,0],
		[0x1786a030,0],
		[0x1786a038,0],
		[0x1786a040,0],
		[0x1786a048,0],
		[0x1786a050,0],
		[0x1786a058,0],
		[0x1786a060,0],
		[0x1786a068,0],
		[0x1786a070,0],
		[0x1786a078,0],
		[0x1786a080,0],
		[0x1786a088,0],
		[0x1786a090,0],
		[0x1786a098,0],
		[0x1786a0a0,0],
		[0x1786a0a8,0],
		[0x1786a0b0,0],
		[0x1786a0b8,0],
		[0x1786a0c0,0],
		[0x1786a0c8,0],
		[0x1786a0d0,0],
		[0x1786a0d8,0],
		[0x1786a0e0,0],
		[0x1786a0e8,0],
		[0x1786a0f0,0],
		[0x1786a0f8,0],
		[0x1786a100,0],
		[0x1786a108,0],
		[0x1786a110,0],
		[0x1786a118,0],
		[0x1786a120,0],
		[0x1786a128,0],
		[0x1786a130,0],
		[0x1786a138,0],
		[0x1786a140,0],
		[0x1786a148,0],
		[0x1786a150,0],
		[0x1786a158,0],
		[0x1786a160,0],
		[0x1786a168,0],
		[0x1786a170,0],
		[0x1786a178,0],
		[0x1786a180,0],
		[0x1786a188,0],
		[0x1786a190,0],
		[0x1786a198,0],
		[0x1786a1a0,0],
		[0x1786a1a8,0],
		[0x1786a1b0,0],
		[0x1786a1b8,0],
		[0x1786a1c0,0],
		[0x1786a1c8,0],
		[0x1786a1d0,0],
		[0x1786a1d8,0],
		[0x1786a1e0,0],
		[0x1786a1e8,0],
		[0x1786a1f0,0],
		[0x1786a1f8,0],
		[0x1786a200,0],
		[0x1786a208,0],
		[0x1786a210,0],
		[0x1786a218,0],
		[0x1786a220,0],
		[0x1786a228,0],
		[0x1786a230,0],
		[0x1786a238,0],
		[0x1786a240,0],
		[0x1786a248,0],
		[0x1786a250,0],
		[0x1786a258,0],
		[0x1786a260,0],
		[0x1786a268,0],
		[0x1786a270,0],
		[0x1786a278,0],
		[0x1786a280,0],
		[0x1786a288,0],
		[0x1786a290,0],
		[0x1786a298,0],
		[0x1786a2a0,0],
		[0x1786a2a8,0],
		[0x1786a2b0,0],
		[0x1786a2b8,0],
		[0x1786a2c0,0],
		[0x1786a2c8,0],
		[0x1786a2d0,0],
		[0x1786a2d8,0],
		[0x1786a2e0,0],
		[0x1786a2e8,389069344],
		[0x1786a2f0,389069408],
		[0x1786a2f8,0],
		[0x1786a300,0],
		[0x1786a308,0],
		[0x1786a310,394277056],
		[0x1786a318,0],
		[0x1786a320,0],
		[0x1786a328,0],
		[0x1786a330,0],
		[0x1786a338,0],
		[0x1786a340,0],
		[0x1786a348,0],
		[0x1786a350,0],
		[0x1786a358,0],
		[0x1786a360,0],
		[0x1786a368,394276992],
		[0x1786a370,0],
		[0x1786a378,0],
		[0x1786a380,0],
		[0x1786a388,0],
		[0x1786a390,0],
		[0x1786a398,0],
		[0x1786a3a0,0],
		[0x1786a3a8,0],
		[0x1786a3b0,0],
		[0x1786a3b8,0],
		[0x1786a3c0,0],
		[0x1786a3c8,0],
		[0x1786a3d0,0],
		[0x1786a3d8,0],
		[0x1786a3e0,0],
		[0x1786a3e8,0],
		[0, 0]
]).
unknown([
		[0x17869a98,644245094400552],
		[0, 0]
]).
long([
		[0x17869460,677989],
		[0x178695b0,1886351214],
		[0x17869640,8],
		[0x178697b0,478459553378],
		[0x17869830,478459553392],
		[0x17869a60,139456],
		[0x17869a68,536870912008],
		[0x17869a70,15000],
		[0x17869a78,3671704096],
		[0x17869a90,1099511702776],
		[0x17869aa0,1073741825250],
		[0x17869aa8,21474841600],
		[0x17869ab0,9],
		[0x17869ab8,128849019030000],
		[0x17869ac0,65664],
		[0, 0]
]).
int([
		[0x17869400,0],
		[0x17869404,0],
		[0x17869418,0],
		[0x1786941c,0],
		[0x17869420,0],
		[0x17869424,0],
		[0x17869428,0],
		[0x1786942c,0],
		[0x17869438,0],
		[0x1786943c,0],
		[0x17869458,0],
		[0x1786945c,0],
		[0x17869464,0],
		[0x17869468,0],
		[0x1786946c,0],
		[0x17869490,0],
		[0x17869494,0],
		[0x17869498,0],
		[0x1786949c,0],
		[0x178694a8,0],
		[0x178694ac,0],
		[0x178694b8,29811],
		[0x178694bc,0],
		[0x178694c0,80],
		[0x178694c4,0],
		[0x178694f0,0],
		[0x178694f4,0],
		[0x178694f8,0],
		[0x178694fc,0],
		[0x17869500,0],
		[0x17869504,0],
		[0x17869510,0],
		[0x17869514,0],
		[0x17869518,0],
		[0x1786951c,0],
		[0x17869528,0],
		[0x1786952c,0],
		[0x17869538,0],
		[0x1786953c,0],
		[0x17869540,0],
		[0x17869544,0],
		[0x17869568,0],
		[0x1786956c,0],
		[0x17869570,0],
		[0x17869574,0],
		[0x17869578,0],
		[0x1786957c,0],
		[0x17869580,0],
		[0x17869584,0],
		[0x17869588,0],
		[0x1786958c,0],
		[0x17869590,0],
		[0x17869594,0],
		[0x17869598,0],
		[0x1786959c,0],
		[0x178695a0,0],
		[0x178695a4,0],
		[0x178695a8,0],
		[0x178695ac,0],
		[0x178695b4,0],
		[0x178695b8,0],
		[0x178695bc,0],
		[0x178695c0,0],
		[0x178695c4,0],
		[0x178695e0,0],
		[0x178695e4,0],
		[0x178695e8,0],
		[0x178695ec,0],
		[0x178695f0,0],
		[0x178695f4,0],
		[0x178695f8,0],
		[0x178695fc,0],
		[0x17869600,0],
		[0x17869604,0],
		[0x17869608,0],
		[0x1786960c,0],
		[0x17869610,0],
		[0x17869614,0],
		[0x17869618,0],
		[0x1786961c,0],
		[0x17869630,29037],
		[0x17869634,0],
		[0x17869638,0],
		[0x1786963c,0],
		[0x17869640,8],
		[0x17869644,0],
		[0x17869668,0],
		[0x1786966c,0],
		[0x17869678,0],
		[0x1786967c,0],
		[0x17869690,0],
		[0x17869694,0],
		[0x17869698,0],
		[0x1786969c,0],
		[0x178696a0,0],
		[0x178696a4,0],
		[0x178696a8,0],
		[0x178696ac,0],
		[0x178696b8,101],
		[0x178696bc,0],
		[0x178696c0,0],
		[0x178696c4,0],
		[0x178696e0,0],
		[0x178696e4,0],
		[0x178696e8,0],
		[0x178696ec,0],
		[0x178696f0,0],
		[0x178696f4,0],
		[0x178696f8,0],
		[0x178696fc,0],
		[0x17869700,0],
		[0x17869704,0],
		[0x17869708,0],
		[0x1786970c,0],
		[0x17869710,0],
		[0x17869714,0],
		[0x17869718,0],
		[0x1786971c,0],
		[0x17869728,0],
		[0x1786972c,0],
		[0x17869740,0],
		[0x17869744,0],
		[0x17869770,0],
		[0x17869774,0],
		[0x17869780,0],
		[0x17869784,0],
		[0x17869790,0],
		[0x17869794,0],
		[0x17869798,0],
		[0x1786979c,0],
		[0x178697a8,0],
		[0x178697ac,0],
		[0x178697b4,111],
		[0x178697b8,0],
		[0x178697bc,0],
		[0x178697c0,0],
		[0x178697c4,0],
		[0x178697f0,0],
		[0x178697f4,0],
		[0x17869800,0],
		[0x17869804,0],
		[0x17869810,0],
		[0x17869814,0],
		[0x17869818,0],
		[0x1786981c,0],
		[0x17869828,0],
		[0x1786982c,0],
		[0x17869834,111],
		[0x17869838,0],
		[0x1786983c,0],
		[0x17869840,0],
		[0x17869844,0],
		[0x17869870,0],
		[0x17869874,0],
		[0x17869880,0],
		[0x17869884,0],
		[0x17869890,0],
		[0x17869894,0],
		[0x17869898,0],
		[0x1786989c,0],
		[0x178698b8,0],
		[0x178698bc,0],
		[0x178698c0,0],
		[0x178698c4,0],
		[0x178698c8,0],
		[0x178698cc,0],
		[0x178698d0,0],
		[0x178698d4,0],
		[0x178698e0,0],
		[0x178698e4,0],
		[0x178698e8,0],
		[0x178698ec,0],
		[0x178698f8,0],
		[0x178698fc,0],
		[0x17869900,0],
		[0x17869904,0],
		[0x17869908,0],
		[0x1786990c,0],
		[0x17869910,0],
		[0x17869914,0],
		[0x17869918,0],
		[0x1786991c,0],
		[0x17869920,0],
		[0x17869924,0],
		[0x17869928,0],
		[0x1786992c,0],
		[0x17869938,0],
		[0x1786993c,0],
		[0x17869940,0],
		[0x17869944,0],
		[0x17869948,0],
		[0x1786994c,0],
		[0x17869950,0],
		[0x17869954,0],
		[0x17869958,0],
		[0x1786995c,0],
		[0x17869960,0],
		[0x17869964,0],
		[0x17869968,0],
		[0x1786996c,0],
		[0x17869970,0],
		[0x17869974,0],
		[0x17869978,0],
		[0x1786997c,0],
		[0x17869980,0],
		[0x17869984,0],
		[0x17869988,0],
		[0x1786998c,0],
		[0x17869990,0],
		[0x17869994,0],
		[0x17869998,0],
		[0x1786999c,0],
		[0x178699a0,0],
		[0x178699a4,0],
		[0x178699a8,0],
		[0x178699ac,0],
		[0x178699b0,0],
		[0x178699b4,0],
		[0x178699b8,0],
		[0x178699bc,0],
		[0x178699c0,0],
		[0x178699c4,0],
		[0x178699c8,0],
		[0x178699cc,0],
		[0x178699d0,0],
		[0x178699d4,0],
		[0x178699d8,0],
		[0x178699dc,0],
		[0x178699e0,0],
		[0x178699e4,0],
		[0x178699e8,0],
		[0x178699ec,0],
		[0x178699f0,0],
		[0x178699f4,0],
		[0x178699f8,0],
		[0x178699fc,0],
		[0x17869a00,0],
		[0x17869a04,0],
		[0x17869a08,0],
		[0x17869a0c,0],
		[0x17869a10,0],
		[0x17869a14,0],
		[0x17869a18,0],
		[0x17869a1c,0],
		[0x17869a20,0],
		[0x17869a24,0],
		[0x17869a28,0],
		[0x17869a2c,0],
		[0x17869a30,0],
		[0x17869a34,0],
		[0x17869a38,0],
		[0x17869a3c,0],
		[0x17869a40,0],
		[0x17869a44,0],
		[0x17869a48,0],
		[0x17869a4c,0],
		[0x17869a50,0],
		[0x17869a54,0],
		[0x17869a58,0],
		[0x17869a5c,0],
		[0x17869a64,0],
		[0x17869a68,8],
		[0x17869a6c,125],
		[0x17869a70,15000],
		[0x17869a74,0],
		[0x17869a7c,0],
		[0x17869a94,256],
		[0x17869a98,552],
		[0x17869aa0,1250],
		[0x17869aa4,250],
		[0x17869aa8,5120],
		[0x17869aac,5],
		[0x17869ab0,9],
		[0x17869ab4,0],
		[0x17869abc,30000],
		[0x17869ac4,0],
		[0x17869ad0,0],
		[0x17869ad4,0],
		[0x17869ad8,0],
		[0x17869adc,0],
		[0x17869ae0,0],
		[0x17869ae4,0],
		[0x17869ae8,0],
		[0x17869aec,0],
		[0x17869af0,0],
		[0x17869af4,0],
		[0x17869af8,0],
		[0x17869afc,0],
		[0x17869b08,0],
		[0x17869b0c,0],
		[0x17869b18,0],
		[0x17869b1c,0],
		[0x17869b20,0],
		[0x17869b24,0],
		[0x17869b28,0],
		[0x17869b2c,0],
		[0x17869b30,0],
		[0x17869b34,0],
		[0x17869b38,0],
		[0x17869b3c,0],
		[0x17869b40,0],
		[0x17869b44,0],
		[0x17869b48,0],
		[0x17869b4c,0],
		[0x17869b50,0],
		[0x17869b54,0],
		[0x17869b58,0],
		[0x17869b5c,0],
		[0x17869b60,0],
		[0x17869b64,0],
		[0x17869b70,0],
		[0x17869b74,0],
		[0x17869b78,0],
		[0x17869b7c,0],
		[0x17869b80,0],
		[0x17869b84,0],
		[0x17869b88,0],
		[0x17869b8c,0],
		[0x17869b90,0],
		[0x17869b94,0],
		[0x17869b98,0],
		[0x17869b9c,0],
		[0x17869ba0,0],
		[0x17869ba4,0],
		[0x17869ba8,0],
		[0x17869bac,0],
		[0x17869bb0,0],
		[0x17869bb4,0],
		[0x17869bb8,0],
		[0x17869bbc,0],
		[0x17869bc0,0],
		[0x17869bc4,0],
		[0x17869bc8,0],
		[0x17869bcc,0],
		[0x17869bd0,0],
		[0x17869bd4,0],
		[0x17869bd8,0],
		[0x17869bdc,0],
		[0x17869be0,0],
		[0x17869be4,0],
		[0x17869be8,0],
		[0x17869bec,0],
		[0x17869bf0,0],
		[0x17869bf4,0],
		[0x17869bf8,0],
		[0x17869bfc,0],
		[0x17869c00,0],
		[0x17869c04,0],
		[0x17869c08,0],
		[0x17869c0c,0],
		[0x17869c10,0],
		[0x17869c14,0],
		[0x17869c18,0],
		[0x17869c1c,0],
		[0x17869c20,0],
		[0x17869c24,0],
		[0x17869c30,0],
		[0x17869c34,0],
		[0x17869c38,0],
		[0x17869c3c,0],
		[0x17869c40,0],
		[0x17869c44,0],
		[0x17869c48,0],
		[0x17869c4c,0],
		[0x17869c50,0],
		[0x17869c54,0],
		[0x17869c60,0],
		[0x17869c64,0],
		[0x17869c68,0],
		[0x17869c6c,0],
		[0x17869c70,0],
		[0x17869c74,0],
		[0x17869c78,0],
		[0x17869c7c,0],
		[0x17869c80,0],
		[0x17869c84,0],
		[0x17869c88,0],
		[0x17869c8c,0],
		[0x17869c90,0],
		[0x17869c94,0],
		[0x17869c98,0],
		[0x17869c9c,0],
		[0x17869ca0,0],
		[0x17869ca4,0],
		[0x17869ca8,0],
		[0x17869cac,0],
		[0x17869cb0,0],
		[0x17869cb4,0],
		[0x17869cb8,0],
		[0x17869cbc,0],
		[0x17869cc0,0],
		[0x17869cc4,0],
		[0x17869cc8,0],
		[0x17869ccc,0],
		[0x17869cd0,0],
		[0x17869cd4,0],
		[0x17869cd8,0],
		[0x17869cdc,0],
		[0x17869ce0,0],
		[0x17869ce4,0],
		[0x17869ce8,0],
		[0x17869cec,0],
		[0x17869cf0,0],
		[0x17869cf4,0],
		[0x17869cf8,0],
		[0x17869cfc,0],
		[0x17869d00,0],
		[0x17869d04,0],
		[0x17869d08,0],
		[0x17869d0c,0],
		[0x17869d10,0],
		[0x17869d14,0],
		[0x17869d18,0],
		[0x17869d1c,0],
		[0x17869d20,0],
		[0x17869d24,0],
		[0x17869d28,0],
		[0x17869d2c,0],
		[0x17869d30,0],
		[0x17869d34,0],
		[0x17869d38,0],
		[0x17869d3c,0],
		[0x17869d40,0],
		[0x17869d44,0],
		[0x17869d48,0],
		[0x17869d4c,0],
		[0x17869d50,0],
		[0x17869d54,0],
		[0x17869d58,0],
		[0x17869d5c,0],
		[0x17869d60,0],
		[0x17869d64,0],
		[0x17869d68,0],
		[0x17869d6c,0],
		[0x17869d70,0],
		[0x17869d74,0],
		[0x17869d78,0],
		[0x17869d7c,0],
		[0x17869d80,0],
		[0x17869d84,0],
		[0x17869d88,0],
		[0x17869d8c,0],
		[0x17869d90,0],
		[0x17869d94,0],
		[0x17869d98,0],
		[0x17869d9c,0],
		[0x17869da0,0],
		[0x17869da4,0],
		[0x17869da8,0],
		[0x17869dac,0],
		[0x17869db0,0],
		[0x17869db4,0],
		[0x17869db8,0],
		[0x17869dbc,0],
		[0x17869dc0,0],
		[0x17869dc4,0],
		[0x17869dc8,0],
		[0x17869dcc,0],
		[0x17869dd0,0],
		[0x17869dd4,0],
		[0x17869dd8,0],
		[0x17869ddc,0],
		[0x17869de0,0],
		[0x17869de4,0],
		[0x17869de8,0],
		[0x17869dec,0],
		[0x17869df0,0],
		[0x17869df4,0],
		[0x17869df8,0],
		[0x17869dfc,0],
		[0x17869e00,0],
		[0x17869e04,0],
		[0x17869e08,0],
		[0x17869e0c,0],
		[0x17869e10,0],
		[0x17869e14,0],
		[0x17869e18,0],
		[0x17869e1c,0],
		[0x17869e20,0],
		[0x17869e24,0],
		[0x17869e28,0],
		[0x17869e2c,0],
		[0x17869e30,0],
		[0x17869e34,0],
		[0x17869e38,0],
		[0x17869e3c,0],
		[0x17869e40,0],
		[0x17869e44,0],
		[0x17869e48,0],
		[0x17869e4c,0],
		[0x17869e50,0],
		[0x17869e54,0],
		[0x17869e58,0],
		[0x17869e5c,0],
		[0x17869e60,0],
		[0x17869e64,0],
		[0x17869e68,0],
		[0x17869e6c,0],
		[0x17869e70,0],
		[0x17869e74,0],
		[0x17869e78,0],
		[0x17869e7c,0],
		[0x17869e80,0],
		[0x17869e84,0],
		[0x17869e88,0],
		[0x17869e8c,0],
		[0x17869e90,0],
		[0x17869e94,0],
		[0x17869e98,0],
		[0x17869e9c,0],
		[0x17869ea0,0],
		[0x17869ea4,0],
		[0x17869ea8,0],
		[0x17869eac,0],
		[0x17869eb0,0],
		[0x17869eb4,0],
		[0x17869eb8,0],
		[0x17869ebc,0],
		[0x17869ec0,0],
		[0x17869ec4,0],
		[0x17869ec8,0],
		[0x17869ecc,0],
		[0x17869ed0,0],
		[0x17869ed4,0],
		[0x17869ed8,0],
		[0x17869edc,0],
		[0x17869ee0,0],
		[0x17869ee4,0],
		[0x17869ee8,0],
		[0x17869eec,0],
		[0x17869ef0,0],
		[0x17869ef4,0],
		[0x17869ef8,0],
		[0x17869efc,0],
		[0x17869f00,0],
		[0x17869f04,0],
		[0x17869f08,0],
		[0x17869f0c,0],
		[0x17869f10,0],
		[0x17869f14,0],
		[0x17869f18,0],
		[0x17869f1c,0],
		[0x17869f20,0],
		[0x17869f24,0],
		[0x17869f28,0],
		[0x17869f2c,0],
		[0x17869f30,0],
		[0x17869f34,0],
		[0x17869f38,0],
		[0x17869f3c,0],
		[0x17869f40,0],
		[0x17869f44,0],
		[0x17869f48,0],
		[0x17869f4c,0],
		[0x17869f50,0],
		[0x17869f54,0],
		[0x17869f58,0],
		[0x17869f5c,0],
		[0x17869f60,0],
		[0x17869f64,0],
		[0x17869f68,0],
		[0x17869f6c,0],
		[0x17869f70,0],
		[0x17869f74,0],
		[0x17869f78,0],
		[0x17869f7c,0],
		[0x17869f80,0],
		[0x17869f84,0],
		[0x17869f88,0],
		[0x17869f8c,0],
		[0x17869f90,0],
		[0x17869f94,0],
		[0x17869f98,0],
		[0x17869f9c,0],
		[0x17869fa0,0],
		[0x17869fa4,0],
		[0x17869fa8,0],
		[0x17869fac,0],
		[0x17869fb0,0],
		[0x17869fb4,0],
		[0x17869fb8,0],
		[0x17869fbc,0],
		[0x17869fc0,0],
		[0x17869fc4,0],
		[0x17869fc8,0],
		[0x17869fcc,0],
		[0x17869fd0,0],
		[0x17869fd4,0],
		[0x17869fd8,0],
		[0x17869fdc,0],
		[0x17869fe0,0],
		[0x17869fe4,0],
		[0x17869fe8,0],
		[0x17869fec,0],
		[0x17869ff0,0],
		[0x17869ff4,0],
		[0x17869ff8,0],
		[0x17869ffc,0],
		[0x1786a000,0],
		[0x1786a004,0],
		[0x1786a008,0],
		[0x1786a00c,0],
		[0x1786a010,0],
		[0x1786a014,0],
		[0x1786a018,0],
		[0x1786a01c,0],
		[0x1786a020,0],
		[0x1786a024,0],
		[0x1786a028,0],
		[0x1786a02c,0],
		[0x1786a030,0],
		[0x1786a034,0],
		[0x1786a038,0],
		[0x1786a03c,0],
		[0x1786a040,0],
		[0x1786a044,0],
		[0x1786a048,0],
		[0x1786a04c,0],
		[0x1786a050,0],
		[0x1786a054,0],
		[0x1786a058,0],
		[0x1786a05c,0],
		[0x1786a060,0],
		[0x1786a064,0],
		[0x1786a068,0],
		[0x1786a06c,0],
		[0x1786a070,0],
		[0x1786a074,0],
		[0x1786a078,0],
		[0x1786a07c,0],
		[0x1786a080,0],
		[0x1786a084,0],
		[0x1786a088,0],
		[0x1786a08c,0],
		[0x1786a090,0],
		[0x1786a094,0],
		[0x1786a098,0],
		[0x1786a09c,0],
		[0x1786a0a0,0],
		[0x1786a0a4,0],
		[0x1786a0a8,0],
		[0x1786a0ac,0],
		[0x1786a0b0,0],
		[0x1786a0b4,0],
		[0x1786a0b8,0],
		[0x1786a0bc,0],
		[0x1786a0c0,0],
		[0x1786a0c4,0],
		[0x1786a0c8,0],
		[0x1786a0cc,0],
		[0x1786a0d0,0],
		[0x1786a0d4,0],
		[0x1786a0d8,0],
		[0x1786a0dc,0],
		[0x1786a0e0,0],
		[0x1786a0e4,0],
		[0x1786a0e8,0],
		[0x1786a0ec,0],
		[0x1786a0f0,0],
		[0x1786a0f4,0],
		[0x1786a0f8,0],
		[0x1786a0fc,0],
		[0x1786a100,0],
		[0x1786a104,0],
		[0x1786a108,0],
		[0x1786a10c,0],
		[0x1786a110,0],
		[0x1786a114,0],
		[0x1786a118,0],
		[0x1786a11c,0],
		[0x1786a120,0],
		[0x1786a124,0],
		[0x1786a128,0],
		[0x1786a12c,0],
		[0x1786a130,0],
		[0x1786a134,0],
		[0x1786a138,0],
		[0x1786a13c,0],
		[0x1786a140,0],
		[0x1786a144,0],
		[0x1786a148,0],
		[0x1786a14c,0],
		[0x1786a150,0],
		[0x1786a154,0],
		[0x1786a158,0],
		[0x1786a15c,0],
		[0x1786a160,0],
		[0x1786a164,0],
		[0x1786a168,0],
		[0x1786a16c,0],
		[0x1786a170,0],
		[0x1786a174,0],
		[0x1786a178,0],
		[0x1786a17c,0],
		[0x1786a180,0],
		[0x1786a184,0],
		[0x1786a188,0],
		[0x1786a18c,0],
		[0x1786a190,0],
		[0x1786a194,0],
		[0x1786a198,0],
		[0x1786a19c,0],
		[0x1786a1a0,0],
		[0x1786a1a4,0],
		[0x1786a1a8,0],
		[0x1786a1ac,0],
		[0x1786a1b0,0],
		[0x1786a1b4,0],
		[0x1786a1b8,0],
		[0x1786a1bc,0],
		[0x1786a1c0,0],
		[0x1786a1c4,0],
		[0x1786a1c8,0],
		[0x1786a1cc,0],
		[0x1786a1d0,0],
		[0x1786a1d4,0],
		[0x1786a1d8,0],
		[0x1786a1dc,0],
		[0x1786a1e0,0],
		[0x1786a1e4,0],
		[0x1786a1e8,0],
		[0x1786a1ec,0],
		[0x1786a1f0,0],
		[0x1786a1f4,0],
		[0x1786a1f8,0],
		[0x1786a1fc,0],
		[0x1786a200,0],
		[0x1786a204,0],
		[0x1786a208,0],
		[0x1786a20c,0],
		[0x1786a210,0],
		[0x1786a214,0],
		[0x1786a218,0],
		[0x1786a21c,0],
		[0x1786a220,0],
		[0x1786a224,0],
		[0x1786a228,0],
		[0x1786a22c,0],
		[0x1786a230,0],
		[0x1786a234,0],
		[0x1786a238,0],
		[0x1786a23c,0],
		[0x1786a240,0],
		[0x1786a244,0],
		[0x1786a248,0],
		[0x1786a24c,0],
		[0x1786a250,0],
		[0x1786a254,0],
		[0x1786a258,0],
		[0x1786a25c,0],
		[0x1786a260,0],
		[0x1786a264,0],
		[0x1786a268,0],
		[0x1786a26c,0],
		[0x1786a270,0],
		[0x1786a274,0],
		[0x1786a278,0],
		[0x1786a27c,0],
		[0x1786a280,0],
		[0x1786a284,0],
		[0x1786a288,0],
		[0x1786a28c,0],
		[0x1786a290,0],
		[0x1786a294,0],
		[0x1786a298,0],
		[0x1786a29c,0],
		[0x1786a2a0,0],
		[0x1786a2a4,0],
		[0x1786a2a8,0],
		[0x1786a2ac,0],
		[0x1786a2b0,0],
		[0x1786a2b4,0],
		[0x1786a2b8,0],
		[0x1786a2bc,0],
		[0x1786a2c0,0],
		[0x1786a2c4,0],
		[0x1786a2c8,0],
		[0x1786a2cc,0],
		[0x1786a2d0,0],
		[0x1786a2d4,0],
		[0x1786a2d8,0],
		[0x1786a2dc,0],
		[0x1786a2e0,0],
		[0x1786a2e4,0],
		[0x1786a2f8,0],
		[0x1786a2fc,0],
		[0x1786a300,0],
		[0x1786a304,0],
		[0x1786a308,0],
		[0x1786a30c,0],
		[0x1786a318,0],
		[0x1786a31c,0],
		[0x1786a320,0],
		[0x1786a324,0],
		[0x1786a328,0],
		[0x1786a32c,0],
		[0x1786a330,0],
		[0x1786a334,0],
		[0x1786a338,0],
		[0x1786a33c,0],
		[0x1786a340,0],
		[0x1786a344,0],
		[0x1786a348,0],
		[0x1786a34c,0],
		[0x1786a350,0],
		[0x1786a354,0],
		[0x1786a358,0],
		[0x1786a35c,0],
		[0x1786a360,0],
		[0x1786a364,0],
		[0x1786a370,0],
		[0x1786a374,0],
		[0x1786a378,0],
		[0x1786a37c,0],
		[0x1786a380,0],
		[0x1786a384,0],
		[0x1786a388,0],
		[0x1786a38c,0],
		[0x1786a390,0],
		[0x1786a394,0],
		[0x1786a398,0],
		[0x1786a39c,0],
		[0x1786a3a0,0],
		[0x1786a3a4,0],
		[0x1786a3a8,0],
		[0x1786a3ac,0],
		[0x1786a3b0,0],
		[0x1786a3b4,0],
		[0x1786a3b8,0],
		[0x1786a3bc,0],
		[0x1786a3c0,0],
		[0x1786a3c4,0],
		[0x1786a3c8,0],
		[0x1786a3cc,0],
		[0x1786a3d0,0],
		[0x1786a3d4,0],
		[0x1786a3d8,0],
		[0x1786a3dc,0],
		[0x1786a3e0,0],
		[0x1786a3e4,0],
		[0x1786a3e8,0],
		[0x1786a3ec,0],
		[0, 0]
]).
string_val([
		[0x178694b0,7018402001367688816],
		[0x178694b8,29811],
		[0x178694c0,80],
		[0x17869530,28558051270291310],
		[0x178695b0,1886351214],
		[0x17869630,29037],
		[0x178696b0,7813578688949218402],
		[0x178696b8,101],
		[0x17869730,7307195327472821872],
		[0x17869738,31647734492521569],
		[0x178697b0,478459553378],
		[0x17869830,478459553392],
		[0, 0]
]).
:- use_module(library(clpfd)).

isTrue([X, _]):-
    X == 49.

isTrue([_|Tail]):-
    isTrue(Tail).

log(File_name, Name, Addr, Base):-
    Offset #= Addr - Base,
    open(File_name, append, Stream),
    write(Stream, Name),
    write(Stream, ':'),
    write(Stream, Offset),
    nl(Stream),
    close(Stream).

start_query(Base_addr) :- 
    pointer(Ptr),
    string_val(Str),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Real_parent_addr, Real_parent_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    chain([MM2_addr, Real_parent_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    Real_parent_addr #> Comm_addr - 500,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    labeling([enum], [Real_parent_addr, Real_parent_val,  Comm_addr, Comm_val]),
    process_create(path('python'),
                ['subquery.py', Real_parent_val, "task_struct"],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

    

query_task_struct(Base_addr) :-
    statistics(real_time, [Start|_]),
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM_addr, MM_val],
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Tasks2_addr, Tasks2_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Real_cred_addr, Real_cred_val],
        [Cred_addr, Cred_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, Tasks2_addr, MM_addr, MM2_addr, Pid_addr, Tgid_addr, Real_parent_addr, Parent_addr , Child_addr, 
           Group_leader_addr, Thread_group_addr, Real_cred_addr, Cred_addr, Comm_addr], #<),
    %MM2_addr #> Base_addr + 1000,
    MM2_addr #= MM_addr + 8,
    Tasks_addr #> MM2_addr - 100,
    Tasks2_addr #= Tasks_addr + 8,

    Tgid_addr #= Pid_addr + 4,
    Real_parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr - 8,
    Child_addr #= Parent_addr + 8,
    %FIXME This may be too strong
    %Children next and prev 16 
    %Sibling next and prev  16
    Group_leader_addr #=< Child_addr +32,
    Cred_addr #= Real_cred_addr + 8,
    MM2_addr #= Base_addr + 1992,
    /*Comm_addr #= Base_addr + 1656,*/
    Tasks_addr #= Base_addr + 1904,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    label([MM_addr, MM_val]),
    % make query after labeling
    MM2_val #> 0,
    integer(MM2_val),
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val, Comm_addr, Comm_val, Pid_addr, Tgid_addr]),

    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    labeling([enum], [Tasks2_addr, Tasks2_val]),

    labeling([enum], [Real_parent_addr, Real_parent_val, Group_leader_addr, Group_leader_val, Child_addr, Child_val]),
    Real_parent_val #> 0,
    Group_leader_val #> 0,
    query_ts(Real_parent_val, Comm_offset, Tasks_offset),
    %query_list_head(Child_val-16, Comm_offset, Tasks_offset),
    query_ts(Group_leader_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_cred_addr, Real_cred_val, Cred_addr, Cred_val]),
    Cred_val #> 0,
    query_cred(Real_cred_val),
    query_cred(Cred_val),


    get_time(Now),
    Time_past is Now - Current,
    statistics(real_time, [End|_]),

    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    log("./profile/task_struct", "tasks", Tasks_addr, Base_addr),
    log("./profile/task_struct", "active_mm_struct", MM2_addr, Base_addr),
    log("./profile/task_struct", "comm", Comm_addr, Base_addr),
    log("./profile/task_struct", "parent", Parent_addr, Base_addr),
    log("./profile/task_struct", "group_leader", Group_leader_addr, Base_addr),
    log("./profile/task_struct", "cred", Cred_addr, Base_addr),
    log("./profile/task_struct", "pid", Pid_addr, Base_addr),
    log("./profile/task_struct", "task_struct", End, Start),

    print_nl('tasks offset', Tasks_offset),
    print_nl('tasks offset', Tasks_val),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).

query_module(Base_addr) :-
    /* struct list_head list;
       char name[LEN]; 
       struct kernel_param *kp;
       struct module_layout core_layout;
       struct module_layout init_layout; 
       unsigned int core_size, init_size;
       unsigned int init_text_size, core_text_size;
    */
    %get_time(Current),
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [List_addr, List_val],
        [KP_addr, KP_val],
        [Core_base_addr, Core_base_val]
    ]),
    Str_profile = ([
        [Name_addr, Name_val]    
    ]),
    Int_profile = ([
        [Core_size_addr, Core_size_val],
        [Core_text_size_addr, Core_text_size_val],
        [RO_size_addr, RO_size_val],
        [RO_init_size_addr, RO_init_size_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),
    /* Order Invariants */
    chain([List_addr, Name_addr, KP_addr, Core_base_addr, Core_size_addr, 
            Core_text_size_addr, RO_size_addr, RO_init_size_addr], #<),
    RO_init_size_addr - Base_addr #< 1000,
    
    labeling([enum], [Name_addr, Name_val]),
    List_addr #= Name_addr - 16,
    labeling([enum], [List_addr, List_val]),
    Name_offset #= Name_addr - Base_addr,
    List_offset #= List_addr - Base_addr,
    query_list_head(List_val, Name_offset, List_offset),
    KP_val #> 0,
    labeling([enum], [KP_addr, KP_val]),
    query_kernel_param(KP_val),
    Core_size_addr #= Core_base_addr + 8,
    Core_size_val #> 0,
    Core_text_size_addr #= Core_size_addr + 4,
    Core_text_size_val #> 0,
    RO_size_addr #= Core_text_size_addr + 4,
    RO_init_size_addr #= RO_size_addr + 4,

    labeling([enum], [Core_base_addr, Core_size_addr, 
            Core_text_size_addr, RO_size_addr, RO_init_size_addr]),

    %get_time(End),
    statistics(real_time, [End|_]),
    %Time_past is End - Current,
    log("./profile/module", "list", List_addr, Base_addr),
    log("./profile/module", "name", Name_addr, Base_addr),
    log("./profile/module", "kp", KP_addr, Base_addr),
    log("./profile/module", "core_base", Core_base_addr, Base_addr),
    log("./profile/module", "core_size", Core_size_addr, Base_addr),
    log("./profile/module", "core_text_size", Core_text_size_addr, Base_addr),
    log("./profile/module", "module", End, Start).
    %print_nl("Finished, total time", Time_past).

query_mount_hash(Base_addr) :-
    pointer(Ptr),
    Ptr_profile = ([
        [Mount_addr, Mount_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Mount_addr #< Base_addr + 250,
    Mount_val #> 0,
    labeling([enum], [Mount_addr, Mount_val]),
    query_mount(Mount_val).

query_net_device(Base_addr) :- 
    /*
        char             name[NAMSIZ];
        struct list_head dev_list;
        unsigned char    addr_len;
        unsigned int     promiscuity;
        struct in_device *ip_ptr;
    */
    statistics(real_time, [Start|_]),
    %get_time(Current),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Dev_list_addr, Dev_list_val],
        [IP_ptr_addr, IP_ptr_val]
    ]),
    Str_profile = ([
        [Name_addr, Name_val]
    ]),
    Int_profile = ([
        [Promisc_addr, Promisc_val],
        [Addr_len_addr, Addr_len_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),
    /* Hard to determine offsets for addr_len and promisc */
    chain([Name_addr, Dev_list_addr, Addr_len_addr, Promisc_addr, IP_ptr_addr], #<),
    Name_addr #>= Base_addr,
    Name_offset #= Name_addr - Base_addr,
    IP_ptr_addr #< Base_addr + 1000,
    /* dev_list offset can be hardcoded since it remains the same */
    Dev_list_addr #= Base_addr + 80,
    labeling([enum], [Name_addr, Dev_list_addr, Dev_list_val]),
    /* do not have a good constrain to narrow down ip_ptr, use its rough offset
       to reduce the search space. 
     */
    IP_ptr_addr #> Base_addr + 700,
    IP_ptr_val #> 0,
    labeling([enum], [IP_ptr_addr, IP_ptr_val]),
    query_in_device(IP_ptr_val),

    %get_time(End),
    %Time_past is End - Current,
    statistics(real_time, [End|_]),

    log("./profile/net_device", "name", Name_addr, Base_addr),
    log("./profile/net_device", "ip_ptr", IP_ptr_addr, Base_addr),
    log("./profile/net_device", "dev_list", Dev_list_addr, Base_addr),
    log("./profile/net_device", "time", End, Start).


query_inet_sock(Base_addr) :-
    /* As defined in source code, sk and pinet6 has to be 
       the first two members of inet_sock, which means we
       can hardcode this rule.
    */
    /*skc_family at offset 16 short contained in a unsigned number 
     First half of sock_common can be viewed as unchanged, so it's safe to use
       some hardcoded ruels to help pinpoint some offsets.  
    sk_buff_head, two non-zero pointers, one unsigned long, one integer.
    sk_protocol is a unsigned long number after sk_write_buffer, and they have the same offset. */
    %get_time(Current),
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Sk_receive_queue_addr, Sk_receive_queue_val],
        [Sk_receive_queue_prev_addr, Sk_receive_queue_prev_val],
        [Sk_write_queue_addr, Sk_write_queue_val],
        [Sk_write_queue_prev_addr, Sk_write_queue_prev_val]
    ]),
    Ulong_profile = ([
        [Skc_family_addr, Skc_family_val],
        [Sk_protocol_addr, Sk_protocol_val]
    ]),
    Int_profile = ([
        [Receive_lock_addr, Receive_lock_val],
        [Write_lock_addr, Write_lock_val],
        [Qlen_receive_addr, Qlen_receive_val],
        [Qlen_write_addr, Qlen_write_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    tuples_in(Int_profile, Int),

    Sk_protocol_val #> 0,
    Skc_family_addr #= Base_addr + 16,
    Skc_family_val #> 0,
    Sk_receive_queue_val #> 0,
    Sk_receive_queue_prev_val #> 0,
    Sk_write_queue_val #> 0,
    Sk_write_queue_prev_val #> 0,
    chain([Skc_family_addr, Sk_receive_queue_addr, Sk_receive_queue_prev_addr, Qlen_receive_addr, Receive_lock_addr,
          Sk_write_queue_addr, Sk_write_queue_prev_addr, Qlen_write_addr, Write_lock_addr,
          Sk_protocol_addr], #<),
    /* sock_common is at least 136 */
    Sk_receive_queue_addr #> Base_addr + 136,
    Sk_protocol_addr #< Base_addr + 700,
    Sk_receive_queue_prev_addr #= Sk_receive_queue_addr + 8,
    Qlen_receive_addr #= Sk_receive_queue_prev_addr + 8,
    Receive_lock_addr #= Qlen_receive_addr + 4,

    Sk_write_queue_prev_addr #= Sk_write_queue_addr + 8,
    Qlen_write_addr #= Sk_write_queue_prev_addr + 8,
    Write_lock_addr #= Qlen_write_addr + 4,

    labeling([enum], [Skc_family_addr, Sk_receive_queue_addr, Sk_write_queue_addr, Sk_protocol_addr]),

    %get_time(End),
    %Time_past is End - Current,
    statistics(real_time, [End|_]),


    log("./profile/inet_sock", "sk_receive_queue", Sk_receive_queue_addr, Base_addr),
    log("./profile/inet_sock", "Sk_write_queue", Sk_write_queue_addr, Base_addr),
    log("./profile/inet_sock", "Skc_family", Skc_family_addr, Base_addr),
    log("./profile/inet_sock", "Sk_protocol", Sk_protocol_addr, Base_addr),
    log("./profile/inet_sock", "time", End, Start).

query_resource(Base_addr) :-
    /*
        start
        end
        *name
        *parent
        *sibling
        *child -> non-zero
    */
    /* This structure remains unchanged, thus we can have some
       hardcoded rules to help inference. */

    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Name_addr, Name_val],
        [Parent_addr, Parent_val],
        [Sibling_addr, Sibling_val],
        [Child_addr, Child_val]
    ]),
    Ulong_profile = ([
        [End_addr, End_val],
        [Flags_addr, Flags_val]
    ]),
    Int_profile = ([
        [Start_addr, Start_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    tuples_in(Int_profile, Int),

    Child_val #> 0,
    Start_addr #>= Base_addr,
    chain([Start_addr, End_addr, Name_addr, Flags_addr, Parent_addr, Sibling_addr, Child_addr], #<),
    %Name_addr #= Base_addr + 16,
    Child_addr #=< Base_addr + 64,
    labeling([enum], [Start_addr, End_addr, Name_addr, Name_val]),
    query_string_pointer(Name_val),
    Name_offset #= Name_addr - Base_addr,
    labeling([enum], [Child_addr, Child_val]),
    query_name_pointer(Child_val, Name_offset),

    statistics(real_time, [End|_]),


    log("./profile/resource", "Start_addr", Start_addr, Base_addr),
    log("./profile/resource", "End_addr", End_addr, Base_addr),
    log("./profile/resource", "Name_addr", Name_addr, Base_addr),
    log("./profile/resource", "Child_addr", Child_addr, Base_addr),
    log("./profile/resource", "resource", End, Start).

query_neigh_tables(Base_addr) :-
    pointer(Ptr),
    Ptr_profile = ([
        [Neigh_table_addr, Neigh_table_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Neigh_table_addr #< Base_addr + 16,
    labeling([enum], [Neigh_table_addr, Neigh_table_val]),
    query_neigh_table(Neigh_table_val).

query_seq_operations(Base_addr) :-
    /* Four successive function pointers */
    pointer(Ptr),
    Ptr_profile = ([
        [Start_addr, Start_val],
        [Stop_addr, Stop_val],
        [Next_addr, Next_val],
        [Show_addr, Show_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([Start_addr, Stop_addr, Next_addr, Show_addr], #<),
    Start_addr #= Base_addr,
    Show_addr #= Base_addr + 24,
    Start_val #> 0,
    Stop_val #> 0,
    Next_val #> 0,
    Show_val #> 0.

query_tcp_seq_afinfo(Base_addr) :-
    pointer(Ptr),
    int(Int),
    Ptr_profile = ([
        [Name_addr, Name_val],
        [F_ops_addr, F_ops_val],
        [Ops_addr, Ops_val]
    ]),
    Int_profile = ([
        [Family_addr, Family_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Name_addr #= Base_addr,
    Ops_addr #= Base_addr + 24,
    chain([Name_addr, Family_addr, F_ops_addr, Ops_addr], #<),
    
    labeling([enum], [Name_addr, Name_val]),
    query_string_pointer(Name_val).

query_udp_seq_afinfo(Base_addr) :-
    pointer(Ptr),
    int(Int),
    Ptr_profile = ([
        [Name_addr, Name_val],
        [Udp_table_addr, Udp_table_val],
        [F_ops_addr, F_ops_val],
        [Ops_addr, Ops_val]
    ]),
    Int_profile = ([
        [Family_addr, Family_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Name_addr #= Base_addr,
    Ops_addr #= Base_addr + 32,
    chain([Name_addr, Family_addr, Udp_table_addr, F_ops_addr, Ops_addr], #<),
    
    labeling([enum], [Name_addr, Name_val]),
    query_string_pointer(Name_val).

query_tty_driver(Base_addr) :-
    /* tty_driver remains unchanged, some rules are hardcoded. */
    pointer(Ptr),
    int(Int),
    Ptr_profile = ([
        [Driver_name_addr, Driver_name_val],
        [Name_addr, Name_val],
        [Ttys_addr, Ttys_val],
        [Tty_drivers_addr, Tty_drivers_val]
    ]),
    Int_profile = ([
        [Magic_addr, Magic_val],
        [Kref_addr, Kref_val],
        [Name_base_addr, Name_base_val],
        [Major_addr, Major_val],
        [Minor_start_addr, Minor_start_val],
        [Num_addr, Num_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Magic_addr #= Base_addr,
    Kref_addr #= Magic_addr + 4,
    Num_addr #= Name_base + 12,
    Ttys_addr #= Base_addr + 128,
    Tty_drivers_addr #= Base_addr + 168,
    chain([Magic_addr, Kref_addr, Driver_name_addr, Name_addr, Name_base_addr, Major_addr, Minor_start_addr,
            Num_addr, Ttys_addr, Tty_drivers_addr], #<),
    labeling([enum], [Driver_name_addr, Driver_name_val, Name_addr, Name_val]),
    query_string_pointer(Driver_name_val),
    query_string_pointer(Name_val).

query_proc_dir_entry(Base_addr) :-
    pointer(Ptr),
    int(Int),
    long(Ulg),
    Ptr_profile = ([
        [Proc_iops_addr, Proc_iops_val],
        [Proc_fops_addr, Proc_fops_val]
    ]),
    Int_profile = ([
        [Low_ino_addr, Low_ino_val],
        [Mode_addr, Mode_val],
        [Nlink_addr, Nlink_val],
        [Uid_addr, Uid_val],
        [Gid_addr, Gid_val]
    ]),

    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Low_ino_addr #= Base_addr,
    Gid_addr #= Low_ino_addr + 16,
    Proc_fops_addr #= Proc_iops_addr + 8,
    Proc_fops_addr #=< Base_addr + 40,
    chain([Low_ino_addr, Mode_addr, Nlink_addr, Uid_addr, Gid_addr, Proc_iops_addr, Proc_fops_addr], #<),
    labeling([enum], [Proc_iops_addr, Proc_iops_val, Proc_fops_addr, Proc_fops_val]),
    Proc_fops_val #> 0,
    %Proc_iops_val #> 0,
    %query_inode_operations(Proc_iops_val),
    query_inode_operations(Proc_fops_val).

query_kset(Base_addr) :-
    /* skip */
    1 #= 1.



test(Base_addr) :-
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM2_addr, Pid_addr, Tgid_addr, Parent_addr, Real_parent_addr, Child_addr, 
           Group_leader_addr, Thread_group_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    MM2_addr #> Base_addr + 1000,
    Tasks_addr #> MM2_addr - 100,
    FS_struct_addr #< Base_addr + 3000,
    Tgid_addr #= Pid_addr + 4,
    Parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr + 8,
    Child_addr #= Real_parent_addr +8,
    Group_leader_addr #=< Child_addr +32,
    %Comm_addr #= Base_addr + 2584,
    %Tasks_addr #= Base_addr + 1904,
    %FS_struct_addr #= Base_addr + 2640,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    % make query after labeling
    MM2_val #> 0,
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val,  Comm_addr, Comm_val ]),
    %Tasks_addr #= Base_addr + 2040,
    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    


    get_time(End),
    Time_past is End - Current,
    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    
    print_nl('tasks offset', Tasks_offset),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).

query_neigh_table(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "neigh_table"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).



query_string_pointer(Val) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "string_pointer"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_name_pointer(Val, Name_offset) :-
    process_create(path('python'),
                    ['subquery.py', Val, "name_pointer", Name_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_mount(Base_addr) :- 
    process_create(path('python'),
                    ['subquery.py', Base_addr, "mount"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_mount_struct(Val, Offset) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "mount_struct", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_vfs_mount(Vfsmount_val) :-
    process_create(path('python'),
                    ['subquery.py', Vfsmount_val, "vfs_mount"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_dentry(Dentry_val) :-
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_kernel_param(KP_val) :-
    process_create(path('python'),
                    ['subquery.py', KP_val, "kernel_param"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_in_device(IP_ptr_val) :-
    process_create(path('python'),
                    ['subquery.py', IP_ptr_val, "in_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_inode_operations(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_mm_struct(MM2_val) :-
    process_create(path('python'),
                    ['subquery.py', MM2_val, "mm_struct"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_list_head(Tasks_val, Comm_offset, Tasks_offset) :-
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "list_head", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_tasks(Tasks_val, Comm_offset, Tasks_offset) :-
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "tasks", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_child(Child_val, Comm_offset, Child_offset) :-
    process_create(path('python'),
                    ['subquery.py', Child_val, "child", Comm_offset, Child_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_ts(Base_addr, Comm_offset, Tasks_offset) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "ts", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_cred(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "cred"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).
query_fs_struct(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "fs_struct"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

print_nl(Name, Content):- 
    print(Name),
    print(':'),
    print(Content),
    nl.
