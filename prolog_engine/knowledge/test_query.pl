:- use_module(library(clpfd)).
:- style_check(-singleton).
pointer([
		[0x13ebefd0,0],
		[0x13ebefd8,0],
		[0x13ebefe0,329527808],
		[0x13ebefe8,329528000],
		[0x13ebeff0,334229440],
		[0x13ebeff8,465775488],
		[0x13ebf000,0],
		[0x13ebf008,0],
		[0x13ebf010,0],
		[0x13ebf018,0],
		[0x13ebf028,0],
		[0x13ebf030,0],
		[0x13ebf038,0],
		[0x13ebf050,0],
		[0x13ebf058,0],
		[0x13ebf060,332071810],
		[0x13ebf070,321671488],
		[0x13ebf078,321671408],
		[0x13ebf080,0],
		[0x13ebf088,334023648],
		[0x13ebf090,467224808],
		[0x13ebf098,0],
		[0x13ebf0a0,0],
		[0x13ebf0a8,0],
		[0x13ebf0b0,334229680],
		[0x13ebf0b8,334229680],
		[0x13ebf0c8,465750272],
		[0x13ebf0d0,0],
		[0x13ebf0d8,0],
		[0x13ebf0e0,330305568],
		[0x13ebf0e8,329429824],
		[0x13ebf0f0,329615360],
		[0x13ebf0f8,329430048],
		[0x13ebf100,329429888],
		[0x13ebf108,329509984],
		[0x13ebf110,329429280],
		[0x13ebf118,0],
		[0x13ebf120,0],
		[0x13ebf128,334229920],
		[0x13ebf140,0],
		[0x13ebf148,334229920],
		[0x13ebf150,334229792],
		[0x13ebf158,334229792],
		[0x13ebf160,0],
		[0x13ebf168,0],
		[0x13ebf170,0],
		[0x13ebf178,0],
		[0x13ebf180,466157152],
		[0x13ebf188,0],
		[0x13ebf190,0],
		[0x13ebf198,0],
		[0x13ebf1a0,332064868],
		[0x13ebf1a8,0],
		[0x13ebf1b8,0],
		[0x13ebf1c0,0],
		[0x13ebf1c8,0],
		[0x13ebf1d0,0],
		[0x13ebf1d8,0],
		[0x13ebf1e0,0],
		[0x13ebf1e8,0],
		[0x13ebf1f0,0],
		[0x13ebf1f8,0],
		[0x13ebf200,0],
		[0x13ebf208,0],
		[0x13ebf210,0],
		[0x13ebf218,0],
		[0x13ebf220,334730400],
		[0x13ebf228,334736528],
		[0x13ebf230,321723136],
		[0x13ebf238,321722960],
		[0x13ebf240,0],
		[0x13ebf248,0],
		[0x13ebf250,0],
		[0x13ebf258,0],
		[0x13ebf260,0],
		[0x13ebf268,0],
		[0x13ebf270,337866816],
		[0x13ebf278,469719360],
		[0x13ebf280,334230144],
		[0x13ebf288,334230144],
		[0x13ebf290,0],
		[0x13ebf298,0],
		[0x13ebf2a0,0],
		[0x13ebf2a8,0],
		[0x13ebf2b0,334230192],
		[0x13ebf2b8,334230192],
		[0x13ebf2c0,329551232],
		[0x13ebf2c8,329551168],
		[0x13ebf2d0,0],
		[0x13ebf2d8,0],
		[0x13ebf2e0,0],
		[0x13ebf2e8,0],
		[0x13ebf2f0,334230256],
		[0x13ebf2f8,334230256],
		[0x13ebf300,0],
		[0x13ebf308,334230280],
		[0x13ebf310,334230280],
		[0x13ebf318,321747056],
		[0x13ebf320,334230304],
		[0x13ebf328,0],
		[0x13ebf330,0],
		[0x13ebf338,0],
		[0x13ebf340,0],
		[0x13ebf348,0],
		[0x13ebf350,334230352],
		[0x13ebf358,334230352],
		[0x13ebf360,332296938],
		[0x13ebf370,321752192],
		[0x13ebf378,321752128],
		[0x13ebf380,0],
		[0x13ebf388,333513824],
		[0x13ebf390,517597416],
		[0x13ebf398,0],
		[0x13ebf3a0,332198766],
		[0x13ebf3b0,321754416],
		[0x13ebf3b8,321754352],
		[0x13ebf3c0,0],
		[0x13ebf3c8,334231904],
		[0x13ebf3d0,517888232],
		[0x13ebf3d8,0],
		[0x13ebf3e0,0],
		[0x13ebf3e8,0],
		[0x13ebf3f0,334230512],
		[0x13ebf3f8,334230512],
		[0x13ebf400,331971295],
		[0x13ebf408,0],
		[0x13ebf418,334230656],
		[0x13ebf420,0],
		[0x13ebf428,0],
		[0x13ebf430,0],
		[0x13ebf438,0],
		[0x13ebf440,0],
		[0x13ebf448,0],
		[0x13ebf450,0],
		[0x13ebf458,0],
		[0x13ebf460,0],
		[0x13ebf468,0],
		[0x13ebf470,0],
		[0x13ebf478,0],
		[0x13ebf480,332213195],
		[0x13ebf488,0],
		[0x13ebf498,334230784],
		[0x13ebf4a0,0],
		[0x13ebf4a8,0],
		[0x13ebf4b0,0],
		[0x13ebf4b8,0],
		[0x13ebf4c0,0],
		[0x13ebf4c8,0],
		[0x13ebf4d0,0],
		[0x13ebf4d8,0],
		[0x13ebf4e0,0],
		[0x13ebf4e8,0],
		[0x13ebf4f0,0],
		[0x13ebf4f8,0],
		[0x13ebf500,332035010],
		[0x13ebf508,334231048],
		[0x13ebf518,0],
		[0x13ebf520,319352848],
		[0x13ebf528,0],
		[0x13ebf530,339504684],
		[0x13ebf538,334231040],
		[0x13ebf540,332359447],
		[0x13ebf548,334231044],
		[0x13ebf558,0],
		[0x13ebf560,319352848],
		[0x13ebf568,0],
		[0x13ebf570,339504684],
		[0x13ebf578,334231040],
		[0x13ebf580,332034982],
		[0x13ebf588,339504680],
		[0x13ebf598,0],
		[0x13ebf5a0,319352752],
		[0x13ebf5a8,0],
		[0x13ebf5b0,0],
		[0x13ebf5b8,0],
		[0x13ebf5c0,0],
		[0x13ebf5c8,0],
		[0x13ebf5d0,0],
		[0x13ebf5d8,0],
		[0x13ebf5e0,0],
		[0x13ebf5e8,0],
		[0x13ebf5f0,0],
		[0x13ebf5f8,0],
		[0x13ebf610,0],
		[0x13ebf618,0],
		[0x13ebf620,334229152],
		[0x13ebf628,334231232],
		[0x13ebf630,334797952],
		[0x13ebf638,332198811],
		[0x13ebf640,334192640],
		[0x13ebf648,334283744],
		[0x13ebf650,334231280],
		[0x13ebf658,334229200],
		[0x13ebf668,334048160],
		[0x13ebf670,332072796],
		[0x13ebf678,0],
		[0x13ebf680,0],
		[0x13ebf688,334231392],
		[0x13ebf698,0],
		[0x13ebf6a0,0],
		[0x13ebf6a8,0],
		[0x13ebf6b0,0],
		[0x13ebf6b8,0],
		[0x13ebf6c0,334231072],
		[0x13ebf6c8,334254880],
		[0x13ebf6d0,334798048],
		[0x13ebf6d8,332198835],
		[0x13ebf6e0,334192800],
		[0x13ebf6e8,334284032],
		[0x13ebf6f0,334254928],
		[0x13ebf6f8,334231120],
		[0x13ebf708,334048192],
		[0x13ebf710,465754752],
		[0x13ebf718,0],
		[0x13ebf720,0],
		[0x13ebf728,334231392],
		[0x13ebf738,0],
		[0x13ebf740,0],
		[0x13ebf748,0],
		[0x13ebf750,0],
		[0x13ebf758,0],
		[0x13ebf760,332198860],
		[0x13ebf770,334231488],
		[0x13ebf778,334231456],
		[0x13ebf780,469668704],
		[0x13ebf788,469670768],
		[0x13ebf790,334231232],
		[0x13ebf798,334231072],
		[0x13ebf7a0,332198879],
		[0x13ebf7a8,332360346],
		[0x13ebf7b0,332200059],
		[0x13ebf7b8,0],
		[0x13ebf7c0,332192240],
		[0x13ebf7c8,332109560],
		[0x13ebf7d0,332072455],
		[0x13ebf7d8,0],
		[0x13ebf7e0,0],
		[0x13ebf7e8,0],
		[0x13ebf7f0,334231536],
		[0x13ebf7f8,334231536],
		[0x13ebf800,334231552],
		[0x13ebf808,334231552],
		[0x13ebf810,0],
		[0x13ebf818,0],
		[0x13ebf830,0],
		[0x13ebf838,0],
		[0x13ebf840,0],
		[0x13ebf848,0],
		[0x13ebf850,0],
		[0x13ebf858,0],
		[0x13ebf870,0],
		[0x13ebf878,0],
		[0x13ebf880,0],
		[0x13ebf888,0],
		[0x13ebf890,0],
		[0x13ebf898,0],
		[0x13ebf8a0,332204920],
		[0x13ebf8b0,321909664],
		[0x13ebf8b8,321189888],
		[0x13ebf8c0,0],
		[0x13ebf8c8,334277600],
		[0x13ebf8d0,520399080],
		[0x13ebf8d8,0],
		[0x13ebf950,0],
		[0x13ebf958,0],
		[0x13ebf960,332203352],
		[0x13ebf970,321909664],
		[0x13ebf978,321189888],
		[0x13ebf980,0],
		[0x13ebf988,334231968],
		[0x13ebf990,0],
		[0x13ebf998,0],
		[0x13ebf9a0,332203357],
		[0x13ebf9b0,321909664],
		[0x13ebf9b8,321189888],
		[0x13ebf9c0,0],
		[0x13ebf9c8,334231712],
		[0x13ebf9d0,0],
		[0x13ebf9d8,0],
		[0x13ebfab8,0],
		[0x13ebfb70,0],
		[0x13ebfb78,0],
		[0x13ebfc30,0],
		[0x13ebfc38,0],
		[0x13ebff08,0],
		[0x13ebff10,0],
		[0x13ebff18,0],
		[0x13ebffb8,0],
		[0, 0]
]).
unknown([
		[0x13ebf040,8246142616236720128],
		[0x13ebf900,752986384106659940],
		[0x13ebfe88,3542116820119724578],
		[0x13ebfea0,9016244211625765929],
		[0x13ebfea8,4332516889943810092],
		[0x13ebfec0,9016244203035831337],
		[0x13ebfec8,4332516889943810092],
		[0x13ebfee0,2318365485156278816],
		[0x13ebfee8,2322797616777666683],
		[0, 0]
]).
long([
		[0x13ebefc0,71936407240705],
		[0x13ebefc8,11],
		[0x13ebf020,2],
		[0x13ebf068,8],
		[0x13ebf0c0,117440512],
		[0x13ebf130,4294967296],
		[0x13ebf138,9],
		[0x13ebf1b0,71936407240704],
		[0x13ebf368,8],
		[0x13ebf3a8,8],
		[0x13ebf410,1567663063040],
		[0x13ebf490,1567663063040],
		[0x13ebf510,1803886264324],
		[0x13ebf550,1803886264324],
		[0x13ebf590,1254130450436],
		[0x13ebf600,4400193994751],
		[0x13ebf608,4096],
		[0x13ebf660,848],
		[0x13ebf690,2],
		[0x13ebf700,849],
		[0x13ebf730,2],
		[0x13ebf768,12884902100],
		[0x13ebf820,5368709120000],
		[0x13ebf828,10],
		[0x13ebf860,5368709120000],
		[0x13ebf868,10],
		[0x13ebf8a8,1],
		[0x13ebf948,667252],
		[0x13ebf968,1],
		[0x13ebf9a8,1],
		[0x13ebfcd8,1953391455],
		[0x13ebfd78,128017462420840],
		[0x13ebff00,10621],
		[0, 0]
]).
int([
		[0x13ebefc0,1],
		[0x13ebefc4,16749],
		[0x13ebefc8,11],
		[0x13ebefcc,0],
		[0x13ebefd0,0],
		[0x13ebefd4,0],
		[0x13ebefd8,0],
		[0x13ebefdc,0],
		[0x13ebf000,0],
		[0x13ebf004,0],
		[0x13ebf008,0],
		[0x13ebf00c,0],
		[0x13ebf010,0],
		[0x13ebf014,0],
		[0x13ebf018,0],
		[0x13ebf01c,0],
		[0x13ebf020,2],
		[0x13ebf024,0],
		[0x13ebf028,0],
		[0x13ebf02c,0],
		[0x13ebf030,0],
		[0x13ebf034,0],
		[0x13ebf038,0],
		[0x13ebf03c,0],
		[0x13ebf040,0],
		[0x13ebf048,25455],
		[0x13ebf04c,0],
		[0x13ebf050,0],
		[0x13ebf054,0],
		[0x13ebf058,0],
		[0x13ebf05c,0],
		[0x13ebf068,8],
		[0x13ebf06c,0],
		[0x13ebf080,0],
		[0x13ebf084,0],
		[0x13ebf098,0],
		[0x13ebf09c,0],
		[0x13ebf0a0,0],
		[0x13ebf0a4,0],
		[0x13ebf0a8,0],
		[0x13ebf0ac,0],
		[0x13ebf0c4,0],
		[0x13ebf0d0,0],
		[0x13ebf0d4,0],
		[0x13ebf0d8,0],
		[0x13ebf0dc,0],
		[0x13ebf118,0],
		[0x13ebf11c,0],
		[0x13ebf120,0],
		[0x13ebf124,0],
		[0x13ebf130,0],
		[0x13ebf134,1],
		[0x13ebf138,9],
		[0x13ebf13c,0],
		[0x13ebf140,0],
		[0x13ebf144,0],
		[0x13ebf160,0],
		[0x13ebf164,0],
		[0x13ebf168,0],
		[0x13ebf16c,0],
		[0x13ebf170,0],
		[0x13ebf174,0],
		[0x13ebf178,0],
		[0x13ebf17c,0],
		[0x13ebf188,0],
		[0x13ebf18c,0],
		[0x13ebf190,0],
		[0x13ebf194,0],
		[0x13ebf198,0],
		[0x13ebf19c,0],
		[0x13ebf1a8,0],
		[0x13ebf1ac,0],
		[0x13ebf1b0,0],
		[0x13ebf1b4,16749],
		[0x13ebf1b8,0],
		[0x13ebf1bc,0],
		[0x13ebf1c0,0],
		[0x13ebf1c4,0],
		[0x13ebf1c8,0],
		[0x13ebf1cc,0],
		[0x13ebf1d0,0],
		[0x13ebf1d4,0],
		[0x13ebf1d8,0],
		[0x13ebf1dc,0],
		[0x13ebf1e0,0],
		[0x13ebf1e4,0],
		[0x13ebf1e8,0],
		[0x13ebf1ec,0],
		[0x13ebf1f0,0],
		[0x13ebf1f4,0],
		[0x13ebf1f8,0],
		[0x13ebf1fc,0],
		[0x13ebf200,0],
		[0x13ebf204,0],
		[0x13ebf208,0],
		[0x13ebf20c,0],
		[0x13ebf210,0],
		[0x13ebf214,0],
		[0x13ebf218,0],
		[0x13ebf21c,0],
		[0x13ebf240,0],
		[0x13ebf244,0],
		[0x13ebf248,0],
		[0x13ebf24c,0],
		[0x13ebf250,0],
		[0x13ebf254,0],
		[0x13ebf258,0],
		[0x13ebf25c,0],
		[0x13ebf260,0],
		[0x13ebf264,0],
		[0x13ebf268,0],
		[0x13ebf26c,0],
		[0x13ebf290,0],
		[0x13ebf294,0],
		[0x13ebf298,0],
		[0x13ebf29c,0],
		[0x13ebf2a0,0],
		[0x13ebf2a4,0],
		[0x13ebf2a8,0],
		[0x13ebf2ac,0],
		[0x13ebf2d0,0],
		[0x13ebf2d4,0],
		[0x13ebf2d8,0],
		[0x13ebf2dc,0],
		[0x13ebf2e0,0],
		[0x13ebf2e4,0],
		[0x13ebf2e8,0],
		[0x13ebf2ec,0],
		[0x13ebf300,0],
		[0x13ebf304,0],
		[0x13ebf328,0],
		[0x13ebf32c,0],
		[0x13ebf330,0],
		[0x13ebf334,0],
		[0x13ebf338,0],
		[0x13ebf33c,0],
		[0x13ebf340,0],
		[0x13ebf344,0],
		[0x13ebf348,0],
		[0x13ebf34c,0],
		[0x13ebf368,8],
		[0x13ebf36c,0],
		[0x13ebf380,0],
		[0x13ebf384,0],
		[0x13ebf398,0],
		[0x13ebf39c,0],
		[0x13ebf3a8,8],
		[0x13ebf3ac,0],
		[0x13ebf3c0,0],
		[0x13ebf3c4,0],
		[0x13ebf3d8,0],
		[0x13ebf3dc,0],
		[0x13ebf3e0,0],
		[0x13ebf3e4,0],
		[0x13ebf3e8,0],
		[0x13ebf3ec,0],
		[0x13ebf408,0],
		[0x13ebf40c,0],
		[0x13ebf410,0],
		[0x13ebf414,365],
		[0x13ebf420,0],
		[0x13ebf424,0],
		[0x13ebf428,0],
		[0x13ebf42c,0],
		[0x13ebf430,0],
		[0x13ebf434,0],
		[0x13ebf438,0],
		[0x13ebf43c,0],
		[0x13ebf440,0],
		[0x13ebf444,0],
		[0x13ebf448,0],
		[0x13ebf44c,0],
		[0x13ebf450,0],
		[0x13ebf454,0],
		[0x13ebf458,0],
		[0x13ebf45c,0],
		[0x13ebf460,0],
		[0x13ebf464,0],
		[0x13ebf468,0],
		[0x13ebf46c,0],
		[0x13ebf470,0],
		[0x13ebf474,0],
		[0x13ebf478,0],
		[0x13ebf47c,0],
		[0x13ebf488,0],
		[0x13ebf48c,0],
		[0x13ebf490,0],
		[0x13ebf494,365],
		[0x13ebf4a0,0],
		[0x13ebf4a4,0],
		[0x13ebf4a8,0],
		[0x13ebf4ac,0],
		[0x13ebf4b0,0],
		[0x13ebf4b4,0],
		[0x13ebf4b8,0],
		[0x13ebf4bc,0],
		[0x13ebf4c0,0],
		[0x13ebf4c4,0],
		[0x13ebf4c8,0],
		[0x13ebf4cc,0],
		[0x13ebf4d0,0],
		[0x13ebf4d4,0],
		[0x13ebf4d8,0],
		[0x13ebf4dc,0],
		[0x13ebf4e0,0],
		[0x13ebf4e4,0],
		[0x13ebf4e8,0],
		[0x13ebf4ec,0],
		[0x13ebf4f0,0],
		[0x13ebf4f4,0],
		[0x13ebf4f8,0],
		[0x13ebf4fc,0],
		[0x13ebf510,4],
		[0x13ebf514,420],
		[0x13ebf518,0],
		[0x13ebf51c,0],
		[0x13ebf528,0],
		[0x13ebf52c,0],
		[0x13ebf550,4],
		[0x13ebf554,420],
		[0x13ebf558,0],
		[0x13ebf55c,0],
		[0x13ebf568,0],
		[0x13ebf56c,0],
		[0x13ebf590,4],
		[0x13ebf594,292],
		[0x13ebf598,0],
		[0x13ebf59c,0],
		[0x13ebf5a8,0],
		[0x13ebf5ac,0],
		[0x13ebf5b0,0],
		[0x13ebf5b4,0],
		[0x13ebf5b8,0],
		[0x13ebf5bc,0],
		[0x13ebf5c0,0],
		[0x13ebf5c4,0],
		[0x13ebf5c8,0],
		[0x13ebf5cc,0],
		[0x13ebf5d0,0],
		[0x13ebf5d4,0],
		[0x13ebf5d8,0],
		[0x13ebf5dc,0],
		[0x13ebf5e0,0],
		[0x13ebf5e4,0],
		[0x13ebf5e8,0],
		[0x13ebf5ec,0],
		[0x13ebf5f0,0],
		[0x13ebf5f4,0],
		[0x13ebf5f8,0],
		[0x13ebf5fc,0],
		[0x13ebf604,1024],
		[0x13ebf608,4096],
		[0x13ebf60c,0],
		[0x13ebf610,0],
		[0x13ebf614,0],
		[0x13ebf618,0],
		[0x13ebf61c,0],
		[0x13ebf660,848],
		[0x13ebf664,0],
		[0x13ebf678,0],
		[0x13ebf67c,0],
		[0x13ebf680,0],
		[0x13ebf684,0],
		[0x13ebf690,2],
		[0x13ebf694,0],
		[0x13ebf698,0],
		[0x13ebf69c,0],
		[0x13ebf6a0,0],
		[0x13ebf6a4,0],
		[0x13ebf6a8,0],
		[0x13ebf6ac,0],
		[0x13ebf6b0,0],
		[0x13ebf6b4,0],
		[0x13ebf6b8,0],
		[0x13ebf6bc,0],
		[0x13ebf700,849],
		[0x13ebf704,0],
		[0x13ebf718,0],
		[0x13ebf71c,0],
		[0x13ebf720,0],
		[0x13ebf724,0],
		[0x13ebf730,2],
		[0x13ebf734,0],
		[0x13ebf738,0],
		[0x13ebf73c,0],
		[0x13ebf740,0],
		[0x13ebf744,0],
		[0x13ebf748,0],
		[0x13ebf74c,0],
		[0x13ebf750,0],
		[0x13ebf754,0],
		[0x13ebf758,0],
		[0x13ebf75c,0],
		[0x13ebf768,212],
		[0x13ebf76c,3],
		[0x13ebf7b8,0],
		[0x13ebf7bc,0],
		[0x13ebf7d8,0],
		[0x13ebf7dc,0],
		[0x13ebf7e0,0],
		[0x13ebf7e4,0],
		[0x13ebf7e8,0],
		[0x13ebf7ec,0],
		[0x13ebf810,0],
		[0x13ebf814,0],
		[0x13ebf818,0],
		[0x13ebf81c,0],
		[0x13ebf820,0],
		[0x13ebf824,1250],
		[0x13ebf828,10],
		[0x13ebf82c,0],
		[0x13ebf830,0],
		[0x13ebf834,0],
		[0x13ebf838,0],
		[0x13ebf83c,0],
		[0x13ebf840,0],
		[0x13ebf844,0],
		[0x13ebf848,0],
		[0x13ebf84c,0],
		[0x13ebf850,0],
		[0x13ebf854,0],
		[0x13ebf858,0],
		[0x13ebf85c,0],
		[0x13ebf860,0],
		[0x13ebf864,1250],
		[0x13ebf868,10],
		[0x13ebf86c,0],
		[0x13ebf870,0],
		[0x13ebf874,0],
		[0x13ebf878,0],
		[0x13ebf87c,0],
		[0x13ebf880,0],
		[0x13ebf884,0],
		[0x13ebf888,0],
		[0x13ebf88c,0],
		[0x13ebf890,0],
		[0x13ebf894,0],
		[0x13ebf898,0],
		[0x13ebf89c,0],
		[0x13ebf8a8,1],
		[0x13ebf8ac,0],
		[0x13ebf8c0,0],
		[0x13ebf8c4,0],
		[0x13ebf8d8,0],
		[0x13ebf8dc,0],
		[0x13ebf94c,0],
		[0x13ebf950,0],
		[0x13ebf954,0],
		[0x13ebf958,0],
		[0x13ebf95c,0],
		[0x13ebf968,1],
		[0x13ebf96c,0],
		[0x13ebf980,0],
		[0x13ebf984,0],
		[0x13ebf990,0],
		[0x13ebf994,0],
		[0x13ebf998,0],
		[0x13ebf99c,0],
		[0x13ebf9a8,1],
		[0x13ebf9ac,0],
		[0x13ebf9c0,0],
		[0x13ebf9c4,0],
		[0x13ebf9d0,0],
		[0x13ebf9d4,0],
		[0x13ebf9d8,0],
		[0x13ebf9dc,0],
		[0x13ebfab8,0],
		[0x13ebfabc,0],
		[0x13ebfb70,0],
		[0x13ebfb74,0],
		[0x13ebfb78,0],
		[0x13ebfb7c,0],
		[0x13ebfc30,0],
		[0x13ebfc34,0],
		[0x13ebfc38,0],
		[0x13ebfc3c,0],
		[0x13ebfcdc,0],
		[0x13ebfd7c,29806],
		[0x13ebff00,10621],
		[0x13ebff04,0],
		[0x13ebff08,0],
		[0x13ebff0c,0],
		[0x13ebff10,0],
		[0x13ebff14,0],
		[0x13ebff18,0],
		[0x13ebff1c,0],
		[0x13ebffb8,0],
		[0x13ebffbc,0],
		[0, 0]
]).
string_val([
		[0x13ebf048,25455],
		[0x13ebf8e0,8101729939104296781],
		[0x13ebf8e8,8297075411187100020],
		[0x13ebf8f0,7070770627853361186],
		[0x13ebf8f8,7311153560726675557],
		[0x13ebf908,2338603376728502083],
		[0x13ebf910,8675390252588624236],
		[0x13ebf918,3346848968129655924],
		[0x13ebf920,8011459970039178603],
		[0x13ebf928,8032487034614474610],
		[0x13ebf930,2336082230724796533],
		[0x13ebf938,7815275222770148727],
		[0x13ebf940,7575178154032701540],
		[0x13ebf9e0,3198722456695432226],
		[0x13ebf9e8,7526464347344757797],
		[0x13ebf9f0,3198722456511477106],
		[0x13ebf9f8,7598803398965818144],
		[0x13ebfa00,2338894793223988589],
		[0x13ebfa08,8102091639857574510],
		[0x13ebfa10,7309940759667434597],
		[0x13ebfa18,7216209593501315700],
		[0x13ebfa20,8317714377132223522],
		[0x13ebfa28,7955925832297244521],
		[0x13ebfa30,4847370906359572852],
		[0x13ebfa38,4476623618090221101],
		[0x13ebfa40,2318273165067952190],
		[0x13ebfa48,7955443211268597800],
		[0x13ebfa50,2317511500817785957],
		[0x13ebfa58,7223260619297925160],
		[0x13ebfa60,2893598108705977957],
		[0x13ebfa68,3472873705734952241],
		[0x13ebfa70,2965947120570146857],
		[0x13ebfa78,7943836559677202476],
		[0x13ebfa80,7741253943735574386],
		[0x13ebfa88,8304124529866842156],
		[0x13ebfa90,7308613718830375267],
		[0x13ebfa98,7943836559677202476],
		[0x13ebfaa0,7309465793298915186],
		[0x13ebfaa8,4480311169313156196],
		[0x13ebfab0,28259001237267826],
		[0x13ebfac0,3198722456695432226],
		[0x13ebfac8,2675260698658890789],
		[0x13ebfad0,7310299210289542508],
		[0x13ebfad8,7791337772184576116],
		[0x13ebfae0,2478224906695765605],
		[0x13ebfae8,7598538445768106028],
		[0x13ebfaf0,8389758743682051687],
		[0x13ebfaf8,3261526774309724201],
		[0x13ebfb00,4485057641359696958],
		[0x13ebfb08,2891359516068164128],
		[0x13ebfb10,7308892947874739496],
		[0x13ebfb18,2891356540817186916],
		[0x13ebfb20,7306032859624854056],
		[0x13ebfb28,3542125225470601590],
		[0x13ebfb30,2967927268468072533],
		[0x13ebfb38,3182119868608556320],
		[0x13ebfb40,7955443211268597792],
		[0x13ebfb48,2983474702990730341],
		[0x13ebfb50,7955958580849758752],
		[0x13ebfb58,4480311169313156207],
		[0x13ebfb60,2318355887265572463],
		[0x13ebfb68,7954883331123004754],
		[0x13ebfb80,3198722456695432226],
		[0x13ebfb88,2675260698658890789],
		[0x13ebfb90,7310299210289542508],
		[0x13ebfb98,7791337772184576116],
		[0x13ebfba0,2478224906695765605],
		[0x13ebfba8,7598538445768106028],
		[0x13ebfbb0,8389758743682051687],
		[0x13ebfbb8,3261526774309724201],
		[0x13ebfbc0,4485057641359696958],
		[0x13ebfbc8,2891359516068164128],
		[0x13ebfbd0,7308892947874739496],
		[0x13ebfbd8,2891356540817186916],
		[0x13ebfbe0,7306032859624854056],
		[0x13ebfbe8,3542125225470601590],
		[0x13ebfbf0,2967927268468072533],
		[0x13ebfbf8,3182119868608556320],
		[0x13ebfc00,7955443211268597792],
		[0x13ebfc08,2983474702990730341],
		[0x13ebfc10,7955958580849758752],
		[0x13ebfc18,4480311169313156207],
		[0x13ebfc20,2318355887265572463],
		[0x13ebfc28,7954883331123004754],
		[0x13ebfc40,3198722456695432226],
		[0x13ebfc48,7526464347344757797],
		[0x13ebfc50,2334031328056341874],
		[0x13ebfc58,7954306256014106979],
		[0x13ebfc60,2891359486992523380],
		[0x13ebfc68,7308892947874739496],
		[0x13ebfc70,2891356540817186916],
		[0x13ebfc78,7306032859624854056],
		[0x13ebfc80,3472873714358430070],
		[0x13ebfc88,7959312069250787625],
		[0x13ebfc90,7575164960043919731],
		[0x13ebfc98,4995099089510691950],
		[0x13ebfca0,2317513661104401731],
		[0x13ebfca8,4332556511145893926],
		[0x13ebfcb0,2318544744440012860],
		[0x13ebfcb8,4995090310748514609],
		[0x13ebfcc0,7526464347346709827],
		[0x13ebfcc8,4995090311860352370],
		[0x13ebfcd0,7307199665336626499],
		[0x13ebfcd8,1953391455],
		[0x13ebfce0,3198722456695432226],
		[0x13ebfce8,8031148980586964005],
		[0x13ebfcf0,7216209636383486815],
		[0x13ebfcf8,7160553431560708896],
		[0x13ebfd00,2318265721703920750],
		[0x13ebfd08,7955443211268597800],
		[0x13ebfd10,2317511500817785957],
		[0x13ebfd18,7223260619297925160],
		[0x13ebfd20,3611955337699620453],
		[0x13ebfd28,8442041620150954288],
		[0x13ebfd30,2334102031740531566],
		[0x13ebfd38,5920025828778077801],
		[0x13ebfd40,2987686884021191493],
		[0x13ebfd48,2329822430775748128],
		[0x13ebfd50,3251644217937640508],
		[0x13ebfd58,5917778465660678432],
		[0x13ebfd60,8385546849002275653],
		[0x13ebfd68,2318349272748351343],
		[0x13ebfd70,7161114001194304850],
		[0x13ebfd78,128017462420840],
		[0x13ebfd80,3198722456695432226],
		[0x13ebfd88,2675260698658890789],
		[0x13ebfd90,7236850772546188652],
		[0x13ebfd98,3419680565373445408],
		[0x13ebfda0,8461256706631496997],
		[0x13ebfda8,2893598134514165024],
		[0x13ebfdb0,7234309766870429301],
		[0x13ebfdb8,2893598123004684576],
		[0x13ebfdc0,8531335287333406034],
		[0x13ebfdc8,2967927268501757993],
		[0x13ebfdd0,8317714377132223529],
		[0x13ebfdd8,7955925832297244521],
		[0x13ebfde0,4847370906359572852],
		[0x13ebfde8,2747241361179950637],
		[0x13ebfdf0,4340379691147339808],
		[0x13ebfdf8,3539878923266437664],
		[0x13ebfe00,7959312035092179241],
		[0x13ebfe08,7791337742157703539],
		[0x13ebfe10,4847370872021282415],
		[0x13ebfe18,5917778767470214701],
		[0x13ebfe20,7959390401367720773],
		[0x13ebfe28,4480311169313156196],
		[0x13ebfe30,4995090311860216428],
		[0x13ebfe38,2318349290075729219],
		[0x13ebfe40,8462094642085840210],
		[0x13ebfe48,4847370872385725550],
		[0x13ebfe50,4188465766706724397],
		[0x13ebfe58,8246195779881676832],
		[0x13ebfe60,7449354445591441001],
		[0x13ebfe68,7367375807373781107],
		[0x13ebfe70,5917799318721295727],
		[0x13ebfe78,8386112019453788997],
		[0x13ebfe80,2318280823161254773],
		[0x13ebfe90,6295842360445910048],
		[0x13ebfe98,4782627388965275986],
		[0x13ebfeb0,6291059597390454844],
		[0x13ebfeb8,4782627388965275986],
		[0x13ebfed0,5495874096485179452],
		[0x13ebfed8,3182147588648687937],
		[0x13ebfef0,6864977110396523333],
		[0x13ebfef8,2315492469827709250],
		[0x13ebff20,3198722456695432226],
		[0x13ebff28,2675260698658890789],
		[0x13ebff30,2336080001698395500],
		[0x13ebff38,8442041620150514981],
		[0x13ebff40,2334102031740531566],
		[0x13ebff48,5920025828778077801],
		[0x13ebff50,2987686884021191493],
		[0x13ebff58,2965954821447630368],
		[0x13ebff60,7598538445768106028],
		[0x13ebff68,8389758743682051687],
		[0x13ebff70,3261526774309724201],
		[0x13ebff78,2316574420780803134],
		[0x13ebff80,2322797617382238248],
		[0x13ebff88,2968189007599054898],
		[0x13ebff90,8317714376998791465],
		[0x13ebff98,8028827851265304425],
		[0x13ebffa0,3261526774175590254],
		[0x13ebffa8,4995090311927458110],
		[0x13ebffb0,30236992486649155],
		[0, 0]
]).
:- use_module(library(clpfd)).

isTrue([X, _]):-
    X == 49.

isTrue([_|Tail]):-
    isTrue(Tail).

log(File_name, Name, Addr, Base):-
    Offset #= Addr - Base,
    open(File_name, append, Stream),
    write(Stream, Name),
    write(Stream, ':'),
    write(Stream, Offset),
    nl(Stream),
    close(Stream).

start_query(Base_addr) :- 
    pointer(Ptr),
    string_val(Str),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Real_parent_addr, Real_parent_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    chain([MM2_addr, Real_parent_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    Real_parent_addr #> Comm_addr - 500,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    labeling([enum], [Real_parent_addr, Real_parent_val,  Comm_addr, Comm_val]),
    process_create(path('python'),
                ['subquery.py', Real_parent_val, "task_struct"],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

    

query_task_struct(Base_addr) :-
    statistics(real_time, [Start|_]),
    get_time(Current),
    %current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM_addr, MM_val],
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Real_cred_addr, Real_cred_val],
        [Cred_addr, Cred_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM_addr, MM2_addr, Pid_addr, Tgid_addr, Real_parent_addr, Parent_addr , Child_addr, 
           Group_leader_addr, Thread_group_addr, Real_cred_addr, Cred_addr, Comm_addr], #<),
    %MM2_addr #> Base_addr + 1000,
    MM2_addr #= MM_addr + 8,
    Tasks_addr #> MM2_addr - 100,

    Tgid_addr #= Pid_addr + 4,
    Real_parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr - 8,
    Child_addr #= Parent_addr + 8,
    %FIXME This may be too strong
    %Children next and prev 16 
    %Sibling next and prev  16
    Group_leader_addr #=< Child_addr +32,
    Cred_addr #= Real_cred_addr + 8,
    /*MM2_addr #= Base_addr + 1160,
    Comm_addr #= Base_addr + 1656,
    Tasks_addr #= Base_addr + 1096,*/


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    label([MM_addr, MM_val]),
    % make query after labeling
    MM2_val #> 0,
    integer(MM2_val),
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val, Comm_addr, Comm_val, Pid_addr, Tgid_addr]),

    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_parent_addr, Real_parent_val, Group_leader_addr, Group_leader_val, Child_addr, Child_val]),
    Real_parent_val #> 0,
    Group_leader_val #> 0,
    query_ts(Real_parent_val, Comm_offset, Tasks_offset),
    %query_list_head(Child_val-16, Comm_offset, Tasks_offset),
    query_ts(Group_leader_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_cred_addr, Real_cred_val, Cred_addr, Cred_val]),
    Cred_val #> 0,
    query_cred(Real_cred_val),
    query_cred(Cred_val),


    get_time(Now),
    Time_past is Now - Current,
    statistics(real_time, [End|_]),

    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    log("./profile/task_struct", "tasks", Tasks_addr, Base_addr),
    log("./profile/task_struct", "active_mm_struct", MM2_addr, Base_addr),
    log("./profile/task_struct", "comm", Comm_addr, Base_addr),
    log("./profile/task_struct", "parent", Parent_addr, Base_addr),
    log("./profile/task_struct", "group_leader", Group_leader_addr, Base_addr),
    log("./profile/task_struct", "cred", Cred_addr, Base_addr),
    log("./profile/task_struct", "pid", Pid_addr, Base_addr),
    log("./profile/task_struct", "task_struct", End, Start),

    print_nl('tasks offset', Tasks_offset),
    print_nl('tasks offset', Tasks_val),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).

query_module(Base_addr) :-
    /* struct list_head list;
       char name[LEN]; 
       struct kernel_param *kp;
       struct module_layout core_layout;
       struct module_layout init_layout; 
       unsigned int core_size, init_size;
       unsigned int init_text_size, core_text_size;
    */
    %get_time(Current),
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [List_addr, List_val],
        [KP_addr, KP_val],
        [Core_base_addr, Core_base_val]
    ]),
    Str_profile = ([
        [Name_addr, Name_val]    
    ]),
    Int_profile = ([
        [Core_size_addr, Core_size_val],
        [Core_text_size_addr, Core_text_size_val],
        [RO_size_addr, RO_size_val],
        [RO_init_size_addr, RO_init_size_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),
    /* Order Invariants */
    chain([List_addr, Name_addr, KP_addr, Core_base_addr, Core_size_addr, 
            Core_text_size_addr, RO_size_addr, RO_init_size_addr], #<),
    RO_init_size_addr - Base_addr #< 1000,
    
    labeling([enum], [Name_addr, Name_val]),
    List_addr #= Name_addr - 16,
    labeling([enum], [List_addr, List_val]),
    Name_offset #= Name_addr - Base_addr,
    List_offset #= List_addr - Base_addr,
    query_list_head(List_val, Name_offset, List_offset),
    KP_val #> 0,
    labeling([enum], [KP_addr, KP_val]),
    query_kernel_param(KP_val),
    Core_size_addr #= Core_base_addr + 8,
    Core_size_val #> 0,
    Core_text_size_addr #= Core_size_addr + 4,
    Core_text_size_val #> 0,
    RO_size_addr #= Core_text_size_addr + 4,
    RO_init_size_addr #= RO_size_addr + 4,

    labeling([enum], [Core_base_addr, Core_size_addr, 
            Core_text_size_addr, RO_size_addr, RO_init_size_addr]),

    %get_time(End),
    statistics(real_time, [End|_]),
    %Time_past is End - Current,
    log("./profile/module", "list", List_addr, Base_addr),
    log("./profile/module", "name", Name_addr, Base_addr),
    log("./profile/module", "kp", KP_addr, Base_addr),
    log("./profile/module", "core_base", Core_base_addr, Base_addr),
    log("./profile/module", "core_size", Core_size_addr, Base_addr),
    log("./profile/module", "core_text_size", Core_text_size_addr, Base_addr),
    log("./profile/module", "module", End, Start).
    %print_nl("Finished, total time", Time_past).


query_mount_hash(Base_addr) :-
    pointer(Ptr),
    Ptr_profile = ([
        [Mount_addr, Mount_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Mount_addr #< Base_addr + 150,
    Mount_val #> 0,
    labeling([enum], [Mount_addr, Mount_val]),
    query_mount(Mount_val).



query_net_device(Base_addr) :- 
    /*
        char             name[NAMSIZ];
        struct list_head dev_list;
        unsigned char    addr_len;
        unsigned int     promiscuity;
        struct in_device *ip_ptr;
    */
    statistics(real_time, [Start|_]),
    %get_time(Current),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Dev_list_addr, Dev_list_val],
        [IP_ptr_addr, IP_ptr_val]
    ]),
    Str_profile = ([
        [Name_addr, Name_val]
    ]),
    Int_profile = ([
        [Promisc_addr, Promisc_val],
        [Addr_len_addr, Addr_len_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),
    /* Hard to determine offsets for addr_len and promisc */
    chain([Name_addr, Dev_list_addr, Addr_len_addr, Promisc_addr, IP_ptr_addr], #<),
    Name_addr #>= Base_addr,
    Name_offset #= Name_addr - Base_addr,
    IP_ptr_addr #< Base_addr + 1000,
    /* dev_list offset can be hardcoded since it remains the same */
    Dev_list_addr #= Base_addr + 80,
    labeling([enum], [Name_addr, Dev_list_addr, Dev_list_val]),
    /* do not have a good constrain to narrow down ip_ptr, use its rough offset
       to reduce the search space. 
     */
    IP_ptr_addr #> Base_addr + 700,
    IP_ptr_val #> 0,
    labeling([enum], [IP_ptr_addr, IP_ptr_val]),
    query_in_device(IP_ptr_val),

    %get_time(End),
    %Time_past is End - Current,
    statistics(real_time, [End|_]),

    log("./profile/net_device", "name", Name_addr, Base_addr),
    log("./profile/net_device", "ip_ptr", IP_ptr_addr, Base_addr),
    log("./profile/net_device", "dev_list", Dev_list_addr, Base_addr),
    log("./profile/net_device", "time", End, Start).


query_inet_sock(Base_addr) :-
    /* As defined in source code, sk and pinet6 has to be 
       the first two members of inet_sock, which means we
       can hardcode this rule.
    */
    /*skc_family at offset 16 short contained in a unsigned number 
     First half of sock_common can be viewed as unchanged, so it's safe to use
       some hardcoded ruels to help pinpoint some offsets.  
    sk_buff_head, two non-zero pointers, one unsigned long, one integer.
    sk_protocol is a unsigned long number after sk_write_buffer, and they have the same offset. */
    %get_time(Current),
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Sk_receive_queue_addr, Sk_receive_queue_val],
        [Sk_receive_queue_prev_addr, Sk_receive_queue_prev_val],
        [Sk_write_queue_addr, Sk_write_queue_val],
        [Sk_write_queue_prev_addr, Sk_write_queue_prev_val]
    ]),
    Ulong_profile = ([
        [Skc_family_addr, Skc_family_val],
        [Sk_protocol_addr, Sk_protocol_val]
    ]),
    Int_profile = ([
        [Receive_lock_addr, Receive_lock_val],
        [Write_lock_addr, Write_lock_val],
        [Qlen_receive_addr, Qlen_receive_val],
        [Qlen_write_addr, Qlen_write_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    tuples_in(Int_profile, Int),

    Sk_protocol_val #> 0,
    Skc_family_addr #= Base_addr + 16,
    Skc_family_val #> 0,
    Sk_receive_queue_val #> 0,
    Sk_receive_queue_prev_val #> 0,
    Sk_write_queue_val #> 0,
    Sk_write_queue_prev_val #> 0,
    chain([Skc_family_addr, Sk_receive_queue_addr, Sk_receive_queue_prev_addr, Qlen_receive_addr, Receive_lock_addr,
          Sk_write_queue_addr, Sk_write_queue_prev_addr, Qlen_write_addr, Write_lock_addr,
          Sk_protocol_addr], #<),
    /* sock_common is at least 136 */
    Sk_receive_queue_addr #> Base_addr + 136,
    Sk_protocol_addr #< Base_addr + 700,
    Sk_receive_queue_prev_addr #= Sk_receive_queue_addr + 8,
    Qlen_receive_addr #= Sk_receive_queue_prev_addr + 8,
    Receive_lock_addr #= Qlen_receive_addr + 4,

    Sk_write_queue_prev_addr #= Sk_write_queue_addr + 8,
    Qlen_write_addr #= Sk_write_queue_prev_addr + 8,
    Write_lock_addr #= Qlen_write_addr + 4,

    labeling([enum], [Skc_family_addr, Sk_receive_queue_addr, Sk_write_queue_addr, Sk_protocol_addr]),

    %get_time(End),
    %Time_past is End - Current,
    statistics(real_time, [End|_]),


    log("./profile/inet_sock", "sk_receive_queue", Sk_receive_queue_addr, Base_addr),
    log("./profile/inet_sock", "Sk_write_queue", Sk_write_queue_addr, Base_addr),
    log("./profile/inet_sock", "Skc_family", Skc_family_addr, Base_addr),
    log("./profile/inet_sock", "Sk_protocol", Sk_protocol_addr, Base_addr),
    log("./profile/inet_sock", "time", End, Start).

query_resource(Base_addr) :-
    /*
        start
        end
        *name
        *parent
        *sibling
        *child -> non-zero
    */
    /* This structure remains unchanged, thus we can have some
       hardcoded rules to help inference. */

    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Name_addr, Name_val],
        [Parent_addr, Parent_val],
        [Sibling_addr, Sibling_val],
        [Child_addr, Child_val]
    ]),
    Ulong_profile = ([
        [End_addr, End_val],
        [Flags_addr, Flags_val]
    ]),
    Int_profile = ([
        [Start_addr, Start_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    tuples_in(Int_profile, Int),

    Child_val #> 0,
    Start_addr #>= Base_addr,
    chain([Start_addr, End_addr, Name_addr, Flags_addr, Parent_addr, Sibling_addr, Child_addr], #<),
    %Name_addr #= Base_addr + 16,
    Child_addr #=< Base_addr + 64,
    labeling([enum], [Start_addr, End_addr, Name_addr, Name_val]),
    query_string_pointer(Name_val),
    Name_offset #= Name_addr - Base_addr,
    labeling([enum], [Child_addr, Child_val]),
    query_name_pointer(Child_val, Name_offset),

    statistics(real_time, [End|_]),


    log("./profile/resource", "Start_addr", Start_addr, Base_addr),
    log("./profile/resource", "End_addr", End_addr, Base_addr),
    log("./profile/resource", "Name_addr", Name_addr, Base_addr),
    log("./profile/resource", "Child_addr", Child_addr, Base_addr),
    log("./profile/resource", "resource", End, Start).


query_neigh_table(Base_addr) :- 
    /* nht at offset 464 */
    pointer(Ptr),
    Ptr_profile = ([
        [Nht_addr, Nht_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Nht_addr #>= Base_addr + 448,
    Nht_addr #=< Base_addr + 472,
    labeling([enum], [Nht_addr, Nht_val]),
    query_neigh_hash_table(Nht_val).


query_seq_operations(Base_addr) :-
    /* Four successive function pointers */
    pointer(Ptr),
    Ptr_profile = ([
        [Start_addr, Start_val],
        [Stop_addr, Stop_val],
        [Next_addr, Next_val],
        [Show_addr, Show_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([Start_addr, Stop_addr, Next_addr, Show_addr], #<),
    Start_addr #= Base_addr,
    Show_addr #= Base_addr + 24,
    Start_val #> 0,
    Stop_val #> 0,
    Next_val #> 0,
    Show_val #> 0.

query_tcp_seq_afinfo(Base_addr) :-
    pointer(Ptr),
    int(Int),
    Ptr_profile = ([
        [Name_addr, Name_val],
        [F_ops_addr, F_ops_val],
        [Ops_addr, Ops_val]
    ]),
    Int_profile = ([
        [Family_addr, Family_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Name_addr #= Base_addr,
    Ops_addr #= Base_addr + 24,
    chain([Name_addr, Family_addr, F_ops_addr, Ops_addr], #<),
    
    labeling([enum], [Name_addr, Name_val]),
    query_string_pointer(Name_val).

query_udp_seq_afinfo(Base_addr) :-
    pointer(Ptr),
    int(Int),
    Ptr_profile = ([
        [Name_addr, Name_val],
        [Udp_table_addr, Udp_table_val],
        [F_ops_addr, F_ops_val],
        [Ops_addr, Ops_val]
    ]),
    Int_profile = ([
        [Family_addr, Family_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Name_addr #= Base_addr,
    Ops_addr #= Base_addr + 32,
    chain([Name_addr, Family_addr, Udp_table_addr, F_ops_addr, Ops_addr], #<),
    
    labeling([enum], [Name_addr, Name_val]),
    query_string_pointer(Name_val).

query_tty_driver(Base_addr) :-
    /* tty_driver remains unchanged, some rules are hardcoded. */
    pointer(Ptr),
    int(Int),
    Ptr_profile = ([
        [Driver_name_addr, Driver_name_val],
        [Name_addr, Name_val],
        [Ttys_addr, Ttys_val],
        [Tty_drivers_addr, Tty_drivers_val]
    ]),
    Int_profile = ([
        [Magic_addr, Magic_val],
        [Kref_addr, Kref_val],
        [Name_base_addr, Name_base_val],
        [Major_addr, Major_val],
        [Minor_start_addr, Minor_start_val],
        [Num_addr, Num_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Magic_addr #= Base_addr,
    Kref_addr #= Magic_addr + 4,
    Num_addr #= Name_base + 12,
    Ttys_addr #= Base_addr + 128,
    Tty_drivers_addr #= Base_addr + 168,
    chain([Magic_addr, Kref_addr, Driver_name_addr, Name_addr, Name_base_addr, Major_addr, Minor_start_addr,
            Num_addr, Ttys_addr, Tty_drivers_addr], #<),
    labeling([enum], [Driver_name_addr, Driver_name_val, Name_addr, Name_val]),
    query_string_pointer(Driver_name_val),
    query_string_pointer(Name_val).

query_proc_dir_entry(Base_addr) :-
    pointer(Ptr),
    int(Int),
    long(Ulg),
    Ptr_profile = ([
        [Proc_iops_addr, Proc_iops_val],
        [Proc_fops_addr, Proc_fops_val]
    ]),
    Int_profile = ([
        [Low_ino_addr, Low_ino_val],
        [Mode_addr, Mode_val],
        [Nlink_addr, Nlink_val],
        [Uid_addr, Uid_val],
        [Gid_addr, Gid_val]
    ]),

    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Low_ino_addr #= Base_addr,
    Gid_addr #= Low_ino_addr + 16,
    Proc_fops_addr #= Proc_iops_addr + 8,
    Proc_fops_addr #=< Base_addr + 40,
    chain([Low_ino_addr, Mode_addr, Nlink_addr, Uid_addr, Gid_addr, Proc_iops_addr, Proc_fops_addr], #<),
    labeling([enum], [Proc_iops_addr, Proc_iops_val, Proc_fops_addr, Proc_fops_val]),
    Proc_fops_val #> 0,
    %Proc_iops_val #> 0,
    %query_inode_operations(Proc_iops_val),
    query_inode_operations(Proc_fops_val).

query_kset(Base_addr) :-
    /* skip */
    1 #= 1.



test(Base_addr) :-
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM2_addr, Pid_addr, Tgid_addr, Parent_addr, Real_parent_addr, Child_addr, 
           Group_leader_addr, Thread_group_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    MM2_addr #> Base_addr + 1000,
    Tasks_addr #> MM2_addr - 100,
    FS_struct_addr #< Base_addr + 3000,
    Tgid_addr #= Pid_addr + 4,
    Parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr + 8,
    Child_addr #= Real_parent_addr +8,
    Group_leader_addr #=< Child_addr +32,
    %Comm_addr #= Base_addr + 2584,
    %Tasks_addr #= Base_addr + 1904,
    %FS_struct_addr #= Base_addr + 2640,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    % make query after labeling
    MM2_val #> 0,
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val,  Comm_addr, Comm_val ]),
    %Tasks_addr #= Base_addr + 2040,
    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    


    get_time(End),
    Time_past is End - Current,
    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    
    print_nl('tasks offset', Tasks_offset),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).


query_neigh_hash_table(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "neigh_hash_table"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_string_pointer(Val) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "string_pointer"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_name_pointer(Val, Name_offset) :-
    process_create(path('python'),
                    ['subquery.py', Val, "name_pointer", Name_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_mount(Base_addr) :- 
    process_create(path('python'),
                    ['subquery.py', Base_addr, "mount"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_mount_struct(Val, Offset) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "mount_struct", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_vfs_mount(Vfsmount_val) :-
    process_create(path('python'),
                    ['subquery.py', Vfsmount_val, "vfs_mount"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_dentry(Dentry_val) :-
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_kernel_param(KP_val) :-
    process_create(path('python'),
                    ['subquery.py', KP_val, "kernel_param"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_in_device(IP_ptr_val) :-
    process_create(path('python'),
                    ['subquery.py', IP_ptr_val, "in_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_inode_operations(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_mm_struct(MM2_val) :-
    process_create(path('python'),
                    ['subquery.py', MM2_val, "mm_struct"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_list_head(Tasks_val, Comm_offset, Tasks_offset) :-
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "list_head", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_ts(Base_addr, Comm_offset, Tasks_offset) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "ts", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_cred(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "cred"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).
query_fs_struct(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "fs_struct"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

print_nl(Name, Content):- 
    print(Name),
    print(':'),
    print(Content),
    nl.
