:- use_module(library(clpfd)).
:- style_check(-singleton).
pointer([
		[0xfc43560,0],
		[0xfc43568,0],
		[0xfc43570,0],
		[0xfc43578,248333776],
		[0xfc43580,0],
		[0xfc43588,0],
		[0xfc43590,248333712],
		[0xfc43598,248333632],
		[0xfc435a0,248333520],
		[0xfc435a8,248333504],
		[0xfc435b0,0],
		[0xfc435b8,0],
		[0xfc435c0,248307680],
		[0xfc435c8,0],
		[0xfc435d0,0],
		[0xfc435d8,248333552],
		[0xfc435e0,248333536],
		[0xfc435e8,0],
		[0xfc435f0,0],
		[0xfc435f8,0],
		[0xfc43600,248333616],
		[0xfc43608,248333600],
		[0xfc43610,248333568],
		[0xfc43618,248333584],
		[0xfc43620,0],
		[0xfc43628,0],
		[0xfc43630,0],
		[0xfc43638,0],
		[0xfc43658,0],
		[0xfc43660,264516960],
		[0xfc43670,248367872],
		[0xfc43678,248361824],
		[0xfc43680,248356720],
		[0xfc43688,248356864],
		[0xfc43690,248356960],
		[0xfc43698,248382912],
		[0xfc436a0,248363408],
		[0xfc436a8,248343264],
		[0xfc436b0,248367648],
		[0xfc436b8,0],
		[0xfc436c0,248307680],
		[0xfc436c8,248344736],
		[0xfc436d0,248373200],
		[0xfc436d8,248360064],
		[0xfc436e0,248362256],
		[0xfc436e8,248356480],
		[0xfc436f0,248336320],
		[0xfc436f8,248367616],
		[0xfc43700,248365344],
		[0xfc43708,248338096],
		[0xfc43710,248337776],
		[0xfc43718,248355792],
		[0xfc43720,248372256],
		[0xfc43728,0],
		[0xfc43730,0],
		[0xfc43738,0],
		[0xfc43740,264517216],
		[0xfc43750,248393296],
		[0xfc43758,248393136],
		[0xfc43760,248389280],
		[0xfc43768,0],
		[0xfc43770,248389408],
		[0xfc43778,248396336],
		[0xfc43780,248392112],
		[0xfc43788,248389136],
		[0xfc43790,0],
		[0xfc43798,248395504],
		[0xfc437a0,248307680],
		[0xfc437a8,248390416],
		[0xfc437b0,248392592],
		[0xfc437b8,248390640],
		[0xfc437c0,248391712],
		[0xfc437c8,0],
		[0xfc437d0,0],
		[0xfc437d8,248388816],
		[0xfc437e0,248388896],
		[0xfc437e8,248388704],
		[0xfc437f0,248388096],
		[0xfc437f8,248391184],
		[0xfc43800,0],
		[0xfc43808,0],
		[0xfc43810,0],
		[0xfc43818,0],
		[0xfc43820,264517440],
		[0xfc43828,0],
		[0xfc43830,248408256],
		[0xfc43838,248411440],
		[0xfc43840,248410480],
		[0xfc43848,0],
		[0xfc43850,248398384],
		[0xfc43858,248410912],
		[0xfc43860,248410544],
		[0xfc43868,248399040],
		[0xfc43870,248404416],
		[0xfc43878,248401728],
		[0xfc43880,248400320],
		[0xfc43888,248399472],
		[0xfc43890,248400192],
		[0xfc43898,248401856],
		[0xfc438a0,248410704],
		[0xfc438a8,248398256],
		[0xfc438b0,0],
		[0xfc438b8,248406336],
		[0xfc438c0,248400640],
		[0xfc438c8,248398928],
		[0xfc438d0,0],
		[0xfc438d8,248409792],
		[0xfc438e0,0],
		[0xfc438e8,0],
		[0xfc438f0,0],
		[0xfc438f8,0],
		[0xfc43900,264517664],
		[0xfc43908,0],
		[0xfc43910,248432464],
		[0xfc43918,248432352],
		[0xfc43920,248432448],
		[0xfc43928,0],
		[0xfc43930,248432336],
		[0xfc43938,248432608],
		[0xfc43940,248432736],
		[0xfc43948,248432320],
		[0xfc43950,0],
		[0xfc43958,0],
		[0xfc43960,248307680],
		[0xfc43968,0],
		[0xfc43970,0],
		[0xfc43978,248432512],
		[0xfc43980,248432368],
		[0xfc43988,0],
		[0xfc43990,0],
		[0xfc43998,0],
		[0xfc439a0,248432432],
		[0xfc439a8,248432416],
		[0xfc439b0,248432384],
		[0xfc439b8,248432400],
		[0xfc439c0,0],
		[0xfc439c8,0],
		[0xfc439d0,0],
		[0xfc439d8,0],
		[0xfc43a70,0],
		[0xfc43a78,0],
		[0xfc43a80,248438816],
		[0xfc43a88,248438336],
		[0xfc43a90,248438928],
		[0xfc43a98,248438352],
		[0xfc43ab0,0],
		[0xfc43ab8,0],
		[0xfc43ac0,248440144],
		[0xfc43ac8,248438960],
		[0xfc43ad0,248440256],
		[0xfc43ad8,248444352],
		[0xfc43ae0,0],
		[0xfc43ae8,250562752],
		[0xfc43af0,250563968],
		[0xfc43af8,248444432],
		[0xfc43b00,0],
		[0xfc43b08,0],
		[0xfc43b10,0],
		[0xfc43b18,0],
		[0xfc43b20,0],
		[0xfc43b28,0],
		[0xfc43b30,0],
		[0xfc43b38,0],
		[0xfc43b40,0],
		[0xfc43b48,0],
		[0xfc43b50,248438976],
		[0xfc43b58,0],
		[0xfc43b60,250560896],
		[0xfc43b68,0],
		[0xfc43b70,0],
		[0xfc43b78,0],
		[0xfc43b80,0],
		[0xfc43b88,0],
		[0xfc43b90,0],
		[0xfc43b98,0],
		[0xfc43ba0,0],
		[0xfc43ba8,0],
		[0xfc43bb0,0],
		[0xfc43bb8,0],
		[0xfc43bc0,0],
		[0xfc43bc8,0],
		[0xfc43bd0,0],
		[0xfc43bd8,0],
		[0xfc43be0,267607690],
		[0xfc43be8,267610216],
		[0xfc43bf0,267610228],
		[0xfc43bf8,267610239],
		[0xfc43c00,267610250],
		[0xfc43c08,267610266],
		[0xfc43c10,267610284],
		[0xfc43c18,267610291],
		[0xfc43c20,267610303],
		[0xfc43c28,267610320],
		[0xfc43c30,267610331],
		[0xfc43c38,267610343],
		[0xfc43c40,267610352],
		[0xfc43c48,267610370],
		[0xfc43c50,267610382],
		[0xfc43c58,267610399],
		[0xfc43c60,267610406],
		[0xfc43c68,267610422],
		[0xfc43c70,267610430],
		[0xfc43c78,267610440],
		[0xfc43c80,267610448],
		[0xfc43c88,0],
		[0xfc43c90,0],
		[0xfc43c98,0],
		[0xfc43cb8,0],
		[0xfc43cc0,0],
		[0xfc43cc8,0],
		[0xfc43cd0,0],
		[0xfc43cd8,270950480],
		[0xfc43ce0,0],
		[0xfc43ce8,0],
		[0xfc43cf0,0],
		[0xfc43cf8,0],
		[0xfc43d00,0],
		[0xfc43d08,250562752],
		[0xfc43d10,250563968],
		[0xfc43d18,248472400],
		[0xfc43d20,0],
		[0xfc43d28,0],
		[0xfc43d30,0],
		[0xfc43d38,0],
		[0xfc43d40,0],
		[0xfc43d48,248472656],
		[0xfc43d50,0],
		[0xfc43d58,0],
		[0xfc43d60,0],
		[0xfc43d68,0],
		[0xfc43d70,248467504],
		[0xfc43d78,0],
		[0xfc43d80,248472080],
		[0xfc43d88,0],
		[0xfc43d90,0],
		[0xfc43d98,0],
		[0xfc43da0,0],
		[0xfc43da8,0],
		[0xfc43db0,0],
		[0xfc43db8,0],
		[0xfc43dc0,0],
		[0xfc43dc8,0],
		[0xfc43dd0,0],
		[0xfc43dd8,0],
		[0xfc43de0,0],
		[0xfc43de8,0],
		[0xfc43df0,0],
		[0xfc43df8,0],
		[0xfc43e00,0],
		[0xfc43e08,250562752],
		[0xfc43e10,250563968],
		[0xfc43e18,248472432],
		[0xfc43e20,0],
		[0xfc43e28,0],
		[0xfc43e30,0],
		[0xfc43e38,0],
		[0xfc43e40,0],
		[0xfc43e48,248472656],
		[0xfc43e50,0],
		[0xfc43e58,0],
		[0xfc43e60,0],
		[0xfc43e68,0],
		[0xfc43e70,248467536],
		[0xfc43e78,0],
		[0xfc43e80,248472080],
		[0xfc43e88,0],
		[0xfc43e90,0],
		[0xfc43e98,0],
		[0xfc43ea0,0],
		[0xfc43ea8,0],
		[0xfc43eb0,0],
		[0xfc43eb8,0],
		[0xfc43ec0,0],
		[0xfc43ec8,0],
		[0xfc43ed0,0],
		[0xfc43ed8,0],
		[0xfc43ee0,0],
		[0xfc43ee8,0],
		[0xfc43ef0,0],
		[0xfc43ef8,0],
		[0xfc43f00,0],
		[0xfc43f08,250562752],
		[0xfc43f10,250563968],
		[0xfc43f18,248472464],
		[0xfc43f20,0],
		[0xfc43f28,0],
		[0xfc43f30,0],
		[0xfc43f38,0],
		[0xfc43f40,0],
		[0xfc43f48,248472656],
		[0xfc43f50,0],
		[0xfc43f58,0],
		[0xfc43f60,0],
		[0xfc43f68,0],
		[0xfc43f70,248467568],
		[0xfc43f78,0],
		[0xfc43f80,248472080],
		[0xfc43f88,0],
		[0xfc43f90,0],
		[0xfc43f98,0],
		[0xfc43fa0,0],
		[0xfc43fa8,0],
		[0xfc43fb0,0],
		[0xfc43fb8,0],
		[0xfc43fc0,0],
		[0xfc43fc8,0],
		[0xfc43fd0,0],
		[0xfc43fd8,0],
		[0xfc43fe0,0],
		[0xfc43fe8,0],
		[0xfc43ff0,0],
		[0xfc43ff8,0],
		[0xfc44000,268031550],
		[0xfc44008,268031534],
		[0xfc44010,267613469],
		[0xfc44018,0],
		[0xfc44038,0],
		[0xfc44058,0],
		[0xfc44080,0],
		[0xfc44088,250562752],
		[0xfc44090,250563968],
		[0xfc44098,0],
		[0xfc440a0,0],
		[0xfc440a8,0],
		[0xfc440b0,0],
		[0xfc440b8,0],
		[0xfc440c0,0],
		[0xfc440c8,0],
		[0xfc440d0,0],
		[0xfc440d8,0],
		[0xfc440e0,0],
		[0xfc440e8,0],
		[0xfc440f0,248484800],
		[0xfc440f8,0],
		[0xfc44100,250560896],
		[0xfc44108,0],
		[0xfc44110,0],
		[0xfc44118,0],
		[0xfc44120,0],
		[0xfc44128,0],
		[0xfc44130,0],
		[0xfc44138,0],
		[0xfc44140,0],
		[0xfc44148,0],
		[0xfc44150,0],
		[0xfc44158,0],
		[0xfc44160,0],
		[0xfc44168,0],
		[0xfc44170,0],
		[0xfc44178,0],
		[0xfc44180,0],
		[0xfc44188,250373856],
		[0xfc44190,248485264],
		[0xfc44198,248486720],
		[0xfc441a0,0],
		[0xfc441a8,0],
		[0xfc441b0,0],
		[0xfc441b8,0],
		[0xfc441c0,0],
		[0xfc441c8,0],
		[0xfc441d0,0],
		[0xfc441d8,0],
		[0xfc441e0,0],
		[0xfc441e8,0],
		[0xfc441f0,248486368],
		[0xfc441f8,0],
		[0xfc44200,248487120],
		[0xfc44208,0],
		[0xfc44210,0],
		[0xfc44218,0],
		[0xfc44220,0],
		[0xfc44228,0],
		[0xfc44230,0],
		[0xfc44238,0],
		[0xfc44240,0],
		[0xfc44248,0],
		[0xfc44250,0],
		[0xfc44258,0],
		[0xfc44260,0],
		[0xfc44268,0],
		[0xfc44270,0],
		[0xfc44278,0],
		[0xfc44280,267613951],
		[0xfc44288,267487912],
		[0xfc44290,268397996],
		[0xfc44298,267654807],
		[0xfc442a0,267613880],
		[0xfc442a8,267613826],
		[0xfc442b0,267654807],
		[0xfc442b8,267565154],
		[0xfc442c0,0],
		[0xfc442c8,0],
		[0xfc442d0,0],
		[0xfc442d8,270952576],
		[0xfc442e0,0],
		[0xfc442e8,0],
		[0xfc442f0,0],
		[0xfc442f8,0],
		[0xfc44300,0],
		[0xfc44308,250562752],
		[0xfc44310,250563968],
		[0xfc44318,0],
		[0xfc44320,0],
		[0xfc44328,0],
		[0xfc44330,0],
		[0xfc44338,0],
		[0xfc44340,0],
		[0xfc44348,0],
		[0xfc44350,0],
		[0xfc44358,0],
		[0xfc44360,0],
		[0xfc44368,0],
		[0xfc44370,248488176],
		[0xfc44378,0],
		[0xfc44380,250560896],
		[0xfc44388,0],
		[0xfc44390,0],
		[0xfc44398,0],
		[0xfc443a0,0],
		[0xfc443a8,0],
		[0xfc443b0,0],
		[0xfc443b8,0],
		[0xfc443c0,0],
		[0xfc443c8,0],
		[0xfc443d0,0],
		[0xfc443d8,0],
		[0xfc443e0,0],
		[0xfc443e8,0],
		[0xfc443f0,0],
		[0xfc443f8,0],
		[0xfc44400,267890056],
		[0xfc44408,267627198],
		[0xfc44410,267614171],
		[0xfc44418,268287699],
		[0xfc44420,268048157],
		[0xfc44428,267614182],
		[0xfc44430,0],
		[0xfc44438,0],
		[0xfc44458,0],
		[0xfc44460,0],
		[0xfc44468,267614855],
		[0xfc44470,267614839],
		[0xfc44478,267614834],
		[0xfc44480,0],
		[0xfc44488,267613951],
		[0xfc44490,267614847],
		[0xfc44498,267589508],
		[0xfc444a0,0],
		[0xfc444a8,0],
		[0xfc444b0,0],
		[0xfc444b8,270953344],
		[0xfc444c0,0],
		[0xfc444c8,0],
		[0xfc444d0,0],
		[0xfc444d8,0],
		[0xfc444e0,0],
		[0xfc444e8,268287699],
		[0xfc444f0,268085711],
		[0xfc444f8,267601168],
		[0xfc44500,268397996],
		[0xfc44508,267616605],
		[0xfc44558,0],
		[0, 0]
]).
unknown([
		[0xfc439e0,18051468385098661887],
		[0xfc439e8,17286145344943783188],
		[0xfc439f0,16553269494227715814],
		[0xfc439f8,15851465172105092843],
		[0xfc43a00,15179415056271342793],
		[0xfc43a08,14535857654701788180],
		[0xfc43a10,13919584977779370512],
		[0xfc43a18,13329440240487146398],
		[0xfc43a20,12764315706334704435],
		[0xfc43a28,12223150595709091561],
		[0xfc43a30,11704929110189856425],
		[0xfc43a38,11208678516993634911],
		[0xfc43a40,10733467319318081616],
		[0xfc43a48,10278403516880114547],
		[0xfc43a50,9842632930878669283],
		[0xfc43a58,9425337584792028007],
		[0, 0]
]).
long([
		[0xfc43650,125779952890975],
		[0xfc43668,1],
		[0xfc43748,1],
		[0xfc43cb0,1702125925],
		[0xfc44078,500186441069],
		[0xfc44450,521325536612],
		[0, 0]
]).
int([
		[0xfc43560,0],
		[0xfc43564,0],
		[0xfc43568,0],
		[0xfc4356c,0],
		[0xfc43570,0],
		[0xfc43574,0],
		[0xfc43580,0],
		[0xfc43584,0],
		[0xfc43588,0],
		[0xfc4358c,0],
		[0xfc435b0,0],
		[0xfc435b4,0],
		[0xfc435b8,0],
		[0xfc435bc,0],
		[0xfc435c8,0],
		[0xfc435cc,0],
		[0xfc435d0,0],
		[0xfc435d4,0],
		[0xfc435e8,0],
		[0xfc435ec,0],
		[0xfc435f0,0],
		[0xfc435f4,0],
		[0xfc435f8,0],
		[0xfc435fc,0],
		[0xfc43620,0],
		[0xfc43624,0],
		[0xfc43628,0],
		[0xfc4362c,0],
		[0xfc43630,0],
		[0xfc43634,0],
		[0xfc43638,0],
		[0xfc4363c,0],
		[0xfc43654,29285],
		[0xfc43658,0],
		[0xfc4365c,0],
		[0xfc43668,1],
		[0xfc4366c,0],
		[0xfc436b8,0],
		[0xfc436bc,0],
		[0xfc43728,0],
		[0xfc4372c,0],
		[0xfc43730,0],
		[0xfc43734,0],
		[0xfc43738,0],
		[0xfc4373c,0],
		[0xfc43748,1],
		[0xfc4374c,0],
		[0xfc43768,0],
		[0xfc4376c,0],
		[0xfc43790,0],
		[0xfc43794,0],
		[0xfc437c8,0],
		[0xfc437cc,0],
		[0xfc437d0,0],
		[0xfc437d4,0],
		[0xfc43800,0],
		[0xfc43804,0],
		[0xfc43808,0],
		[0xfc4380c,0],
		[0xfc43810,0],
		[0xfc43814,0],
		[0xfc43818,0],
		[0xfc4381c,0],
		[0xfc43828,0],
		[0xfc4382c,0],
		[0xfc43848,0],
		[0xfc4384c,0],
		[0xfc438b0,0],
		[0xfc438b4,0],
		[0xfc438d0,0],
		[0xfc438d4,0],
		[0xfc438e0,0],
		[0xfc438e4,0],
		[0xfc438e8,0],
		[0xfc438ec,0],
		[0xfc438f0,0],
		[0xfc438f4,0],
		[0xfc438f8,0],
		[0xfc438fc,0],
		[0xfc43908,0],
		[0xfc4390c,0],
		[0xfc43928,0],
		[0xfc4392c,0],
		[0xfc43950,0],
		[0xfc43954,0],
		[0xfc43958,0],
		[0xfc4395c,0],
		[0xfc43968,0],
		[0xfc4396c,0],
		[0xfc43970,0],
		[0xfc43974,0],
		[0xfc43988,0],
		[0xfc4398c,0],
		[0xfc43990,0],
		[0xfc43994,0],
		[0xfc43998,0],
		[0xfc4399c,0],
		[0xfc439c0,0],
		[0xfc439c4,0],
		[0xfc439c8,0],
		[0xfc439cc,0],
		[0xfc439d0,0],
		[0xfc439d4,0],
		[0xfc439d8,0],
		[0xfc439dc,0],
		[0xfc43a70,0],
		[0xfc43a74,0],
		[0xfc43a78,0],
		[0xfc43a7c,0],
		[0xfc43ab0,0],
		[0xfc43ab4,0],
		[0xfc43ab8,0],
		[0xfc43abc,0],
		[0xfc43ae0,0],
		[0xfc43ae4,0],
		[0xfc43b00,0],
		[0xfc43b04,0],
		[0xfc43b08,0],
		[0xfc43b0c,0],
		[0xfc43b10,0],
		[0xfc43b14,0],
		[0xfc43b18,0],
		[0xfc43b1c,0],
		[0xfc43b20,0],
		[0xfc43b24,0],
		[0xfc43b28,0],
		[0xfc43b2c,0],
		[0xfc43b30,0],
		[0xfc43b34,0],
		[0xfc43b38,0],
		[0xfc43b3c,0],
		[0xfc43b40,0],
		[0xfc43b44,0],
		[0xfc43b48,0],
		[0xfc43b4c,0],
		[0xfc43b58,0],
		[0xfc43b5c,0],
		[0xfc43b68,0],
		[0xfc43b6c,0],
		[0xfc43b70,0],
		[0xfc43b74,0],
		[0xfc43b78,0],
		[0xfc43b7c,0],
		[0xfc43b80,0],
		[0xfc43b84,0],
		[0xfc43b88,0],
		[0xfc43b8c,0],
		[0xfc43b90,0],
		[0xfc43b94,0],
		[0xfc43b98,0],
		[0xfc43b9c,0],
		[0xfc43ba0,0],
		[0xfc43ba4,0],
		[0xfc43ba8,0],
		[0xfc43bac,0],
		[0xfc43bb0,0],
		[0xfc43bb4,0],
		[0xfc43bb8,0],
		[0xfc43bbc,0],
		[0xfc43bc0,0],
		[0xfc43bc4,0],
		[0xfc43bc8,0],
		[0xfc43bcc,0],
		[0xfc43bd0,0],
		[0xfc43bd4,0],
		[0xfc43bd8,0],
		[0xfc43bdc,0],
		[0xfc43c88,0],
		[0xfc43c8c,0],
		[0xfc43c90,0],
		[0xfc43c94,0],
		[0xfc43c98,0],
		[0xfc43c9c,0],
		[0xfc43cb4,0],
		[0xfc43cb8,0],
		[0xfc43cbc,0],
		[0xfc43cc0,0],
		[0xfc43cc4,0],
		[0xfc43cc8,0],
		[0xfc43ccc,0],
		[0xfc43cd0,0],
		[0xfc43cd4,0],
		[0xfc43ce0,0],
		[0xfc43ce4,0],
		[0xfc43ce8,0],
		[0xfc43cec,0],
		[0xfc43cf0,0],
		[0xfc43cf4,0],
		[0xfc43cf8,0],
		[0xfc43cfc,0],
		[0xfc43d00,0],
		[0xfc43d04,0],
		[0xfc43d20,0],
		[0xfc43d24,0],
		[0xfc43d28,0],
		[0xfc43d2c,0],
		[0xfc43d30,0],
		[0xfc43d34,0],
		[0xfc43d38,0],
		[0xfc43d3c,0],
		[0xfc43d40,0],
		[0xfc43d44,0],
		[0xfc43d50,0],
		[0xfc43d54,0],
		[0xfc43d58,0],
		[0xfc43d5c,0],
		[0xfc43d60,0],
		[0xfc43d64,0],
		[0xfc43d68,0],
		[0xfc43d6c,0],
		[0xfc43d78,0],
		[0xfc43d7c,0],
		[0xfc43d88,0],
		[0xfc43d8c,0],
		[0xfc43d90,0],
		[0xfc43d94,0],
		[0xfc43d98,0],
		[0xfc43d9c,0],
		[0xfc43da0,0],
		[0xfc43da4,0],
		[0xfc43da8,0],
		[0xfc43dac,0],
		[0xfc43db0,0],
		[0xfc43db4,0],
		[0xfc43db8,0],
		[0xfc43dbc,0],
		[0xfc43dc0,0],
		[0xfc43dc4,0],
		[0xfc43dc8,0],
		[0xfc43dcc,0],
		[0xfc43dd0,0],
		[0xfc43dd4,0],
		[0xfc43dd8,0],
		[0xfc43ddc,0],
		[0xfc43de0,0],
		[0xfc43de4,0],
		[0xfc43de8,0],
		[0xfc43dec,0],
		[0xfc43df0,0],
		[0xfc43df4,0],
		[0xfc43df8,0],
		[0xfc43dfc,0],
		[0xfc43e00,0],
		[0xfc43e04,0],
		[0xfc43e20,0],
		[0xfc43e24,0],
		[0xfc43e28,0],
		[0xfc43e2c,0],
		[0xfc43e30,0],
		[0xfc43e34,0],
		[0xfc43e38,0],
		[0xfc43e3c,0],
		[0xfc43e40,0],
		[0xfc43e44,0],
		[0xfc43e50,0],
		[0xfc43e54,0],
		[0xfc43e58,0],
		[0xfc43e5c,0],
		[0xfc43e60,0],
		[0xfc43e64,0],
		[0xfc43e68,0],
		[0xfc43e6c,0],
		[0xfc43e78,0],
		[0xfc43e7c,0],
		[0xfc43e88,0],
		[0xfc43e8c,0],
		[0xfc43e90,0],
		[0xfc43e94,0],
		[0xfc43e98,0],
		[0xfc43e9c,0],
		[0xfc43ea0,0],
		[0xfc43ea4,0],
		[0xfc43ea8,0],
		[0xfc43eac,0],
		[0xfc43eb0,0],
		[0xfc43eb4,0],
		[0xfc43eb8,0],
		[0xfc43ebc,0],
		[0xfc43ec0,0],
		[0xfc43ec4,0],
		[0xfc43ec8,0],
		[0xfc43ecc,0],
		[0xfc43ed0,0],
		[0xfc43ed4,0],
		[0xfc43ed8,0],
		[0xfc43edc,0],
		[0xfc43ee0,0],
		[0xfc43ee4,0],
		[0xfc43ee8,0],
		[0xfc43eec,0],
		[0xfc43ef0,0],
		[0xfc43ef4,0],
		[0xfc43ef8,0],
		[0xfc43efc,0],
		[0xfc43f00,0],
		[0xfc43f04,0],
		[0xfc43f20,0],
		[0xfc43f24,0],
		[0xfc43f28,0],
		[0xfc43f2c,0],
		[0xfc43f30,0],
		[0xfc43f34,0],
		[0xfc43f38,0],
		[0xfc43f3c,0],
		[0xfc43f40,0],
		[0xfc43f44,0],
		[0xfc43f50,0],
		[0xfc43f54,0],
		[0xfc43f58,0],
		[0xfc43f5c,0],
		[0xfc43f60,0],
		[0xfc43f64,0],
		[0xfc43f68,0],
		[0xfc43f6c,0],
		[0xfc43f78,0],
		[0xfc43f7c,0],
		[0xfc43f88,0],
		[0xfc43f8c,0],
		[0xfc43f90,0],
		[0xfc43f94,0],
		[0xfc43f98,0],
		[0xfc43f9c,0],
		[0xfc43fa0,0],
		[0xfc43fa4,0],
		[0xfc43fa8,0],
		[0xfc43fac,0],
		[0xfc43fb0,0],
		[0xfc43fb4,0],
		[0xfc43fb8,0],
		[0xfc43fbc,0],
		[0xfc43fc0,0],
		[0xfc43fc4,0],
		[0xfc43fc8,0],
		[0xfc43fcc,0],
		[0xfc43fd0,0],
		[0xfc43fd4,0],
		[0xfc43fd8,0],
		[0xfc43fdc,0],
		[0xfc43fe0,0],
		[0xfc43fe4,0],
		[0xfc43fe8,0],
		[0xfc43fec,0],
		[0xfc43ff0,0],
		[0xfc43ff4,0],
		[0xfc43ff8,0],
		[0xfc43ffc,0],
		[0xfc44018,0],
		[0xfc4401c,0],
		[0xfc44030,119],
		[0xfc44034,0],
		[0xfc44038,0],
		[0xfc4403c,0],
		[0xfc44050,116],
		[0xfc44054,0],
		[0xfc44058,0],
		[0xfc4405c,0],
		[0xfc4407c,116],
		[0xfc44080,0],
		[0xfc44084,0],
		[0xfc44098,0],
		[0xfc4409c,0],
		[0xfc440a0,0],
		[0xfc440a4,0],
		[0xfc440a8,0],
		[0xfc440ac,0],
		[0xfc440b0,0],
		[0xfc440b4,0],
		[0xfc440b8,0],
		[0xfc440bc,0],
		[0xfc440c0,0],
		[0xfc440c4,0],
		[0xfc440c8,0],
		[0xfc440cc,0],
		[0xfc440d0,0],
		[0xfc440d4,0],
		[0xfc440d8,0],
		[0xfc440dc,0],
		[0xfc440e0,0],
		[0xfc440e4,0],
		[0xfc440e8,0],
		[0xfc440ec,0],
		[0xfc440f8,0],
		[0xfc440fc,0],
		[0xfc44108,0],
		[0xfc4410c,0],
		[0xfc44110,0],
		[0xfc44114,0],
		[0xfc44118,0],
		[0xfc4411c,0],
		[0xfc44120,0],
		[0xfc44124,0],
		[0xfc44128,0],
		[0xfc4412c,0],
		[0xfc44130,0],
		[0xfc44134,0],
		[0xfc44138,0],
		[0xfc4413c,0],
		[0xfc44140,0],
		[0xfc44144,0],
		[0xfc44148,0],
		[0xfc4414c,0],
		[0xfc44150,0],
		[0xfc44154,0],
		[0xfc44158,0],
		[0xfc4415c,0],
		[0xfc44160,0],
		[0xfc44164,0],
		[0xfc44168,0],
		[0xfc4416c,0],
		[0xfc44170,0],
		[0xfc44174,0],
		[0xfc44178,0],
		[0xfc4417c,0],
		[0xfc44180,0],
		[0xfc44184,0],
		[0xfc441a0,0],
		[0xfc441a4,0],
		[0xfc441a8,0],
		[0xfc441ac,0],
		[0xfc441b0,0],
		[0xfc441b4,0],
		[0xfc441b8,0],
		[0xfc441bc,0],
		[0xfc441c0,0],
		[0xfc441c4,0],
		[0xfc441c8,0],
		[0xfc441cc,0],
		[0xfc441d0,0],
		[0xfc441d4,0],
		[0xfc441d8,0],
		[0xfc441dc,0],
		[0xfc441e0,0],
		[0xfc441e4,0],
		[0xfc441e8,0],
		[0xfc441ec,0],
		[0xfc441f8,0],
		[0xfc441fc,0],
		[0xfc44208,0],
		[0xfc4420c,0],
		[0xfc44210,0],
		[0xfc44214,0],
		[0xfc44218,0],
		[0xfc4421c,0],
		[0xfc44220,0],
		[0xfc44224,0],
		[0xfc44228,0],
		[0xfc4422c,0],
		[0xfc44230,0],
		[0xfc44234,0],
		[0xfc44238,0],
		[0xfc4423c,0],
		[0xfc44240,0],
		[0xfc44244,0],
		[0xfc44248,0],
		[0xfc4424c,0],
		[0xfc44250,0],
		[0xfc44254,0],
		[0xfc44258,0],
		[0xfc4425c,0],
		[0xfc44260,0],
		[0xfc44264,0],
		[0xfc44268,0],
		[0xfc4426c,0],
		[0xfc44270,0],
		[0xfc44274,0],
		[0xfc44278,0],
		[0xfc4427c,0],
		[0xfc442c0,0],
		[0xfc442c4,0],
		[0xfc442c8,0],
		[0xfc442cc,0],
		[0xfc442d0,0],
		[0xfc442d4,0],
		[0xfc442e0,0],
		[0xfc442e4,0],
		[0xfc442e8,0],
		[0xfc442ec,0],
		[0xfc442f0,0],
		[0xfc442f4,0],
		[0xfc442f8,0],
		[0xfc442fc,0],
		[0xfc44300,0],
		[0xfc44304,0],
		[0xfc44318,0],
		[0xfc4431c,0],
		[0xfc44320,0],
		[0xfc44324,0],
		[0xfc44328,0],
		[0xfc4432c,0],
		[0xfc44330,0],
		[0xfc44334,0],
		[0xfc44338,0],
		[0xfc4433c,0],
		[0xfc44340,0],
		[0xfc44344,0],
		[0xfc44348,0],
		[0xfc4434c,0],
		[0xfc44350,0],
		[0xfc44354,0],
		[0xfc44358,0],
		[0xfc4435c,0],
		[0xfc44360,0],
		[0xfc44364,0],
		[0xfc44368,0],
		[0xfc4436c,0],
		[0xfc44378,0],
		[0xfc4437c,0],
		[0xfc44388,0],
		[0xfc4438c,0],
		[0xfc44390,0],
		[0xfc44394,0],
		[0xfc44398,0],
		[0xfc4439c,0],
		[0xfc443a0,0],
		[0xfc443a4,0],
		[0xfc443a8,0],
		[0xfc443ac,0],
		[0xfc443b0,0],
		[0xfc443b4,0],
		[0xfc443b8,0],
		[0xfc443bc,0],
		[0xfc443c0,0],
		[0xfc443c4,0],
		[0xfc443c8,0],
		[0xfc443cc,0],
		[0xfc443d0,0],
		[0xfc443d4,0],
		[0xfc443d8,0],
		[0xfc443dc,0],
		[0xfc443e0,0],
		[0xfc443e4,0],
		[0xfc443e8,0],
		[0xfc443ec,0],
		[0xfc443f0,0],
		[0xfc443f4,0],
		[0xfc443f8,0],
		[0xfc443fc,0],
		[0xfc44430,0],
		[0xfc44434,0],
		[0xfc44438,0],
		[0xfc4443c,0],
		[0xfc44454,121],
		[0xfc44458,0],
		[0xfc4445c,0],
		[0xfc44460,0],
		[0xfc44464,0],
		[0xfc44480,0],
		[0xfc44484,0],
		[0xfc444a0,0],
		[0xfc444a4,0],
		[0xfc444a8,0],
		[0xfc444ac,0],
		[0xfc444b0,0],
		[0xfc444b4,0],
		[0xfc444c0,0],
		[0xfc444c4,0],
		[0xfc444c8,0],
		[0xfc444cc,0],
		[0xfc444d0,0],
		[0xfc444d4,0],
		[0xfc444d8,0],
		[0xfc444dc,0],
		[0xfc444e0,0],
		[0xfc444e4,0],
		[0xfc44538,115],
		[0xfc4453c,0],
		[0xfc44550,115],
		[0xfc44554,0],
		[0xfc44558,0],
		[0xfc4455c,0],
		[0, 0]
]).
string_val([
		[0xfc43640,7377845499365712755],
		[0xfc43648,7237119066256727923],
		[0xfc43650,125779952890975],
		[0xfc43a60,8462108013429552481],
		[0xfc43a68,7310575183467863920],
		[0xfc43aa0,5790037527591408466],
		[0xfc43aa8,8750603397485101129],
		[0xfc43ca0,8388903693187511667],
		[0xfc43ca8,8242536627753546344],
		[0xfc43cb0,1702125925],
		[0xfc44020,7232626449060949360],
		[0xfc44028,8027793189382742629],
		[0xfc44040,8097317577516084592],
		[0xfc44048,7597125480082667375],
		[0xfc44060,8457605547705724272],
		[0xfc44068,7310010034524611696],
		[0xfc44070,7598803425037743473],
		[0xfc44078,500186441069],
		[0xfc44440,3342918205373117811],
		[0xfc44448,6878249410482892144],
		[0xfc44450,521325536612],
		[0xfc44510,7376729508217319013],
		[0xfc44518,30792292887782770],
		[0xfc44520,8314034548965208678],
		[0xfc44528,8245929725132759913],
		[0xfc44530,8097873951740551033],
		[0xfc44540,8317988392880202093],
		[0xfc44548,7306916055696635489],
		[0, 0]
]).
/* This file contains recursive predicates */
:- use_module(library(clpfd)).
:- use_module(reif).
:- style_check(-singleton).

isTrue([X, Y]):-
    X == 49.

isTrue([X|Tail]):-
    isTrue(Tail).

log(File_name, Name, Addr, Base):-
    Offset #= Addr - Base,
    open(File_name, append, Stream),
    write(Stream, Name),
    write(Stream, ':'),
    write(Stream, Offset),
    nl(Stream),
    close(Stream).

possible_task_struct(Base_addr) :-
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM2_addr, Pid_addr, Tgid_addr, Real_parent_addr, Parent_addr , Child_addr, 
           Group_leader_addr, Thread_group_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    %MM2_addr #> Base_addr + 1000,
    Tasks_addr #> MM2_addr - 100,
    %FS_struct_addr #< Base_addr + 4000,
    Tgid_addr #= Pid_addr + 4,
    Real_parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr - 8,
    Child_addr #= Parent_addr + 8,
    %FIXME This may be too strong
    Group_leader_addr #=< Child_addr +32,
    %Comm_addr #= Base_addr + 1656,
    %Tasks_addr #= Base_addr + 1072,
    %FS_struct_addr #= Base_addr + 2640,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    % make query after labeling
    MM2_val #> 0,
    integer(MM2_val),
    
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val,  Comm_addr, Comm_val ]),

    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_parent_addr, Real_parent_val, Group_leader_addr, Group_leader_val]),
    Real_parent_val #> 0,
    Group_leader_val #> 0,
    query_ts(Real_parent_val, Comm_offset, Tasks_offset),
    query_ts(Group_leader_val, Comm_offset, Tasks_offset),

    labeling([enum], [Cred_addr, Cred_val]),
    Cred_val #> 0,
    query_cred(Cred_val),

    labeling([enum], [FS_struct_addr, FS_struct_val]),
    FS_struct_val #> 0,
    %query_fs_struct(FS_struct_val),



    get_time(End),
    Time_past is End - Current,
    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    log("profile.txt", "tasks", Tasks_addr, Base_addr),
    log("profile.txt", "mm_struct", MM2_addr, Base_addr),
    log("profile.txt", "comm", Comm_addr, Base_addr),
    log("profile.txt", "parent", Parent_addr, Base_addr),
    log("profile.txt", "group_leader", Group_leader_addr, Base_addr),
    log("profile.txt", "cred", Cred_addr, Base_addr),

    
    print_nl('tasks offset', Tasks_offset),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).

possible_string_pointer(Base_addr) :-
    /* Verify if this pointer points to a stirng */
    string_val(Str),
    Str_profile = [
        [Name_addr, Name_val]
    ],
    tuples_in(Str_profile, Str),
    Name_addr #= Base_addr.

query_string_pointer(Val) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "string_pointer"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_mount_struct(Base_addr, Offset) :-
    pointer(Ptr),
    Ptr_profile = ([
        [Mnt_devname_addr, Mnt_devname_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Mnt_devname_addr #= Base_addr + Offset,
    labeling([enum], [Mnt_devname_addr, Mnt_devname_val]),
    query_string_pointer(Mnt_devname_val).



possible_kernel_param(Base_addr) :-
    string_val(Str),
    Str_profile = [
        [Name_addr, Name_val]
    ],
    tuples_in(Str_profile, Str),
    Name_addr #= Base_addr.

possible_in_device(Base_addr) :-
    /* in_ifaddr remains the same across kernel versions 
       but we need this query to find ip_ptr in net_device struct
    */
    /*
        struct net_device *dev;
        int               refcnt;
        int               dead;
        struct in_ifaddr  *ifa_list;
    */
    pointer(Ptr),
    int(Int),
    Ptr_profile = ([
        [Dev_addr, Dev_val],
        [Ifa_list_addr, Ifa_list_val]
    ]),
    Int_profile = ([
        [Refcnt_addr, Refcnt_val],
        [Dead_addr, Dead_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Dead_addr #= Refcnt_addr + 4,
    chain([Dev_addr, Refcnt_addr, Dead_addr, Ifa_list_addr], #<),
    Dev_addr #= Base_addr,
    Ifa_list_addr #= Base_addr + 16,
    labeling([enum], [Ifa_list_addr, Ifa_list_val]),

    process_create(path('python'),
                    ['subquery.py', Ifa_list_val, "in_ifaddr"],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_in_ifaddr(Base_addr) :-
    /* in_ifaddr remains the same across kernel versions */
    pointer(Ptr),
    Ptr_profile = ([
        [Hash_addr, Hash_val],
        [Ifa_next_addr, Ifa_next_val],
        [Ifa_dev_addr, Ifa_dev_val],
        [Rcu_head_addr, Rcu_head_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([Hash_addr, Ifa_next_addr, Ifa_dev_addr, Rcu_head_addr], #<),
    Hash_addr #= Base_addr,
    Ifa_next_addr #= Hash_addr + 16,
    Ifa_dev_addr #= Ifa_next_addr + 8,
    Rcu_head_addr #= Ifa_dev_addr + 8,
    labeling([enum], [Hash_addr, Ifa_next_addr, Ifa_dev_addr, Rcu_head_addr]).



possible_mm_struct(Current_addr) :- 
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    % TODO: ADD vm_area_struct *mmap
    Ptr_profile = [
        [Mmap_addr, Mmap_val],
        [Pgd_addr, Pgd_val]  
    ],
    Ulong_profile = [
        [Mmap_base_addr, Mmap_base_val],
        [Mmap_legacy_base_addr, Mmap_legacy_base_val],
        [Task_size_addr, Task_size_val],
        [High_vm_end_addr, High_vm_end_val],
        [Start_brk_addr, Start_brk_val],
        [Brk_addr, Brk_val],
        [Start_stack_addr, Start_stack_val],
        [ARG_start_addr, ARG_start_val]
    ],
    Mmap_addr #= Current_addr,


    Mmap_base_addr #> Mmap_addr,
    %FIXME mmap_base need more value constraint, because we removed mmap_legacy_base and highest_vm_end.
    Mmap_base_val #> 0x7f0000000000,
    %FIXME in old linux version, e.g., there is no mmap_legacy_base and highest_vm_enb
    %chain([Mmap_base_addr, Mmap_legacy_base_addr, Task_size_addr, High_vm_end_addr, Pgd_addr], #<),
    chain([Mmap_base_addr, Task_size_addr, Pgd_addr], #<),

    %FIXME: This rule may be too strong
    %High_vm_end_addr #= Mmap_base_addr + 24, 
    Pgd_addr #> Task_size_addr,
    Pgd_addr #=< Task_size_addr + 40,
    %FIXME: This rule may not be true for other mm_struct.
    Task_size_val #>= 0x7ffffffff000,

    %Mmap_base_addr #= Current_addr + 40,
    %Mmap_legacy_base_addr #= Current_addr + 40,
    %Task_size_addr #= Current_addr + 48,
    %High_vm_end_addr #= Current_addr + 72,

    Start_brk_addr #> Pgd_addr,
    Start_stack_val #> 0x7ff000000000,
    % TODO: Convert this to index comparison. 
    ARG_start_addr #< Current_addr + 500,
    chain([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr], #<),
    ARG_start_addr #= Start_brk_addr + 24,
    Brk_val #< 0x7ff000000000,
    ARG_start_val #> 0x7ff000000000,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),


    labeling([enum], [Mmap_addr, Mmap_val, Mmap_base_addr, Pgd_addr, Pgd_val]),
    Mmap_val #> 0,
    Pgd_val #> 0,
    
    process_create(path('python'),
                    ['subquery.py', Mmap_val, "vm_area_struct", 2],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    label([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr]),
    statistics(real_time, [End|_]),

    log("./profile/mm_struct", "mmap", Mmap_addr, Current_addr),
    log("./profile/mm_struct", "mmap_base", Mmap_base_addr, Current_addr),
    log("./profile/mm_struct", "pgd", Pgd_addr, Current_addr),
    log("./profile/mm_struct", "start_brk", Start_brk_addr, Current_addr),
    log("./profile/mm_struct", "brk", Brk_addr, Current_addr),
    log("./profile/mm_struct", "start_stack", Start_stack_addr, Current_addr),
    log("./profile/mm_struct", "arg_start", ARG_start_addr, Current_addr),
    log("./profile/mm_struct", "mm_struct", End, Start).


possible_vm_area_struct(Base_addr, Level) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [VM_next_addr, VM_next_val],
        [VM_file_addr, VM_file_val]
    ],
    Ulong_profile = [
        [VM_start_addr, VM_start_val],
        [VM_end_addr, VM_end_val],
        [VM_flag_addr, VM_flag_val]
        /*VM_pgoff is 0, and we do not consider 0 as ulong*/
        %[VM_pgoff_addr, VM_pgoff_val]
    ],
    VM_start_addr #>= Base_addr,
    chain([VM_start_addr, VM_end_addr, VM_next_addr, VM_flag_addr, VM_file_addr], #<),
    VM_end_addr #= VM_start_addr + 8,
    VM_next_addr #= VM_end_addr + 8,
    VM_next_addr #< Base_addr + 32,
    VM_file_addr #< Base_addr + 180,
    VM_pgoff_addr #= VM_file_addr - 8,
    VM_file_addr #= Base_addr + 160,

    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    %FIXME: VM_flag may need value constraints.

    label([VM_next_addr, VM_next_val]),

    labeling([enum], [VM_start_addr, VM_end_addr, VM_flag_addr, VM_pgoff_addr, VM_file_addr, VM_file_val]),
    
    VM_file_val #> 0,
    process_create(path('python'),
                ['subquery.py', VM_file_val, "vm_file"],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    statistics(real_time, [End|_]),

    log("./profile/vm_area_struct", "vm_start", VM_start_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_end", VM_end_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_next", VM_next_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_flag", VM_flag_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_pgoff", VM_pgoff_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_file", VM_file_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_area_struct", End, Start).

check_vm_area_struct(Base_addr, Level) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "vm_area_struct", Level],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vm_file(Base_addr) :-
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [Vfs_mount_addr, Vfs_mount_val],
        [Dentry_addr, Dentry_val],
        [F_op_addr, F_op_val]
    ],
    tuples_in(Ptr_profile, Ptr),
    Vfs_mount_addr #> Base_addr,
    Dentry_addr #= Vfs_mount_addr + 8,
    Dentry_addr #< Base_addr + 40,
    Vfs_mount_val #> 0,
    Dentry_val #> 0,
    F_op_addr #= Base_addr + 40, 
    F_op_val #> 0,
    chain([Vfs_mount_addr, Dentry_addr, F_op_addr], #<),
    labeling([enum], [Vfs_mount_val, Dentry_val, F_op_addr, F_op_val]),


    process_create(path('python'),
                    ['subquery.py', Vfs_mount_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    /*
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/
    

    %query_file_operation(F_op_addr),

    log("./profile/file", "vfs_mount", Vfs_mount_addr, Base_addr),
    log("./profile/file", "dentry", Dentry_addr, Base_addr),
    log("./profile/file", "f_op", F_op_addr, Base_addr).



query_file_operation(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result).

possible_name_pointer(Val, Name_offset) :-
    /* The value at val+name_offset is a string pointer */
    current_predicate(pointer/1),
    pointer(Ptr),
    Ptr_profile = ([
        [Name_addr, Name_val]
    ]),
    Name_addr #= Val + Name_offset,
    tuples_in(Ptr_profile, Ptr),
    labeling([enum], [Name_addr, Name_val]),
    query_string_pointer(Name_val).

possible_vfs_mount(Base_addr) :-
    pointer(Ptr),
    int(Int),
    Ptr_profile = [
        [Dentry_addr, Dentry_val],
        [Mnt_sb_addr, Mnt_sb_val]
    ],
    Int_profile = [
        [Mnt_flags_addr, Mnt_flags_val]
    ],
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Dentry_addr #= Base_addr,
    Dentry_val #> 0,
    Mnt_flags_addr #= Dentry_addr + 16,
    Mnt_flags_val #>= 0,
    Mnt_sb_val #> 0,
    chain([Dentry_addr, Mnt_sb_addr, Mnt_flags_addr], #<),
    label([Dentry_addr, Dentry_val, Mnt_flags_addr, Mnt_flags_val]).
 
possible_dentry(Base_addr) :-
    /*
        struct dentry *d_parent;
        struct qstr d_name -> char *name; it's a name pointer
        struct inode *d_inode;
        unsigned char d_iname[LEN];
        const struct dentry_operations *d_op;
        struct list_head d_child;
        struct list_head d_subdirs;
        union {
	        struct hlist_node d_alias;
	        struct rcu_head d_rcu;
        } d_u;
    */
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    string_val(Str),
    Ptr_profile = [
        [Dparent_addr, Dparent_val],
        [Dname_addr, Dname_val],
        [D_inode_addr, D_inode_val],
        [D_op_addr, D_op_val],
        [Dchild_addr, Dchild_val],
        [D_subdirs_addr, D_subdirs_val]
    ],
    Str_profile = [
        [D_iname_addr, D_iname_val]
    ],
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    Dparent_addr #> Base_addr,
    chain([Dparent_addr, Dname_addr, D_inode_addr, D_iname_addr, 
            D_op_addr, Dchild_addr, D_subdirs_addr], #<),
    D_subdirs_addr #= Dchild_addr + 16,
    D_subdirs_addr #< Base_addr + 200,
    Dparent_val #> 0,
    labeling([enum], [Dname_addr, Dname_val]),
    query_string_pointer(Dname_val),
    labeling([enum], [D_iname_addr, D_iname_val]),
    D_iname_offset #= D_iname_addr - Base_addr,
    Dname_offset #= Dname_addr - Base_addr,
    labeling([enum], [Dparent_addr, Dparent_val]),
    Parent_dname #= Dparent_val + Dname_offset,
    process_create(path('python'),
                    ['subquery.py', Parent_dname, "name_pointer", Dname_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    %labeling([enum], [D_inode_addr, D_inode_val]),
    %query_inode(D_inode_val),

    labeling([enum], [Dchild_addr, Dchild_val]),
    Dchild_offset #= Dchild_addr - Base_addr,
    Dchild_init #= Dchild_val - Dchild_offset,
    query_name_pointer(Dchild_init, Dname_offset),

    /* This can be hardcoded as d_child_addr + 16 */
    labeling([enum], [D_subdirs_addr, D_subdirs_val]),
    Dsubdirs_offset #= D_subdirs_addr - Base_addr,
    D_subdirs_init #= D_subdirs_val - Dsubdirs_offset,
    query_name_pointer(D_subdirs_init, Dname_offset),

    statistics(real_time, [End|_]),

    log("./profile/dentry", "parent", Dparent_addr, Base_addr),
    log("./profile/dentry", "inode", D_inode_val, Base_addr),
    log("./profile/dentry", "d_iname", D_iname_addr, Base_addr),
    log("./profile/dentry", "dchild", Dchild_addr, Base_addr),
    log("./profile/dentry", "d_subdirs", D_subdirs_addr, Base_addr),
    log("./profile/dentry", "dentry", End, Start).

query_inode(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_inode(Base_addr) :-
    /*
        struct inode_operations *i_op;
        struct super_block      *i_sb;
        struct address_space    *i_mapping;
    */
    statistics(real_time, [Start|_]),

    pointer(Ptr),
    long(Ulg),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [I_op_addr, I_op_val],
        [I_sb_addr, I_sb_val],
        [I_mapping_addr, I_mapping_val],
        [I_fop_addr, I_fop_val]
    ]),
    Ulong_profile = ([
        /* i_mode is actually not long type. */
        [I_mode_addr, I_mode_val],
        [I_ino_addr, I_ino_val],
        [I_size_addr, I_size_val],
        [I_atime_addr, I_atime_val],
        [_I_atime_addr, _I_atime_val],
        [I_mtime_addr, I_mtime_val],
        [I_ctime_addr, I_ctime_val],
        [_I_ctime_addr, _I_ctime_val]
    ]),
    Int_profile = ([
        [I_uid_addr, I_uid_val],
        [I_gid_addr, I_gid_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    tuples_in(Int_profile, Int),

    chain([I_mode_addr, I_uid_addr, I_gid_addr, I_op_addr, I_sb_addr, I_mapping_addr, I_ino_addr,
           I_size_addr, I_atime_addr, _I_atime_addr, I_mtime_addr, I_ctime_addr, _I_ctime_addr, I_fop_addr], #<),

    I_mode_addr #= Base_addr,
    I_mode_val #> 0,
    I_gid_addr #= I_mode_addr + 8,
    %I_op_addr #= Base_addr + 32,
    I_op_addr #=< Base_addr + 32,
    I_op_val #> 0,
    labeling([enum], [I_op_addr, I_op_val]),
    query_inode_operations(I_op_val),

    I_sb_addr #= I_op_addr + 8,
    I_mapping_addr #= I_sb_addr + 8,
    I_atime_addr #= I_size_addr + 8,
    I_mtime_addr #= I_atime_addr + 16,
    I_ctime_addr #= I_mtime_addr + 16,
    _I_ctime_addr #= I_ctime_addr + 8,
    I_size_val #> 0,
    I_atime_val #> 4096,
    I_mtime_val #> 4096,
    I_ctime_val #> 4096,
    I_fop_addr #< Base_addr + 400,
    labeling([enum], [I_sb_addr, I_mapping_addr, I_atime_addr, I_mtime_addr, I_ctime_addr]),


    labeling([enum], [I_fop_addr, I_fop_val]),
    I_fop_val #> 0,
    query_inode_operations(I_fop_val),
    statistics(real_time, [End|_]),


    log("./profile/inode", "I_mode_addr", I_mode_addr, Base_addr),
    log("./profile/inode", "I_uid_addr", I_uid_addr, Base_addr),
    log("./profile/inode", "I_gid_addr", I_gid_addr, Base_addr),
    log("./profile/inode", "I_op_addr", I_op_addr, Base_addr),
    log("./profile/inode", "I_sb_addr", I_sb_addr, Base_addr),
    log("./profile/inode", "I_mapping_addr", I_mapping_addr, Base_addr),
    log("./profile/inode", "I_size_addr", I_size_addr, Base_addr),
    log("./profile/inode", "I_atime_addr", I_atime_addr, Base_addr),
    log("./profile/inode", "I_mtime_addr", I_mtime_addr, Base_addr),
    log("./profile/inode", "I_ctime_addr", I_ctime_addr, Base_addr),
    log("./profile/inode", "I_fop_addr", I_fop_addr, Base_addr),
    log("./profile/inode", "inode", End, Start).


query_inode_operations(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_name_pointer(Base_addr, Offset) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "name_pointer", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_inode_operations(Base_addr) :-
    /* a bunch of function pointers. */
    pointer(Ptr),
    Ptr_profile = ([
        [_L1_addr, _L1_val],
        [_L2_addr, _L2_val],
        [_L3_addr, _L3_val],
        [_L4_addr, _L4_val],
        [_L5_addr, _L5_val],
        [_L6_addr, _L6_val],
        [_L7_addr, _L7_val],
        [_L8_addr, _L8_val],
        [_L9_addr, _L9_val],
        [_L10_addr, _L10_val],
        [_L11_addr, _L11_val],
        [_L12_addr, _L12_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([_L1_addr, _L2_addr, _L3_addr, _L4_addr, _L5_addr, _L6_addr, _L7_addr,
           _L8_addr, _L9_addr, _L10_addr, _L11_addr, _L12_addr], #<),
    _L1_addr #= Base_addr,
    _L12_addr #= Base_addr + 88.




possible_nothing() :-

    %log("profile.txt", "dentry addr", Base_addr, 0),
    Dparent_addr #> Base_addr,
    Dname_addr #> 0,
    Dname_addr #< Base_addr + 200,
    %Dname_addr #= Base_addr + 160,
    %FIXME This child rule is not applicable for old kernel version. 
    %chain([Dparent_addr, Dname_addr, Dchild_addr], #<),
    %Dchild_addr #< Base_addr + 200,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    labeling([enum], [Dparent_addr, Dparent_val, Dname_addr, Dchild_addr, Dchild_val]),
    Dname_offset #= Dname_addr - Base_addr,
    integer(Dname_offset),
    Dparent_val #> 0,
    
    %FIXME d_parent may not be initialized
    /*process_create(path('python'),
                ['subquery.py', Dparent_val, "d_entry", Dname_offset],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/

    %FIXME: may need to find another way for all list_head. 
    /*Dchild_offset #= Dchild_addr - Base_addr,
    integer(Dchild_offset),
    Dchild_base #= Dchild_val - Dchild_offset,
    integer(Dchild_base),
    Dchild_base #> 0,
    process_create(path('python'),
                ['subquery.py', Dchild_base, "d_entry", Dname_offset],
                [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    statistics(real_time, [End|_]).
/*
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    log("profile.txt", "d_parent", Dparent_addr, Base_addr),
    log("profile.txt", "d_child", Dchild_addr, Base_addr),
    log("profile.txt", "dentry time", End, Start).
*/
possible_d_entry(Base_addr, Dname_offset) :-
    current_predicate(string_val/1),
    string_val(Str),
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    Dname_addr #= Base_addr + Dname_offset,
    tuples_in(Str_profile, Str),
    label([Dname_addr]).

possible_list_head(Tasks_val, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_val, Tasks_addr]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],
    Comm_addr #= Tasks_val - Tasks_offset + Comm_offset,
    Tasks_addr #\= Tasks_val,
    tuples_in(Str_profile, Str),
    tuples_in(Ptr_profile, Ptr),
    label([Comm_addr]).

possible_ts(Base_addr, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_addr, Tasks_val]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],

    Comm_addr #= Base_addr + Comm_offset,
    Tasks_addr #= Base_addr + Tasks_offset,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),

    label([Tasks_val]),
    
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "list_head", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_cred(Base_addr) :-
    statistics(real_time, [Start|_]),

    int(Int),
    long(Ulg),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3],
        [Addr4, Val4],
        [Addr5, Val5],
        [Addr6, Val6],
        [Addr7, Val7],
        [Addr8, Val8],
        [Addr9, Val9]
    ],
    %FIXME For now, this rule is hard-coded because we do not consider 0 as a unsign long number. 
    %So that for cred whos val10 is 0, this rule does not apply.
    /*Ulong_profile = [
        [Addr10, Val10],
        [Addr11, Val11]
    ],*/
    Addr1 #> Base_addr,
    %chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9, Addr10, Addr11], #<),
    chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9], #<),
    Addr1 #= Base_addr + 4,
    Addr9 #= Addr1 + 32,
    %Addr11 #< Base_addr + 120,
    tuples_in(Int_profile, Int),
    %tuples_in(Ulong_profile, Ulg),
    statistics(real_time, [End|_]),
    labeling([enum], [Addr1, Addr2, Addr5, Addr6]),
    log("./profile/cred", "cred", End, Start),
    log('./profile/cred', "uid", Addr1, Base_addr),
    log('./profile/cred', "gid", Addr2, Base_addr),
    log('./profile/cred', "euid", Addr5, Base_addr),
    log('./profile/cred', "egid", Addr6, Base_addr).

possible_fs_struct(Base_addr) :-
    statistics(real_time, [Start|_]),
    int(Int),
    pointer(Ptr),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3]
    ],
    Ptr_profile = [
        [Root_addr, Root_val],
        [PWD_addr, PWD_val]
    ],
    Addr1 #>= Base_addr,
    chain([Addr1, Addr2, Addr3, Root_addr, PWD_addr], #<),
    PWD_addr #= Root_addr + 16,
    PWD_addr #< Base_addr + 50,
    tuples_in(Int_profile, Int),
    tuples_in(Ptr_profile, Ptr),
    Root_val #> 0,
    PWD_val #> 0,
    label([Root_addr, Root_val]),
    
    process_create(path('python'),
                    ['subquery.py', Root_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    label([PWD_addr, PWD_val]),
    process_create(path('python'),
                    ['subquery.py', PWD_val, "dentry"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    statistics(real_time, [End|_]),
    log("profile.txt", "fs time", End, Start),
    log('profile.txt', "Root", Root_addr, Base_addr),
    log('profile.txt', "pwd", PWD_addr, Base_addr),
    log('profile.txt', "fs_struct", End, Start).

possible_mount(Base_addr) :-
    /* struct hlist_head mnt_hash;
       struct mount *mnt_parent; 
       struct vfsmount mnt;
       struct list_head mnt_mounts;
       struct list_head mnt_child;
       struct list_head mnt_instance;
       const char *mnt_devname;
       struct list_head mnt_list;
    */
    statistics(real_time, [Start|_]),
    %get_time(Current),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Mnt_hash_addr, Mnt_hash_val],
        [Mnt_parent_addr, Mnt_parent_val],
        [Vfsmount_addr, Vfsmount_val],
        [Mnt_child_addr, Mnt_child_val],
        [Mnt_devname_addr, Mnt_devname_val],
        [Mnt_list_addr, Mnt_list_val]
    ]),
    Int_profile = ([
        [Mnt_flags_addr, Mnt_flags_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    /* Order Invariants */
    chain([Mnt_hash_addr, Mnt_parent_addr, Vfsmount_addr, Mnt_flags_addr,
            Mnt_child_addr, Mnt_devname_addr, Mnt_list_addr], #<),
    Mnt_hash_addr #= Base_addr,
    /* mnt_hash_addr is a list_head */
    Mnt_parent_addr #> Base_addr + 8,
    Mnt_list_addr - Base_addr #< 200,
    labeling([enum], [Mnt_devname_addr, Mnt_devname_val]),
    query_string_pointer(Mnt_devname_val),
    Mnt_devname_offset #= Mnt_devname_addr - Base_addr,
    /* the offset from mnt_mounts to mnt_list remains the same, so it's safe to use fixed offsets. */
    Mnt_child_addr #= Mnt_devname_addr - 32,
    Mnt_list_addr #= Mnt_devname_addr + 8,
    Mnt_flags_addr #= Vfsmount_addr + 16,
    labeling([enum], [Mnt_child_addr, Mnt_list_addr, Vfsmount_addr, Vfsmount_val]),
    /* Seems unnecessary 
    Mnt_list_offset #= Mnt_list_addr - Base_addr,
    Mnt_list #= Mnt_list_val - Mnt_list_offset,
    Mnt_list #> 0,
    query_mount_struct(Mnt_list, Mnt_devname_offset),
    */
    Vfsmount_val #>= 0,
    /* Here we can infer layout of dentry structure 
       Maybe need to infer using another dentry, somehow it may not be initialized. 
    */
    Vfsmount_addr #> 0,
    %query_dentry(Vfsmount_addr),

    labeling([enum], [Mnt_parent_addr, Mnt_parent_val]),
    /* To verify another mount struct, only one-level query, so it does not direct call query_mount recursively */
    
    query_mount_struct(Mnt_parent_val, Mnt_devname_offset),
    

    %get_time(End),
    %Time_past is End - Current,
    statistics(real_time, [End|_]),
    log("./profile/mount", "mnt_hash", Mnt_hash_addr, Base_addr),
    log("./profile/mount", "mnt_parent", Mnt_parent_addr, Base_addr),
    log("./profile/mount", "mnt_child", Mnt_child_addr, Base_addr),
    log("./profile/mount", "mnt_devname", Mnt_devname_addr, Base_addr),
    log("./profile/mount", "mnt_list", Mnt_list_addr, Base_addr),
    log("./profile/mount", "mount", End, Start).


possible_neigh_hash_table(Base_addr) :-
    /* neighbour **hash_buckets */
    pointer(Ptr),
    Ptr_profile = ([
        [Hash_buckest_addr, Hash_buckets_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Hash_buckest_addr #= Base_addr,
    labeling([enum], [Hash_buckest_addr, Hash_buckets_val]),
    process_create(path('python'),
                    ['subquery.py', Hash_buckets_val, "hash_buckets"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_hash_buckets(Base_addr) :-
    /* hash_buckets is an array of neighbour pointer 
       note that not all element are non-zero
    */
    pointer(Ptr),
    Ptr_profile = ([
        [Neighbour_addr, Neighbour_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Neighbour_addr #< Base_addr + 32,
    Neighbour_val #> 0,
    labeling([enum], [Neighbour_addr, Neighbour_val]),
    process_create(path('python'),
                    ['subquery.py', Neighbour_val, "neighbour"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_neighbour(Base_addr) :-
    /* net_device *dev at offset 464 */
    pointer(Ptr),
    Ptr_profile = ([
        [Dev_addr, Dev_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Dev_addr #= Base_addr + 368,
    labeling([enum], [Dev_addr, Dev_val]),
    process_create(path('python'),
                    ['subquery.py', Dev_val, "net_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).


possible_net_device(Base_addr) :- 
    /*
        char             name[NAMSIZ];
        struct list_head dev_list;
        unsigned char    addr_len;
        unsigned int     promiscuity;
        struct in_device *ip_ptr;
    */
    statistics(real_time, [Start|_]),
    %get_time(Current),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Dev_list_addr, Dev_list_val],
        [IP_ptr_addr, IP_ptr_val]
    ]),
    Str_profile = ([
        [Name_addr, Name_val]
    ]),
    Int_profile = ([
        [Promisc_addr, Promisc_val],
        [Addr_len_addr, Addr_len_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),
    /* Hard to determine offsets for addr_len and promisc */
    chain([Name_addr, Dev_list_addr, Addr_len_addr, Promisc_addr, IP_ptr_addr], #<),
    Name_addr #>= Base_addr,
    Name_offset #= Name_addr - Base_addr,
    IP_ptr_addr #< Base_addr + 1000,
    /* dev_list offset can be hardcoded since it remains the same */
    Dev_list_addr #= Base_addr + 80,
    labeling([enum], [Name_addr, Dev_list_addr, Dev_list_val]),
    /* do not have a good constrain to narrow down ip_ptr, use its rough offset
       to reduce the search space. 
     */
    IP_ptr_addr #> Base_addr + 700,
    IP_ptr_val #> 0,
    labeling([enum], [IP_ptr_addr, IP_ptr_val]),
    query_in_device(IP_ptr_val),

    %get_time(End),
    %Time_past is End - Current,
    statistics(real_time, [End|_]),

    log("./profile/net_device", "name", Name_addr, Base_addr),
    log("./profile/net_device", "ip_ptr", IP_ptr_addr, Base_addr),
    log("./profile/net_device", "dev_list", Dev_list_addr, Base_addr),
    log("./profile/net_device", "net_device", End, Start).

query_in_device(IP_ptr_val) :-
    process_create(path('python'),
                    ['subquery.py', IP_ptr_val, "in_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).


query_mount_struct(Val, Offset) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "mount_struct", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).
