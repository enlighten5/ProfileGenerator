:- use_module(library(clpfd)).
:- style_check(-singleton).
pointer([
		[0x709fc00,106384072],
		[0x709fc08,106381896],
		[0x709fc18,16930400],
		[0x709fc40,106110976],
		[0x709fc68,0],
		[0x709fc70,118094960],
		[0x709fc78,118094960],
		[0x709fc80,0],
		[0x709fc90,118094992],
		[0x709fc98,118094992],
		[0x709fcb8,0],
		[0x709fcc0,0],
		[0x709fce0,0],
		[0x709fdc8,0],
		[0x709fde8,0],
		[0x709fdf8,0],
		[0x709fe08,0],
		[0x709fe18,0],
		[0x709fe28,0],
		[0x709fe48,0],
		[0x709fe70,0],
		[0x709fe78,0],
		[0x709fe80,0],
		[0x709fe88,0],
		[0x709fe90,0],
		[0x709fe98,0],
		[0x709feb0,0],
		[0x709feb8,0],
		[0x709fec0,29582496],
		[0x709fee0,0],
		[0x709fee8,0],
		[0x709fef0,0],
		[0x709fef8,118095608],
		[0x709ff00,118095608],
		[0x709ff10,27266048],
		[0x709ff18,0],
		[0x709ff28,0],
		[0x709ff30,0],
		[0x709ff38,29547488],
		[0x709ff40,106621696],
		[0x709ff48,0],
		[0x709ff50,0],
		[0x709ff58,0],
		[0x709ff60,0],
		[0x709ff68,0],
		[0x709ff70,0],
		[0x709ff78,0],
		[0x709ff80,0],
		[0x709ff88,0],
		[0x709ff90,0],
		[0x709ff98,0],
		[0x709ffa0,0],
		[0x709ffa8,0],
		[0x709ffb0,0],
		[0x709ffb8,0],
		[0x709ffc0,0],
		[0x709ffc8,0],
		[0x709ffd0,0],
		[0x709ffd8,0],
		[0x709ffe0,0],
		[0x709ffe8,0],
		[0x709fff0,0],
		[0x709fff8,0],
		[0x70a0000,0],
		[0x70a0008,0],
		[0x70a0010,0],
		[0x70a0018,0],
		[0x70a0020,0],
		[0x70a0028,0],
		[0x70a0030,0],
		[0x70a0038,0],
		[0x70a0040,0],
		[0x70a0048,0],
		[0x70a0050,0],
		[0x70a0058,0],
		[0x70a0060,0],
		[0x70a0068,0],
		[0x70a0070,0],
		[0x70a0078,0],
		[0x70a0080,0],
		[0x70a0088,0],
		[0x70a0090,0],
		[0x70a0098,0],
		[0x70a00a0,0],
		[0x70a00a8,0],
		[0x70a00b0,0],
		[0x70a00b8,0],
		[0x70a00c0,0],
		[0x70a00c8,0],
		[0x70a00d0,0],
		[0x70a00d8,0],
		[0x70a00e0,0],
		[0x70a00e8,0],
		[0x70a00f0,0],
		[0x70a00f8,0],
		[0x70a0100,0],
		[0x70a0108,0],
		[0x70a0110,0],
		[0x70a0118,0],
		[0x70a0120,0],
		[0x70a0128,0],
		[0x70a0130,0],
		[0x70a0138,0],
		[0x70a0140,0],
		[0x70a0148,0],
		[0x70a0150,0],
		[0x70a0158,0],
		[0x70a0160,0],
		[0x70a0168,0],
		[0x70a0170,0],
		[0x70a0178,0],
		[0x70a0180,0],
		[0x70a0188,0],
		[0x70a0190,0],
		[0x70a0198,0],
		[0x70a01a0,0],
		[0x70a01a8,0],
		[0x70a01b0,0],
		[0x70a01b8,0],
		[0x70a01c0,0],
		[0x70a01c8,0],
		[0x70a01d0,0],
		[0x70a01d8,0],
		[0x70a01e0,0],
		[0x70a01e8,0],
		[0x70a01f0,0],
		[0x70a01f8,0],
		[0x70a0200,0],
		[0x70a0208,0],
		[0x70a0210,0],
		[0x70a0218,0],
		[0x70a0220,0],
		[0x70a0228,0],
		[0x70a0230,0],
		[0x70a0238,0],
		[0x70a0240,0],
		[0x70a0248,0],
		[0x70a0250,0],
		[0x70a0258,0],
		[0x70a0260,0],
		[0x70a0268,0],
		[0x70a0270,0],
		[0x70a0278,0],
		[0x70a0280,0],
		[0x70a0288,0],
		[0x70a0290,0],
		[0x70a0298,0],
		[0x70a02a0,0],
		[0x70a02a8,0],
		[0x70a02b0,0],
		[0x70a02b8,0],
		[0x70a02c0,0],
		[0x70a02c8,0],
		[0x70a02d0,0],
		[0x70a02d8,0],
		[0x70a02e0,0],
		[0x70a02e8,0],
		[0x70a02f0,0],
		[0x70a02f8,0],
		[0x70a0300,0],
		[0x70a0308,0],
		[0x70a0310,0],
		[0x70a0318,0],
		[0x70a0320,0],
		[0x70a0328,0],
		[0x70a0330,0],
		[0x70a0338,0],
		[0x70a0340,0],
		[0x70a0348,0],
		[0x70a0350,0],
		[0x70a0358,0],
		[0x70a0360,0],
		[0x70a0368,0],
		[0x70a0370,0],
		[0x70a0378,0],
		[0x70a0380,0],
		[0x70a0388,0],
		[0x70a0390,0],
		[0x70a0398,0],
		[0x70a03a0,0],
		[0x70a03a8,0],
		[0x70a03b0,0],
		[0x70a03b8,0],
		[0x70a03c0,0],
		[0x70a03c8,0],
		[0x70a03d0,0],
		[0x70a03d8,0],
		[0x70a03e0,0],
		[0x70a03e8,0],
		[0x70a03f0,0],
		[0x70a03f8,0],
		[0x70a0400,0],
		[0x70a0408,0],
		[0x70a0410,0],
		[0x70a0418,0],
		[0x70a0420,0],
		[0x70a0428,0],
		[0x70a0430,0],
		[0x70a0438,0],
		[0x70a0440,0],
		[0x70a0448,0],
		[0x70a0450,0],
		[0x70a0458,0],
		[0x70a0460,0],
		[0x70a0468,0],
		[0x70a0470,0],
		[0x70a0478,0],
		[0x70a0480,0],
		[0x70a0488,0],
		[0x70a0490,0],
		[0x70a0498,0],
		[0x70a04a0,0],
		[0x70a04a8,0],
		[0x70a04b0,0],
		[0x70a04b8,0],
		[0x70a04c0,0],
		[0x70a04c8,0],
		[0x70a04d0,0],
		[0x70a04d8,0],
		[0x70a04e0,0],
		[0x70a04e8,0],
		[0x70a04f0,0],
		[0x70a04f8,0],
		[0x70a0500,0],
		[0x70a0508,0],
		[0x70a0510,0],
		[0x70a0518,0],
		[0x70a0520,0],
		[0x70a0528,0],
		[0x70a0530,0],
		[0x70a0538,0],
		[0x70a0540,0],
		[0x70a0548,0],
		[0x70a0550,0],
		[0x70a0558,0],
		[0x70a0560,0],
		[0x70a0568,0],
		[0x70a0570,0],
		[0x70a0578,0],
		[0x70a0580,0],
		[0x70a0588,0],
		[0x70a0590,0],
		[0x70a0598,0],
		[0x70a05a0,0],
		[0x70a05a8,0],
		[0x70a05b0,0],
		[0x70a05b8,0],
		[0x70a05c0,0],
		[0x70a05c8,0],
		[0x70a05d0,0],
		[0x70a05d8,0],
		[0x70a05e0,0],
		[0x70a05e8,0],
		[0x70a05f0,0],
		[0x70a05f8,0],
		[0x70a0600,0],
		[0x70a0608,0],
		[0x70a0610,0],
		[0x70a0618,0],
		[0x70a0620,0],
		[0x70a0628,0],
		[0x70a0630,0],
		[0x70a0638,0],
		[0x70a0640,0],
		[0x70a0648,0],
		[0x70a0650,0],
		[0x70a0658,0],
		[0x70a0660,0],
		[0x70a0668,0],
		[0x70a0670,0],
		[0x70a0678,0],
		[0x70a0680,0],
		[0x70a0688,0],
		[0x70a0690,0],
		[0x70a0698,0],
		[0x70a06a0,0],
		[0x70a06a8,0],
		[0x70a06b0,0],
		[0x70a06b8,0],
		[0x70a06c0,0],
		[0x70a06c8,0],
		[0x70a06d0,0],
		[0x70a06d8,0],
		[0x70a06e0,0],
		[0x70a06e8,0],
		[0x70a06f0,0],
		[0x70a06f8,0],
		[0x70a0700,0],
		[0x70a0708,0],
		[0x70a0710,0],
		[0x70a0718,0],
		[0x70a0720,0],
		[0x70a0728,0],
		[0x70a0730,0],
		[0x70a0738,0],
		[0x70a0740,0],
		[0x70a0748,0],
		[0x70a0750,0],
		[0x70a0758,0],
		[0x70a0760,0],
		[0x70a0768,0],
		[0x70a0770,0],
		[0x70a0778,0],
		[0x70a0780,0],
		[0x70a0788,0],
		[0x70a0790,0],
		[0x70a0798,0],
		[0x70a07a0,0],
		[0x70a07a8,0],
		[0x70a07b0,0],
		[0x70a07b8,0],
		[0x70a07c0,0],
		[0x70a07c8,0],
		[0x70a07d0,0],
		[0x70a07d8,0],
		[0x70a07e0,0],
		[0x70a07e8,0],
		[0x70a07f0,0],
		[0x70a07f8,0],
		[0x70a0800,0],
		[0x70a0808,0],
		[0x70a0810,0],
		[0x70a0818,0],
		[0x70a0820,0],
		[0x70a0828,0],
		[0x70a0830,0],
		[0x70a0838,0],
		[0x70a0840,0],
		[0x70a0848,0],
		[0x70a0850,0],
		[0x70a0858,0],
		[0x70a0860,0],
		[0x70a0868,0],
		[0x70a0870,0],
		[0x70a0878,0],
		[0x70a0880,0],
		[0x70a0888,0],
		[0x70a0890,0],
		[0x70a0898,0],
		[0x70a08a0,0],
		[0x70a08a8,0],
		[0x70a08b0,0],
		[0x70a08b8,0],
		[0x70a08c0,0],
		[0x70a08c8,0],
		[0x70a08d0,0],
		[0x70a08d8,0],
		[0x70a08e0,0],
		[0x70a08e8,0],
		[0x70a08f0,0],
		[0x70a08f8,0],
		[0x70a0900,0],
		[0x70a0908,0],
		[0x70a0910,0],
		[0x70a0918,0],
		[0x70a0920,0],
		[0x70a0928,0],
		[0x70a0930,0],
		[0x70a0938,0],
		[0x70a0940,0],
		[0x70a0948,0],
		[0x70a0950,0],
		[0x70a0958,0],
		[0x70a0960,0],
		[0x70a0968,0],
		[0x70a0970,0],
		[0x70a0978,0],
		[0x70a0980,0],
		[0x70a0988,0],
		[0x70a0990,0],
		[0x70a0998,0],
		[0x70a09a0,0],
		[0x70a09a8,0],
		[0x70a09b0,0],
		[0x70a09b8,0],
		[0x70a09c0,0],
		[0x70a09c8,0],
		[0x70a09d0,0],
		[0x70a09d8,0],
		[0x70a09e0,0],
		[0x70a09e8,0],
		[0x70a09f0,0],
		[0x70a09f8,0],
		[0x70a0a00,0],
		[0x70a0a08,0],
		[0x70a0a10,0],
		[0x70a0a18,0],
		[0x70a0a20,0],
		[0x70a0a28,0],
		[0x70a0a30,0],
		[0x70a0a38,0],
		[0x70a0a40,0],
		[0x70a0a48,0],
		[0x70a0a50,0],
		[0x70a0a58,0],
		[0x70a0a60,0],
		[0x70a0a68,0],
		[0x70a0a70,0],
		[0x70a0a78,0],
		[0x70a0a80,0],
		[0x70a0a88,0],
		[0x70a0a90,0],
		[0x70a0a98,0],
		[0x70a0aa0,0],
		[0x70a0aa8,0],
		[0x70a0ab0,0],
		[0x70a0ab8,0],
		[0x70a0ac0,0],
		[0x70a0ac8,0],
		[0x70a0ad0,0],
		[0x70a0ad8,0],
		[0x70a0ae0,0],
		[0x70a0ae8,0],
		[0x70a0af0,0],
		[0x70a0af8,0],
		[0x70a0b00,0],
		[0x70a0b08,0],
		[0x70a0b10,0],
		[0x70a0b18,0],
		[0x70a0b20,0],
		[0x70a0b28,0],
		[0x70a0b30,0],
		[0x70a0b38,0],
		[0x70a0b40,0],
		[0x70a0b48,0],
		[0x70a0b50,0],
		[0x70a0b58,0],
		[0x70a0b60,0],
		[0x70a0b68,0],
		[0x70a0b70,0],
		[0x70a0b78,0],
		[0x70a0b80,0],
		[0x70a0b88,0],
		[0x70a0b90,0],
		[0x70a0b98,0],
		[0x70a0ba0,0],
		[0x70a0ba8,0],
		[0x70a0bb0,0],
		[0x70a0bb8,0],
		[0x70a0bc0,0],
		[0x70a0bc8,0],
		[0x70a0bd0,0],
		[0x70a0bd8,0],
		[0x70a0be0,0],
		[0x70a0be8,0],
		[0x70a0bf0,0],
		[0x70a0bf8,0],
		[0, 0]
]).
unknown([
		[0, 0]
]).
long([
		[0x709fc10,2],
		[0x709fc20,140115702091776],
		[0x709fc28,47517093076992],
		[0x709fc30,140737488351232],
		[0x709fc38,140724492234752],
		[0x709fc48,8589934593],
		[0x709fc50,8],
		[0x709fc58,3],
		[0x709fc60,14],
		[0x709fc88,1],
		[0x709fca0,1],
		[0x709fca8,771],
		[0x709fcb0,784],
		[0x709fcc8,19],
		[0x709fcd0,726],
		[0x709fcd8,33],
		[0x709fce8,4194304],
		[0x709fcf0,4561628],
		[0x709fcf8,6661376],
		[0x709fd00,6664235],
		[0x709fd08,34242560],
		[0x709fd10,34295808],
		[0x709fd18,140724492138304],
		[0x709fd20,140724492140410],
		[0x709fd28,140724492140416],
		[0x709fd30,140724492140416],
		[0x709fd38,140724492140528],
		[0x709fd40,33],
		[0x709fd48,140724492226560],
		[0x709fd50,16],
		[0x709fd58,126614525],
		[0x709fd60,6],
		[0x709fd68,4096],
		[0x709fd70,17],
		[0x709fd78,100],
		[0x709fd80,3],
		[0x709fd88,4194368],
		[0x709fd90,4],
		[0x709fd98,56],
		[0x709fda0,5],
		[0x709fda8,7],
		[0x709fdb0,7],
		[0x709fdb8,140115699544064],
		[0x709fdc0,8],
		[0x709fdd0,9],
		[0x709fdd8,4214765],
		[0x709fde0,11],
		[0x709fdf0,12],
		[0x709fe00,13],
		[0x709fe10,14],
		[0x709fe20,23],
		[0x709fe30,25],
		[0x709fe38,140724492138729],
		[0x709fe40,26],
		[0x709fe50,31],
		[0x709fe58,140724492140528],
		[0x709fe60,15],
		[0x709fe68,140724492138745],
		[0x709fea0,106],
		[0x709fea8,7],
		[0x709fec8,1],
		[0x709fed0,1341],
		[0x709fed8,9],
		[0x709ff08,140724492226560],
		[0x709ff20,141],
		[0, 0]
]).
int([
		[0x709fc10,2],
		[0x709fc14,0],
		[0x709fc24,32623],
		[0x709fc2c,11063],
		[0x709fc3c,32764],
		[0x709fc48,1],
		[0x709fc4c,2],
		[0x709fc50,8],
		[0x709fc54,0],
		[0x709fc58,3],
		[0x709fc5c,0],
		[0x709fc60,14],
		[0x709fc64,0],
		[0x709fc68,0],
		[0x709fc6c,0],
		[0x709fc80,0],
		[0x709fc84,0],
		[0x709fc88,1],
		[0x709fc8c,0],
		[0x709fca0,1],
		[0x709fca4,0],
		[0x709fca8,771],
		[0x709fcac,0],
		[0x709fcb0,784],
		[0x709fcb4,0],
		[0x709fcb8,0],
		[0x709fcbc,0],
		[0x709fcc0,0],
		[0x709fcc4,0],
		[0x709fcc8,19],
		[0x709fccc,0],
		[0x709fcd0,726],
		[0x709fcd4,0],
		[0x709fcd8,33],
		[0x709fcdc,0],
		[0x709fce0,0],
		[0x709fce4,0],
		[0x709fcec,0],
		[0x709fcf4,0],
		[0x709fcfc,0],
		[0x709fd04,0],
		[0x709fd0c,0],
		[0x709fd14,0],
		[0x709fd1c,32764],
		[0x709fd24,32764],
		[0x709fd2c,32764],
		[0x709fd34,32764],
		[0x709fd3c,32764],
		[0x709fd40,33],
		[0x709fd44,0],
		[0x709fd4c,32764],
		[0x709fd50,16],
		[0x709fd54,0],
		[0x709fd5c,0],
		[0x709fd60,6],
		[0x709fd64,0],
		[0x709fd68,4096],
		[0x709fd6c,0],
		[0x709fd70,17],
		[0x709fd74,0],
		[0x709fd78,100],
		[0x709fd7c,0],
		[0x709fd80,3],
		[0x709fd84,0],
		[0x709fd8c,0],
		[0x709fd90,4],
		[0x709fd94,0],
		[0x709fd98,56],
		[0x709fd9c,0],
		[0x709fda0,5],
		[0x709fda4,0],
		[0x709fda8,7],
		[0x709fdac,0],
		[0x709fdb0,7],
		[0x709fdb4,0],
		[0x709fdbc,32623],
		[0x709fdc0,8],
		[0x709fdc4,0],
		[0x709fdc8,0],
		[0x709fdcc,0],
		[0x709fdd0,9],
		[0x709fdd4,0],
		[0x709fddc,0],
		[0x709fde0,11],
		[0x709fde4,0],
		[0x709fde8,0],
		[0x709fdec,0],
		[0x709fdf0,12],
		[0x709fdf4,0],
		[0x709fdf8,0],
		[0x709fdfc,0],
		[0x709fe00,13],
		[0x709fe04,0],
		[0x709fe08,0],
		[0x709fe0c,0],
		[0x709fe10,14],
		[0x709fe14,0],
		[0x709fe18,0],
		[0x709fe1c,0],
		[0x709fe20,23],
		[0x709fe24,0],
		[0x709fe28,0],
		[0x709fe2c,0],
		[0x709fe30,25],
		[0x709fe34,0],
		[0x709fe3c,32764],
		[0x709fe40,26],
		[0x709fe44,0],
		[0x709fe48,0],
		[0x709fe4c,0],
		[0x709fe50,31],
		[0x709fe54,0],
		[0x709fe5c,32764],
		[0x709fe60,15],
		[0x709fe64,0],
		[0x709fe6c,32764],
		[0x709fe70,0],
		[0x709fe74,0],
		[0x709fe78,0],
		[0x709fe7c,0],
		[0x709fe80,0],
		[0x709fe84,0],
		[0x709fe88,0],
		[0x709fe8c,0],
		[0x709fe90,0],
		[0x709fe94,0],
		[0x709fe98,0],
		[0x709fe9c,0],
		[0x709fea0,106],
		[0x709fea4,0],
		[0x709fea8,7],
		[0x709feac,0],
		[0x709feb0,0],
		[0x709feb4,0],
		[0x709feb8,0],
		[0x709febc,0],
		[0x709fec8,1],
		[0x709fecc,0],
		[0x709fed0,1341],
		[0x709fed4,0],
		[0x709fed8,9],
		[0x709fedc,0],
		[0x709fee0,0],
		[0x709fee4,0],
		[0x709fee8,0],
		[0x709feec,0],
		[0x709fef0,0],
		[0x709fef4,0],
		[0x709ff0c,32764],
		[0x709ff18,0],
		[0x709ff1c,0],
		[0x709ff20,141],
		[0x709ff24,0],
		[0x709ff28,0],
		[0x709ff2c,0],
		[0x709ff30,0],
		[0x709ff34,0],
		[0x709ff48,0],
		[0x709ff4c,0],
		[0x709ff50,0],
		[0x709ff54,0],
		[0x709ff58,0],
		[0x709ff5c,0],
		[0x709ff60,0],
		[0x709ff64,0],
		[0x709ff68,0],
		[0x709ff6c,0],
		[0x709ff70,0],
		[0x709ff74,0],
		[0x709ff78,0],
		[0x709ff7c,0],
		[0x709ff80,0],
		[0x709ff84,0],
		[0x709ff88,0],
		[0x709ff8c,0],
		[0x709ff90,0],
		[0x709ff94,0],
		[0x709ff98,0],
		[0x709ff9c,0],
		[0x709ffa0,0],
		[0x709ffa4,0],
		[0x709ffa8,0],
		[0x709ffac,0],
		[0x709ffb0,0],
		[0x709ffb4,0],
		[0x709ffb8,0],
		[0x709ffbc,0],
		[0x709ffc0,0],
		[0x709ffc4,0],
		[0x709ffc8,0],
		[0x709ffcc,0],
		[0x709ffd0,0],
		[0x709ffd4,0],
		[0x709ffd8,0],
		[0x709ffdc,0],
		[0x709ffe0,0],
		[0x709ffe4,0],
		[0x709ffe8,0],
		[0x709ffec,0],
		[0x709fff0,0],
		[0x709fff4,0],
		[0x709fff8,0],
		[0x709fffc,0],
		[0x70a0000,0],
		[0x70a0004,0],
		[0x70a0008,0],
		[0x70a000c,0],
		[0x70a0010,0],
		[0x70a0014,0],
		[0x70a0018,0],
		[0x70a001c,0],
		[0x70a0020,0],
		[0x70a0024,0],
		[0x70a0028,0],
		[0x70a002c,0],
		[0x70a0030,0],
		[0x70a0034,0],
		[0x70a0038,0],
		[0x70a003c,0],
		[0x70a0040,0],
		[0x70a0044,0],
		[0x70a0048,0],
		[0x70a004c,0],
		[0x70a0050,0],
		[0x70a0054,0],
		[0x70a0058,0],
		[0x70a005c,0],
		[0x70a0060,0],
		[0x70a0064,0],
		[0x70a0068,0],
		[0x70a006c,0],
		[0x70a0070,0],
		[0x70a0074,0],
		[0x70a0078,0],
		[0x70a007c,0],
		[0x70a0080,0],
		[0x70a0084,0],
		[0x70a0088,0],
		[0x70a008c,0],
		[0x70a0090,0],
		[0x70a0094,0],
		[0x70a0098,0],
		[0x70a009c,0],
		[0x70a00a0,0],
		[0x70a00a4,0],
		[0x70a00a8,0],
		[0x70a00ac,0],
		[0x70a00b0,0],
		[0x70a00b4,0],
		[0x70a00b8,0],
		[0x70a00bc,0],
		[0x70a00c0,0],
		[0x70a00c4,0],
		[0x70a00c8,0],
		[0x70a00cc,0],
		[0x70a00d0,0],
		[0x70a00d4,0],
		[0x70a00d8,0],
		[0x70a00dc,0],
		[0x70a00e0,0],
		[0x70a00e4,0],
		[0x70a00e8,0],
		[0x70a00ec,0],
		[0x70a00f0,0],
		[0x70a00f4,0],
		[0x70a00f8,0],
		[0x70a00fc,0],
		[0x70a0100,0],
		[0x70a0104,0],
		[0x70a0108,0],
		[0x70a010c,0],
		[0x70a0110,0],
		[0x70a0114,0],
		[0x70a0118,0],
		[0x70a011c,0],
		[0x70a0120,0],
		[0x70a0124,0],
		[0x70a0128,0],
		[0x70a012c,0],
		[0x70a0130,0],
		[0x70a0134,0],
		[0x70a0138,0],
		[0x70a013c,0],
		[0x70a0140,0],
		[0x70a0144,0],
		[0x70a0148,0],
		[0x70a014c,0],
		[0x70a0150,0],
		[0x70a0154,0],
		[0x70a0158,0],
		[0x70a015c,0],
		[0x70a0160,0],
		[0x70a0164,0],
		[0x70a0168,0],
		[0x70a016c,0],
		[0x70a0170,0],
		[0x70a0174,0],
		[0x70a0178,0],
		[0x70a017c,0],
		[0x70a0180,0],
		[0x70a0184,0],
		[0x70a0188,0],
		[0x70a018c,0],
		[0x70a0190,0],
		[0x70a0194,0],
		[0x70a0198,0],
		[0x70a019c,0],
		[0x70a01a0,0],
		[0x70a01a4,0],
		[0x70a01a8,0],
		[0x70a01ac,0],
		[0x70a01b0,0],
		[0x70a01b4,0],
		[0x70a01b8,0],
		[0x70a01bc,0],
		[0x70a01c0,0],
		[0x70a01c4,0],
		[0x70a01c8,0],
		[0x70a01cc,0],
		[0x70a01d0,0],
		[0x70a01d4,0],
		[0x70a01d8,0],
		[0x70a01dc,0],
		[0x70a01e0,0],
		[0x70a01e4,0],
		[0x70a01e8,0],
		[0x70a01ec,0],
		[0x70a01f0,0],
		[0x70a01f4,0],
		[0x70a01f8,0],
		[0x70a01fc,0],
		[0x70a0200,0],
		[0x70a0204,0],
		[0x70a0208,0],
		[0x70a020c,0],
		[0x70a0210,0],
		[0x70a0214,0],
		[0x70a0218,0],
		[0x70a021c,0],
		[0x70a0220,0],
		[0x70a0224,0],
		[0x70a0228,0],
		[0x70a022c,0],
		[0x70a0230,0],
		[0x70a0234,0],
		[0x70a0238,0],
		[0x70a023c,0],
		[0x70a0240,0],
		[0x70a0244,0],
		[0x70a0248,0],
		[0x70a024c,0],
		[0x70a0250,0],
		[0x70a0254,0],
		[0x70a0258,0],
		[0x70a025c,0],
		[0x70a0260,0],
		[0x70a0264,0],
		[0x70a0268,0],
		[0x70a026c,0],
		[0x70a0270,0],
		[0x70a0274,0],
		[0x70a0278,0],
		[0x70a027c,0],
		[0x70a0280,0],
		[0x70a0284,0],
		[0x70a0288,0],
		[0x70a028c,0],
		[0x70a0290,0],
		[0x70a0294,0],
		[0x70a0298,0],
		[0x70a029c,0],
		[0x70a02a0,0],
		[0x70a02a4,0],
		[0x70a02a8,0],
		[0x70a02ac,0],
		[0x70a02b0,0],
		[0x70a02b4,0],
		[0x70a02b8,0],
		[0x70a02bc,0],
		[0x70a02c0,0],
		[0x70a02c4,0],
		[0x70a02c8,0],
		[0x70a02cc,0],
		[0x70a02d0,0],
		[0x70a02d4,0],
		[0x70a02d8,0],
		[0x70a02dc,0],
		[0x70a02e0,0],
		[0x70a02e4,0],
		[0x70a02e8,0],
		[0x70a02ec,0],
		[0x70a02f0,0],
		[0x70a02f4,0],
		[0x70a02f8,0],
		[0x70a02fc,0],
		[0x70a0300,0],
		[0x70a0304,0],
		[0x70a0308,0],
		[0x70a030c,0],
		[0x70a0310,0],
		[0x70a0314,0],
		[0x70a0318,0],
		[0x70a031c,0],
		[0x70a0320,0],
		[0x70a0324,0],
		[0x70a0328,0],
		[0x70a032c,0],
		[0x70a0330,0],
		[0x70a0334,0],
		[0x70a0338,0],
		[0x70a033c,0],
		[0x70a0340,0],
		[0x70a0344,0],
		[0x70a0348,0],
		[0x70a034c,0],
		[0x70a0350,0],
		[0x70a0354,0],
		[0x70a0358,0],
		[0x70a035c,0],
		[0x70a0360,0],
		[0x70a0364,0],
		[0x70a0368,0],
		[0x70a036c,0],
		[0x70a0370,0],
		[0x70a0374,0],
		[0x70a0378,0],
		[0x70a037c,0],
		[0x70a0380,0],
		[0x70a0384,0],
		[0x70a0388,0],
		[0x70a038c,0],
		[0x70a0390,0],
		[0x70a0394,0],
		[0x70a0398,0],
		[0x70a039c,0],
		[0x70a03a0,0],
		[0x70a03a4,0],
		[0x70a03a8,0],
		[0x70a03ac,0],
		[0x70a03b0,0],
		[0x70a03b4,0],
		[0x70a03b8,0],
		[0x70a03bc,0],
		[0x70a03c0,0],
		[0x70a03c4,0],
		[0x70a03c8,0],
		[0x70a03cc,0],
		[0x70a03d0,0],
		[0x70a03d4,0],
		[0x70a03d8,0],
		[0x70a03dc,0],
		[0x70a03e0,0],
		[0x70a03e4,0],
		[0x70a03e8,0],
		[0x70a03ec,0],
		[0x70a03f0,0],
		[0x70a03f4,0],
		[0x70a03f8,0],
		[0x70a03fc,0],
		[0x70a0400,0],
		[0x70a0404,0],
		[0x70a0408,0],
		[0x70a040c,0],
		[0x70a0410,0],
		[0x70a0414,0],
		[0x70a0418,0],
		[0x70a041c,0],
		[0x70a0420,0],
		[0x70a0424,0],
		[0x70a0428,0],
		[0x70a042c,0],
		[0x70a0430,0],
		[0x70a0434,0],
		[0x70a0438,0],
		[0x70a043c,0],
		[0x70a0440,0],
		[0x70a0444,0],
		[0x70a0448,0],
		[0x70a044c,0],
		[0x70a0450,0],
		[0x70a0454,0],
		[0x70a0458,0],
		[0x70a045c,0],
		[0x70a0460,0],
		[0x70a0464,0],
		[0x70a0468,0],
		[0x70a046c,0],
		[0x70a0470,0],
		[0x70a0474,0],
		[0x70a0478,0],
		[0x70a047c,0],
		[0x70a0480,0],
		[0x70a0484,0],
		[0x70a0488,0],
		[0x70a048c,0],
		[0x70a0490,0],
		[0x70a0494,0],
		[0x70a0498,0],
		[0x70a049c,0],
		[0x70a04a0,0],
		[0x70a04a4,0],
		[0x70a04a8,0],
		[0x70a04ac,0],
		[0x70a04b0,0],
		[0x70a04b4,0],
		[0x70a04b8,0],
		[0x70a04bc,0],
		[0x70a04c0,0],
		[0x70a04c4,0],
		[0x70a04c8,0],
		[0x70a04cc,0],
		[0x70a04d0,0],
		[0x70a04d4,0],
		[0x70a04d8,0],
		[0x70a04dc,0],
		[0x70a04e0,0],
		[0x70a04e4,0],
		[0x70a04e8,0],
		[0x70a04ec,0],
		[0x70a04f0,0],
		[0x70a04f4,0],
		[0x70a04f8,0],
		[0x70a04fc,0],
		[0x70a0500,0],
		[0x70a0504,0],
		[0x70a0508,0],
		[0x70a050c,0],
		[0x70a0510,0],
		[0x70a0514,0],
		[0x70a0518,0],
		[0x70a051c,0],
		[0x70a0520,0],
		[0x70a0524,0],
		[0x70a0528,0],
		[0x70a052c,0],
		[0x70a0530,0],
		[0x70a0534,0],
		[0x70a0538,0],
		[0x70a053c,0],
		[0x70a0540,0],
		[0x70a0544,0],
		[0x70a0548,0],
		[0x70a054c,0],
		[0x70a0550,0],
		[0x70a0554,0],
		[0x70a0558,0],
		[0x70a055c,0],
		[0x70a0560,0],
		[0x70a0564,0],
		[0x70a0568,0],
		[0x70a056c,0],
		[0x70a0570,0],
		[0x70a0574,0],
		[0x70a0578,0],
		[0x70a057c,0],
		[0x70a0580,0],
		[0x70a0584,0],
		[0x70a0588,0],
		[0x70a058c,0],
		[0x70a0590,0],
		[0x70a0594,0],
		[0x70a0598,0],
		[0x70a059c,0],
		[0x70a05a0,0],
		[0x70a05a4,0],
		[0x70a05a8,0],
		[0x70a05ac,0],
		[0x70a05b0,0],
		[0x70a05b4,0],
		[0x70a05b8,0],
		[0x70a05bc,0],
		[0x70a05c0,0],
		[0x70a05c4,0],
		[0x70a05c8,0],
		[0x70a05cc,0],
		[0x70a05d0,0],
		[0x70a05d4,0],
		[0x70a05d8,0],
		[0x70a05dc,0],
		[0x70a05e0,0],
		[0x70a05e4,0],
		[0x70a05e8,0],
		[0x70a05ec,0],
		[0x70a05f0,0],
		[0x70a05f4,0],
		[0x70a05f8,0],
		[0x70a05fc,0],
		[0x70a0600,0],
		[0x70a0604,0],
		[0x70a0608,0],
		[0x70a060c,0],
		[0x70a0610,0],
		[0x70a0614,0],
		[0x70a0618,0],
		[0x70a061c,0],
		[0x70a0620,0],
		[0x70a0624,0],
		[0x70a0628,0],
		[0x70a062c,0],
		[0x70a0630,0],
		[0x70a0634,0],
		[0x70a0638,0],
		[0x70a063c,0],
		[0x70a0640,0],
		[0x70a0644,0],
		[0x70a0648,0],
		[0x70a064c,0],
		[0x70a0650,0],
		[0x70a0654,0],
		[0x70a0658,0],
		[0x70a065c,0],
		[0x70a0660,0],
		[0x70a0664,0],
		[0x70a0668,0],
		[0x70a066c,0],
		[0x70a0670,0],
		[0x70a0674,0],
		[0x70a0678,0],
		[0x70a067c,0],
		[0x70a0680,0],
		[0x70a0684,0],
		[0x70a0688,0],
		[0x70a068c,0],
		[0x70a0690,0],
		[0x70a0694,0],
		[0x70a0698,0],
		[0x70a069c,0],
		[0x70a06a0,0],
		[0x70a06a4,0],
		[0x70a06a8,0],
		[0x70a06ac,0],
		[0x70a06b0,0],
		[0x70a06b4,0],
		[0x70a06b8,0],
		[0x70a06bc,0],
		[0x70a06c0,0],
		[0x70a06c4,0],
		[0x70a06c8,0],
		[0x70a06cc,0],
		[0x70a06d0,0],
		[0x70a06d4,0],
		[0x70a06d8,0],
		[0x70a06dc,0],
		[0x70a06e0,0],
		[0x70a06e4,0],
		[0x70a06e8,0],
		[0x70a06ec,0],
		[0x70a06f0,0],
		[0x70a06f4,0],
		[0x70a06f8,0],
		[0x70a06fc,0],
		[0x70a0700,0],
		[0x70a0704,0],
		[0x70a0708,0],
		[0x70a070c,0],
		[0x70a0710,0],
		[0x70a0714,0],
		[0x70a0718,0],
		[0x70a071c,0],
		[0x70a0720,0],
		[0x70a0724,0],
		[0x70a0728,0],
		[0x70a072c,0],
		[0x70a0730,0],
		[0x70a0734,0],
		[0x70a0738,0],
		[0x70a073c,0],
		[0x70a0740,0],
		[0x70a0744,0],
		[0x70a0748,0],
		[0x70a074c,0],
		[0x70a0750,0],
		[0x70a0754,0],
		[0x70a0758,0],
		[0x70a075c,0],
		[0x70a0760,0],
		[0x70a0764,0],
		[0x70a0768,0],
		[0x70a076c,0],
		[0x70a0770,0],
		[0x70a0774,0],
		[0x70a0778,0],
		[0x70a077c,0],
		[0x70a0780,0],
		[0x70a0784,0],
		[0x70a0788,0],
		[0x70a078c,0],
		[0x70a0790,0],
		[0x70a0794,0],
		[0x70a0798,0],
		[0x70a079c,0],
		[0x70a07a0,0],
		[0x70a07a4,0],
		[0x70a07a8,0],
		[0x70a07ac,0],
		[0x70a07b0,0],
		[0x70a07b4,0],
		[0x70a07b8,0],
		[0x70a07bc,0],
		[0x70a07c0,0],
		[0x70a07c4,0],
		[0x70a07c8,0],
		[0x70a07cc,0],
		[0x70a07d0,0],
		[0x70a07d4,0],
		[0x70a07d8,0],
		[0x70a07dc,0],
		[0x70a07e0,0],
		[0x70a07e4,0],
		[0x70a07e8,0],
		[0x70a07ec,0],
		[0x70a07f0,0],
		[0x70a07f4,0],
		[0x70a07f8,0],
		[0x70a07fc,0],
		[0x70a0800,0],
		[0x70a0804,0],
		[0x70a0808,0],
		[0x70a080c,0],
		[0x70a0810,0],
		[0x70a0814,0],
		[0x70a0818,0],
		[0x70a081c,0],
		[0x70a0820,0],
		[0x70a0824,0],
		[0x70a0828,0],
		[0x70a082c,0],
		[0x70a0830,0],
		[0x70a0834,0],
		[0x70a0838,0],
		[0x70a083c,0],
		[0x70a0840,0],
		[0x70a0844,0],
		[0x70a0848,0],
		[0x70a084c,0],
		[0x70a0850,0],
		[0x70a0854,0],
		[0x70a0858,0],
		[0x70a085c,0],
		[0x70a0860,0],
		[0x70a0864,0],
		[0x70a0868,0],
		[0x70a086c,0],
		[0x70a0870,0],
		[0x70a0874,0],
		[0x70a0878,0],
		[0x70a087c,0],
		[0x70a0880,0],
		[0x70a0884,0],
		[0x70a0888,0],
		[0x70a088c,0],
		[0x70a0890,0],
		[0x70a0894,0],
		[0x70a0898,0],
		[0x70a089c,0],
		[0x70a08a0,0],
		[0x70a08a4,0],
		[0x70a08a8,0],
		[0x70a08ac,0],
		[0x70a08b0,0],
		[0x70a08b4,0],
		[0x70a08b8,0],
		[0x70a08bc,0],
		[0x70a08c0,0],
		[0x70a08c4,0],
		[0x70a08c8,0],
		[0x70a08cc,0],
		[0x70a08d0,0],
		[0x70a08d4,0],
		[0x70a08d8,0],
		[0x70a08dc,0],
		[0x70a08e0,0],
		[0x70a08e4,0],
		[0x70a08e8,0],
		[0x70a08ec,0],
		[0x70a08f0,0],
		[0x70a08f4,0],
		[0x70a08f8,0],
		[0x70a08fc,0],
		[0x70a0900,0],
		[0x70a0904,0],
		[0x70a0908,0],
		[0x70a090c,0],
		[0x70a0910,0],
		[0x70a0914,0],
		[0x70a0918,0],
		[0x70a091c,0],
		[0x70a0920,0],
		[0x70a0924,0],
		[0x70a0928,0],
		[0x70a092c,0],
		[0x70a0930,0],
		[0x70a0934,0],
		[0x70a0938,0],
		[0x70a093c,0],
		[0x70a0940,0],
		[0x70a0944,0],
		[0x70a0948,0],
		[0x70a094c,0],
		[0x70a0950,0],
		[0x70a0954,0],
		[0x70a0958,0],
		[0x70a095c,0],
		[0x70a0960,0],
		[0x70a0964,0],
		[0x70a0968,0],
		[0x70a096c,0],
		[0x70a0970,0],
		[0x70a0974,0],
		[0x70a0978,0],
		[0x70a097c,0],
		[0x70a0980,0],
		[0x70a0984,0],
		[0x70a0988,0],
		[0x70a098c,0],
		[0x70a0990,0],
		[0x70a0994,0],
		[0x70a0998,0],
		[0x70a099c,0],
		[0x70a09a0,0],
		[0x70a09a4,0],
		[0x70a09a8,0],
		[0x70a09ac,0],
		[0x70a09b0,0],
		[0x70a09b4,0],
		[0x70a09b8,0],
		[0x70a09bc,0],
		[0x70a09c0,0],
		[0x70a09c4,0],
		[0x70a09c8,0],
		[0x70a09cc,0],
		[0x70a09d0,0],
		[0x70a09d4,0],
		[0x70a09d8,0],
		[0x70a09dc,0],
		[0x70a09e0,0],
		[0x70a09e4,0],
		[0x70a09e8,0],
		[0x70a09ec,0],
		[0x70a09f0,0],
		[0x70a09f4,0],
		[0x70a09f8,0],
		[0x70a09fc,0],
		[0x70a0a00,0],
		[0x70a0a04,0],
		[0x70a0a08,0],
		[0x70a0a0c,0],
		[0x70a0a10,0],
		[0x70a0a14,0],
		[0x70a0a18,0],
		[0x70a0a1c,0],
		[0x70a0a20,0],
		[0x70a0a24,0],
		[0x70a0a28,0],
		[0x70a0a2c,0],
		[0x70a0a30,0],
		[0x70a0a34,0],
		[0x70a0a38,0],
		[0x70a0a3c,0],
		[0x70a0a40,0],
		[0x70a0a44,0],
		[0x70a0a48,0],
		[0x70a0a4c,0],
		[0x70a0a50,0],
		[0x70a0a54,0],
		[0x70a0a58,0],
		[0x70a0a5c,0],
		[0x70a0a60,0],
		[0x70a0a64,0],
		[0x70a0a68,0],
		[0x70a0a6c,0],
		[0x70a0a70,0],
		[0x70a0a74,0],
		[0x70a0a78,0],
		[0x70a0a7c,0],
		[0x70a0a80,0],
		[0x70a0a84,0],
		[0x70a0a88,0],
		[0x70a0a8c,0],
		[0x70a0a90,0],
		[0x70a0a94,0],
		[0x70a0a98,0],
		[0x70a0a9c,0],
		[0x70a0aa0,0],
		[0x70a0aa4,0],
		[0x70a0aa8,0],
		[0x70a0aac,0],
		[0x70a0ab0,0],
		[0x70a0ab4,0],
		[0x70a0ab8,0],
		[0x70a0abc,0],
		[0x70a0ac0,0],
		[0x70a0ac4,0],
		[0x70a0ac8,0],
		[0x70a0acc,0],
		[0x70a0ad0,0],
		[0x70a0ad4,0],
		[0x70a0ad8,0],
		[0x70a0adc,0],
		[0x70a0ae0,0],
		[0x70a0ae4,0],
		[0x70a0ae8,0],
		[0x70a0aec,0],
		[0x70a0af0,0],
		[0x70a0af4,0],
		[0x70a0af8,0],
		[0x70a0afc,0],
		[0x70a0b00,0],
		[0x70a0b04,0],
		[0x70a0b08,0],
		[0x70a0b0c,0],
		[0x70a0b10,0],
		[0x70a0b14,0],
		[0x70a0b18,0],
		[0x70a0b1c,0],
		[0x70a0b20,0],
		[0x70a0b24,0],
		[0x70a0b28,0],
		[0x70a0b2c,0],
		[0x70a0b30,0],
		[0x70a0b34,0],
		[0x70a0b38,0],
		[0x70a0b3c,0],
		[0x70a0b40,0],
		[0x70a0b44,0],
		[0x70a0b48,0],
		[0x70a0b4c,0],
		[0x70a0b50,0],
		[0x70a0b54,0],
		[0x70a0b58,0],
		[0x70a0b5c,0],
		[0x70a0b60,0],
		[0x70a0b64,0],
		[0x70a0b68,0],
		[0x70a0b6c,0],
		[0x70a0b70,0],
		[0x70a0b74,0],
		[0x70a0b78,0],
		[0x70a0b7c,0],
		[0x70a0b80,0],
		[0x70a0b84,0],
		[0x70a0b88,0],
		[0x70a0b8c,0],
		[0x70a0b90,0],
		[0x70a0b94,0],
		[0x70a0b98,0],
		[0x70a0b9c,0],
		[0x70a0ba0,0],
		[0x70a0ba4,0],
		[0x70a0ba8,0],
		[0x70a0bac,0],
		[0x70a0bb0,0],
		[0x70a0bb4,0],
		[0x70a0bb8,0],
		[0x70a0bbc,0],
		[0x70a0bc0,0],
		[0x70a0bc4,0],
		[0x70a0bc8,0],
		[0x70a0bcc,0],
		[0x70a0bd0,0],
		[0x70a0bd4,0],
		[0x70a0bd8,0],
		[0x70a0bdc,0],
		[0x70a0be0,0],
		[0x70a0be4,0],
		[0x70a0be8,0],
		[0x70a0bec,0],
		[0x70a0bf0,0],
		[0x70a0bf4,0],
		[0x70a0bf8,0],
		[0x70a0bfc,0],
		[0, 0]
]).
string_val([
		[0, 0]
]).
:- use_module(library(clpfd)).
:- use_module(reif).
:- style_check(-singleton).

isTrue([X, Y]):-
    X == 49.

isTrue([X|Tail]):-
    isTrue(Tail).

log(File_name, Name, Addr, Base):-
    Offset #= Addr - Base,
    open(File_name, append, Stream),
    write(Stream, Name),
    write(Stream, ':'),
    write(Stream, Offset),
    nl(Stream),
    close(Stream).

possible_task_struct(Base_addr) :-
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM2_addr, Pid_addr, Tgid_addr, Real_parent_addr, Parent_addr , Child_addr, 
           Group_leader_addr, Thread_group_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    %MM2_addr #> Base_addr + 1000,
    Tasks_addr #> MM2_addr - 100,
    %FS_struct_addr #< Base_addr + 4000,
    Tgid_addr #= Pid_addr + 4,
    Real_parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr - 8,
    Child_addr #= Parent_addr + 8,
    %FIXME This may be too strong
    Group_leader_addr #=< Child_addr +32,
    %Comm_addr #= Base_addr + 1656,
    %Tasks_addr #= Base_addr + 1072,
    %FS_struct_addr #= Base_addr + 2640,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    % make query after labeling
    MM2_val #> 0,
    integer(MM2_val),
    
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val,  Comm_addr, Comm_val ]),

    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_parent_addr, Real_parent_val, Group_leader_addr, Group_leader_val]),
    Real_parent_val #> 0,
    Group_leader_val #> 0,
    query_ts(Real_parent_val, Comm_offset, Tasks_offset),
    query_ts(Group_leader_val, Comm_offset, Tasks_offset),

    labeling([enum], [Cred_addr, Cred_val]),
    Cred_val #> 0,
    query_cred(Cred_val),

    labeling([enum], [FS_struct_addr, FS_struct_val]),
    FS_struct_val #> 0,
    %query_fs_struct(FS_struct_val),



    get_time(End),
    Time_past is End - Current,
    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    log("profile.txt", "tasks", Tasks_addr, Base_addr),
    log("profile.txt", "mm_struct", MM2_addr, Base_addr),
    log("profile.txt", "comm", Comm_addr, Base_addr),
    log("profile.txt", "parent", Parent_addr, Base_addr),
    log("profile.txt", "group_leader", Group_leader_addr, Base_addr),
    log("profile.txt", "cred", Cred_addr, Base_addr),

    
    print_nl('tasks offset', Tasks_offset),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).

possible_mm_struct(Current_addr) :- 
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    % TODO: ADD vm_area_struct *mmap
    Ptr_profile = [
        [Mmap_addr, Mmap_val],
        [Pgd_addr, Pgd_val]  
    ],
    Ulong_profile = [
        [Mmap_base_addr, Mmap_base_val],
        [Mmap_legacy_base_addr, Mmap_legacy_base_val],
        [Task_size_addr, Task_size_val],
        [High_vm_end_addr, High_vm_end_val],
        [Start_brk_addr, Start_brk_val],
        [Brk_addr, Brk_val],
        [Start_stack_addr, Start_stack_val],
        [ARG_start_addr, ARG_start_val]
    ],
    Mmap_addr #= Current_addr,


    Mmap_base_addr #> Mmap_addr,
    %FIXME mmap_base need more value constraint, because we removed mmap_legacy_base and highest_vm_end.
    Mmap_base_val #> 0x7f0000000000,
    %FIXME in old linux version, e.g., there is no mmap_legacy_base and highest_vm_enb
    %chain([Mmap_base_addr, Mmap_legacy_base_addr, Task_size_addr, High_vm_end_addr, Pgd_addr], #<),
    chain([Mmap_base_addr, Task_size_addr, Pgd_addr], #<),

    %FIXME: This rule may be too strong
    %High_vm_end_addr #= Mmap_base_addr + 24, 
    Pgd_addr #> Task_size_addr,
    Pgd_addr #=< Task_size_addr + 40,
    %FIXME: This rule may not be true for other mm_struct.
    Task_size_val #>= 0x7ffffffff000,

    %Mmap_base_addr #= Current_addr + 40,
    %Mmap_legacy_base_addr #= Current_addr + 40,
    %Task_size_addr #= Current_addr + 48,
    %High_vm_end_addr #= Current_addr + 72,

    Start_brk_addr #> Pgd_addr,
    Start_stack_val #> 0x7ff000000000,
    % TODO: Convert this to index comparison. 
    ARG_start_addr #< Current_addr + 500,
    chain([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr], #<),
    ARG_start_addr #= Start_brk_addr + 24,
    Brk_val #< 0x7ff000000000,
    ARG_start_val #> 0x7ff000000000,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),


    labeling([enum], [Mmap_addr, Mmap_val, Mmap_base_addr, Pgd_addr, Pgd_val]),
    Mmap_val #> 0,
    Pgd_val #> 0,
    
    process_create(path('python'),
                    ['subquery.py', Mmap_val, "vm_area_struct", 2],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    label([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr]),
    statistics(real_time, [End|_]),

    log("profile.txt", "mmap", Mmap_addr, Current_addr),
    log("profile.txt", "mmap_base", Mmap_base_addr, Current_addr),
    log("profile.txt", "pgd", Pgd_addr, Current_addr),
    log("profile.txt", "start_brk", Start_brk_addr, Current_addr),
    log("profile.txt", "brk", Brk_addr, Current_addr),
    log("profile.txt", "start_stack", Start_stack_addr, Current_addr),
    log("profile.txt", "arg_start", ARG_start_addr, Current_addr),
    log("profile.txt", "mm_struct time", End, Start).


possible_vm_area_struct(Base_addr, Level) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [VM_next_addr, VM_next_val],
        [VM_file_addr, VM_file_val]
    ],
    Ulong_profile = [
        [VM_start_addr, VM_start_val],
        [VM_end_addr, VM_end_val],
        [VM_flag_addr, VM_flag_val]
        %VM_pgoff is 0, and we do not consider 0 as ulong
        %[VM_pgoff_addr, VM_pgoff_val]
    ],
    VM_start_addr #>= Base_addr,
    chain([VM_start_addr, VM_end_addr, VM_next_addr, VM_flag_addr, VM_file_addr], #<),
    VM_end_addr #= VM_start_addr + 8,
    VM_next_addr #= VM_end_addr + 8,
    VM_next_addr #< Base_addr + 32,
    VM_file_addr #< Base_addr + 180,
    VM_pgoff_addr #= VM_file_addr - 8,
    %VM_file_addr #= Base_addr + 160,

    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    %FIXME: VM_flag may need value constraints.

    label([VM_next_addr, VM_next_val]),
    /*if_(Level = 2,
        call(check_vm_area_struct, VM_next_val, 1),
        1 = 1),*/
    %Level #> 1 #==> check_vm_area_struct(VM_next_val, 1),

    labeling([enum], [VM_start_addr, VM_end_addr, VM_flag_addr, VM_pgoff_addr, VM_file_addr, VM_file_val]),
    
    VM_file_val #> 0,
    process_create(path('python'),
                ['subquery.py', VM_file_val, "vm_file"],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    statistics(real_time, [End|_]),

    log("profile.txt", "vm_start", VM_start_addr, Base_addr),
    log("profile.txt", "vm_end", VM_end_addr, Base_addr),
    log("profile.txt", "vm_next", VM_next_addr, Base_addr),
    log("profile.txt", "vm_flag", VM_flag_addr, Base_addr),
    log("profile.txt", "vm_pgoff", VM_pgoff_addr, Base_addr),
    log("profile.txt", "vm_file", VM_file_addr, Base_addr),
    log("profile.txt", "vm_area_struct time", End, Start).

check_vm_area_struct(Base_addr, Level) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "vm_area_struct", Level],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vm_file(Base_addr) :-
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [Vfs_mount_addr, Vfs_mount_val],
        [Dentry_addr, Dentry_val]
    ],
    Vfs_mount_addr #> Base_addr,
    Dentry_addr #= Vfs_mount_addr + 8,
    Dentry_addr #< Base_addr + 40,
    tuples_in(Ptr_profile, Ptr),
    label([Vfs_mount_val, Dentry_val]),
    Vfs_mount_val #>0,
    Dentry_val #> 0,
    %FIXME seems like we do not need this, make sure the string is not addr=0
/*
    process_create(path('python'),
                    ['subquery.py', Vfs_mount_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vfs_mount(Base_addr) :-
    pointer(Ptr),
    Ptr_profile = [
        [Dentry_addr, Dentry_val]
    ],
    Dentry_addr #< Base_addr + 16,
    tuples_in(Ptr_profile, Ptr),
    label([Dentry_val]),
    Dentry_val #> 0,
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).
    
possible_dentry(Base_addr) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    string_val(Str),
    Ptr_profile = [
        [Dparent_addr, Dparent_val],
        [Dchild_addr, Dchild_val]
    ],
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    %log("profile.txt", "dentry addr", Base_addr, 0),
    Dparent_addr #> Base_addr,
    Dname_addr #> 0,
    Dname_addr #< Base_addr + 200,
    %Dname_addr #= Base_addr + 160,
    %FIXME This child rule is not applicable for old kernel version. 
    %chain([Dparent_addr, Dname_addr, Dchild_addr], #<),
    %Dchild_addr #< Base_addr + 200,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    labeling([enum], [Dparent_addr, Dparent_val, Dname_addr, Dchild_addr, Dchild_val]),
    Dname_offset #= Dname_addr - Base_addr,
    integer(Dname_offset),
    Dparent_val #> 0,
    
    %FIXME d_parent may not be initialized
    /*process_create(path('python'),
                ['subquery.py', Dparent_val, "d_entry", Dname_offset],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/

    %FIXME: may need to find another way for all list_head. 
    /*Dchild_offset #= Dchild_addr - Base_addr,
    integer(Dchild_offset),
    Dchild_base #= Dchild_val - Dchild_offset,
    integer(Dchild_base),
    Dchild_base #> 0,
    process_create(path('python'),
                ['subquery.py', Dchild_base, "d_entry", Dname_offset],
                [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    statistics(real_time, [End|_]).
/*
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    log("profile.txt", "d_parent", Dparent_addr, Base_addr),
    log("profile.txt", "d_child", Dchild_addr, Base_addr),
    log("profile.txt", "dentry time", End, Start).
*/
possible_d_entry(Base_addr, Dname_offset) :-
    current_predicate(string_val/1),
    string_val(Str),
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    Dname_addr #= Base_addr + Dname_offset,
    tuples_in(Str_profile, Str),
    label([Dname_addr]).

possible_list_head(Tasks_val, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_val, Tasks_addr]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],
    Comm_addr #= Tasks_val - Tasks_offset + Comm_offset,
    Tasks_addr #\= Tasks_val,
    tuples_in(Str_profile, Str),
    tuples_in(Ptr_profile, Ptr),
    label([Comm_addr]).

possible_ts(Base_addr, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_addr, Tasks_val]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],

    Comm_addr #= Base_addr + Comm_offset,
    Tasks_addr #= Base_addr + Tasks_offset,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),

    label([Tasks_val]),
    
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "list_head", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_cred(Base_addr) :-
    statistics(real_time, [Start|_]),

    int(Int),
    long(Ulg),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3],
        [Addr4, Val4],
        [Addr5, Val5],
        [Addr6, Val6],
        [Addr7, Val7],
        [Addr8, Val8],
        [Addr9, Val9]
    ],
    %FIXME For now, this rule is hard-coded because we do not consider 0 as a unsign long number. 
    %So that for cred whos val10 is 0, this rule does not apply.
    /*Ulong_profile = [
        [Addr10, Val10],
        [Addr11, Val11]
    ],*/
    Addr1 #> Base_addr,
    %chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9, Addr10, Addr11], #<),
    chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9], #<),
    Addr1 #= Base_addr + 4,
    Addr9 #= Addr1 + 32,
    %Addr11 #< Base_addr + 120,
    tuples_in(Int_profile, Int),
    %tuples_in(Ulong_profile, Ulg),
    statistics(real_time, [End|_]),
    labeling([enum], [Addr1, Addr2, Addr5, Addr6]),
    log("profile.txt", "cred time", End, Start),
    log('profile.txt', "uid", Addr1, Base_addr),
    log('profile.txt', "gid", Addr2, Base_addr),
    log('profile.txt', "euid", Addr5, Base_addr),
    log('profile.txt', "egid", Addr6, Base_addr).

possible_fs_struct(Base_addr) :-
    statistics(real_time, [Start|_]),
    int(Int),
    pointer(Ptr),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3]
    ],
    Ptr_profile = [
        [Root_addr, Root_val],
        [PWD_addr, PWD_val]
    ],
    Addr1 #>= Base_addr,
    chain([Addr1, Addr2, Addr3, Root_addr, PWD_addr], #<),
    PWD_addr #= Root_addr + 16,
    PWD_addr #< Base_addr + 50,
    tuples_in(Int_profile, Int),
    tuples_in(Ptr_profile, Ptr),
    label([Root_addr, Root_val]),
    
    process_create(path('python'),
                    ['subquery.py', Root_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    label([PWD_addr, PWD_val]),
    process_create(path('python'),
                    ['subquery.py', PWD_val, "dentry"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    statistics(real_time, [End|_]),
    log("profile.txt", "fs time", End, Start),
    log('profile.txt', "Root", Root_addr, Base_addr),
    log('profile.txt', "pwd", PWD_addr, Base_addr).
