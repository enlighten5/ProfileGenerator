:- use_module(library(clpfd)).
:- style_check(-singleton).
pointer([
		[0x1efe3cd0,519978368],
		[0x1efe3cd8,0],
		[0x1efe3ce0,519978401],
		[0x1efe3ce8,0],
		[0x1efe3cf0,0],
		[0x1efe3d00,520030208],
		[0x1efe3d18,371914905],
		[0x1efe3d20,0],
		[0x1efe3d28,0],
		[0x1efe3d38,519978296],
		[0x1efe3d40,519978296],
		[0x1efe3d48,0],
		[0x1efe3d50,436515264],
		[0x1efe3d58,0],
		[0x1efe3d60,365918464],
		[0x1efe3d68,0],
		[0x1efe3d70,0],
		[0x1efe3d78,0],
		[0x1efe3d90,520087232],
		[0x1efe3d98,519978176],
		[0x1efe3da0,519977440],
		[0x1efe3da8,520087264],
		[0x1efe3db0,519978208],
		[0x1efe3dc0,520030208],
		[0x1efe3de0,520087320],
		[0x1efe3de8,371914904],
		[0x1efe3df8,521109072],
		[0x1efe3e00,521109072],
		[0x1efe3e08,519296336],
		[0x1efe3e10,436515264],
		[0x1efe3e20,365918464],
		[0x1efe3e28,0],
		[0x1efe3e30,0],
		[0x1efe3e38,0],
		[0x1efe3e48,0],
		[0x1efe3e50,0],
		[0x1efe3e58,0],
		[0x1efe3e60,0],
		[0x1efe3e68,0],
		[0x1efe3e88,0],
		[0x1efe3e90,0],
		[0x1efe3e98,0],
		[0x1efe3ea0,0],
		[0x1efe3ea8,0],
		[0x1efe3eb0,0],
		[0x1efe3eb8,519223968],
		[0x1efe3ec0,440733568],
		[0x1efe3ec8,440733696],
		[0x1efe3ed0,440765672],
		[0x1efe3ed8,0],
		[0x1efe3ee0,0],
		[0x1efe3ee8,0],
		[0x1efe3ef0,0],
		[0x1efe3ef8,0],
		[0x1efe3f10,519975680],
		[0x1efe3f18,519977984],
		[0x1efe3f20,519975713],
		[0x1efe3f28,0],
		[0x1efe3f30,0],
		[0x1efe3f38,0],
		[0x1efe3f40,520030208],
		[0x1efe3f60,522173912],
		[0x1efe3f68,519975768],
		[0x1efe3f78,519978872],
		[0x1efe3f80,519978872],
		[0x1efe3f88,0],
		[0x1efe3f90,436515264],
		[0x1efe3fa0,365919744],
		[0x1efe3fa8,0],
		[0x1efe3fb0,0],
		[0x1efe3fb8,0],
		[0x1efe4008,7529608],
		[0x1efe4010,495420168],
		[0x1efe4018,519537792],
		[0x1efe4028,519979064],
		[0x1efe4030,530786320],
		[0x1efe4058,0],
		[0x1efe4060,436493312],
		[0x1efe4068,472035328],
		[0x1efe4070,0],
		[0x1efe4078,0],
		[0x1efe4080,519979904],
		[0x1efe4088,519980864],
		[0x1efe4090,519980880],
		[0x1efe4098,519979920],
		[0x1efe40a0,519979168],
		[0x1efe40a8,519979168],
		[0x1efe40b0,0],
		[0x1efe40b8,530786640],
		[0x1efe40c8,416400712],
		[0x1efe40d0,471400360],
		[0x1efe40d8,519537792],
		[0x1efe40e8,519979256],
		[0x1efe40f0,350411320],
		[0x1efe4118,0],
		[0x1efe4120,436493312],
		[0x1efe4128,472035328],
		[0x1efe4130,0],
		[0x1efe4138,0],
		[0x1efe4140,519980288],
		[0x1efe4148,519979520],
		[0x1efe4150,519979536],
		[0x1efe4158,519980304],
		[0x1efe4160,519979360],
		[0x1efe4168,519979360],
		[0x1efe4170,0],
		[0x1efe4178,350411640],
		[0x1efe4188,319508872],
		[0x1efe4190,471146296],
		[0x1efe4198,519537792],
		[0x1efe41a8,519979448],
		[0x1efe41b0,350406008],
		[0x1efe41d8,0],
		[0x1efe41e0,436493312],
		[0x1efe41e8,472035328],
		[0x1efe41f0,0],
		[0x1efe41f8,0],
		[0x1efe4200,519979328],
		[0x1efe4208,519982016],
		[0x1efe4210,519982032],
		[0x1efe4218,519979344],
		[0x1efe4220,519979552],
		[0x1efe4228,519979552],
		[0x1efe4230,0],
		[0x1efe4238,350406328],
		[0x1efe4248,511756360],
		[0x1efe4250,471419296],
		[0x1efe4258,519537792],
		[0x1efe4268,519979640],
		[0x1efe4270,530967872],
		[0x1efe4298,0],
		[0x1efe42a0,436493312],
		[0x1efe42a8,472035328],
		[0x1efe42b0,0],
		[0x1efe42b8,0],
		[0x1efe42c0,519982976],
		[0x1efe42c8,519981056],
		[0x1efe42d0,519981072],
		[0x1efe42d8,519982992],
		[0x1efe42e0,519979744],
		[0x1efe42e8,519979744],
		[0x1efe42f0,0],
		[0x1efe42f8,530968192],
		[0x1efe4308,0],
		[0x1efe4310,471444032],
		[0x1efe4318,519537792],
		[0x1efe4328,519979832],
		[0x1efe4330,530787648],
		[0x1efe4358,0],
		[0x1efe4360,436493312],
		[0x1efe4368,472035328],
		[0x1efe4370,0],
		[0x1efe4378,0],
		[0x1efe4380,519982208],
		[0x1efe4388,519979136],
		[0x1efe4390,519979152],
		[0x1efe4398,519982224],
		[0x1efe43a0,519979936],
		[0x1efe43a8,519979936],
		[0x1efe43b0,0],
		[0x1efe43b8,530787968],
		[0x1efe43c8,0],
		[0x1efe43d0,471473832],
		[0x1efe43d8,519537792],
		[0x1efe43e8,519980024],
		[0x1efe43f0,350408000],
		[0x1efe4418,0],
		[0x1efe4420,436493312],
		[0x1efe4428,472035328],
		[0x1efe4430,0],
		[0x1efe4438,0],
		[0x1efe4440,519981440],
		[0x1efe4448,519982400],
		[0x1efe4450,519982416],
		[0x1efe4458,519981456],
		[0x1efe4460,519980128],
		[0x1efe4468,519980128],
		[0x1efe4470,0],
		[0x1efe4478,350408320],
		[0x1efe4488,0],
		[0x1efe4490,471386512],
		[0x1efe4498,519537792],
		[0x1efe44a8,519980216],
		[0x1efe44b0,350404680],
		[0x1efe44d8,0],
		[0x1efe44e0,436493312],
		[0x1efe44e8,472035328],
		[0x1efe44f0,0],
		[0x1efe44f8,0],
		[0x1efe4500,519981824],
		[0x1efe4508,519979328],
		[0x1efe4510,519979344],
		[0x1efe4518,519981840],
		[0x1efe4520,519980320],
		[0x1efe4528,519980320],
		[0x1efe4530,0],
		[0x1efe4538,350405000],
		[0x1efe4548,19965256],
		[0x1efe4550,471517288],
		[0x1efe4558,519537792],
		[0x1efe4568,519980408],
		[0x1efe4570,531845080],
		[0x1efe4598,0],
		[0x1efe45a0,436493312],
		[0x1efe45a8,472035328],
		[0x1efe45b0,0],
		[0x1efe45b8,0],
		[0x1efe45c0,519981056],
		[0x1efe45c8,519981248],
		[0x1efe45d0,519981264],
		[0x1efe45d8,519981072],
		[0x1efe45e0,519980512],
		[0x1efe45e8,519980512],
		[0x1efe45f0,0],
		[0x1efe45f8,531845400],
		[0x1efe4608,337525000],
		[0x1efe4610,471261232],
		[0x1efe4618,519537792],
		[0x1efe4628,519980600],
		[0x1efe4630,530790968],
		[0x1efe4658,0],
		[0x1efe4660,436493312],
		[0x1efe4668,472035328],
		[0x1efe4670,0],
		[0x1efe4678,0],
		[0x1efe4680,519982400],
		[0x1efe4688,519982208],
		[0x1efe4690,519982224],
		[0x1efe4698,519982416],
		[0x1efe46a0,519980704],
		[0x1efe46a8,519980704],
		[0x1efe46b0,0],
		[0x1efe46b8,530791288],
		[0x1efe46c8,0],
		[0x1efe46d0,471104032],
		[0x1efe46d8,519537792],
		[0x1efe46e8,519980792],
		[0x1efe46f0,530784992],
		[0x1efe4718,0],
		[0x1efe4720,436493312],
		[0x1efe4728,472035328],
		[0x1efe4730,0],
		[0x1efe4738,0],
		[0x1efe4740,519979136],
		[0x1efe4748,519982784],
		[0x1efe4750,519982800],
		[0x1efe4758,519979152],
		[0x1efe4760,519980896],
		[0x1efe4768,519980896],
		[0x1efe4770,0],
		[0x1efe4778,530785312],
		[0x1efe4788,0],
		[0x1efe4790,471085104],
		[0x1efe4798,519537792],
		[0x1efe47a8,519980984],
		[0x1efe47b0,530966544],
		[0x1efe47d8,0],
		[0x1efe47e0,436493312],
		[0x1efe47e8,472035328],
		[0x1efe47f0,0],
		[0x1efe47f8,0],
		[0x1efe4800,519979712],
		[0x1efe4808,519980480],
		[0x1efe4810,519980496],
		[0x1efe4818,519979728],
		[0x1efe4820,519981088],
		[0x1efe4828,519981088],
		[0x1efe4830,0],
		[0x1efe4838,530966864],
		[0x1efe4848,318797320],
		[0x1efe4850,471314976],
		[0x1efe4858,519537792],
		[0x1efe4868,519981176],
		[0x1efe4870,531848400],
		[0x1efe4898,0],
		[0x1efe48a0,436493312],
		[0x1efe48a8,472035328],
		[0x1efe48b0,0],
		[0x1efe48b8,0],
		[0x1efe48c0,519980480],
		[0x1efe48c8,519981632],
		[0x1efe48d0,519981648],
		[0x1efe48d8,519980496],
		[0x1efe48e0,519981280],
		[0x1efe48e8,519981280],
		[0x1efe48f0,0],
		[0x1efe48f8,531848720],
		[0x1efe4908,399976328],
		[0x1efe4910,471124760],
		[0x1efe4918,519537792],
		[0x1efe4928,519981368],
		[0x1efe4930,350407336],
		[0x1efe4958,0],
		[0x1efe4960,436493312],
		[0x1efe4968,472035328],
		[0x1efe4970,0],
		[0x1efe4978,0],
		[0x1efe4980,519982016],
		[0x1efe4988,519980096],
		[0x1efe4990,519980112],
		[0x1efe4998,519982032],
		[0x1efe49a0,519981472],
		[0x1efe49a8,519981472],
		[0x1efe49b0,0],
		[0x1efe49b8,350407656],
		[0x1efe49c8,400191880],
		[0x1efe49d0,471212088],
		[0x1efe49d8,519537792],
		[0x1efe49e8,519981560],
		[0x1efe49f0,531841096],
		[0x1efe4a18,0],
		[0x1efe4a20,436493312],
		[0x1efe4a28,472035328],
		[0x1efe4a30,0],
		[0x1efe4a38,0],
		[0x1efe4a40,519981248],
		[0x1efe4a48,519973632],
		[0x1efe4a50,519973648],
		[0x1efe4a58,519981264],
		[0x1efe4a60,519981664],
		[0x1efe4a68,519981664],
		[0x1efe4a70,0],
		[0x1efe4a78,531841416],
		[0x1efe4a88,381165768],
		[0x1efe4a90,471111744],
		[0x1efe4a98,519537792],
		[0x1efe4aa8,519981752],
		[0x1efe4ab0,350409992],
		[0x1efe4ad8,0],
		[0x1efe4ae0,436493312],
		[0x1efe4ae8,472035328],
		[0x1efe4af0,0],
		[0x1efe4af8,0],
		[0x1efe4b00,519982592],
		[0x1efe4b08,519980288],
		[0x1efe4b10,519980304],
		[0x1efe4b18,519982608],
		[0x1efe4b20,519981856],
		[0x1efe4b28,519981856],
		[0x1efe4b30,0],
		[0x1efe4b38,350410312],
		[0x1efe4b48,405273416],
		[0x1efe4b50,471535896],
		[0x1efe4b58,519537792],
		[0x1efe4b68,519981944],
		[0x1efe4b70,350409328],
		[0x1efe4b98,0],
		[0x1efe4ba0,436493312],
		[0x1efe4ba8,472035328],
		[0x1efe4bb0,0],
		[0x1efe4bb8,0],
		[0x1efe4bc0,519979520],
		[0x1efe4bc8,519981440],
		[0x1efe4bd0,519981456],
		[0x1efe4bd8,519979536],
		[0x1efe4be0,519982048],
		[0x1efe4be8,519982048],
		[0x1efe4bf0,0],
		[0x1efe4bf8,350409648],
		[0x1efe4c08,468334856],
		[0x1efe4c10,471231496],
		[0x1efe4c18,519537792],
		[0x1efe4c28,519982136],
		[0x1efe4c30,530786984],
		[0x1efe4c58,0],
		[0x1efe4c60,436493312],
		[0x1efe4c68,472035328],
		[0x1efe4c70,0],
		[0x1efe4c78,0],
		[0x1efe4c80,519980672],
		[0x1efe4c88,519979904],
		[0x1efe4c90,519979920],
		[0x1efe4c98,519980688],
		[0x1efe4ca0,519982240],
		[0x1efe4ca8,519982240],
		[0x1efe4cb0,0],
		[0x1efe4cb8,530787304],
		[0, 0]
]).
unknown([
		[0x1efe3dc8,9223372036854775845],
		[0x1efe3fc0,14757395258967641292],
		[0x1efe3fc8,14757395258967641292],
		[0x1efe3fd0,14757395258967641292],
		[0x1efe3fd8,14757395258967641292],
		[0x1efe3fe0,14757395258967641292],
		[0x1efe3fe8,14757395258967641292],
		[0x1efe3ff0,14757395258967641292],
		[0x1efe3ff8,14757395258967641292],
		[0, 0]
]).
long([
		[0x1efe3cc0,94775534587904],
		[0x1efe3cc8,94775536013312],
		[0x1efe3cf8,94775534587904],
		[0x1efe3d08,37],
		[0x1efe3d10,134219893],
		[0x1efe3d30,347],
		[0x1efe3d80,94775536017408],
		[0x1efe3d88,94775536164864],
		[0x1efe3db8,94775534587904],
		[0x1efe3dd0,135268465],
		[0x1efe3dd8,1],
		[0x1efe3df0,384],
		[0x1efe3e18,348],
		[0x1efe3e40,116],
		[0x1efe3e70,274877906943],
		[0x1efe3e78,274877906943],
		[0x1efe3e80,274877906943],
		[0x1efe3f00,140202599194624],
		[0x1efe3f08,140202601287680],
		[0x1efe3f48,288],
		[0x1efe3f50,134217840],
		[0x1efe3f58,1],
		[0x1efe3f70,541],
		[0x1efe3f98,31],
		[0x1efe4000,8596750540],
		[0x1efe4020,109165272173],
		[0x1efe4050,48],
		[0x1efe40c0,8596750540],
		[0x1efe40e0,110091373032],
		[0x1efe4110,48],
		[0x1efe4180,8596750540],
		[0x1efe41a0,108010137325],
		[0x1efe41d0,48],
		[0x1efe4240,8596750540],
		[0x1efe4260,110246542706],
		[0x1efe4290,48],
		[0x1efe4300,8596750540],
		[0x1efe4320,110449162569],
		[0x1efe4350,48],
		[0x1efe43c0,8596750540],
		[0x1efe43e0,110693288868],
		[0x1efe4410,48],
		[0x1efe4480,8596750540],
		[0x1efe44a0,109977975363],
		[0x1efe44d0,48],
		[0x1efe4540,8596750540],
		[0x1efe4560,111049260065],
		[0x1efe4590,48],
		[0x1efe4600,8596750540],
		[0x1efe4620,108951671710],
		[0x1efe4650,48],
		[0x1efe46c0,8596750540],
		[0x1efe46e0,107730987015],
		[0x1efe4710,48],
		[0x1efe4780,8596750540],
		[0x1efe47a0,107575918239],
		[0x1efe47d0,48],
		[0x1efe4840,8596750540],
		[0x1efe4860,109391927665],
		[0x1efe4890,48],
		[0x1efe4900,8596750540],
		[0x1efe4920,107833720132],
		[0x1efe4950,48],
		[0x1efe49c0,8596750540],
		[0x1efe49e0,108549066529],
		[0x1efe4a10,48],
		[0x1efe4a80,8596750540],
		[0x1efe4aa0,107794181878],
		[0x1efe4ad0,48],
		[0x1efe4b40,8596750540],
		[0x1efe4b60,111201730013],
		[0x1efe4b90,48],
		[0x1efe4c00,8596750540],
		[0x1efe4c20,108708062466],
		[0x1efe4c50,48],
		[0, 0]
]).
int([
		[0x1efe3cc4,22066],
		[0x1efe3ccc,22066],
		[0x1efe3cd8,0],
		[0x1efe3cdc,0],
		[0x1efe3ce8,0],
		[0x1efe3cec,0],
		[0x1efe3cf0,0],
		[0x1efe3cf4,0],
		[0x1efe3cfc,22066],
		[0x1efe3d08,37],
		[0x1efe3d0c,0],
		[0x1efe3d14,0],
		[0x1efe3d20,0],
		[0x1efe3d24,0],
		[0x1efe3d28,0],
		[0x1efe3d2c,0],
		[0x1efe3d30,347],
		[0x1efe3d34,0],
		[0x1efe3d48,0],
		[0x1efe3d4c,0],
		[0x1efe3d58,0],
		[0x1efe3d5c,0],
		[0x1efe3d68,0],
		[0x1efe3d6c,0],
		[0x1efe3d70,0],
		[0x1efe3d74,0],
		[0x1efe3d78,0],
		[0x1efe3d7c,0],
		[0x1efe3d84,22066],
		[0x1efe3d8c,22066],
		[0x1efe3dbc,22066],
		[0x1efe3dc8,37],
		[0x1efe3dd4,0],
		[0x1efe3dd8,1],
		[0x1efe3ddc,0],
		[0x1efe3df0,384],
		[0x1efe3df4,0],
		[0x1efe3e18,348],
		[0x1efe3e1c,0],
		[0x1efe3e28,0],
		[0x1efe3e2c,0],
		[0x1efe3e30,0],
		[0x1efe3e34,0],
		[0x1efe3e38,0],
		[0x1efe3e3c,0],
		[0x1efe3e40,116],
		[0x1efe3e44,0],
		[0x1efe3e48,0],
		[0x1efe3e4c,0],
		[0x1efe3e50,0],
		[0x1efe3e54,0],
		[0x1efe3e58,0],
		[0x1efe3e5c,0],
		[0x1efe3e60,0],
		[0x1efe3e64,0],
		[0x1efe3e68,0],
		[0x1efe3e6c,0],
		[0x1efe3e74,63],
		[0x1efe3e7c,63],
		[0x1efe3e84,63],
		[0x1efe3e88,0],
		[0x1efe3e8c,0],
		[0x1efe3e90,0],
		[0x1efe3e94,0],
		[0x1efe3e98,0],
		[0x1efe3e9c,0],
		[0x1efe3ea0,0],
		[0x1efe3ea4,0],
		[0x1efe3ea8,0],
		[0x1efe3eac,0],
		[0x1efe3eb0,0],
		[0x1efe3eb4,0],
		[0x1efe3ed8,0],
		[0x1efe3edc,0],
		[0x1efe3ee0,0],
		[0x1efe3ee4,0],
		[0x1efe3ee8,0],
		[0x1efe3eec,0],
		[0x1efe3ef0,0],
		[0x1efe3ef4,0],
		[0x1efe3ef8,0],
		[0x1efe3efc,0],
		[0x1efe3f04,32643],
		[0x1efe3f0c,32643],
		[0x1efe3f28,0],
		[0x1efe3f2c,0],
		[0x1efe3f30,0],
		[0x1efe3f34,0],
		[0x1efe3f38,0],
		[0x1efe3f3c,0],
		[0x1efe3f48,288],
		[0x1efe3f4c,0],
		[0x1efe3f54,0],
		[0x1efe3f58,1],
		[0x1efe3f5c,0],
		[0x1efe3f70,541],
		[0x1efe3f74,0],
		[0x1efe3f88,0],
		[0x1efe3f8c,0],
		[0x1efe3f98,31],
		[0x1efe3f9c,0],
		[0x1efe3fa8,0],
		[0x1efe3fac,0],
		[0x1efe3fb0,0],
		[0x1efe3fb4,0],
		[0x1efe3fb8,0],
		[0x1efe3fbc,0],
		[0x1efe4004,2],
		[0x1efe4024,25],
		[0x1efe4050,48],
		[0x1efe4054,0],
		[0x1efe4058,0],
		[0x1efe405c,0],
		[0x1efe4070,0],
		[0x1efe4074,0],
		[0x1efe4078,0],
		[0x1efe407c,0],
		[0x1efe40b0,0],
		[0x1efe40b4,0],
		[0x1efe40c4,2],
		[0x1efe40e4,25],
		[0x1efe4110,48],
		[0x1efe4114,0],
		[0x1efe4118,0],
		[0x1efe411c,0],
		[0x1efe4130,0],
		[0x1efe4134,0],
		[0x1efe4138,0],
		[0x1efe413c,0],
		[0x1efe4170,0],
		[0x1efe4174,0],
		[0x1efe4184,2],
		[0x1efe41a4,25],
		[0x1efe41d0,48],
		[0x1efe41d4,0],
		[0x1efe41d8,0],
		[0x1efe41dc,0],
		[0x1efe41f0,0],
		[0x1efe41f4,0],
		[0x1efe41f8,0],
		[0x1efe41fc,0],
		[0x1efe4230,0],
		[0x1efe4234,0],
		[0x1efe4244,2],
		[0x1efe4264,25],
		[0x1efe4290,48],
		[0x1efe4294,0],
		[0x1efe4298,0],
		[0x1efe429c,0],
		[0x1efe42b0,0],
		[0x1efe42b4,0],
		[0x1efe42b8,0],
		[0x1efe42bc,0],
		[0x1efe42f0,0],
		[0x1efe42f4,0],
		[0x1efe4304,2],
		[0x1efe4308,0],
		[0x1efe430c,0],
		[0x1efe4324,25],
		[0x1efe4350,48],
		[0x1efe4354,0],
		[0x1efe4358,0],
		[0x1efe435c,0],
		[0x1efe4370,0],
		[0x1efe4374,0],
		[0x1efe4378,0],
		[0x1efe437c,0],
		[0x1efe43b0,0],
		[0x1efe43b4,0],
		[0x1efe43c4,2],
		[0x1efe43c8,0],
		[0x1efe43cc,0],
		[0x1efe43e4,25],
		[0x1efe4410,48],
		[0x1efe4414,0],
		[0x1efe4418,0],
		[0x1efe441c,0],
		[0x1efe4430,0],
		[0x1efe4434,0],
		[0x1efe4438,0],
		[0x1efe443c,0],
		[0x1efe4470,0],
		[0x1efe4474,0],
		[0x1efe4484,2],
		[0x1efe4488,0],
		[0x1efe448c,0],
		[0x1efe44a4,25],
		[0x1efe44d0,48],
		[0x1efe44d4,0],
		[0x1efe44d8,0],
		[0x1efe44dc,0],
		[0x1efe44f0,0],
		[0x1efe44f4,0],
		[0x1efe44f8,0],
		[0x1efe44fc,0],
		[0x1efe4530,0],
		[0x1efe4534,0],
		[0x1efe4544,2],
		[0x1efe4564,25],
		[0x1efe4590,48],
		[0x1efe4594,0],
		[0x1efe4598,0],
		[0x1efe459c,0],
		[0x1efe45b0,0],
		[0x1efe45b4,0],
		[0x1efe45b8,0],
		[0x1efe45bc,0],
		[0x1efe45f0,0],
		[0x1efe45f4,0],
		[0x1efe4604,2],
		[0x1efe4624,25],
		[0x1efe4650,48],
		[0x1efe4654,0],
		[0x1efe4658,0],
		[0x1efe465c,0],
		[0x1efe4670,0],
		[0x1efe4674,0],
		[0x1efe4678,0],
		[0x1efe467c,0],
		[0x1efe46b0,0],
		[0x1efe46b4,0],
		[0x1efe46c4,2],
		[0x1efe46c8,0],
		[0x1efe46cc,0],
		[0x1efe46e4,25],
		[0x1efe4710,48],
		[0x1efe4714,0],
		[0x1efe4718,0],
		[0x1efe471c,0],
		[0x1efe4730,0],
		[0x1efe4734,0],
		[0x1efe4738,0],
		[0x1efe473c,0],
		[0x1efe4770,0],
		[0x1efe4774,0],
		[0x1efe4784,2],
		[0x1efe4788,0],
		[0x1efe478c,0],
		[0x1efe47a4,25],
		[0x1efe47d0,48],
		[0x1efe47d4,0],
		[0x1efe47d8,0],
		[0x1efe47dc,0],
		[0x1efe47f0,0],
		[0x1efe47f4,0],
		[0x1efe47f8,0],
		[0x1efe47fc,0],
		[0x1efe4830,0],
		[0x1efe4834,0],
		[0x1efe4844,2],
		[0x1efe4864,25],
		[0x1efe4890,48],
		[0x1efe4894,0],
		[0x1efe4898,0],
		[0x1efe489c,0],
		[0x1efe48b0,0],
		[0x1efe48b4,0],
		[0x1efe48b8,0],
		[0x1efe48bc,0],
		[0x1efe48f0,0],
		[0x1efe48f4,0],
		[0x1efe4904,2],
		[0x1efe4924,25],
		[0x1efe4950,48],
		[0x1efe4954,0],
		[0x1efe4958,0],
		[0x1efe495c,0],
		[0x1efe4970,0],
		[0x1efe4974,0],
		[0x1efe4978,0],
		[0x1efe497c,0],
		[0x1efe49b0,0],
		[0x1efe49b4,0],
		[0x1efe49c4,2],
		[0x1efe49e4,25],
		[0x1efe4a10,48],
		[0x1efe4a14,0],
		[0x1efe4a18,0],
		[0x1efe4a1c,0],
		[0x1efe4a30,0],
		[0x1efe4a34,0],
		[0x1efe4a38,0],
		[0x1efe4a3c,0],
		[0x1efe4a70,0],
		[0x1efe4a74,0],
		[0x1efe4a84,2],
		[0x1efe4aa4,25],
		[0x1efe4ad0,48],
		[0x1efe4ad4,0],
		[0x1efe4ad8,0],
		[0x1efe4adc,0],
		[0x1efe4af0,0],
		[0x1efe4af4,0],
		[0x1efe4af8,0],
		[0x1efe4afc,0],
		[0x1efe4b30,0],
		[0x1efe4b34,0],
		[0x1efe4b44,2],
		[0x1efe4b64,25],
		[0x1efe4b90,48],
		[0x1efe4b94,0],
		[0x1efe4b98,0],
		[0x1efe4b9c,0],
		[0x1efe4bb0,0],
		[0x1efe4bb4,0],
		[0x1efe4bb8,0],
		[0x1efe4bbc,0],
		[0x1efe4bf0,0],
		[0x1efe4bf4,0],
		[0x1efe4c04,2],
		[0x1efe4c24,25],
		[0x1efe4c50,48],
		[0x1efe4c54,0],
		[0x1efe4c58,0],
		[0x1efe4c5c,0],
		[0x1efe4c70,0],
		[0x1efe4c74,0],
		[0x1efe4c78,0],
		[0x1efe4c7c,0],
		[0x1efe4cb0,0],
		[0x1efe4cb4,0],
		[0, 0]
]).
string_val([
		[0x1efe4038,4121132734736786999],
		[0x1efe4040,4063996380969971760],
		[0x1efe4048,3472335103767896886],
		[0x1efe40f8,4051045465535833655],
		[0x1efe4100,4063996380969971809],
		[0x1efe4108,3472328335016878902],
		[0x1efe41b8,7076619990198674999],
		[0x1efe41c0,4063996380969971762],
		[0x1efe41c8,3472382206791672630],
		[0x1efe4278,4063992214952896055],
		[0x1efe4280,4063996380969971764],
		[0x1efe4288,3472387705121497910],
		[0x1efe4338,7003436496253904439],
		[0x1efe4340,4063996380969971766],
		[0x1efe4348,3472334004289823542],
		[0x1efe43f8,7076057040245253687],
		[0x1efe4400,4063996380969971761],
		[0x1efe4408,3472328511060206390],
		[0x1efe44b8,4123103059573761591],
		[0x1efe44c0,4063996380969971760],
		[0x1efe44c8,3472328335704744758],
		[0x1efe4578,3991934620914968119],
		[0x1efe4580,4063996380969971811],
		[0x1efe4588,3472385501803275062],
		[0x1efe4638,7003999446207325751],
		[0x1efe4640,4063996380969971766],
		[0x1efe4648,3472336203313079094],
		[0x1efe46f8,4049075140698859063],
		[0x1efe4700,4063996380969971814],
		[0x1efe4708,3472328334899438390],
		[0x1efe47b8,3991934620914968119],
		[0x1efe47c0,4063996380969971812],
		[0x1efe47c8,3472386601314902838],
		[0x1efe4878,3991371670961546807],
		[0x1efe4880,4063996380969971812],
		[0x1efe4888,3472384402291647286],
		[0x1efe4938,7076619990198674999],
		[0x1efe4940,4063996380969971760],
		[0x1efe4948,3472329610571834166],
		[0x1efe49f8,3991371670961546807],
		[0x1efe4a00,4063996380969971762],
		[0x1efe4a08,3472385501769720630],
		[0x1efe4ab8,4134643533618898487],
		[0x1efe4ac0,4063996380969971760],
		[0x1efe4ac8,3472329435216372534],
		[0x1efe4b78,7076619990198674999],
		[0x1efe4b80,4063996380969971761],
		[0x1efe4b88,3472330710083461942],
		[0x1efe4c38,7003999446207325751],
		[0x1efe4c40,4063996380969971765],
		[0x1efe4c48,3472335103801451318],
		[0, 0]
]).
:- use_module(library(clpfd)).
:- use_module(reif).
:- style_check(-singleton).

isTrue([X, Y]):-
    X == 49.

isTrue([X|Tail]):-
    isTrue(Tail).

log(File_name, Name, Addr, Base):-
    Offset #= Addr - Base,
    open(File_name, append, Stream),
    write(Stream, Name),
    write(Stream, ':'),
    write(Stream, Offset),
    nl(Stream),
    close(Stream).

possible_task_struct(Base_addr) :-
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM2_addr, Pid_addr, Tgid_addr, Real_parent_addr, Parent_addr , Child_addr, 
           Group_leader_addr, Thread_group_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    %MM2_addr #> Base_addr + 1000,
    Tasks_addr #> MM2_addr - 100,
    %FS_struct_addr #< Base_addr + 4000,
    Tgid_addr #= Pid_addr + 4,
    Real_parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr - 8,
    Child_addr #= Parent_addr + 8,
    %FIXME This may be too strong
    Group_leader_addr #=< Child_addr +32,
    %Comm_addr #= Base_addr + 1656,
    %Tasks_addr #= Base_addr + 1072,
    %FS_struct_addr #= Base_addr + 2640,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    % make query after labeling
    MM2_val #> 0,
    integer(MM2_val),
    
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val,  Comm_addr, Comm_val ]),

    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_parent_addr, Real_parent_val, Group_leader_addr, Group_leader_val]),
    Real_parent_val #> 0,
    Group_leader_val #> 0,
    query_ts(Real_parent_val, Comm_offset, Tasks_offset),
    query_ts(Group_leader_val, Comm_offset, Tasks_offset),

    labeling([enum], [Cred_addr, Cred_val]),
    Cred_val #> 0,
    query_cred(Cred_val),

    labeling([enum], [FS_struct_addr, FS_struct_val]),
    FS_struct_val #> 0,
    %query_fs_struct(FS_struct_val),



    get_time(End),
    Time_past is End - Current,
    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    log("profile.txt", "tasks", Tasks_addr, Base_addr),
    log("profile.txt", "mm_struct", MM2_addr, Base_addr),
    log("profile.txt", "comm", Comm_addr, Base_addr),
    log("profile.txt", "parent", Parent_addr, Base_addr),
    log("profile.txt", "group_leader", Group_leader_addr, Base_addr),
    log("profile.txt", "cred", Cred_addr, Base_addr),

    
    print_nl('tasks offset', Tasks_offset),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).

possible_mm_struct(Current_addr) :- 
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    % TODO: ADD vm_area_struct *mmap
    Ptr_profile = [
        [Mmap_addr, Mmap_val],
        [Pgd_addr, Pgd_val]  
    ],
    Ulong_profile = [
        [Mmap_base_addr, Mmap_base_val],
        [Mmap_legacy_base_addr, Mmap_legacy_base_val],
        [Task_size_addr, Task_size_val],
        [High_vm_end_addr, High_vm_end_val],
        [Start_brk_addr, Start_brk_val],
        [Brk_addr, Brk_val],
        [Start_stack_addr, Start_stack_val],
        [ARG_start_addr, ARG_start_val]
    ],
    Mmap_addr #= Current_addr,


    Mmap_base_addr #> Mmap_addr,
    %FIXME mmap_base need more value constraint, because we removed mmap_legacy_base and highest_vm_end.
    Mmap_base_val #> 0x7f0000000000,
    %FIXME in old linux version, e.g., there is no mmap_legacy_base and highest_vm_enb
    %chain([Mmap_base_addr, Mmap_legacy_base_addr, Task_size_addr, High_vm_end_addr, Pgd_addr], #<),
    chain([Mmap_base_addr, Task_size_addr, Pgd_addr], #<),

    %FIXME: This rule may be too strong
    %High_vm_end_addr #= Mmap_base_addr + 24, 
    Pgd_addr #> Task_size_addr,
    Pgd_addr #=< Task_size_addr + 40,
    %FIXME: This rule may not be true for other mm_struct.
    Task_size_val #>= 0x7ffffffff000,

    %Mmap_base_addr #= Current_addr + 40,
    %Mmap_legacy_base_addr #= Current_addr + 40,
    %Task_size_addr #= Current_addr + 48,
    %High_vm_end_addr #= Current_addr + 72,

    Start_brk_addr #> Pgd_addr,
    Start_stack_val #> 0x7ff000000000,
    % TODO: Convert this to index comparison. 
    ARG_start_addr #< Current_addr + 500,
    chain([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr], #<),
    ARG_start_addr #= Start_brk_addr + 24,
    Brk_val #< 0x7ff000000000,
    ARG_start_val #> 0x7ff000000000,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),


    labeling([enum], [Mmap_addr, Mmap_val, Mmap_base_addr, Pgd_addr, Pgd_val]),
    Mmap_val #> 0,
    Pgd_val #> 0,
    
    process_create(path('python'),
                    ['subquery.py', Mmap_val, "vm_area_struct", 2],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    label([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr]),
    statistics(real_time, [End|_]),

    log("profile.txt", "mmap", Mmap_addr, Current_addr),
    log("profile.txt", "mmap_base", Mmap_base_addr, Current_addr),
    log("profile.txt", "pgd", Pgd_addr, Current_addr),
    log("profile.txt", "start_brk", Start_brk_addr, Current_addr),
    log("profile.txt", "brk", Brk_addr, Current_addr),
    log("profile.txt", "start_stack", Start_stack_addr, Current_addr),
    log("profile.txt", "arg_start", ARG_start_addr, Current_addr),
    log("profile.txt", "mm_struct time", End, Start).


possible_vm_area_struct(Base_addr, Level) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [VM_next_addr, VM_next_val],
        [VM_file_addr, VM_file_val]
    ],
    Ulong_profile = [
        [VM_start_addr, VM_start_val],
        [VM_end_addr, VM_end_val],
        [VM_flag_addr, VM_flag_val]
        %VM_pgoff is 0, and we do not consider 0 as ulong
        %[VM_pgoff_addr, VM_pgoff_val]
    ],
    VM_start_addr #>= Base_addr,
    chain([VM_start_addr, VM_end_addr, VM_next_addr, VM_flag_addr, VM_file_addr], #<),
    VM_end_addr #= VM_start_addr + 8,
    VM_next_addr #= VM_end_addr + 8,
    VM_next_addr #< Base_addr + 32,
    VM_file_addr #< Base_addr + 180,
    VM_pgoff_addr #= VM_file_addr - 8,
    %VM_file_addr #= Base_addr + 160,

    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    %FIXME: VM_flag may need value constraints.

    label([VM_next_addr, VM_next_val]),
    /*if_(Level = 2,
        call(check_vm_area_struct, VM_next_val, 1),
        1 = 1),*/
    %Level #> 1 #==> check_vm_area_struct(VM_next_val, 1),

    labeling([enum], [VM_start_addr, VM_end_addr, VM_flag_addr, VM_pgoff_addr, VM_file_addr, VM_file_val]),
    
    VM_file_val #> 0,
    process_create(path('python'),
                ['subquery.py', VM_file_val, "vm_file"],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    statistics(real_time, [End|_]),

    log("profile.txt", "vm_start", VM_start_addr, Base_addr),
    log("profile.txt", "vm_end", VM_end_addr, Base_addr),
    log("profile.txt", "vm_next", VM_next_addr, Base_addr),
    log("profile.txt", "vm_flag", VM_flag_addr, Base_addr),
    log("profile.txt", "vm_pgoff", VM_pgoff_addr, Base_addr),
    log("profile.txt", "vm_file", VM_file_addr, Base_addr),
    log("profile.txt", "vm_area_struct time", End, Start).

check_vm_area_struct(Base_addr, Level) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "vm_area_struct", Level],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vm_file(Base_addr) :-
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [Vfs_mount_addr, Vfs_mount_val],
        [Dentry_addr, Dentry_val]
    ],
    Vfs_mount_addr #> Base_addr,
    Dentry_addr #= Vfs_mount_addr + 8,
    Dentry_addr #< Base_addr + 40,
    tuples_in(Ptr_profile, Ptr),
    label([Vfs_mount_val, Dentry_val]),
    Vfs_mount_val #>0,
    Dentry_val #> 0,
    %FIXME seems like we do not need this, make sure the string is not addr=0
/*
    process_create(path('python'),
                    ['subquery.py', Vfs_mount_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vfs_mount(Base_addr) :-
    pointer(Ptr),
    Ptr_profile = [
        [Dentry_addr, Dentry_val]
    ],
    Dentry_addr #< Base_addr + 16,
    tuples_in(Ptr_profile, Ptr),
    label([Dentry_val]),
    Dentry_val #> 0,
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).
    
possible_dentry(Base_addr) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    string_val(Str),
    Ptr_profile = [
        [Dparent_addr, Dparent_val],
        [Dchild_addr, Dchild_val]
    ],
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    %log("profile.txt", "dentry addr", Base_addr, 0),
    Dparent_addr #> Base_addr,
    Dname_addr #> 0,
    Dname_addr #< Base_addr + 200,
    %Dname_addr #= Base_addr + 160,
    %FIXME This child rule is not applicable for old kernel version. 
    %chain([Dparent_addr, Dname_addr, Dchild_addr], #<),
    %Dchild_addr #< Base_addr + 200,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    labeling([enum], [Dparent_addr, Dparent_val, Dname_addr, Dchild_addr, Dchild_val]),
    Dname_offset #= Dname_addr - Base_addr,
    integer(Dname_offset),
    Dparent_val #> 0,
    
    %FIXME d_parent may not be initialized
    /*process_create(path('python'),
                ['subquery.py', Dparent_val, "d_entry", Dname_offset],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/

    %FIXME: may need to find another way for all list_head. 
    /*Dchild_offset #= Dchild_addr - Base_addr,
    integer(Dchild_offset),
    Dchild_base #= Dchild_val - Dchild_offset,
    integer(Dchild_base),
    Dchild_base #> 0,
    process_create(path('python'),
                ['subquery.py', Dchild_base, "d_entry", Dname_offset],
                [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    statistics(real_time, [End|_]).
/*
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    log("profile.txt", "d_parent", Dparent_addr, Base_addr),
    log("profile.txt", "d_child", Dchild_addr, Base_addr),
    log("profile.txt", "dentry time", End, Start).
*/
possible_d_entry(Base_addr, Dname_offset) :-
    current_predicate(string_val/1),
    string_val(Str),
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    Dname_addr #= Base_addr + Dname_offset,
    tuples_in(Str_profile, Str),
    label([Dname_addr]).

possible_list_head(Tasks_val, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_val, Tasks_addr]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],
    Comm_addr #= Tasks_val - Tasks_offset + Comm_offset,
    Tasks_addr #\= Tasks_val,
    tuples_in(Str_profile, Str),
    tuples_in(Ptr_profile, Ptr),
    label([Comm_addr]).

possible_ts(Base_addr, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_addr, Tasks_val]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],

    Comm_addr #= Base_addr + Comm_offset,
    Tasks_addr #= Base_addr + Tasks_offset,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),

    label([Tasks_val]),
    
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "list_head", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_cred(Base_addr) :-
    statistics(real_time, [Start|_]),

    int(Int),
    long(Ulg),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3],
        [Addr4, Val4],
        [Addr5, Val5],
        [Addr6, Val6],
        [Addr7, Val7],
        [Addr8, Val8],
        [Addr9, Val9]
    ],
    %FIXME For now, this rule is hard-coded because we do not consider 0 as a unsign long number. 
    %So that for cred whos val10 is 0, this rule does not apply.
    /*Ulong_profile = [
        [Addr10, Val10],
        [Addr11, Val11]
    ],*/
    Addr1 #> Base_addr,
    %chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9, Addr10, Addr11], #<),
    chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9], #<),
    Addr1 #= Base_addr + 4,
    Addr9 #= Addr1 + 32,
    %Addr11 #< Base_addr + 120,
    tuples_in(Int_profile, Int),
    %tuples_in(Ulong_profile, Ulg),
    statistics(real_time, [End|_]),
    labeling([enum], [Addr1, Addr2, Addr5, Addr6]),
    log("profile.txt", "cred time", End, Start),
    log('profile.txt', "uid", Addr1, Base_addr),
    log('profile.txt', "gid", Addr2, Base_addr),
    log('profile.txt', "euid", Addr5, Base_addr),
    log('profile.txt', "egid", Addr6, Base_addr).

possible_fs_struct(Base_addr) :-
    statistics(real_time, [Start|_]),
    int(Int),
    pointer(Ptr),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3]
    ],
    Ptr_profile = [
        [Root_addr, Root_val],
        [PWD_addr, PWD_val]
    ],
    Addr1 #>= Base_addr,
    chain([Addr1, Addr2, Addr3, Root_addr, PWD_addr], #<),
    PWD_addr #= Root_addr + 16,
    PWD_addr #< Base_addr + 50,
    tuples_in(Int_profile, Int),
    tuples_in(Ptr_profile, Ptr),
    label([Root_addr, Root_val]),
    
    process_create(path('python'),
                    ['subquery.py', Root_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    label([PWD_addr, PWD_val]),
    process_create(path('python'),
                    ['subquery.py', PWD_val, "dentry"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    statistics(real_time, [End|_]),
    log("profile.txt", "fs time", End, Start),
    log('profile.txt', "Root", Root_addr, Base_addr),
    log('profile.txt', "pwd", PWD_addr, Base_addr).
