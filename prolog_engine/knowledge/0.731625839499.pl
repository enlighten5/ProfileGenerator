:- use_module(library(clpfd)).
:- style_check(-singleton).
pointer([
		[0xc501980,43189024],
		[0xc501988,151268512],
		[0xc501998,247691888],
		[0xc5019d0,153665536],
		[0xc5019f0,0],
		[0xc5019f8,390463489],
		[0xc501a00,0],
		[0xc501a08,206576136],
		[0xc501a10,206576136],
		[0xc501a18,206576152],
		[0xc501a20,206576152],
		[0xc501a40,0],
		[0xc501a48,0],
		[0xc501a68,0],
		[0xc501a70,0],
		[0xc501b58,0],
		[0xc501bb8,0],
		[0xc501bd8,0],
		[0xc501c00,0],
		[0xc501c08,0],
		[0xc501c10,0],
		[0xc501c18,0],
		[0xc501c20,0],
		[0xc501c28,0],
		[0xc501c30,0],
		[0xc501c38,0],
		[0xc501c50,0],
		[0xc501c60,271668896],
		[0xc501c78,0],
		[0xc501c80,0],
		[0xc501c88,0],
		[0xc501c90,206576784],
		[0xc501c98,206576784],
		[0xc501ca0,0],
		[0xc501ca8,0],
		[0xc501cb0,0],
		[0xc501cb8,0],
		[0xc501cc0,206576832],
		[0xc501cc8,206576832],
		[0xc501cd8,264246240],
		[0xc501ce0,0],
		[0xc501cf8,0],
		[0xc501d00,0],
		[0xc501d08,0],
		[0xc501d10,390463488],
		[0xc501d18,270888128],
		[0xc501d20,151572480],
		[0xc501d28,0],
		[0xc501d38,0],
		[0xc501d40,0],
		[0xc501d48,0],
		[0xc501d50,0],
		[0xc501d58,0],
		[0xc501d60,0],
		[0xc501d68,0],
		[0xc501d70,0],
		[0xc501d78,0],
		[0xc501d80,0],
		[0xc501d90,0],
		[0xc501d98,0],
		[0xc501da0,0],
		[0xc501da8,0],
		[0xc501db0,0],
		[0xc501db8,0],
		[0xc501dc8,395602704],
		[0xc501dd0,0],
		[0xc501dd8,247691888],
		[0xc501e10,141918208],
		[0xc501e18,0],
		[0xc501e20,0],
		[0xc501e30,0],
		[0xc501e38,1758977],
		[0xc501e40,0],
		[0xc501e48,206577224],
		[0xc501e50,206577224],
		[0xc501e58,206577240],
		[0xc501e60,206577240],
		[0xc501e80,0],
		[0xc501e88,0],
		[0xc501ea8,0],
		[0xc501eb0,0],
		[0xc501f98,0],
		[0xc501ff8,0],
		[0xc502018,0],
		[0xc502040,0],
		[0xc502048,0],
		[0xc502050,0],
		[0xc502058,0],
		[0xc502060,0],
		[0xc502068,0],
		[0xc502070,0],
		[0xc502078,0],
		[0xc502080,0],
		[0xc502088,0],
		[0xc502090,0],
		[0xc502098,0],
		[0xc5020a0,271668896],
		[0xc5020b8,0],
		[0xc5020c0,0],
		[0xc5020c8,0],
		[0xc5020d0,206577872],
		[0xc5020d8,206577872],
		[0xc5020e0,0],
		[0xc5020e8,0],
		[0xc5020f0,0],
		[0xc5020f8,0],
		[0xc502100,206577920],
		[0xc502108,206577920],
		[0xc502118,264246240],
		[0xc502120,0],
		[0xc502138,0],
		[0xc502140,0],
		[0xc502148,0],
		[0xc502150,0],
		[0xc502158,270888128],
		[0xc502160,0],
		[0xc502168,0],
		[0xc502178,0],
		[0xc502180,0],
		[0xc502188,0],
		[0xc502190,0],
		[0xc502198,0],
		[0xc5021a0,0],
		[0xc5021a8,0],
		[0xc5021b0,0],
		[0xc5021b8,0],
		[0xc5021c0,0],
		[0xc5021c8,0],
		[0xc5021d0,0],
		[0xc5021d8,0],
		[0xc5021e0,0],
		[0xc5021e8,0],
		[0xc5021f0,0],
		[0xc5021f8,0],
		[0xc502200,124689336],
		[0xc502208,394248224],
		[0xc502218,247691888],
		[0xc502250,125607936],
		[0xc502270,0],
		[0xc502278,140678593],
		[0xc502280,0],
		[0xc502288,206578312],
		[0xc502290,206578312],
		[0xc502298,206578328],
		[0xc5022a0,206578328],
		[0xc5022c0,0],
		[0xc5022c8,0],
		[0xc5022e8,0],
		[0xc5022f0,0],
		[0xc5023d8,0],
		[0xc502438,0],
		[0xc502458,0],
		[0xc502480,0],
		[0xc502488,0],
		[0xc502490,0],
		[0xc502498,0],
		[0xc5024a0,0],
		[0xc5024a8,0],
		[0xc5024b0,0],
		[0xc5024b8,0],
		[0xc5024d0,0],
		[0xc5024d8,0],
		[0xc5024e0,271668896],
		[0xc5024f8,0],
		[0xc502500,0],
		[0xc502508,0],
		[0xc502510,206578960],
		[0xc502518,206578960],
		[0xc502520,0],
		[0xc502528,0],
		[0xc502530,0],
		[0xc502538,0],
		[0xc502540,206579008],
		[0xc502548,206579008],
		[0xc502558,264246240],
		[0xc502560,0],
		[0xc502578,0],
		[0xc502580,0],
		[0xc502588,0],
		[0xc502590,140678592],
		[0xc502598,270888128],
		[0xc5025a0,391458304],
		[0xc5025a8,0],
		[0xc5025b8,0],
		[0xc5025c0,0],
		[0xc5025c8,0],
		[0xc5025d0,0],
		[0xc5025d8,0],
		[0xc5025e0,0],
		[0xc5025e8,0],
		[0xc5025f0,0],
		[0xc5025f8,0],
		[0xc502600,0],
		[0xc502608,0],
		[0xc502610,0],
		[0xc502618,0],
		[0xc502620,0],
		[0xc502628,0],
		[0xc502630,0],
		[0xc502638,0],
		[0xc502640,3775416],
		[0xc502648,177326064],
		[0xc502658,247691888],
		[0xc502690,3825664],
		[0xc5026b0,0],
		[0xc5026b8,24193921],
		[0xc5026c0,0],
		[0xc5026c8,206579400],
		[0xc5026d0,206579400],
		[0xc5026d8,206579416],
		[0xc5026e0,206579416],
		[0xc502700,0],
		[0xc502708,0],
		[0xc502728,0],
		[0xc502730,0],
		[0xc502818,0],
		[0xc502878,0],
		[0xc502898,0],
		[0xc5028c0,0],
		[0xc5028c8,0],
		[0xc5028d0,0],
		[0xc5028d8,0],
		[0xc5028e0,0],
		[0xc5028e8,0],
		[0xc5028f0,0],
		[0xc5028f8,0],
		[0xc502910,0],
		[0xc502920,271668896],
		[0xc502938,0],
		[0xc502940,0],
		[0xc502948,0],
		[0xc502950,206580048],
		[0xc502958,206580048],
		[0xc502960,0],
		[0xc502968,0],
		[0xc502970,0],
		[0xc502978,0],
		[0, 0]
]).
unknown([
		[0xc501c40,18446744073709549354],
		[0xc501dc0,13830515601578391647],
		[0xc5024c0,18446744073709550905],
		[0xc502900,18446744073709550149],
		[0, 0]
]).
long([
		[0xc501990,1995],
		[0xc5019a0,140323284463616],
		[0xc5019a8,47309510705152],
		[0xc5019b0,4160024576],
		[0xc5019b8,1432371200],
		[0xc5019c0,140737488351232],
		[0xc5019c8,140724187275264],
		[0xc5019d8,8589934647],
		[0xc5019e0,1323008],
		[0xc5019e8,1233],
		[0xc501a28,39302],
		[0xc501a30,4824074],
		[0xc501a38,664421],
		[0xc501a50,54156],
		[0xc501a58,44639],
		[0xc501a60,33],
		[0xc501a78,94485211029504],
		[0xc501a80,94485211598173],
		[0xc501a88,94485211693928],
		[0xc501a90,94485211698624],
		[0xc501a98,94485214142464],
		[0xc501aa0,94485214142464],
		[0xc501aa8,140724186593696],
		[0xc501ab0,140724186601976],
		[0xc501ab8,140724186602001],
		[0xc501ac0,140724186602001],
		[0xc501ac8,140724186603487],
		[0xc501ad0,33],
		[0xc501ad8,140724187271168],
		[0xc501ae0,16],
		[0xc501ae8,126548989],
		[0xc501af0,6],
		[0xc501af8,4096],
		[0xc501b00,17],
		[0xc501b10,3],
		[0xc501b18,94485211029568],
		[0xc501b20,4],
		[0xc501b30,5],
		[0xc501b38,12],
		[0xc501b40,7],
		[0xc501b48,140323284267008],
		[0xc501b50,8],
		[0xc501b60,9],
		[0xc501b68,94485211085536],
		[0xc501b70,11],
		[0xc501b78,1000],
		[0xc501b80,12],
		[0xc501b88,1000],
		[0xc501b90,13],
		[0xc501b98,1001],
		[0xc501ba0,14],
		[0xc501ba8,1001],
		[0xc501bb0,23],
		[0xc501bc0,25],
		[0xc501bc8,140724186594457],
		[0xc501bd0,26],
		[0xc501be0,31],
		[0xc501be8,140724186603487],
		[0xc501bf0,15],
		[0xc501bf8,140724186594473],
		[0xc501c48,32066],
		[0xc501c58,1501],
		[0xc501c68,1215],
		[0xc501c70,337401],
		[0xc501cd0,140724187271168],
		[0xc501cf0,205],
		[0xc501d30,4294904489],
		[0xc501d88,1],
		[0xc501de0,140323284463616],
		[0xc501de8,47309510705152],
		[0xc501df0,4160024576],
		[0xc501df8,1432371200],
		[0xc501e00,140737488351232],
		[0xc501e08,140724187275264],
		[0xc501e28,1222],
		[0xc501e70,663372],
		[0xc501e78,663372],
		[0xc501e90,53261],
		[0xc501e98,44623],
		[0xc501ea0,33],
		[0xc501eb8,94485211029504],
		[0xc501ec0,94485211598173],
		[0xc501ec8,94485211693928],
		[0xc501ed0,94485211698624],
		[0xc501ed8,94485214142464],
		[0xc501ee0,94485214142464],
		[0xc501ee8,140724186593696],
		[0xc501ef0,140724186601976],
		[0xc501ef8,140724186602001],
		[0xc501f00,140724186602001],
		[0xc501f08,140724186603487],
		[0xc501f10,33],
		[0xc501f18,140724187271168],
		[0xc501f20,16],
		[0xc501f28,126548989],
		[0xc501f30,6],
		[0xc501f38,4096],
		[0xc501f40,17],
		[0xc501f50,3],
		[0xc501f58,94485211029568],
		[0xc501f60,4],
		[0xc501f70,5],
		[0xc501f78,12],
		[0xc501f80,7],
		[0xc501f88,140323284267008],
		[0xc501f90,8],
		[0xc501fa0,9],
		[0xc501fa8,94485211085536],
		[0xc501fb0,11],
		[0xc501fb8,1000],
		[0xc501fc0,12],
		[0xc501fc8,1000],
		[0xc501fd0,13],
		[0xc501fd8,1001],
		[0xc501fe0,14],
		[0xc501fe8,1001],
		[0xc501ff0,23],
		[0xc502000,25],
		[0xc502008,140724186594457],
		[0xc502010,26],
		[0xc502020,31],
		[0xc502028,140724186603487],
		[0xc502030,15],
		[0xc502038,140724186594473],
		[0xc5020a8,1233],
		[0xc5020b0,20],
		[0xc502110,140724187271168],
		[0xc502130,205],
		[0xc502170,4294905991],
		[0xc502210,422],
		[0xc502220,139644403384320],
		[0xc502228,47988391784448],
		[0xc502230,4160380928],
		[0xc502238,1432014848],
		[0xc502240,140737488351232],
		[0xc502248,140737225801728],
		[0xc502258,4294967299],
		[0xc502260,249856],
		[0xc502268,715],
		[0xc5022a8,9090],
		[0xc5022b0,79807],
		[0xc5022b8,69071],
		[0xc5022d0,4853],
		[0xc5022e0,33],
		[0xc5022f8,93952631894016],
		[0xc502300,93952632211429],
		[0xc502308,93952632272864],
		[0xc502310,93952632283160],
		[0xc502318,93952641208320],
		[0xc502320,93952643010560],
		[0xc502328,140737225194064],
		[0xc502330,140737225202218],
		[0xc502338,140737225202235],
		[0xc502340,140737225202235],
		[0xc502348,140737225203687],
		[0xc502350,33],
		[0xc502358,140737225797632],
		[0xc502360,16],
		[0xc502368,126548989],
		[0xc502370,6],
		[0xc502378,4096],
		[0xc502380,17],
		[0xc502390,3],
		[0xc502398,93952631894080],
		[0xc5023a0,4],
		[0xc5023b0,5],
		[0xc5023b8,13],
		[0xc5023c0,7],
		[0xc5023c8,139644403187712],
		[0xc5023d0,8],
		[0xc5023e0,9],
		[0xc5023e8,93952632047968],
		[0xc5023f0,11],
		[0xc5023f8,1000],
		[0xc502400,12],
		[0xc502408,1000],
		[0xc502410,13],
		[0xc502418,1001],
		[0xc502420,14],
		[0xc502428,1001],
		[0xc502430,23],
		[0xc502440,25],
		[0xc502448,140737225194825],
		[0xc502450,26],
		[0xc502460,31],
		[0xc502468,140737225203687],
		[0xc502470,15],
		[0xc502478,140737225194841],
		[0xc5024c8,1056],
		[0xc5024e8,1035],
		[0xc5024f0,9950],
		[0xc502550,140737225797632],
		[0xc502570,205],
		[0xc5025b0,4294899060],
		[0xc502650,754],
		[0xc502660,139647431831552],
		[0xc502668,47985363337216],
		[0xc502670,4160659456],
		[0xc502678,1431736320],
		[0xc502680,140737488351232],
		[0xc502688,140732687785984],
		[0xc502698,4294967316],
		[0xc5026a0,561152],
		[0xc5026a8,712],
		[0xc5026e8,15018],
		[0xc5026f0,594325],
		[0xc5026f8,594327],
		[0xc502710,11241],
		[0xc502720,33],
		[0xc502738,94843394019328],
		[0xc502740,94843394587997],
		[0xc502748,94843394683752],
		[0xc502750,94843394688448],
		[0xc502758,94843394805760],
		[0xc502760,94843394805760],
		[0xc502768,140732686073424],
		[0xc502770,140732686075366],
		[0xc502778,140732686075538],
		[0xc502780,140732686075538],
		[0xc502788,140732686077919],
		[0xc502790,33],
		[0xc502798,140732687781888],
		[0xc5027a0,16],
		[0xc5027a8,126548989],
		[0xc5027b0,6],
		[0xc5027b8,4096],
		[0xc5027c0,17],
		[0xc5027d0,3],
		[0xc5027d8,94843394019392],
		[0xc5027e0,4],
		[0xc5027f0,5],
		[0xc5027f8,12],
		[0xc502800,7],
		[0xc502808,139647431634944],
		[0xc502810,8],
		[0xc502820,9],
		[0xc502828,94843394075360],
		[0xc502830,11],
		[0xc502838,1000],
		[0xc502840,12],
		[0xc502848,1000],
		[0xc502850,13],
		[0xc502858,1001],
		[0xc502860,14],
		[0xc502868,1001],
		[0xc502870,23],
		[0xc502880,25],
		[0xc502888,140732686074489],
		[0xc502890,26],
		[0xc5028a0,31],
		[0xc5028a8,140732686077919],
		[0xc5028b0,15],
		[0xc5028b8,140732686074505],
		[0xc502908,6144],
		[0xc502918,165],
		[0xc502928,1232],
		[0xc502930,126593],
		[0, 0]
]).
int([
		[0xc501990,1995],
		[0xc501994,0],
		[0xc5019a4,32671],
		[0xc5019ac,11015],
		[0xc5019b4,0],
		[0xc5019bc,0],
		[0xc5019cc,32764],
		[0xc5019d8,55],
		[0xc5019dc,2],
		[0xc5019e4,0],
		[0xc5019e8,1233],
		[0xc5019ec,0],
		[0xc5019f0,0],
		[0xc5019f4,0],
		[0xc501a00,0],
		[0xc501a04,0],
		[0xc501a2c,0],
		[0xc501a34,0],
		[0xc501a3c,0],
		[0xc501a40,0],
		[0xc501a44,0],
		[0xc501a48,0],
		[0xc501a4c,0],
		[0xc501a54,0],
		[0xc501a5c,0],
		[0xc501a60,33],
		[0xc501a64,0],
		[0xc501a68,0],
		[0xc501a6c,0],
		[0xc501a70,0],
		[0xc501a74,0],
		[0xc501a7c,21999],
		[0xc501a84,21999],
		[0xc501a8c,21999],
		[0xc501a94,21999],
		[0xc501a9c,21999],
		[0xc501aa4,21999],
		[0xc501aac,32764],
		[0xc501ab4,32764],
		[0xc501abc,32764],
		[0xc501ac4,32764],
		[0xc501acc,32764],
		[0xc501ad0,33],
		[0xc501ad4,0],
		[0xc501adc,32764],
		[0xc501ae0,16],
		[0xc501ae4,0],
		[0xc501aec,0],
		[0xc501af0,6],
		[0xc501af4,0],
		[0xc501af8,4096],
		[0xc501afc,0],
		[0xc501b00,17],
		[0xc501b04,0],
		[0xc501b08,100],
		[0xc501b0c,0],
		[0xc501b10,3],
		[0xc501b14,0],
		[0xc501b1c,21999],
		[0xc501b20,4],
		[0xc501b24,0],
		[0xc501b28,56],
		[0xc501b2c,0],
		[0xc501b30,5],
		[0xc501b34,0],
		[0xc501b38,12],
		[0xc501b3c,0],
		[0xc501b40,7],
		[0xc501b44,0],
		[0xc501b4c,32671],
		[0xc501b50,8],
		[0xc501b54,0],
		[0xc501b58,0],
		[0xc501b5c,0],
		[0xc501b60,9],
		[0xc501b64,0],
		[0xc501b6c,21999],
		[0xc501b70,11],
		[0xc501b74,0],
		[0xc501b78,1000],
		[0xc501b7c,0],
		[0xc501b80,12],
		[0xc501b84,0],
		[0xc501b88,1000],
		[0xc501b8c,0],
		[0xc501b90,13],
		[0xc501b94,0],
		[0xc501b98,1001],
		[0xc501b9c,0],
		[0xc501ba0,14],
		[0xc501ba4,0],
		[0xc501ba8,1001],
		[0xc501bac,0],
		[0xc501bb0,23],
		[0xc501bb4,0],
		[0xc501bb8,0],
		[0xc501bbc,0],
		[0xc501bc0,25],
		[0xc501bc4,0],
		[0xc501bcc,32764],
		[0xc501bd0,26],
		[0xc501bd4,0],
		[0xc501bd8,0],
		[0xc501bdc,0],
		[0xc501be0,31],
		[0xc501be4,0],
		[0xc501bec,32764],
		[0xc501bf0,15],
		[0xc501bf4,0],
		[0xc501bfc,32764],
		[0xc501c00,0],
		[0xc501c04,0],
		[0xc501c08,0],
		[0xc501c0c,0],
		[0xc501c10,0],
		[0xc501c14,0],
		[0xc501c18,0],
		[0xc501c1c,0],
		[0xc501c20,0],
		[0xc501c24,0],
		[0xc501c28,0],
		[0xc501c2c,0],
		[0xc501c30,0],
		[0xc501c34,0],
		[0xc501c38,0],
		[0xc501c3c,0],
		[0xc501c48,32066],
		[0xc501c4c,0],
		[0xc501c50,0],
		[0xc501c54,0],
		[0xc501c58,1501],
		[0xc501c5c,0],
		[0xc501c68,1215],
		[0xc501c6c,0],
		[0xc501c74,0],
		[0xc501c78,0],
		[0xc501c7c,0],
		[0xc501c80,0],
		[0xc501c84,0],
		[0xc501c88,0],
		[0xc501c8c,0],
		[0xc501ca0,0],
		[0xc501ca4,0],
		[0xc501ca8,0],
		[0xc501cac,0],
		[0xc501cb0,0],
		[0xc501cb4,0],
		[0xc501cb8,0],
		[0xc501cbc,0],
		[0xc501cd4,32764],
		[0xc501ce0,0],
		[0xc501ce4,0],
		[0xc501cf0,205],
		[0xc501cf4,0],
		[0xc501cf8,0],
		[0xc501cfc,0],
		[0xc501d00,0],
		[0xc501d04,0],
		[0xc501d08,0],
		[0xc501d0c,0],
		[0xc501d28,0],
		[0xc501d2c,0],
		[0xc501d34,0],
		[0xc501d38,0],
		[0xc501d3c,0],
		[0xc501d40,0],
		[0xc501d44,0],
		[0xc501d48,0],
		[0xc501d4c,0],
		[0xc501d50,0],
		[0xc501d54,0],
		[0xc501d58,0],
		[0xc501d5c,0],
		[0xc501d60,0],
		[0xc501d64,0],
		[0xc501d68,0],
		[0xc501d6c,0],
		[0xc501d70,0],
		[0xc501d74,0],
		[0xc501d78,0],
		[0xc501d7c,0],
		[0xc501d80,0],
		[0xc501d84,0],
		[0xc501d88,1],
		[0xc501d8c,0],
		[0xc501d90,0],
		[0xc501d94,0],
		[0xc501d98,0],
		[0xc501d9c,0],
		[0xc501da0,0],
		[0xc501da4,0],
		[0xc501da8,0],
		[0xc501dac,0],
		[0xc501db0,0],
		[0xc501db4,0],
		[0xc501db8,0],
		[0xc501dbc,0],
		[0xc501dd0,0],
		[0xc501dd4,0],
		[0xc501de4,32671],
		[0xc501dec,11015],
		[0xc501df4,0],
		[0xc501dfc,0],
		[0xc501e0c,32764],
		[0xc501e18,0],
		[0xc501e1c,0],
		[0xc501e20,0],
		[0xc501e24,0],
		[0xc501e28,1222],
		[0xc501e2c,0],
		[0xc501e30,0],
		[0xc501e34,0],
		[0xc501e40,0],
		[0xc501e44,0],
		[0xc501e68,31096],
		[0xc501e6c,0],
		[0xc501e74,0],
		[0xc501e7c,0],
		[0xc501e80,0],
		[0xc501e84,0],
		[0xc501e88,0],
		[0xc501e8c,0],
		[0xc501e94,0],
		[0xc501e9c,0],
		[0xc501ea0,33],
		[0xc501ea4,0],
		[0xc501ea8,0],
		[0xc501eac,0],
		[0xc501eb0,0],
		[0xc501eb4,0],
		[0xc501ebc,21999],
		[0xc501ec4,21999],
		[0xc501ecc,21999],
		[0xc501ed4,21999],
		[0xc501edc,21999],
		[0xc501ee4,21999],
		[0xc501eec,32764],
		[0xc501ef4,32764],
		[0xc501efc,32764],
		[0xc501f04,32764],
		[0xc501f0c,32764],
		[0xc501f10,33],
		[0xc501f14,0],
		[0xc501f1c,32764],
		[0xc501f20,16],
		[0xc501f24,0],
		[0xc501f2c,0],
		[0xc501f30,6],
		[0xc501f34,0],
		[0xc501f38,4096],
		[0xc501f3c,0],
		[0xc501f40,17],
		[0xc501f44,0],
		[0xc501f48,100],
		[0xc501f4c,0],
		[0xc501f50,3],
		[0xc501f54,0],
		[0xc501f5c,21999],
		[0xc501f60,4],
		[0xc501f64,0],
		[0xc501f68,56],
		[0xc501f6c,0],
		[0xc501f70,5],
		[0xc501f74,0],
		[0xc501f78,12],
		[0xc501f7c,0],
		[0xc501f80,7],
		[0xc501f84,0],
		[0xc501f8c,32671],
		[0xc501f90,8],
		[0xc501f94,0],
		[0xc501f98,0],
		[0xc501f9c,0],
		[0xc501fa0,9],
		[0xc501fa4,0],
		[0xc501fac,21999],
		[0xc501fb0,11],
		[0xc501fb4,0],
		[0xc501fb8,1000],
		[0xc501fbc,0],
		[0xc501fc0,12],
		[0xc501fc4,0],
		[0xc501fc8,1000],
		[0xc501fcc,0],
		[0xc501fd0,13],
		[0xc501fd4,0],
		[0xc501fd8,1001],
		[0xc501fdc,0],
		[0xc501fe0,14],
		[0xc501fe4,0],
		[0xc501fe8,1001],
		[0xc501fec,0],
		[0xc501ff0,23],
		[0xc501ff4,0],
		[0xc501ff8,0],
		[0xc501ffc,0],
		[0xc502000,25],
		[0xc502004,0],
		[0xc50200c,32764],
		[0xc502010,26],
		[0xc502014,0],
		[0xc502018,0],
		[0xc50201c,0],
		[0xc502020,31],
		[0xc502024,0],
		[0xc50202c,32764],
		[0xc502030,15],
		[0xc502034,0],
		[0xc50203c,32764],
		[0xc502040,0],
		[0xc502044,0],
		[0xc502048,0],
		[0xc50204c,0],
		[0xc502050,0],
		[0xc502054,0],
		[0xc502058,0],
		[0xc50205c,0],
		[0xc502060,0],
		[0xc502064,0],
		[0xc502068,0],
		[0xc50206c,0],
		[0xc502070,0],
		[0xc502074,0],
		[0xc502078,0],
		[0xc50207c,0],
		[0xc502080,0],
		[0xc502084,0],
		[0xc502088,0],
		[0xc50208c,0],
		[0xc502090,0],
		[0xc502094,0],
		[0xc502098,0],
		[0xc50209c,0],
		[0xc5020a8,1233],
		[0xc5020ac,0],
		[0xc5020b0,20],
		[0xc5020b4,0],
		[0xc5020b8,0],
		[0xc5020bc,0],
		[0xc5020c0,0],
		[0xc5020c4,0],
		[0xc5020c8,0],
		[0xc5020cc,0],
		[0xc5020e0,0],
		[0xc5020e4,0],
		[0xc5020e8,0],
		[0xc5020ec,0],
		[0xc5020f0,0],
		[0xc5020f4,0],
		[0xc5020f8,0],
		[0xc5020fc,0],
		[0xc502114,32764],
		[0xc502120,0],
		[0xc502124,0],
		[0xc502130,205],
		[0xc502134,0],
		[0xc502138,0],
		[0xc50213c,0],
		[0xc502140,0],
		[0xc502144,0],
		[0xc502148,0],
		[0xc50214c,0],
		[0xc502150,0],
		[0xc502154,0],
		[0xc502160,0],
		[0xc502164,0],
		[0xc502168,0],
		[0xc50216c,0],
		[0xc502174,0],
		[0xc502178,0],
		[0xc50217c,0],
		[0xc502180,0],
		[0xc502184,0],
		[0xc502188,0],
		[0xc50218c,0],
		[0xc502190,0],
		[0xc502194,0],
		[0xc502198,0],
		[0xc50219c,0],
		[0xc5021a0,0],
		[0xc5021a4,0],
		[0xc5021a8,0],
		[0xc5021ac,0],
		[0xc5021b0,0],
		[0xc5021b4,0],
		[0xc5021b8,0],
		[0xc5021bc,0],
		[0xc5021c0,0],
		[0xc5021c4,0],
		[0xc5021c8,0],
		[0xc5021cc,0],
		[0xc5021d0,0],
		[0xc5021d4,0],
		[0xc5021d8,0],
		[0xc5021dc,0],
		[0xc5021e0,0],
		[0xc5021e4,0],
		[0xc5021e8,0],
		[0xc5021ec,0],
		[0xc5021f0,0],
		[0xc5021f4,0],
		[0xc5021f8,0],
		[0xc5021fc,0],
		[0xc502210,422],
		[0xc502214,0],
		[0xc502224,32513],
		[0xc50222c,11173],
		[0xc502234,0],
		[0xc50223c,0],
		[0xc502258,3],
		[0xc50225c,1],
		[0xc502264,0],
		[0xc502268,715],
		[0xc50226c,0],
		[0xc502270,0],
		[0xc502274,0],
		[0xc502280,0],
		[0xc502284,0],
		[0xc5022a8,9090],
		[0xc5022ac,0],
		[0xc5022b4,0],
		[0xc5022bc,0],
		[0xc5022c0,0],
		[0xc5022c4,0],
		[0xc5022c8,0],
		[0xc5022cc,0],
		[0xc5022d0,4853],
		[0xc5022d4,0],
		[0xc5022d8,10065],
		[0xc5022dc,0],
		[0xc5022e0,33],
		[0xc5022e4,0],
		[0xc5022e8,0],
		[0xc5022ec,0],
		[0xc5022f0,0],
		[0xc5022f4,0],
		[0xc5022fc,21875],
		[0xc502304,21875],
		[0xc50230c,21875],
		[0xc502314,21875],
		[0xc50231c,21875],
		[0xc502324,21875],
		[0xc502350,33],
		[0xc502354,0],
		[0xc502360,16],
		[0xc502364,0],
		[0xc50236c,0],
		[0xc502370,6],
		[0xc502374,0],
		[0xc502378,4096],
		[0xc50237c,0],
		[0xc502380,17],
		[0xc502384,0],
		[0xc502388,100],
		[0xc50238c,0],
		[0xc502390,3],
		[0xc502394,0],
		[0xc50239c,21875],
		[0xc5023a0,4],
		[0xc5023a4,0],
		[0xc5023a8,56],
		[0xc5023ac,0],
		[0xc5023b0,5],
		[0xc5023b4,0],
		[0xc5023b8,13],
		[0xc5023bc,0],
		[0xc5023c0,7],
		[0xc5023c4,0],
		[0xc5023cc,32513],
		[0xc5023d0,8],
		[0xc5023d4,0],
		[0xc5023d8,0],
		[0xc5023dc,0],
		[0xc5023e0,9],
		[0xc5023e4,0],
		[0xc5023ec,21875],
		[0xc5023f0,11],
		[0xc5023f4,0],
		[0xc5023f8,1000],
		[0xc5023fc,0],
		[0xc502400,12],
		[0xc502404,0],
		[0xc502408,1000],
		[0xc50240c,0],
		[0xc502410,13],
		[0xc502414,0],
		[0xc502418,1001],
		[0xc50241c,0],
		[0xc502420,14],
		[0xc502424,0],
		[0xc502428,1001],
		[0xc50242c,0],
		[0xc502430,23],
		[0xc502434,0],
		[0xc502438,0],
		[0xc50243c,0],
		[0xc502440,25],
		[0xc502444,0],
		[0xc502450,26],
		[0xc502454,0],
		[0xc502458,0],
		[0xc50245c,0],
		[0xc502460,31],
		[0xc502464,0],
		[0xc502470,15],
		[0xc502474,0],
		[0xc502480,0],
		[0xc502484,0],
		[0xc502488,0],
		[0xc50248c,0],
		[0xc502490,0],
		[0xc502494,0],
		[0xc502498,0],
		[0xc50249c,0],
		[0xc5024a0,0],
		[0xc5024a4,0],
		[0xc5024a8,0],
		[0xc5024ac,0],
		[0xc5024b0,0],
		[0xc5024b4,0],
		[0xc5024b8,0],
		[0xc5024bc,0],
		[0xc5024c8,1056],
		[0xc5024cc,0],
		[0xc5024d0,0],
		[0xc5024d4,0],
		[0xc5024d8,0],
		[0xc5024dc,0],
		[0xc5024e8,1035],
		[0xc5024ec,0],
		[0xc5024f0,9950],
		[0xc5024f4,0],
		[0xc5024f8,0],
		[0xc5024fc,0],
		[0xc502500,0],
		[0xc502504,0],
		[0xc502508,0],
		[0xc50250c,0],
		[0xc502520,0],
		[0xc502524,0],
		[0xc502528,0],
		[0xc50252c,0],
		[0xc502530,0],
		[0xc502534,0],
		[0xc502538,0],
		[0xc50253c,0],
		[0xc502560,0],
		[0xc502564,0],
		[0xc502570,205],
		[0xc502574,0],
		[0xc502578,0],
		[0xc50257c,0],
		[0xc502580,0],
		[0xc502584,0],
		[0xc502588,0],
		[0xc50258c,0],
		[0xc5025a8,0],
		[0xc5025ac,0],
		[0xc5025b4,0],
		[0xc5025b8,0],
		[0xc5025bc,0],
		[0xc5025c0,0],
		[0xc5025c4,0],
		[0xc5025c8,0],
		[0xc5025cc,0],
		[0xc5025d0,0],
		[0xc5025d4,0],
		[0xc5025d8,0],
		[0xc5025dc,0],
		[0xc5025e0,0],
		[0xc5025e4,0],
		[0xc5025e8,0],
		[0xc5025ec,0],
		[0xc5025f0,0],
		[0xc5025f4,0],
		[0xc5025f8,0],
		[0xc5025fc,0],
		[0xc502600,0],
		[0xc502604,0],
		[0xc502608,0],
		[0xc50260c,0],
		[0xc502610,0],
		[0xc502614,0],
		[0xc502618,0],
		[0xc50261c,0],
		[0xc502620,0],
		[0xc502624,0],
		[0xc502628,0],
		[0xc50262c,0],
		[0xc502630,0],
		[0xc502634,0],
		[0xc502638,0],
		[0xc50263c,0],
		[0xc502650,754],
		[0xc502654,0],
		[0xc502664,32514],
		[0xc50266c,11172],
		[0xc502674,0],
		[0xc50267c,0],
		[0xc50268c,32766],
		[0xc502698,20],
		[0xc50269c,1],
		[0xc5026a4,0],
		[0xc5026a8,712],
		[0xc5026ac,0],
		[0xc5026b0,0],
		[0xc5026b4,0],
		[0xc5026c0,0],
		[0xc5026c4,0],
		[0xc5026e8,15018],
		[0xc5026ec,0],
		[0xc5026f4,0],
		[0xc5026fc,0],
		[0xc502700,0],
		[0xc502704,0],
		[0xc502708,0],
		[0xc50270c,0],
		[0xc502710,11241],
		[0xc502714,0],
		[0xc502718,24412],
		[0xc50271c,0],
		[0xc502720,33],
		[0xc502724,0],
		[0xc502728,0],
		[0xc50272c,0],
		[0xc502730,0],
		[0xc502734,0],
		[0xc50273c,22082],
		[0xc502744,22082],
		[0xc50274c,22082],
		[0xc502754,22082],
		[0xc50275c,22082],
		[0xc502764,22082],
		[0xc50276c,32766],
		[0xc502774,32766],
		[0xc50277c,32766],
		[0xc502784,32766],
		[0xc50278c,32766],
		[0xc502790,33],
		[0xc502794,0],
		[0xc50279c,32766],
		[0xc5027a0,16],
		[0xc5027a4,0],
		[0xc5027ac,0],
		[0xc5027b0,6],
		[0xc5027b4,0],
		[0xc5027b8,4096],
		[0xc5027bc,0],
		[0xc5027c0,17],
		[0xc5027c4,0],
		[0xc5027c8,100],
		[0xc5027cc,0],
		[0xc5027d0,3],
		[0xc5027d4,0],
		[0xc5027dc,22082],
		[0xc5027e0,4],
		[0xc5027e4,0],
		[0xc5027e8,56],
		[0xc5027ec,0],
		[0xc5027f0,5],
		[0xc5027f4,0],
		[0xc5027f8,12],
		[0xc5027fc,0],
		[0xc502800,7],
		[0xc502804,0],
		[0xc50280c,32514],
		[0xc502810,8],
		[0xc502814,0],
		[0xc502818,0],
		[0xc50281c,0],
		[0xc502820,9],
		[0xc502824,0],
		[0xc50282c,22082],
		[0xc502830,11],
		[0xc502834,0],
		[0xc502838,1000],
		[0xc50283c,0],
		[0xc502840,12],
		[0xc502844,0],
		[0xc502848,1000],
		[0xc50284c,0],
		[0xc502850,13],
		[0xc502854,0],
		[0xc502858,1001],
		[0xc50285c,0],
		[0xc502860,14],
		[0xc502864,0],
		[0xc502868,1001],
		[0xc50286c,0],
		[0xc502870,23],
		[0xc502874,0],
		[0xc502878,0],
		[0xc50287c,0],
		[0xc502880,25],
		[0xc502884,0],
		[0xc50288c,32766],
		[0xc502890,26],
		[0xc502894,0],
		[0xc502898,0],
		[0xc50289c,0],
		[0xc5028a0,31],
		[0xc5028a4,0],
		[0xc5028ac,32766],
		[0xc5028b0,15],
		[0xc5028b4,0],
		[0xc5028bc,32766],
		[0xc5028c0,0],
		[0xc5028c4,0],
		[0xc5028c8,0],
		[0xc5028cc,0],
		[0xc5028d0,0],
		[0xc5028d4,0],
		[0xc5028d8,0],
		[0xc5028dc,0],
		[0xc5028e0,0],
		[0xc5028e4,0],
		[0xc5028e8,0],
		[0xc5028ec,0],
		[0xc5028f0,0],
		[0xc5028f4,0],
		[0xc5028f8,0],
		[0xc5028fc,0],
		[0xc502908,6144],
		[0xc50290c,0],
		[0xc502910,0],
		[0xc502914,0],
		[0xc502918,165],
		[0xc50291c,0],
		[0xc502928,1232],
		[0xc50292c,0],
		[0xc502934,0],
		[0xc502938,0],
		[0xc50293c,0],
		[0xc502940,0],
		[0xc502944,0],
		[0xc502948,0],
		[0xc50294c,0],
		[0xc502960,0],
		[0xc502964,0],
		[0xc502968,0],
		[0xc50296c,0],
		[0xc502970,0],
		[0xc502974,0],
		[0xc502978,0],
		[0xc50297c,0],
		[0, 0]
]).
string_val([
		[0xc501b08,100],
		[0xc501b28,56],
		[0xc501e68,31096],
		[0xc501f48,100],
		[0xc501f68,56],
		[0xc5022d8,10065],
		[0xc502388,100],
		[0xc5023a8,56],
		[0xc502718,24412],
		[0xc5027c8,100],
		[0xc5027e8,56],
		[0, 0]
]).
/* This file contains recursive predicates */
:- use_module(library(clpfd)).
:- use_module(reif).
:- style_check(-singleton).

isTrue([X, Y]):-
    X == 49.

isTrue([X|Tail]):-
    isTrue(Tail).

log(File_name, Name, Addr, Base):-
    Offset #= Addr - Base,
    open(File_name, append, Stream),
    write(Stream, Name),
    write(Stream, ':'),
    write(Stream, Offset),
    nl(Stream),
    close(Stream).

possible_task_struct(Base_addr) :-
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM2_addr, Pid_addr, Tgid_addr, Real_parent_addr, Parent_addr , Child_addr, 
           Group_leader_addr, Thread_group_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    %MM2_addr #> Base_addr + 1000,
    Tasks_addr #> MM2_addr - 100,
    %FS_struct_addr #< Base_addr + 4000,
    Tgid_addr #= Pid_addr + 4,
    Real_parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr - 8,
    Child_addr #= Parent_addr + 8,
    %FIXME This may be too strong
    Group_leader_addr #=< Child_addr +32,
    %Comm_addr #= Base_addr + 1656,
    %Tasks_addr #= Base_addr + 1072,
    %FS_struct_addr #= Base_addr + 2640,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    % make query after labeling
    MM2_val #> 0,
    integer(MM2_val),
    
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val,  Comm_addr, Comm_val ]),

    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_parent_addr, Real_parent_val, Group_leader_addr, Group_leader_val]),
    Real_parent_val #> 0,
    Group_leader_val #> 0,
    query_ts(Real_parent_val, Comm_offset, Tasks_offset),
    query_ts(Group_leader_val, Comm_offset, Tasks_offset),

    labeling([enum], [Cred_addr, Cred_val]),
    Cred_val #> 0,
    query_cred(Cred_val),

    labeling([enum], [FS_struct_addr, FS_struct_val]),
    FS_struct_val #> 0,
    %query_fs_struct(FS_struct_val),



    get_time(End),
    Time_past is End - Current,
    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    log("profile.txt", "tasks", Tasks_addr, Base_addr),
    log("profile.txt", "mm_struct", MM2_addr, Base_addr),
    log("profile.txt", "comm", Comm_addr, Base_addr),
    log("profile.txt", "parent", Parent_addr, Base_addr),
    log("profile.txt", "group_leader", Group_leader_addr, Base_addr),
    log("profile.txt", "cred", Cred_addr, Base_addr),

    
    print_nl('tasks offset', Tasks_offset),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).

possible_string_pointer(Base_addr) :-
    /* Verify if this pointer points to a stirng */
    string_val(Str),
    Str_profile = [
        [Name_addr, Name_val]
    ],
    tuples_in(Str_profile, Str),
    Name_addr #= Base_addr.

query_string_pointer(Val) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "string_pointer"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_mount_struct(Base_addr, Offset) :-
    pointer(Ptr),
    Ptr_profile = ([
        [Mnt_devname_addr, Mnt_devname_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Mnt_devname_addr #= Base_addr + Offset,
    labeling([enum], [Mnt_devname_addr, Mnt_devname_val]),
    query_string_pointer(Mnt_devname_val).



possible_kernel_param(Base_addr) :-
    string_val(Str),
    Str_profile = [
        [Name_addr, Name_val]
    ],
    tuples_in(Str_profile, Str),
    Name_addr #= Base_addr.

possible_in_device(Base_addr) :-
    /* in_ifaddr remains the same across kernel versions 
       but we need this query to find ip_ptr in net_device struct
    */
    /*
        struct net_device *dev;
        int               refcnt;
        int               dead;
        struct in_ifaddr  *ifa_list;
    */
    pointer(Ptr),
    int(Int),
    Ptr_profile = ([
        [Dev_addr, Dev_val],
        [Ifa_list_addr, Ifa_list_val]
    ]),
    Int_profile = ([
        [Refcnt_addr, Refcnt_val],
        [Dead_addr, Dead_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Dead_addr #= Refcnt_addr + 4,
    chain([Dev_addr, Refcnt_addr, Dead_addr, Ifa_list_addr], #<),
    Dev_addr #= Base_addr,
    Ifa_list_addr #= Base_addr + 16,
    labeling([enum], [Ifa_list_addr, Ifa_list_val]),

    process_create(path('python'),
                    ['subquery.py', Ifa_list_val, "in_ifaddr"],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_in_ifaddr(Base_addr) :-
    /* in_ifaddr remains the same across kernel versions */
    pointer(Ptr),
    Ptr_profile = ([
        [Hash_addr, Hash_val],
        [Ifa_next_addr, Ifa_next_val],
        [Ifa_dev_addr, Ifa_dev_val],
        [Rcu_head_addr, Rcu_head_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([Hash_addr, Ifa_next_addr, Ifa_dev_addr, Rcu_head_addr], #<),
    Hash_addr #= Base_addr,
    Ifa_next_addr #= Hash_addr + 16,
    Ifa_dev_addr #= Ifa_next_addr + 8,
    Rcu_head_addr #= Ifa_dev_addr + 8,
    labeling([enum], [Hash_addr, Ifa_next_addr, Ifa_dev_addr, Rcu_head_addr]).



possible_mm_struct(Current_addr) :- 
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    % TODO: ADD vm_area_struct *mmap
    Ptr_profile = [
        [Mmap_addr, Mmap_val],
        [Pgd_addr, Pgd_val]  
    ],
    Ulong_profile = [
        [Mmap_base_addr, Mmap_base_val],
        [Mmap_legacy_base_addr, Mmap_legacy_base_val],
        [Task_size_addr, Task_size_val],
        [High_vm_end_addr, High_vm_end_val],
        [Start_brk_addr, Start_brk_val],
        [Brk_addr, Brk_val],
        [Start_stack_addr, Start_stack_val],
        [ARG_start_addr, ARG_start_val]
    ],
    Mmap_addr #= Current_addr,


    Mmap_base_addr #> Mmap_addr,
    %FIXME mmap_base need more value constraint, because we removed mmap_legacy_base and highest_vm_end.
    Mmap_base_val #> 0x7f0000000000,
    
    chain([Mmap_base_addr, Task_size_addr, Pgd_addr], #<),


    Pgd_addr #> Task_size_addr,
    Pgd_addr #=< Task_size_addr + 40,
    %FIXME: This rule may not be true for other mm_struct.
    Task_size_val #>= 0x7ffffffff000,


    Start_brk_addr #> Pgd_addr,
    Start_stack_val #> 0x7ff000000000,
    ARG_start_addr #< Current_addr + 500,
    chain([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr], #<),
    ARG_start_addr #= Start_brk_addr + 24,
    Brk_val #< 0x7ff000000000,
    ARG_start_val #> 0x7ff000000000,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),


    labeling([enum], [Mmap_addr, Mmap_val, Mmap_base_addr, Pgd_addr, Pgd_val]),
    Mmap_val #> 0,
    Pgd_val #> 0,
    
    process_create(path('python'),
                    ['subquery.py', Mmap_val, "vm_area_struct", 2],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    label([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr]),
    statistics(real_time, [End|_]),

    log("./profile/mm_struct", "mmap", Mmap_addr, Current_addr),
    log("./profile/mm_struct", "mmap_base", Mmap_base_addr, Current_addr),
    log("./profile/mm_struct", "pgd", Pgd_addr, Current_addr),
    log("./profile/mm_struct", "start_brk", Start_brk_addr, Current_addr),
    log("./profile/mm_struct", "brk", Brk_addr, Current_addr),
    log("./profile/mm_struct", "start_stack", Start_stack_addr, Current_addr),
    log("./profile/mm_struct", "arg_start", ARG_start_addr, Current_addr),
    log("./profile/mm_struct", "mm_struct", End, Start).


possible_vm_area_struct(Base_addr, Level) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [VM_next_addr, VM_next_val],
        [VM_file_addr, VM_file_val]
    ],
    Ulong_profile = [
        [VM_start_addr, VM_start_val],
        [VM_end_addr, VM_end_val],
        [VM_flag_addr, VM_flag_val]
        /*VM_pgoff is 0, and we do not consider 0 as ulong*/
        %[VM_pgoff_addr, VM_pgoff_val]
    ],
    VM_start_addr #>= Base_addr,
    chain([VM_start_addr, VM_end_addr, VM_next_addr, VM_flag_addr, VM_file_addr], #<),
    VM_end_addr #= VM_start_addr + 8,
    VM_next_addr #= VM_end_addr + 8,
    VM_next_addr #< Base_addr + 32,
    VM_file_addr #< Base_addr + 180,
    VM_pgoff_addr #= VM_file_addr - 8,
    VM_flag_val #< 0x88888888,
    VM_file_addr #< Base_addr + 200,

    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    %FIXME: VM_flag may need value constraints.

    label([VM_next_addr, VM_next_val]),
    /* vm_file maybe zero! */
    labeling([enum], [VM_start_addr, VM_end_addr, VM_flag_addr, VM_pgoff_addr, VM_file_addr, VM_file_val]),
    /*
    VM_file_val #> 0,
    
    process_create(path('python'),
                ['subquery.py', VM_file_val, "vm_file"],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    statistics(real_time, [End|_]),*/
    

    log("./profile/vm_area_struct", "vm_start", VM_start_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_end", VM_end_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_next", VM_next_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_flag", VM_flag_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_pgoff", VM_pgoff_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_file", VM_file_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_area_struct", End, Start).

check_vm_area_struct(Base_addr, Level) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "vm_area_struct", Level],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vm_file(Base_addr) :-
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [Vfs_mount_addr, Vfs_mount_val],
        [Dentry_addr, Dentry_val],
        [F_op_addr, F_op_val]
    ],
    tuples_in(Ptr_profile, Ptr),
    Vfs_mount_addr #> Base_addr,
    Dentry_addr #= Vfs_mount_addr + 8,
    Dentry_addr #< Base_addr + 40,
    Vfs_mount_val #> 0,
    Dentry_val #> 0,
    F_op_addr #= Base_addr + 40, 
    F_op_val #> 0,
    chain([Vfs_mount_addr, Dentry_addr, F_op_addr], #<),
    labeling([enum], [Vfs_mount_val, Dentry_val, F_op_addr, F_op_val]),


    process_create(path('python'),
                    ['subquery.py', Vfs_mount_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),
    

    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    

    %query_file_operation(F_op_addr),

    log("./profile/file", "vfs_mount", Vfs_mount_addr, Base_addr),
    log("./profile/file", "dentry", Dentry_addr, Base_addr),
    log("./profile/file", "f_op", F_op_addr, Base_addr).



query_file_operation(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result).

possible_name_pointer(Val, Name_offset) :-
    /* The value at val+name_offset is a string pointer */
    current_predicate(pointer/1),
    pointer(Ptr),
    Ptr_profile = ([
        [Name_addr, Name_val]
    ]),
    Name_addr #= Val + Name_offset,
    tuples_in(Ptr_profile, Ptr),
    labeling([enum], [Name_addr, Name_val]),
    query_string_pointer(Name_val).

possible_vfs_mount(Base_addr) :-
    pointer(Ptr),
    int(Int),
    Ptr_profile = [
        [Dentry_addr, Dentry_val],
        [Mnt_sb_addr, Mnt_sb_val]
    ],
    Int_profile = [
        [Mnt_flags_addr, Mnt_flags_val]
    ],
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Dentry_addr #= Base_addr,
    Dentry_val #> 0,
    Mnt_flags_addr #= Dentry_addr + 16,
    Mnt_flags_val #>= 0,
    Mnt_sb_val #> 0,
    chain([Dentry_addr, Mnt_sb_addr, Mnt_flags_addr], #<),
    label([Dentry_addr, Dentry_val, Mnt_flags_addr, Mnt_flags_val]).
 
possible_dentry(Base_addr) :-
    /*
        struct dentry *d_parent;
        struct qstr d_name -> char *name; it's a name pointer
        struct inode *d_inode;
        unsigned char d_iname[LEN];
        const struct dentry_operations *d_op;
        struct list_head d_child;
        struct list_head d_subdirs;
        union {
	        struct hlist_node d_alias;
	        struct rcu_head d_rcu;
        } d_u;
    */
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    string_val(Str),
    Ptr_profile = [
        [Dparent_addr, Dparent_val],
        [Dname_addr, Dname_val],
        [D_inode_addr, D_inode_val],
        [D_op_addr, D_op_val],
        [Dchild_addr, Dchild_val],
        [D_subdirs_addr, D_subdirs_val]
    ],
    Str_profile = [
        [D_iname_addr, D_iname_val]
    ],
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    Dparent_addr #> Base_addr,
    chain([Dparent_addr, Dname_addr, D_inode_addr, D_iname_addr, 
            D_op_addr, Dchild_addr, D_subdirs_addr], #<),
    D_subdirs_addr #= Dchild_addr + 16,
    D_subdirs_addr #< Base_addr + 200,
    Dparent_val #> 0,
    labeling([enum], [Dname_addr, Dname_val]),
    query_string_pointer(Dname_val),
    labeling([enum], [D_iname_addr, D_iname_val]),
    D_iname_offset #= D_iname_addr - Base_addr,
    Dname_offset #= Dname_addr - Base_addr,
    labeling([enum], [Dparent_addr, Dparent_val]),
    Parent_dname #= Dparent_val + Dname_offset,
    process_create(path('python'),
                    ['subquery.py', Parent_dname, "name_pointer", Dname_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    labeling([enum], [D_inode_addr, D_inode_val]),
    query_inode(D_inode_val),

    labeling([enum], [Dchild_addr, Dchild_val]),
    Dchild_offset #= Dchild_addr - Base_addr,
    Dchild_init #= Dchild_val - Dchild_offset,
    query_name_pointer(Dchild_init, Dname_offset),

    /* This can be hardcoded as d_child_addr + 16 */
    labeling([enum], [D_subdirs_addr, D_subdirs_val]),
    Dsubdirs_offset #= D_subdirs_addr - Base_addr,
    D_subdirs_init #= D_subdirs_val - Dsubdirs_offset,
    query_name_pointer(D_subdirs_init, Dname_offset),

    statistics(real_time, [End|_]),

    log("./profile/dentry", "parent", Dparent_addr, Base_addr),
    log("./profile/dentry", "inode", D_inode_val, Base_addr),
    log("./profile/dentry", "d_iname", D_iname_addr, Base_addr),
    log("./profile/dentry", "dchild", Dchild_addr, Base_addr),
    log("./profile/dentry", "d_subdirs", D_subdirs_addr, Base_addr),
    log("./profile/dentry", "dentry", End, Start).

query_inode(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_inode(Base_addr) :-
    /*
        struct inode_operations *i_op;
        struct super_block      *i_sb;
        struct address_space    *i_mapping;
    */
    statistics(real_time, [Start|_]),

    pointer(Ptr),
    long(Ulg),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [I_op_addr, I_op_val],
        [I_sb_addr, I_sb_val],
        [I_mapping_addr, I_mapping_val],
        [I_fop_addr, I_fop_val]
    ]),
    Ulong_profile = ([
        /* i_mode is actually not long type. */
        [I_mode_addr, I_mode_val],
        [I_ino_addr, I_ino_val],
        [I_size_addr, I_size_val],
        [I_atime_addr, I_atime_val],
        [_I_atime_addr, _I_atime_val],
        [I_mtime_addr, I_mtime_val],
        [I_ctime_addr, I_ctime_val],
        [_I_ctime_addr, _I_ctime_val]
    ]),
    Int_profile = ([
        [I_uid_addr, I_uid_val],
        [I_gid_addr, I_gid_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    tuples_in(Int_profile, Int),

    chain([I_mode_addr, I_uid_addr, I_gid_addr, I_op_addr, I_sb_addr, I_mapping_addr, I_ino_addr,
           I_size_addr, I_atime_addr, _I_atime_addr, I_mtime_addr, I_ctime_addr, _I_ctime_addr, I_fop_addr], #<),

    I_mode_addr #= Base_addr,
    I_mode_val #> 0,
    I_gid_addr #= I_mode_addr + 8,
    %I_op_addr #= Base_addr + 32,
    I_op_addr #=< Base_addr + 32,
    I_op_val #> 0,
    labeling([enum], [I_op_addr, I_op_val]),
    query_inode_operations(I_op_val),

    I_sb_addr #= I_op_addr + 8,
    I_mapping_addr #= I_sb_addr + 8,
    I_atime_addr #= I_size_addr + 8,
    I_mtime_addr #= I_atime_addr + 16,
    I_ctime_addr #= I_mtime_addr + 16,
    _I_ctime_addr #= I_ctime_addr + 8,
    I_size_val #> 0,
    I_atime_val #> 4096,
    I_mtime_val #> 4096,
    I_ctime_val #> 4096,
    I_fop_addr #< Base_addr + 400,
    labeling([enum], [I_sb_addr, I_mapping_addr, I_atime_addr, I_mtime_addr, I_ctime_addr]),


    labeling([enum], [I_fop_addr, I_fop_val]),
    I_fop_val #> 0,
    query_inode_operations(I_fop_val),
    statistics(real_time, [End|_]),


    log("./profile/inode", "I_mode_addr", I_mode_addr, Base_addr),
    log("./profile/inode", "I_uid_addr", I_uid_addr, Base_addr),
    log("./profile/inode", "I_gid_addr", I_gid_addr, Base_addr),
    log("./profile/inode", "I_op_addr", I_op_addr, Base_addr),
    log("./profile/inode", "I_sb_addr", I_sb_addr, Base_addr),
    log("./profile/inode", "I_mapping_addr", I_mapping_addr, Base_addr),
    log("./profile/inode", "I_size_addr", I_size_addr, Base_addr),
    log("./profile/inode", "I_atime_addr", I_atime_addr, Base_addr),
    log("./profile/inode", "I_mtime_addr", I_mtime_addr, Base_addr),
    log("./profile/inode", "I_ctime_addr", I_ctime_addr, Base_addr),
    log("./profile/inode", "I_fop_addr", I_fop_addr, Base_addr),
    log("./profile/inode", "inode", End, Start).


query_inode_operations(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_name_pointer(Base_addr, Offset) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "name_pointer", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_inode_operations(Base_addr) :-
    /* a bunch of function pointers. */
    pointer(Ptr),
    Ptr_profile = ([
        [_L1_addr, _L1_val],
        [_L2_addr, _L2_val],
        [_L3_addr, _L3_val],
        [_L4_addr, _L4_val],
        [_L5_addr, _L5_val],
        [_L6_addr, _L6_val],
        [_L7_addr, _L7_val],
        [_L8_addr, _L8_val],
        [_L9_addr, _L9_val],
        [_L10_addr, _L10_val],
        [_L11_addr, _L11_val],
        [_L12_addr, _L12_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([_L1_addr, _L2_addr, _L3_addr, _L4_addr, _L5_addr, _L6_addr, _L7_addr,
           _L8_addr, _L9_addr, _L10_addr, _L11_addr, _L12_addr], #<),
    _L1_addr #= Base_addr,
    _L12_addr #= Base_addr + 88.




possible_nothing() :-

    %log("profile.txt", "dentry addr", Base_addr, 0),
    Dparent_addr #> Base_addr,
    Dname_addr #> 0,
    Dname_addr #< Base_addr + 200,
    %Dname_addr #= Base_addr + 160,
    %FIXME This child rule is not applicable for old kernel version. 
    %chain([Dparent_addr, Dname_addr, Dchild_addr], #<),
    %Dchild_addr #< Base_addr + 200,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    labeling([enum], [Dparent_addr, Dparent_val, Dname_addr, Dchild_addr, Dchild_val]),
    Dname_offset #= Dname_addr - Base_addr,
    integer(Dname_offset),
    Dparent_val #> 0,
    
    %FIXME d_parent may not be initialized
    /*process_create(path('python'),
                ['subquery.py', Dparent_val, "d_entry", Dname_offset],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/

    %FIXME: may need to find another way for all list_head. 
    /*Dchild_offset #= Dchild_addr - Base_addr,
    integer(Dchild_offset),
    Dchild_base #= Dchild_val - Dchild_offset,
    integer(Dchild_base),
    Dchild_base #> 0,
    process_create(path('python'),
                ['subquery.py', Dchild_base, "d_entry", Dname_offset],
                [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    statistics(real_time, [End|_]).
/*
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    log("profile.txt", "d_parent", Dparent_addr, Base_addr),
    log("profile.txt", "d_child", Dchild_addr, Base_addr),
    log("profile.txt", "dentry time", End, Start).
*/
possible_d_entry(Base_addr, Dname_offset) :-
    current_predicate(string_val/1),
    string_val(Str),
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    Dname_addr #= Base_addr + Dname_offset,
    tuples_in(Str_profile, Str),
    label([Dname_addr]).

possible_list_head(Tasks_val, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_val, Tasks_addr]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],
    Comm_addr #= Tasks_val - Tasks_offset + Comm_offset,
    Tasks_addr #\= Tasks_val,
    tuples_in(Str_profile, Str),
    tuples_in(Ptr_profile, Ptr),
    label([Comm_addr]).

possible_ts(Base_addr, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_addr, Tasks_val]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],

    Comm_addr #= Base_addr + Comm_offset,
    Tasks_addr #= Base_addr + Tasks_offset,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),

    label([Tasks_val]),
    
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "list_head", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_cred(Base_addr) :-
    statistics(real_time, [Start|_]),

    int(Int),
    long(Ulg),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3],
        [Addr4, Val4],
        [Addr5, Val5],
        [Addr6, Val6],
        [Addr7, Val7],
        [Addr8, Val8],
        [Addr9, Val9]
    ],
    %FIXME For now, this rule is hard-coded because we do not consider 0 as a unsign long number. 
    %So that for cred whos val10 is 0, this rule does not apply.
    /*Ulong_profile = [
        [Addr10, Val10],
        [Addr11, Val11]
    ],*/
    Addr1 #> Base_addr,
    %chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9, Addr10, Addr11], #<),
    chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9], #<),
    Addr1 #= Base_addr + 4,
    Addr9 #= Addr1 + 32,
    %Addr11 #< Base_addr + 120,
    tuples_in(Int_profile, Int),
    %tuples_in(Ulong_profile, Ulg),
    statistics(real_time, [End|_]),
    labeling([enum], [Addr1, Addr2, Addr5, Addr6]),
    log("./profile/cred", "cred", End, Start),
    log('./profile/cred', "uid", Addr1, Base_addr),
    log('./profile/cred', "gid", Addr2, Base_addr),
    log('./profile/cred', "euid", Addr5, Base_addr),
    log('./profile/cred', "egid", Addr6, Base_addr).

possible_fs_struct(Base_addr) :-
    statistics(real_time, [Start|_]),
    int(Int),
    pointer(Ptr),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3]
    ],
    Ptr_profile = [
        [Root_addr, Root_val],
        [PWD_addr, PWD_val]
    ],
    Addr1 #>= Base_addr,
    chain([Addr1, Addr2, Addr3, Root_addr, PWD_addr], #<),
    PWD_addr #= Root_addr + 16,
    PWD_addr #< Base_addr + 50,
    tuples_in(Int_profile, Int),
    tuples_in(Ptr_profile, Ptr),
    Root_val #> 0,
    PWD_val #> 0,
    label([Root_addr, Root_val]),
    /* some times the dentry fields are zero, use vfs_mount instead */
    process_create(path('python'),
                    ['subquery.py', Root_val, "vfs_mount"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    label([PWD_addr, PWD_val]),
    process_create(path('python'),
                    ['subquery.py', PWD_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    statistics(real_time, [End|_]),
    log("profile.txt", "fs time", End, Start),
    log('profile.txt', "Root", Root_addr, Base_addr),
    log('profile.txt', "pwd", PWD_addr, Base_addr),
    log('profile.txt', "fs_struct", End, Start).

possible_mount(Base_addr) :-
    /* struct hlist_head mnt_hash;
       struct mount *mnt_parent; 
       struct vfsmount mnt;
       struct list_head mnt_mounts;
       struct list_head mnt_child;
       struct list_head mnt_instance;
       const char *mnt_devname;
       struct list_head mnt_list;
    */
    statistics(real_time, [Start|_]),
    %get_time(Current),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Mnt_hash_addr, Mnt_hash_val],
        [Mnt_parent_addr, Mnt_parent_val],
        [Vfsmount_addr, Vfsmount_val],
        [Mnt_child_addr, Mnt_child_val],
        [Mnt_devname_addr, Mnt_devname_val],
        [Mnt_list_addr, Mnt_list_val]
    ]),
    Int_profile = ([
        [Mnt_flags_addr, Mnt_flags_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    /* Order Invariants */
    chain([Mnt_hash_addr, Mnt_parent_addr, Vfsmount_addr, Mnt_flags_addr,
            Mnt_child_addr, Mnt_devname_addr, Mnt_list_addr], #<),
    Mnt_hash_addr #= Base_addr,
    /* mnt_hash_addr is a list_head */
    Mnt_parent_addr #> Base_addr + 8,
    Mnt_list_addr - Base_addr #< 200,
    labeling([enum], [Mnt_devname_addr, Mnt_devname_val]),
    query_string_pointer(Mnt_devname_val),
    Mnt_devname_offset #= Mnt_devname_addr - Base_addr,
    /* the offset from mnt_mounts to mnt_list remains the same, so it's safe to use fixed offsets. */
    Mnt_child_addr #= Mnt_devname_addr - 32,
    Mnt_list_addr #= Mnt_devname_addr + 8,
    Mnt_flags_addr #= Vfsmount_addr + 16,
    labeling([enum], [Mnt_child_addr, Mnt_list_addr, Vfsmount_addr, Vfsmount_val]),
    /* Seems unnecessary 
    Mnt_list_offset #= Mnt_list_addr - Base_addr,
    Mnt_list #= Mnt_list_val - Mnt_list_offset,
    Mnt_list #> 0,
    query_mount_struct(Mnt_list, Mnt_devname_offset),
    */
    Vfsmount_val #>= 0,
    /* Here we can infer layout of dentry structure 
       Maybe need to infer using another dentry, somehow it may not be initialized. 
    */
    Vfsmount_addr #> 0,
    %query_dentry(Vfsmount_addr),

    labeling([enum], [Mnt_parent_addr, Mnt_parent_val]),
    /* To verify another mount struct, only one-level query, so it does not direct call query_mount recursively */
    
    query_mount_struct(Mnt_parent_val, Mnt_devname_offset),
    

    %get_time(End),
    %Time_past is End - Current,
    statistics(real_time, [End|_]),
    log("./profile/mount", "mnt_hash", Mnt_hash_addr, Base_addr),
    log("./profile/mount", "mnt_parent", Mnt_parent_addr, Base_addr),
    log("./profile/mount", "mnt_child", Mnt_child_addr, Base_addr),
    log("./profile/mount", "mnt_devname", Mnt_devname_addr, Base_addr),
    log("./profile/mount", "mnt_list", Mnt_list_addr, Base_addr),
    log("./profile/mount", "mount", End, Start).


possible_neigh_hash_table(Base_addr) :-
    /* neighbour **hash_buckets */
    pointer(Ptr),
    Ptr_profile = ([
        [Hash_buckest_addr, Hash_buckets_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Hash_buckest_addr #= Base_addr,
    labeling([enum], [Hash_buckest_addr, Hash_buckets_val]),
    process_create(path('python'),
                    ['subquery.py', Hash_buckets_val, "hash_buckets"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_hash_buckets(Base_addr) :-
    /* hash_buckets is an array of neighbour pointer 
       note that not all element are non-zero
    */
    pointer(Ptr),
    Ptr_profile = ([
        [Neighbour_addr, Neighbour_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Neighbour_addr #< Base_addr + 32,
    Neighbour_val #> 0,
    labeling([enum], [Neighbour_addr, Neighbour_val]),
    process_create(path('python'),
                    ['subquery.py', Neighbour_val, "neighbour"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_neighbour(Base_addr) :-
    /* net_device *dev at offset 464 */
    pointer(Ptr),
    Ptr_profile = ([
        [Dev_addr, Dev_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Dev_addr #>= Base_addr + 360,
    Dev_addr #=< Base_addr + 376,
    labeling([enum], [Dev_addr, Dev_val]),
    process_create(path('python'),
                    ['subquery.py', Dev_val, "net_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).


possible_net_device(Base_addr) :- 
    /*
        char             name[NAMSIZ];
        struct list_head dev_list;
        unsigned char    addr_len;
        unsigned int     promiscuity;
        struct in_device *ip_ptr;
    */
    statistics(real_time, [Start|_]),
    %get_time(Current),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Dev_list_addr, Dev_list_val],
        [IP_ptr_addr, IP_ptr_val]
    ]),
    Str_profile = ([
        [Name_addr, Name_val]
    ]),
    Int_profile = ([
        [Promisc_addr, Promisc_val],
        [Addr_len_addr, Addr_len_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),
    /* Hard to determine offsets for addr_len and promisc */
    chain([Name_addr, Dev_list_addr, Addr_len_addr, Promisc_addr, IP_ptr_addr], #<),
    Name_addr #>= Base_addr,
    Name_offset #= Name_addr - Base_addr,
    IP_ptr_addr #< Base_addr + 1000,
    /* dev_list offset can be hardcoded since it remains the same */
    Dev_list_addr #= Base_addr + 80,
    labeling([enum], [Name_addr, Dev_list_addr, Dev_list_val]),
    /* do not have a good constrain to narrow down ip_ptr, use its rough offset
       to reduce the search space. 
     */
    IP_ptr_addr #> Base_addr + 700,
    IP_ptr_val #> 0,
    labeling([enum], [IP_ptr_addr, IP_ptr_val]),
    query_in_device(IP_ptr_val),

    %get_time(End),
    %Time_past is End - Current,
    statistics(real_time, [End|_]),

    log("./profile/net_device", "name", Name_addr, Base_addr),
    log("./profile/net_device", "ip_ptr", IP_ptr_addr, Base_addr),
    log("./profile/net_device", "dev_list", Dev_list_addr, Base_addr),
    log("./profile/net_device", "net_device", End, Start).

query_in_device(IP_ptr_val) :-
    process_create(path('python'),
                    ['subquery.py', IP_ptr_val, "in_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).


query_mount_struct(Val, Offset) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "mount_struct", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).
