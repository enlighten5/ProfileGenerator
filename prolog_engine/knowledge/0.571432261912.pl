:- use_module(library(clpfd)).
:- style_check(-singleton).
pointer([
		[0xcb38850,0],
		[0xcb38858,283914656],
		[0xcb38860,512788352],
		[0xcb38868,283914656],
		[0xcb38870,512788352],
		[0xcb38878,0],
		[0xcb38880,213092160],
		[0xcb38888,213092640],
		[0xcb38890,214061792],
		[0xcb38898,208717130],
		[0xcb388a0,213057344],
		[0xcb388a8,213205728],
		[0xcb388b0,213092688],
		[0xcb388b8,213092208],
		[0xcb388c8,212884928],
		[0xcb388d0,208648334],
		[0xcb388d8,0],
		[0xcb388e0,0],
		[0xcb388e8,213092800],
		[0xcb388f8,0],
		[0xcb38900,0],
		[0xcb38908,0],
		[0xcb38910,0],
		[0xcb38918,0],
		[0xcb38920,213092480],
		[0xcb38928,213093344],
		[0xcb38930,214061888],
		[0xcb38938,208717145],
		[0xcb38940,213057696],
		[0xcb38948,213205888],
		[0xcb38950,213093392],
		[0xcb38958,213092528],
		[0xcb38968,212884960],
		[0xcb38970,457202976],
		[0xcb38978,0],
		[0xcb38980,0],
		[0xcb38988,213092800],
		[0xcb38998,0],
		[0xcb389a0,0],
		[0xcb389a8,0],
		[0xcb389b0,0],
		[0xcb389b8,0],
		[0xcb389c0,208717161],
		[0xcb389d0,213092880],
		[0xcb389d8,213092864],
		[0xcb389e0,449071120],
		[0xcb389e8,449069920],
		[0xcb389f0,213092640],
		[0xcb389f8,213092480],
		[0xcb38a00,209281071],
		[0xcb38a08,208717171],
		[0xcb38a10,208480463],
		[0xcb38a18,208717176],
		[0xcb38a20,0],
		[0xcb38a28,0],
		[0xcb38a30,214061792],
		[0xcb38a38,208717191],
		[0xcb38a40,0],
		[0xcb38a48,0],
		[0xcb38a50,0],
		[0xcb38a58,0],
		[0xcb38a60,0],
		[0xcb38a68,212884928],
		[0xcb38a70,0],
		[0xcb38a78,0],
		[0xcb38a80,0],
		[0xcb38a88,213093216],
		[0xcb38a98,0],
		[0xcb38aa0,0],
		[0xcb38aa8,0],
		[0xcb38ab0,0],
		[0xcb38ab8,0],
		[0xcb38ac0,0],
		[0xcb38ac8,0],
		[0xcb38ad0,214061888],
		[0xcb38ad8,208717210],
		[0xcb38ae0,0],
		[0xcb38ae8,0],
		[0xcb38af0,0],
		[0xcb38af8,0],
		[0xcb38b00,0],
		[0xcb38b08,212884960],
		[0xcb38b10,0],
		[0xcb38b18,0],
		[0xcb38b20,0],
		[0xcb38b28,213093216],
		[0xcb38b38,0],
		[0xcb38b40,0],
		[0xcb38b48,0],
		[0xcb38b50,0],
		[0xcb38b58,0],
		[0xcb38b60,208717230],
		[0xcb38b70,213093312],
		[0xcb38b78,213093280],
		[0xcb38b80,213093248],
		[0xcb38b88,213093248],
		[0xcb38b90,213093056],
		[0xcb38b98,213092896],
		[0xcb38ba0,208616532],
		[0xcb38ba8,208533086],
		[0xcb38bb0,209134875],
		[0xcb38bb8,0],
		[0xcb38bc0,208480485],
		[0xcb38bc8,208646487],
		[0xcb38bd0,208717244],
		[0xcb38bd8,0],
		[0xcb38be0,213092640],
		[0xcb38be8,213093504],
		[0xcb38bf0,214061792],
		[0xcb38bf8,208717262],
		[0xcb38c00,213057856],
		[0xcb38c08,213206048],
		[0xcb38c10,213093552],
		[0xcb38c18,213092688],
		[0xcb38c28,212884928],
		[0xcb38c30,208648334],
		[0xcb38c38,0],
		[0xcb38c40,0],
		[0xcb38c48,213093664],
		[0xcb38c58,0],
		[0xcb38c60,0],
		[0xcb38c68,0],
		[0xcb38c70,0],
		[0xcb38c78,0],
		[0xcb38c80,213093344],
		[0xcb38c88,213094208],
		[0xcb38c90,214061888],
		[0xcb38c98,208717279],
		[0xcb38ca0,213058112],
		[0xcb38ca8,213206208],
		[0xcb38cb0,213094256],
		[0xcb38cb8,213093392],
		[0xcb38cc8,212884960],
		[0xcb38cd0,457203072],
		[0xcb38cd8,0],
		[0xcb38ce0,0],
		[0xcb38ce8,213093664],
		[0xcb38cf8,0],
		[0xcb38d00,0],
		[0xcb38d08,0],
		[0xcb38d10,0],
		[0xcb38d18,0],
		[0xcb38d20,208717297],
		[0xcb38d30,213093744],
		[0xcb38d38,213093728],
		[0xcb38d40,449069728],
		[0xcb38d48,449070880],
		[0xcb38d50,213093504],
		[0xcb38d58,213093344],
		[0xcb38d60,208616532],
		[0xcb38d68,209134875],
		[0xcb38d70,208480485],
		[0xcb38d78,208717309],
		[0xcb38d80,0],
		[0xcb38d88,0],
		[0xcb38d90,214061792],
		[0xcb38d98,208717325],
		[0xcb38da0,0],
		[0xcb38da8,0],
		[0xcb38db0,0],
		[0xcb38db8,0],
		[0xcb38dc0,0],
		[0xcb38dc8,212884928],
		[0xcb38dd0,0],
		[0xcb38dd8,0],
		[0xcb38de0,0],
		[0xcb38de8,213094080],
		[0xcb38df8,0],
		[0xcb38e00,0],
		[0xcb38e08,0],
		[0xcb38e10,0],
		[0xcb38e18,0],
		[0xcb38e20,0],
		[0xcb38e28,0],
		[0xcb38e30,214061888],
		[0xcb38e38,208717343],
		[0xcb38e40,0],
		[0xcb38e48,0],
		[0xcb38e50,0],
		[0xcb38e58,0],
		[0xcb38e60,0],
		[0xcb38e68,212884960],
		[0xcb38e70,0],
		[0xcb38e78,0],
		[0xcb38e80,0],
		[0xcb38e88,213094080],
		[0xcb38e98,0],
		[0xcb38ea0,0],
		[0xcb38ea8,0],
		[0xcb38eb0,0],
		[0xcb38eb8,0],
		[0xcb38ec0,208717362],
		[0xcb38ed0,213094176],
		[0xcb38ed8,213094144],
		[0xcb38ee0,213094112],
		[0xcb38ee8,213094112],
		[0xcb38ef0,213093920],
		[0xcb38ef8,213093760],
		[0xcb38f00,208988868],
		[0xcb38f08,208533086],
		[0xcb38f10,209134875],
		[0xcb38f18,0],
		[0xcb38f20,208595125],
		[0xcb38f28,208646487],
		[0xcb38f30,208717244],
		[0xcb38f38,0],
		[0xcb38f40,213093504],
		[0xcb38f48,213094368],
		[0xcb38f50,214061792],
		[0xcb38f58,208717375],
		[0xcb38f60,213058272],
		[0xcb38f68,213206368],
		[0xcb38f70,213094416],
		[0xcb38f78,213093552],
		[0xcb38f88,212884928],
		[0xcb38f90,208648334],
		[0xcb38f98,0],
		[0xcb38fa0,0],
		[0xcb38fa8,213094528],
		[0xcb38fb8,0],
		[0xcb38fc0,0],
		[0xcb38fc8,0],
		[0xcb38fd0,0],
		[0xcb38fd8,0],
		[0xcb38fe0,213094208],
		[0xcb38fe8,213095520],
		[0xcb38ff0,214061888],
		[0xcb38ff8,208717391],
		[0xcb39000,213058560],
		[0xcb39008,213206528],
		[0xcb39010,213095568],
		[0xcb39018,213094256],
		[0xcb39028,212884960],
		[0xcb39030,458309632],
		[0xcb39038,0],
		[0xcb39040,0],
		[0xcb39048,213094528],
		[0xcb39058,0],
		[0xcb39060,0],
		[0xcb39068,0],
		[0xcb39070,0],
		[0xcb39078,0],
		[0xcb39080,208717408],
		[0xcb39090,213094608],
		[0xcb39098,213094592],
		[0xcb390a0,449070112],
		[0xcb390a8,449069392],
		[0xcb390b0,213094368],
		[0xcb390b8,213094208],
		[0xcb390c0,208988868],
		[0xcb390c8,209134875],
		[0xcb390d0,208595125],
		[0xcb390d8,208717309],
		[0xcb390e0,208717461],
		[0xcb390e8,0],
		[0xcb390f0,193792176],
		[0xcb390f8,193559664],
		[0xcb39100,0],
		[0xcb39108,0],
		[0xcb39110,459421928],
		[0xcb39118,0],
		[0xcb39130,0],
		[0xcb39138,0],
		[0xcb39140,0],
		[0xcb39148,0],
		[0xcb39150,0],
		[0xcb39158,0],
		[0xcb39160,0],
		[0xcb39168,0],
		[0xcb39170,214061792],
		[0xcb39178,208717701],
		[0xcb39180,0],
		[0xcb39188,0],
		[0xcb39190,0],
		[0xcb39198,0],
		[0xcb391a0,0],
		[0xcb391a8,212884928],
		[0xcb391b0,0],
		[0xcb391b8,0],
		[0xcb391c0,0],
		[0xcb391c8,213095072],
		[0xcb391d8,0],
		[0xcb391e0,0],
		[0xcb391e8,0],
		[0xcb391f0,0],
		[0xcb391f8,0],
		[0xcb39200,0],
		[0xcb39208,0],
		[0xcb39210,214061888],
		[0xcb39218,208717718],
		[0xcb39220,0],
		[0xcb39228,0],
		[0xcb39230,0],
		[0xcb39238,0],
		[0xcb39240,0],
		[0xcb39248,212884960],
		[0xcb39250,0],
		[0xcb39258,0],
		[0xcb39260,0],
		[0xcb39268,213095072],
		[0xcb39278,0],
		[0xcb39280,0],
		[0xcb39288,0],
		[0xcb39290,0],
		[0xcb39298,0],
		[0xcb392a0,208717736],
		[0xcb392b0,213095152],
		[0xcb392b8,213095136],
		[0xcb392c0,213095104],
		[0xcb392c8,213095104],
		[0xcb392d0,213094912],
		[0xcb392d8,213094752],
		[0xcb392e0,208651996],
		[0xcb392e8,208942567],
		[0xcb392f0,208480494],
		[0xcb392f8,208480579],
		[0xcb39310,0],
		[0xcb39318,0],
		[0xcb39320,0],
		[0xcb39328,0],
		[0xcb39330,453155480],
		[0xcb39338,453158808],
		[0xcb39340,208714737],
		[0xcb39348,0],
		[0xcb39350,193814160],
		[0xcb39358,193559664],
		[0xcb39360,0],
		[0xcb39368,213173056],
		[0xcb39370,457220328],
		[0xcb39378,0],
		[0xcb39390,0],
		[0xcb39398,0],
		[0xcb393a0,0],
		[0xcb393a8,0],
		[0xcb393b0,0],
		[0xcb393b8,0],
		[0xcb393c8,213095368],
		[0xcb393d0,213095368],
		[0xcb393d8,193855712],
		[0xcb393e8,213095400],
		[0xcb393f0,213095400],
		[0xcb393f8,193855840],
		[0xcb39408,0],
		[0xcb39418,191539280],
		[0xcb39428,458246144],
		[0xcb39438,0],
		[0xcb39440,213095488],
		[0xcb39448,213095488],
		[0xcb39450,0],
		[0xcb39458,0],
		[0xcb39460,213094368],
		[0xcb39468,213095680],
		[0xcb39470,214061792],
		[0xcb39478,208719739],
		[0xcb39480,213058720],
		[0xcb39488,213206688],
		[0xcb39490,213095728],
		[0xcb39498,213094416],
		[0xcb394a8,212884928],
		[0xcb394b0,208648334],
		[0xcb394b8,0],
		[0xcb394c0,0],
		[0xcb394c8,213095840],
		[0xcb394d8,0],
		[0xcb394e0,0],
		[0xcb394e8,0],
		[0xcb394f0,0],
		[0xcb394f8,0],
		[0xcb39500,213095520],
		[0xcb39508,213095936],
		[0xcb39510,214061888],
		[0xcb39518,208719765],
		[0xcb39520,213058976],
		[0xcb39528,213206848],
		[0xcb39530,213095984],
		[0xcb39538,213095568],
		[0xcb39548,212884960],
		[0xcb39550,457203168],
		[0xcb39558,0],
		[0xcb39560,0],
		[0xcb39568,213095840],
		[0xcb39578,0],
		[0xcb39580,0],
		[0xcb39588,0],
		[0xcb39590,0],
		[0xcb39598,0],
		[0xcb395a0,208719792],
		[0xcb395b0,213095920],
		[0xcb395b8,213095904],
		[0xcb395c0,449070976],
		[0xcb395c8,449070352],
		[0xcb395d0,213095680],
		[0xcb395d8,213095520],
		[0xcb395e0,208616532],
		[0xcb395e8,208717116],
		[0xcb395f0,208480494],
		[0xcb395f8,208719813],
		[0xcb39600,213095680],
		[0xcb39608,213096096],
		[0xcb39610,214061792],
		[0xcb39618,208719819],
		[0xcb39620,213059136],
		[0xcb39628,213207008],
		[0xcb39630,213096144],
		[0xcb39638,213095728],
		[0xcb39648,212884928],
		[0xcb39650,208648334],
		[0xcb39658,0],
		[0xcb39660,0],
		[0xcb39668,213096256],
		[0xcb39678,0],
		[0xcb39680,0],
		[0xcb39688,0],
		[0xcb39690,0],
		[0xcb39698,0],
		[0xcb396a0,213095936],
		[0xcb396a8,213096384],
		[0xcb396b0,214061888],
		[0xcb396b8,208719846],
		[0xcb396c0,213059424],
		[0xcb396c8,213207168],
		[0xcb396d0,213096432],
		[0xcb396d8,213095984],
		[0xcb396e8,212884960],
		[0xcb396f0,458306880],
		[0xcb396f8,0],
		[0xcb39700,0],
		[0xcb39708,213096256],
		[0xcb39718,0],
		[0xcb39720,0],
		[0xcb39728,0],
		[0xcb39730,0],
		[0xcb39738,0],
		[0xcb39740,208719874],
		[0xcb39750,213096352],
		[0xcb39758,213096320],
		[0xcb39760,449070448],
		[0xcb39768,449070832],
		[0xcb39770,213096096],
		[0xcb39778,213095936],
		[0xcb39780,208616532],
		[0xcb39788,208988868],
		[0xcb39790,209182249],
		[0xcb39798,0],
		[0xcb397a0,208480494],
		[0xcb397a8,208595125],
		[0xcb397b0,208748456],
		[0xcb397b8,0],
		[0xcb397c0,213096096],
		[0xcb397c8,213096544],
		[0xcb397d0,214061792],
		[0xcb397d8,208719896],
		[0xcb397e0,213059584],
		[0xcb397e8,213207328],
		[0xcb397f0,213096592],
		[0xcb397f8,213096144],
		[0xcb39808,212884928],
		[0xcb39810,208648334],
		[0xcb39818,0],
		[0xcb39820,0],
		[0xcb39828,213096704],
		[0xcb39838,0],
		[0, 0]
]).
unknown([
		[0xcb39380,92771293593600000],
		[0xcb39400,16045481047390945792],
		[0, 0]
]).
long([
		[0xcb38848,12],
		[0xcb388c0,819],
		[0xcb388f0,2],
		[0xcb38960,820],
		[0xcb38990,2],
		[0xcb389c8,8589934728],
		[0xcb38a90,2],
		[0xcb38b30,2],
		[0xcb38b68,17179869183],
		[0xcb38c20,821],
		[0xcb38c50,2],
		[0xcb38cc0,822],
		[0xcb38cf0,2],
		[0xcb38d28,8589934730],
		[0xcb38df0,2],
		[0xcb38e90,2],
		[0xcb38ec8,17179869183],
		[0xcb38f80,823],
		[0xcb38fb0,2],
		[0xcb39020,824],
		[0xcb39050,2],
		[0xcb39088,8589934729],
		[0xcb39120,5368709120000],
		[0xcb39128,10],
		[0xcb391d0,2],
		[0xcb39270,2],
		[0xcb392a8,12884901887],
		[0xcb39300,5368709120000],
		[0xcb39308,10],
		[0xcb39388,10],
		[0xcb39410,4294896303],
		[0xcb39420,203423744],
		[0xcb39430,8192],
		[0xcb394a0,825],
		[0xcb394d0,2],
		[0xcb39540,826],
		[0xcb39570,2],
		[0xcb395a8,8589934847],
		[0xcb39640,827],
		[0xcb39670,2],
		[0xcb396e0,828],
		[0xcb39710,2],
		[0xcb39748,12884902142],
		[0xcb39800,829],
		[0xcb39830,2],
		[0, 0]
]).
int([
		[0xcb38840,54],
		[0xcb38844,0],
		[0xcb38848,12],
		[0xcb3884c,0],
		[0xcb38850,0],
		[0xcb38854,0],
		[0xcb38878,0],
		[0xcb3887c,0],
		[0xcb388c0,819],
		[0xcb388c4,0],
		[0xcb388d8,0],
		[0xcb388dc,0],
		[0xcb388e0,0],
		[0xcb388e4,0],
		[0xcb388f0,2],
		[0xcb388f4,0],
		[0xcb388f8,0],
		[0xcb388fc,0],
		[0xcb38900,0],
		[0xcb38904,0],
		[0xcb38908,0],
		[0xcb3890c,0],
		[0xcb38910,0],
		[0xcb38914,0],
		[0xcb38918,0],
		[0xcb3891c,0],
		[0xcb38960,820],
		[0xcb38964,0],
		[0xcb38978,0],
		[0xcb3897c,0],
		[0xcb38980,0],
		[0xcb38984,0],
		[0xcb38990,2],
		[0xcb38994,0],
		[0xcb38998,0],
		[0xcb3899c,0],
		[0xcb389a0,0],
		[0xcb389a4,0],
		[0xcb389a8,0],
		[0xcb389ac,0],
		[0xcb389b0,0],
		[0xcb389b4,0],
		[0xcb389b8,0],
		[0xcb389bc,0],
		[0xcb389c8,136],
		[0xcb389cc,2],
		[0xcb38a20,0],
		[0xcb38a24,0],
		[0xcb38a28,0],
		[0xcb38a2c,0],
		[0xcb38a40,0],
		[0xcb38a44,0],
		[0xcb38a48,0],
		[0xcb38a4c,0],
		[0xcb38a50,0],
		[0xcb38a54,0],
		[0xcb38a58,0],
		[0xcb38a5c,0],
		[0xcb38a60,0],
		[0xcb38a64,0],
		[0xcb38a70,0],
		[0xcb38a74,0],
		[0xcb38a78,0],
		[0xcb38a7c,0],
		[0xcb38a80,0],
		[0xcb38a84,0],
		[0xcb38a90,2],
		[0xcb38a94,0],
		[0xcb38a98,0],
		[0xcb38a9c,0],
		[0xcb38aa0,0],
		[0xcb38aa4,0],
		[0xcb38aa8,0],
		[0xcb38aac,0],
		[0xcb38ab0,0],
		[0xcb38ab4,0],
		[0xcb38ab8,0],
		[0xcb38abc,0],
		[0xcb38ac0,0],
		[0xcb38ac4,0],
		[0xcb38ac8,0],
		[0xcb38acc,0],
		[0xcb38ae0,0],
		[0xcb38ae4,0],
		[0xcb38ae8,0],
		[0xcb38aec,0],
		[0xcb38af0,0],
		[0xcb38af4,0],
		[0xcb38af8,0],
		[0xcb38afc,0],
		[0xcb38b00,0],
		[0xcb38b04,0],
		[0xcb38b10,0],
		[0xcb38b14,0],
		[0xcb38b18,0],
		[0xcb38b1c,0],
		[0xcb38b20,0],
		[0xcb38b24,0],
		[0xcb38b30,2],
		[0xcb38b34,0],
		[0xcb38b38,0],
		[0xcb38b3c,0],
		[0xcb38b40,0],
		[0xcb38b44,0],
		[0xcb38b48,0],
		[0xcb38b4c,0],
		[0xcb38b50,0],
		[0xcb38b54,0],
		[0xcb38b58,0],
		[0xcb38b5c,0],
		[0xcb38b6c,3],
		[0xcb38bb8,0],
		[0xcb38bbc,0],
		[0xcb38bd8,0],
		[0xcb38bdc,0],
		[0xcb38c20,821],
		[0xcb38c24,0],
		[0xcb38c38,0],
		[0xcb38c3c,0],
		[0xcb38c40,0],
		[0xcb38c44,0],
		[0xcb38c50,2],
		[0xcb38c54,0],
		[0xcb38c58,0],
		[0xcb38c5c,0],
		[0xcb38c60,0],
		[0xcb38c64,0],
		[0xcb38c68,0],
		[0xcb38c6c,0],
		[0xcb38c70,0],
		[0xcb38c74,0],
		[0xcb38c78,0],
		[0xcb38c7c,0],
		[0xcb38cc0,822],
		[0xcb38cc4,0],
		[0xcb38cd8,0],
		[0xcb38cdc,0],
		[0xcb38ce0,0],
		[0xcb38ce4,0],
		[0xcb38cf0,2],
		[0xcb38cf4,0],
		[0xcb38cf8,0],
		[0xcb38cfc,0],
		[0xcb38d00,0],
		[0xcb38d04,0],
		[0xcb38d08,0],
		[0xcb38d0c,0],
		[0xcb38d10,0],
		[0xcb38d14,0],
		[0xcb38d18,0],
		[0xcb38d1c,0],
		[0xcb38d28,138],
		[0xcb38d2c,2],
		[0xcb38d80,0],
		[0xcb38d84,0],
		[0xcb38d88,0],
		[0xcb38d8c,0],
		[0xcb38da0,0],
		[0xcb38da4,0],
		[0xcb38da8,0],
		[0xcb38dac,0],
		[0xcb38db0,0],
		[0xcb38db4,0],
		[0xcb38db8,0],
		[0xcb38dbc,0],
		[0xcb38dc0,0],
		[0xcb38dc4,0],
		[0xcb38dd0,0],
		[0xcb38dd4,0],
		[0xcb38dd8,0],
		[0xcb38ddc,0],
		[0xcb38de0,0],
		[0xcb38de4,0],
		[0xcb38df0,2],
		[0xcb38df4,0],
		[0xcb38df8,0],
		[0xcb38dfc,0],
		[0xcb38e00,0],
		[0xcb38e04,0],
		[0xcb38e08,0],
		[0xcb38e0c,0],
		[0xcb38e10,0],
		[0xcb38e14,0],
		[0xcb38e18,0],
		[0xcb38e1c,0],
		[0xcb38e20,0],
		[0xcb38e24,0],
		[0xcb38e28,0],
		[0xcb38e2c,0],
		[0xcb38e40,0],
		[0xcb38e44,0],
		[0xcb38e48,0],
		[0xcb38e4c,0],
		[0xcb38e50,0],
		[0xcb38e54,0],
		[0xcb38e58,0],
		[0xcb38e5c,0],
		[0xcb38e60,0],
		[0xcb38e64,0],
		[0xcb38e70,0],
		[0xcb38e74,0],
		[0xcb38e78,0],
		[0xcb38e7c,0],
		[0xcb38e80,0],
		[0xcb38e84,0],
		[0xcb38e90,2],
		[0xcb38e94,0],
		[0xcb38e98,0],
		[0xcb38e9c,0],
		[0xcb38ea0,0],
		[0xcb38ea4,0],
		[0xcb38ea8,0],
		[0xcb38eac,0],
		[0xcb38eb0,0],
		[0xcb38eb4,0],
		[0xcb38eb8,0],
		[0xcb38ebc,0],
		[0xcb38ecc,3],
		[0xcb38f18,0],
		[0xcb38f1c,0],
		[0xcb38f38,0],
		[0xcb38f3c,0],
		[0xcb38f80,823],
		[0xcb38f84,0],
		[0xcb38f98,0],
		[0xcb38f9c,0],
		[0xcb38fa0,0],
		[0xcb38fa4,0],
		[0xcb38fb0,2],
		[0xcb38fb4,0],
		[0xcb38fb8,0],
		[0xcb38fbc,0],
		[0xcb38fc0,0],
		[0xcb38fc4,0],
		[0xcb38fc8,0],
		[0xcb38fcc,0],
		[0xcb38fd0,0],
		[0xcb38fd4,0],
		[0xcb38fd8,0],
		[0xcb38fdc,0],
		[0xcb39020,824],
		[0xcb39024,0],
		[0xcb39038,0],
		[0xcb3903c,0],
		[0xcb39040,0],
		[0xcb39044,0],
		[0xcb39050,2],
		[0xcb39054,0],
		[0xcb39058,0],
		[0xcb3905c,0],
		[0xcb39060,0],
		[0xcb39064,0],
		[0xcb39068,0],
		[0xcb3906c,0],
		[0xcb39070,0],
		[0xcb39074,0],
		[0xcb39078,0],
		[0xcb3907c,0],
		[0xcb39088,137],
		[0xcb3908c,2],
		[0xcb390e8,0],
		[0xcb390ec,0],
		[0xcb39100,0],
		[0xcb39104,0],
		[0xcb39108,0],
		[0xcb3910c,0],
		[0xcb39118,0],
		[0xcb3911c,0],
		[0xcb39120,0],
		[0xcb39124,1250],
		[0xcb39128,10],
		[0xcb3912c,0],
		[0xcb39130,0],
		[0xcb39134,0],
		[0xcb39138,0],
		[0xcb3913c,0],
		[0xcb39140,0],
		[0xcb39144,0],
		[0xcb39148,0],
		[0xcb3914c,0],
		[0xcb39150,0],
		[0xcb39154,0],
		[0xcb39158,0],
		[0xcb3915c,0],
		[0xcb39160,0],
		[0xcb39164,0],
		[0xcb39168,0],
		[0xcb3916c,0],
		[0xcb39180,0],
		[0xcb39184,0],
		[0xcb39188,0],
		[0xcb3918c,0],
		[0xcb39190,0],
		[0xcb39194,0],
		[0xcb39198,0],
		[0xcb3919c,0],
		[0xcb391a0,0],
		[0xcb391a4,0],
		[0xcb391b0,0],
		[0xcb391b4,0],
		[0xcb391b8,0],
		[0xcb391bc,0],
		[0xcb391c0,0],
		[0xcb391c4,0],
		[0xcb391d0,2],
		[0xcb391d4,0],
		[0xcb391d8,0],
		[0xcb391dc,0],
		[0xcb391e0,0],
		[0xcb391e4,0],
		[0xcb391e8,0],
		[0xcb391ec,0],
		[0xcb391f0,0],
		[0xcb391f4,0],
		[0xcb391f8,0],
		[0xcb391fc,0],
		[0xcb39200,0],
		[0xcb39204,0],
		[0xcb39208,0],
		[0xcb3920c,0],
		[0xcb39220,0],
		[0xcb39224,0],
		[0xcb39228,0],
		[0xcb3922c,0],
		[0xcb39230,0],
		[0xcb39234,0],
		[0xcb39238,0],
		[0xcb3923c,0],
		[0xcb39240,0],
		[0xcb39244,0],
		[0xcb39250,0],
		[0xcb39254,0],
		[0xcb39258,0],
		[0xcb3925c,0],
		[0xcb39260,0],
		[0xcb39264,0],
		[0xcb39270,2],
		[0xcb39274,0],
		[0xcb39278,0],
		[0xcb3927c,0],
		[0xcb39280,0],
		[0xcb39284,0],
		[0xcb39288,0],
		[0xcb3928c,0],
		[0xcb39290,0],
		[0xcb39294,0],
		[0xcb39298,0],
		[0xcb3929c,0],
		[0xcb392ac,2],
		[0xcb39300,0],
		[0xcb39304,1250],
		[0xcb39308,10],
		[0xcb3930c,0],
		[0xcb39310,0],
		[0xcb39314,0],
		[0xcb39318,0],
		[0xcb3931c,0],
		[0xcb39320,0],
		[0xcb39324,0],
		[0xcb39328,0],
		[0xcb3932c,0],
		[0xcb39348,0],
		[0xcb3934c,0],
		[0xcb39360,0],
		[0xcb39364,0],
		[0xcb39378,0],
		[0xcb3937c,0],
		[0xcb39380,0],
		[0xcb39388,10],
		[0xcb3938c,0],
		[0xcb39390,0],
		[0xcb39394,0],
		[0xcb39398,0],
		[0xcb3939c,0],
		[0xcb393a0,0],
		[0xcb393a4,0],
		[0xcb393a8,0],
		[0xcb393ac,0],
		[0xcb393b0,0],
		[0xcb393b4,0],
		[0xcb393b8,0],
		[0xcb393bc,0],
		[0xcb393c0,64],
		[0xcb393c4,0],
		[0xcb393e0,64],
		[0xcb393e4,0],
		[0xcb39400,512],
		[0xcb39408,0],
		[0xcb3940c,0],
		[0xcb39414,0],
		[0xcb39424,0],
		[0xcb39430,8192],
		[0xcb39434,0],
		[0xcb39438,0],
		[0xcb3943c,0],
		[0xcb39450,0],
		[0xcb39454,0],
		[0xcb39458,0],
		[0xcb3945c,0],
		[0xcb394a0,825],
		[0xcb394a4,0],
		[0xcb394b8,0],
		[0xcb394bc,0],
		[0xcb394c0,0],
		[0xcb394c4,0],
		[0xcb394d0,2],
		[0xcb394d4,0],
		[0xcb394d8,0],
		[0xcb394dc,0],
		[0xcb394e0,0],
		[0xcb394e4,0],
		[0xcb394e8,0],
		[0xcb394ec,0],
		[0xcb394f0,0],
		[0xcb394f4,0],
		[0xcb394f8,0],
		[0xcb394fc,0],
		[0xcb39540,826],
		[0xcb39544,0],
		[0xcb39558,0],
		[0xcb3955c,0],
		[0xcb39560,0],
		[0xcb39564,0],
		[0xcb39570,2],
		[0xcb39574,0],
		[0xcb39578,0],
		[0xcb3957c,0],
		[0xcb39580,0],
		[0xcb39584,0],
		[0xcb39588,0],
		[0xcb3958c,0],
		[0xcb39590,0],
		[0xcb39594,0],
		[0xcb39598,0],
		[0xcb3959c,0],
		[0xcb395a8,255],
		[0xcb395ac,2],
		[0xcb39640,827],
		[0xcb39644,0],
		[0xcb39658,0],
		[0xcb3965c,0],
		[0xcb39660,0],
		[0xcb39664,0],
		[0xcb39670,2],
		[0xcb39674,0],
		[0xcb39678,0],
		[0xcb3967c,0],
		[0xcb39680,0],
		[0xcb39684,0],
		[0xcb39688,0],
		[0xcb3968c,0],
		[0xcb39690,0],
		[0xcb39694,0],
		[0xcb39698,0],
		[0xcb3969c,0],
		[0xcb396e0,828],
		[0xcb396e4,0],
		[0xcb396f8,0],
		[0xcb396fc,0],
		[0xcb39700,0],
		[0xcb39704,0],
		[0xcb39710,2],
		[0xcb39714,0],
		[0xcb39718,0],
		[0xcb3971c,0],
		[0xcb39720,0],
		[0xcb39724,0],
		[0xcb39728,0],
		[0xcb3972c,0],
		[0xcb39730,0],
		[0xcb39734,0],
		[0xcb39738,0],
		[0xcb3973c,0],
		[0xcb39748,254],
		[0xcb3974c,3],
		[0xcb39798,0],
		[0xcb3979c,0],
		[0xcb397b8,0],
		[0xcb397bc,0],
		[0xcb39800,829],
		[0xcb39804,0],
		[0xcb39818,0],
		[0xcb3981c,0],
		[0xcb39820,0],
		[0xcb39824,0],
		[0xcb39830,2],
		[0xcb39834,0],
		[0xcb39838,0],
		[0xcb3983c,0],
		[0, 0]
]).
string_val([
		[0xcb38840,54],
		[0xcb393c0,64],
		[0xcb393e0,64],
		[0, 0]
]).
/* This file contains recursive predicates */
:- use_module(library(clpfd)).
:- use_module(reif).
:- style_check(-singleton).

isTrue([X, Y]):-
    X == 49.

isTrue([X|Tail]):-
    isTrue(Tail).

log(File_name, Name, Addr, Base):-
    Offset #= Addr - Base,
    open(File_name, append, Stream),
    write(Stream, Name),
    write(Stream, ':'),
    write(Stream, Offset),
    nl(Stream),
    close(Stream).

possible_task_struct(Base_addr) :-
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM2_addr, Pid_addr, Tgid_addr, Real_parent_addr, Parent_addr , Child_addr, 
           Group_leader_addr, Thread_group_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    %MM2_addr #> Base_addr + 1000,
    Tasks_addr #> MM2_addr - 100,
    %FS_struct_addr #< Base_addr + 4000,
    Tgid_addr #= Pid_addr + 4,
    Real_parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr - 8,
    Child_addr #= Parent_addr + 8,
    %FIXME This may be too strong
    Group_leader_addr #=< Child_addr +32,
    %Comm_addr #= Base_addr + 1656,
    %Tasks_addr #= Base_addr + 1072,
    %FS_struct_addr #= Base_addr + 2640,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    % make query after labeling
    MM2_val #> 0,
    integer(MM2_val),
    
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val,  Comm_addr, Comm_val ]),

    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_parent_addr, Real_parent_val, Group_leader_addr, Group_leader_val]),
    Real_parent_val #> 0,
    Group_leader_val #> 0,
    query_ts(Real_parent_val, Comm_offset, Tasks_offset),
    query_ts(Group_leader_val, Comm_offset, Tasks_offset),

    labeling([enum], [Cred_addr, Cred_val]),
    Cred_val #> 0,
    query_cred(Cred_val),

    labeling([enum], [FS_struct_addr, FS_struct_val]),
    FS_struct_val #> 0,
    %query_fs_struct(FS_struct_val),



    get_time(End),
    Time_past is End - Current,
    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    log("profile.txt", "tasks", Tasks_addr, Base_addr),
    log("profile.txt", "mm_struct", MM2_addr, Base_addr),
    log("profile.txt", "comm", Comm_addr, Base_addr),
    log("profile.txt", "parent", Parent_addr, Base_addr),
    log("profile.txt", "group_leader", Group_leader_addr, Base_addr),
    log("profile.txt", "cred", Cred_addr, Base_addr),

    
    print_nl('tasks offset', Tasks_offset),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).

possible_string_pointer(Base_addr) :-
    /* Verify if this pointer points to a stirng */
    string_val(Str),
    Str_profile = [
        [Name_addr, Name_val]
    ],
    tuples_in(Str_profile, Str),
    Name_addr #= Base_addr.

query_string_pointer(Val) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "string_pointer"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_mount_struct(Base_addr, Offset) :-
    pointer(Ptr),
    Ptr_profile = ([
        [Mnt_devname_addr, Mnt_devname_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Mnt_devname_addr #= Base_addr + Offset,
    labeling([enum], [Mnt_devname_addr, Mnt_devname_val]),
    query_string_pointer(Mnt_devname_val).



possible_kernel_param(Base_addr) :-
    string_val(Str),
    Str_profile = [
        [Name_addr, Name_val]
    ],
    tuples_in(Str_profile, Str),
    Name_addr #= Base_addr.

possible_in_device(Base_addr) :-
    /* in_ifaddr remains the same across kernel versions 
       but we need this query to find ip_ptr in net_device struct
    */
    /*
        struct net_device *dev;
        int               refcnt;
        int               dead;
        struct in_ifaddr  *ifa_list;
    */
    pointer(Ptr),
    int(Int),
    Ptr_profile = ([
        [Dev_addr, Dev_val],
        [Ifa_list_addr, Ifa_list_val]
    ]),
    Int_profile = ([
        [Refcnt_addr, Refcnt_val],
        [Dead_addr, Dead_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Dead_addr #= Refcnt_addr + 4,
    chain([Dev_addr, Refcnt_addr, Dead_addr, Ifa_list_addr], #<),
    Dev_addr #= Base_addr,
    Ifa_list_addr #= Base_addr + 16,
    labeling([enum], [Ifa_list_addr, Ifa_list_val]),

    process_create(path('python'),
                    ['subquery.py', Ifa_list_val, "in_ifaddr"],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_in_ifaddr(Base_addr) :-
    /* in_ifaddr remains the same across kernel versions */
    pointer(Ptr),
    Ptr_profile = ([
        [Hash_addr, Hash_val],
        [Ifa_next_addr, Ifa_next_val],
        [Ifa_dev_addr, Ifa_dev_val],
        [Rcu_head_addr, Rcu_head_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([Hash_addr, Ifa_next_addr, Ifa_dev_addr, Rcu_head_addr], #<),
    Hash_addr #= Base_addr,
    Ifa_next_addr #= Hash_addr + 16,
    Ifa_dev_addr #= Ifa_next_addr + 8,
    Rcu_head_addr #= Ifa_dev_addr + 8,
    labeling([enum], [Hash_addr, Ifa_next_addr, Ifa_dev_addr, Rcu_head_addr]).



possible_mm_struct(Current_addr) :- 
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    % TODO: ADD vm_area_struct *mmap
    Ptr_profile = [
        [Mmap_addr, Mmap_val],
        [Pgd_addr, Pgd_val]  
    ],
    Ulong_profile = [
        [Mmap_base_addr, Mmap_base_val],
        [Mmap_legacy_base_addr, Mmap_legacy_base_val],
        [Task_size_addr, Task_size_val],
        [High_vm_end_addr, High_vm_end_val],
        [Start_brk_addr, Start_brk_val],
        [Brk_addr, Brk_val],
        [Start_stack_addr, Start_stack_val],
        [ARG_start_addr, ARG_start_val]
    ],
    Mmap_addr #= Current_addr,


    Mmap_base_addr #> Mmap_addr,
    %FIXME mmap_base need more value constraint, because we removed mmap_legacy_base and highest_vm_end.
    Mmap_base_val #> 0x7f0000000000,
    %FIXME in old linux version, e.g., there is no mmap_legacy_base and highest_vm_enb
    %chain([Mmap_base_addr, Mmap_legacy_base_addr, Task_size_addr, High_vm_end_addr, Pgd_addr], #<),
    chain([Mmap_base_addr, Task_size_addr, Pgd_addr], #<),

    %FIXME: This rule may be too strong
    %High_vm_end_addr #= Mmap_base_addr + 24, 
    Pgd_addr #> Task_size_addr,
    Pgd_addr #=< Task_size_addr + 40,
    %FIXME: This rule may not be true for other mm_struct.
    Task_size_val #>= 0x7ffffffff000,

    %Mmap_base_addr #= Current_addr + 40,
    %Mmap_legacy_base_addr #= Current_addr + 40,
    %Task_size_addr #= Current_addr + 48,
    %High_vm_end_addr #= Current_addr + 72,

    Start_brk_addr #> Pgd_addr,
    Start_stack_val #> 0x7ff000000000,
    % TODO: Convert this to index comparison. 
    ARG_start_addr #< Current_addr + 500,
    chain([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr], #<),
    ARG_start_addr #= Start_brk_addr + 24,
    Brk_val #< 0x7ff000000000,
    ARG_start_val #> 0x7ff000000000,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),


    labeling([enum], [Mmap_addr, Mmap_val, Mmap_base_addr, Pgd_addr, Pgd_val]),
    Mmap_val #> 0,
    Pgd_val #> 0,
    
    process_create(path('python'),
                    ['subquery.py', Mmap_val, "vm_area_struct", 2],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    label([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr]),
    statistics(real_time, [End|_]),

    log("./profile/mm_struct", "mmap", Mmap_addr, Current_addr),
    log("./profile/mm_struct", "mmap_base", Mmap_base_addr, Current_addr),
    log("./profile/mm_struct", "pgd", Pgd_addr, Current_addr),
    log("./profile/mm_struct", "start_brk", Start_brk_addr, Current_addr),
    log("./profile/mm_struct", "brk", Brk_addr, Current_addr),
    log("./profile/mm_struct", "start_stack", Start_stack_addr, Current_addr),
    log("./profile/mm_struct", "arg_start", ARG_start_addr, Current_addr),
    log("./profile/mm_struct", "mm_struct", End, Start).


possible_vm_area_struct(Base_addr, Level) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [VM_next_addr, VM_next_val],
        [VM_file_addr, VM_file_val]
    ],
    Ulong_profile = [
        [VM_start_addr, VM_start_val],
        [VM_end_addr, VM_end_val],
        [VM_flag_addr, VM_flag_val]
        /*VM_pgoff is 0, and we do not consider 0 as ulong*/
        %[VM_pgoff_addr, VM_pgoff_val]
    ],
    VM_start_addr #>= Base_addr,
    chain([VM_start_addr, VM_end_addr, VM_next_addr, VM_flag_addr, VM_file_addr], #<),
    VM_end_addr #= VM_start_addr + 8,
    VM_next_addr #= VM_end_addr + 8,
    VM_next_addr #< Base_addr + 32,
    VM_file_addr #< Base_addr + 180,
    VM_pgoff_addr #= VM_file_addr - 8,
    VM_flag_val #< 0x88888888,
    VM_file_addr #= Base_addr + 160,

    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    %FIXME: VM_flag may need value constraints.

    label([VM_next_addr, VM_next_val]),
    /* vm_file maybe zero! */
    labeling([enum], [VM_start_addr, VM_end_addr, VM_flag_addr, VM_pgoff_addr, VM_file_addr, VM_file_val]),
    /*
    VM_file_val #> 0,
    
    process_create(path('python'),
                ['subquery.py', VM_file_val, "vm_file"],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/
    statistics(real_time, [End|_]),

    log("./profile/vm_area_struct", "vm_start", VM_start_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_end", VM_end_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_next", VM_next_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_flag", VM_flag_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_pgoff", VM_pgoff_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_file", VM_file_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_area_struct", End, Start).

check_vm_area_struct(Base_addr, Level) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "vm_area_struct", Level],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vm_file(Base_addr) :-
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [Vfs_mount_addr, Vfs_mount_val],
        [Dentry_addr, Dentry_val],
        [F_op_addr, F_op_val]
    ],
    tuples_in(Ptr_profile, Ptr),
    Vfs_mount_addr #> Base_addr,
    Dentry_addr #= Vfs_mount_addr + 8,
    Dentry_addr #< Base_addr + 40,
    Vfs_mount_val #> 0,
    Dentry_val #> 0,
    F_op_addr #= Base_addr + 40, 
    F_op_val #> 0,
    chain([Vfs_mount_addr, Dentry_addr, F_op_addr], #<),
    labeling([enum], [Vfs_mount_val, Dentry_val, F_op_addr, F_op_val]),


    process_create(path('python'),
                    ['subquery.py', Vfs_mount_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    /*
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/
    

    %query_file_operation(F_op_addr),

    log("./profile/file", "vfs_mount", Vfs_mount_addr, Base_addr),
    log("./profile/file", "dentry", Dentry_addr, Base_addr),
    log("./profile/file", "f_op", F_op_addr, Base_addr).



query_file_operation(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result).

possible_name_pointer(Val, Name_offset) :-
    /* The value at val+name_offset is a string pointer */
    current_predicate(pointer/1),
    pointer(Ptr),
    Ptr_profile = ([
        [Name_addr, Name_val]
    ]),
    Name_addr #= Val + Name_offset,
    tuples_in(Ptr_profile, Ptr),
    labeling([enum], [Name_addr, Name_val]),
    query_string_pointer(Name_val).

possible_vfs_mount(Base_addr) :-
    pointer(Ptr),
    int(Int),
    Ptr_profile = [
        [Dentry_addr, Dentry_val],
        [Mnt_sb_addr, Mnt_sb_val]
    ],
    Int_profile = [
        [Mnt_flags_addr, Mnt_flags_val]
    ],
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Dentry_addr #= Base_addr,
    Dentry_val #> 0,
    Mnt_flags_addr #= Dentry_addr + 16,
    Mnt_flags_val #>= 0,
    Mnt_sb_val #> 0,
    chain([Dentry_addr, Mnt_sb_addr, Mnt_flags_addr], #<),
    label([Dentry_addr, Dentry_val, Mnt_flags_addr, Mnt_flags_val]).
 
possible_dentry(Base_addr) :-
    /*
        struct dentry *d_parent;
        struct qstr d_name -> char *name; it's a name pointer
        struct inode *d_inode;
        unsigned char d_iname[LEN];
        const struct dentry_operations *d_op;
        struct list_head d_child;
        struct list_head d_subdirs;
        union {
	        struct hlist_node d_alias;
	        struct rcu_head d_rcu;
        } d_u;
    */
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    string_val(Str),
    Ptr_profile = [
        [Dparent_addr, Dparent_val],
        [Dname_addr, Dname_val],
        [D_inode_addr, D_inode_val],
        [D_op_addr, D_op_val],
        [Dchild_addr, Dchild_val],
        [D_subdirs_addr, D_subdirs_val]
    ],
    Str_profile = [
        [D_iname_addr, D_iname_val]
    ],
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    Dparent_addr #> Base_addr,
    chain([Dparent_addr, Dname_addr, D_inode_addr, D_iname_addr, 
            D_op_addr, Dchild_addr, D_subdirs_addr], #<),
    D_subdirs_addr #= Dchild_addr + 16,
    D_subdirs_addr #< Base_addr + 200,
    Dparent_val #> 0,
    labeling([enum], [Dname_addr, Dname_val]),
    query_string_pointer(Dname_val),
    labeling([enum], [D_iname_addr, D_iname_val]),
    D_iname_offset #= D_iname_addr - Base_addr,
    Dname_offset #= Dname_addr - Base_addr,
    labeling([enum], [Dparent_addr, Dparent_val]),
    Parent_dname #= Dparent_val + Dname_offset,
    process_create(path('python'),
                    ['subquery.py', Parent_dname, "name_pointer", Dname_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    %labeling([enum], [D_inode_addr, D_inode_val]),
    %query_inode(D_inode_val),

    labeling([enum], [Dchild_addr, Dchild_val]),
    Dchild_offset #= Dchild_addr - Base_addr,
    Dchild_init #= Dchild_val - Dchild_offset,
    query_name_pointer(Dchild_init, Dname_offset),

    /* This can be hardcoded as d_child_addr + 16 */
    labeling([enum], [D_subdirs_addr, D_subdirs_val]),
    Dsubdirs_offset #= D_subdirs_addr - Base_addr,
    D_subdirs_init #= D_subdirs_val - Dsubdirs_offset,
    query_name_pointer(D_subdirs_init, Dname_offset),

    statistics(real_time, [End|_]),

    log("./profile/dentry", "parent", Dparent_addr, Base_addr),
    log("./profile/dentry", "inode", D_inode_val, Base_addr),
    log("./profile/dentry", "d_iname", D_iname_addr, Base_addr),
    log("./profile/dentry", "dchild", Dchild_addr, Base_addr),
    log("./profile/dentry", "d_subdirs", D_subdirs_addr, Base_addr),
    log("./profile/dentry", "dentry", End, Start).

query_inode(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_inode(Base_addr) :-
    /*
        struct inode_operations *i_op;
        struct super_block      *i_sb;
        struct address_space    *i_mapping;
    */
    statistics(real_time, [Start|_]),

    pointer(Ptr),
    long(Ulg),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [I_op_addr, I_op_val],
        [I_sb_addr, I_sb_val],
        [I_mapping_addr, I_mapping_val],
        [I_fop_addr, I_fop_val]
    ]),
    Ulong_profile = ([
        /* i_mode is actually not long type. */
        [I_mode_addr, I_mode_val],
        [I_ino_addr, I_ino_val],
        [I_size_addr, I_size_val],
        [I_atime_addr, I_atime_val],
        [_I_atime_addr, _I_atime_val],
        [I_mtime_addr, I_mtime_val],
        [I_ctime_addr, I_ctime_val],
        [_I_ctime_addr, _I_ctime_val]
    ]),
    Int_profile = ([
        [I_uid_addr, I_uid_val],
        [I_gid_addr, I_gid_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    tuples_in(Int_profile, Int),

    chain([I_mode_addr, I_uid_addr, I_gid_addr, I_op_addr, I_sb_addr, I_mapping_addr, I_ino_addr,
           I_size_addr, I_atime_addr, _I_atime_addr, I_mtime_addr, I_ctime_addr, _I_ctime_addr, I_fop_addr], #<),

    I_mode_addr #= Base_addr,
    I_mode_val #> 0,
    I_gid_addr #= I_mode_addr + 8,
    %I_op_addr #= Base_addr + 32,
    I_op_addr #=< Base_addr + 32,
    I_op_val #> 0,
    labeling([enum], [I_op_addr, I_op_val]),
    query_inode_operations(I_op_val),

    I_sb_addr #= I_op_addr + 8,
    I_mapping_addr #= I_sb_addr + 8,
    I_atime_addr #= I_size_addr + 8,
    I_mtime_addr #= I_atime_addr + 16,
    I_ctime_addr #= I_mtime_addr + 16,
    _I_ctime_addr #= I_ctime_addr + 8,
    I_size_val #> 0,
    I_atime_val #> 4096,
    I_mtime_val #> 4096,
    I_ctime_val #> 4096,
    I_fop_addr #< Base_addr + 400,
    labeling([enum], [I_sb_addr, I_mapping_addr, I_atime_addr, I_mtime_addr, I_ctime_addr]),


    labeling([enum], [I_fop_addr, I_fop_val]),
    I_fop_val #> 0,
    query_inode_operations(I_fop_val),
    statistics(real_time, [End|_]),


    log("./profile/inode", "I_mode_addr", I_mode_addr, Base_addr),
    log("./profile/inode", "I_uid_addr", I_uid_addr, Base_addr),
    log("./profile/inode", "I_gid_addr", I_gid_addr, Base_addr),
    log("./profile/inode", "I_op_addr", I_op_addr, Base_addr),
    log("./profile/inode", "I_sb_addr", I_sb_addr, Base_addr),
    log("./profile/inode", "I_mapping_addr", I_mapping_addr, Base_addr),
    log("./profile/inode", "I_size_addr", I_size_addr, Base_addr),
    log("./profile/inode", "I_atime_addr", I_atime_addr, Base_addr),
    log("./profile/inode", "I_mtime_addr", I_mtime_addr, Base_addr),
    log("./profile/inode", "I_ctime_addr", I_ctime_addr, Base_addr),
    log("./profile/inode", "I_fop_addr", I_fop_addr, Base_addr),
    log("./profile/inode", "inode", End, Start).


query_inode_operations(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_name_pointer(Base_addr, Offset) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "name_pointer", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_inode_operations(Base_addr) :-
    /* a bunch of function pointers. */
    pointer(Ptr),
    Ptr_profile = ([
        [_L1_addr, _L1_val],
        [_L2_addr, _L2_val],
        [_L3_addr, _L3_val],
        [_L4_addr, _L4_val],
        [_L5_addr, _L5_val],
        [_L6_addr, _L6_val],
        [_L7_addr, _L7_val],
        [_L8_addr, _L8_val],
        [_L9_addr, _L9_val],
        [_L10_addr, _L10_val],
        [_L11_addr, _L11_val],
        [_L12_addr, _L12_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([_L1_addr, _L2_addr, _L3_addr, _L4_addr, _L5_addr, _L6_addr, _L7_addr,
           _L8_addr, _L9_addr, _L10_addr, _L11_addr, _L12_addr], #<),
    _L1_addr #= Base_addr,
    _L12_addr #= Base_addr + 88.




possible_nothing() :-

    %log("profile.txt", "dentry addr", Base_addr, 0),
    Dparent_addr #> Base_addr,
    Dname_addr #> 0,
    Dname_addr #< Base_addr + 200,
    %Dname_addr #= Base_addr + 160,
    %FIXME This child rule is not applicable for old kernel version. 
    %chain([Dparent_addr, Dname_addr, Dchild_addr], #<),
    %Dchild_addr #< Base_addr + 200,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    labeling([enum], [Dparent_addr, Dparent_val, Dname_addr, Dchild_addr, Dchild_val]),
    Dname_offset #= Dname_addr - Base_addr,
    integer(Dname_offset),
    Dparent_val #> 0,
    
    %FIXME d_parent may not be initialized
    /*process_create(path('python'),
                ['subquery.py', Dparent_val, "d_entry", Dname_offset],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/

    %FIXME: may need to find another way for all list_head. 
    /*Dchild_offset #= Dchild_addr - Base_addr,
    integer(Dchild_offset),
    Dchild_base #= Dchild_val - Dchild_offset,
    integer(Dchild_base),
    Dchild_base #> 0,
    process_create(path('python'),
                ['subquery.py', Dchild_base, "d_entry", Dname_offset],
                [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    statistics(real_time, [End|_]).
/*
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    log("profile.txt", "d_parent", Dparent_addr, Base_addr),
    log("profile.txt", "d_child", Dchild_addr, Base_addr),
    log("profile.txt", "dentry time", End, Start).
*/
possible_d_entry(Base_addr, Dname_offset) :-
    current_predicate(string_val/1),
    string_val(Str),
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    Dname_addr #= Base_addr + Dname_offset,
    tuples_in(Str_profile, Str),
    label([Dname_addr]).

possible_list_head(Tasks_val, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_val, Tasks_addr]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],
    Comm_addr #= Tasks_val - Tasks_offset + Comm_offset,
    Tasks_addr #\= Tasks_val,
    tuples_in(Str_profile, Str),
    tuples_in(Ptr_profile, Ptr),
    label([Comm_addr]).

possible_ts(Base_addr, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_addr, Tasks_val]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],

    Comm_addr #= Base_addr + Comm_offset,
    Tasks_addr #= Base_addr + Tasks_offset,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),

    label([Tasks_val]),
    
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "list_head", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_cred(Base_addr) :-
    statistics(real_time, [Start|_]),

    int(Int),
    long(Ulg),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3],
        [Addr4, Val4],
        [Addr5, Val5],
        [Addr6, Val6],
        [Addr7, Val7],
        [Addr8, Val8],
        [Addr9, Val9]
    ],
    %FIXME For now, this rule is hard-coded because we do not consider 0 as a unsign long number. 
    %So that for cred whos val10 is 0, this rule does not apply.
    /*Ulong_profile = [
        [Addr10, Val10],
        [Addr11, Val11]
    ],*/
    Addr1 #> Base_addr,
    %chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9, Addr10, Addr11], #<),
    chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9], #<),
    Addr1 #= Base_addr + 4,
    Addr9 #= Addr1 + 32,
    %Addr11 #< Base_addr + 120,
    tuples_in(Int_profile, Int),
    %tuples_in(Ulong_profile, Ulg),
    statistics(real_time, [End|_]),
    labeling([enum], [Addr1, Addr2, Addr5, Addr6]),
    log("./profile/cred", "cred", End, Start),
    log('./profile/cred', "uid", Addr1, Base_addr),
    log('./profile/cred', "gid", Addr2, Base_addr),
    log('./profile/cred', "euid", Addr5, Base_addr),
    log('./profile/cred', "egid", Addr6, Base_addr).

possible_fs_struct(Base_addr) :-
    statistics(real_time, [Start|_]),
    int(Int),
    pointer(Ptr),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3]
    ],
    Ptr_profile = [
        [Root_addr, Root_val],
        [PWD_addr, PWD_val]
    ],
    Addr1 #>= Base_addr,
    chain([Addr1, Addr2, Addr3, Root_addr, PWD_addr], #<),
    PWD_addr #= Root_addr + 16,
    PWD_addr #< Base_addr + 50,
    tuples_in(Int_profile, Int),
    tuples_in(Ptr_profile, Ptr),
    Root_val #> 0,
    PWD_val #> 0,
    label([Root_addr, Root_val]),
    
    process_create(path('python'),
                    ['subquery.py', Root_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    label([PWD_addr, PWD_val]),
    process_create(path('python'),
                    ['subquery.py', PWD_val, "dentry"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    statistics(real_time, [End|_]),
    log("profile.txt", "fs time", End, Start),
    log('profile.txt', "Root", Root_addr, Base_addr),
    log('profile.txt', "pwd", PWD_addr, Base_addr),
    log('profile.txt', "fs_struct", End, Start).

possible_mount(Base_addr) :-
    /* struct hlist_head mnt_hash;
       struct mount *mnt_parent; 
       struct vfsmount mnt;
       struct list_head mnt_mounts;
       struct list_head mnt_child;
       struct list_head mnt_instance;
       const char *mnt_devname;
       struct list_head mnt_list;
    */
    statistics(real_time, [Start|_]),
    %get_time(Current),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Mnt_hash_addr, Mnt_hash_val],
        [Mnt_parent_addr, Mnt_parent_val],
        [Vfsmount_addr, Vfsmount_val],
        [Mnt_child_addr, Mnt_child_val],
        [Mnt_devname_addr, Mnt_devname_val],
        [Mnt_list_addr, Mnt_list_val]
    ]),
    Int_profile = ([
        [Mnt_flags_addr, Mnt_flags_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    /* Order Invariants */
    chain([Mnt_hash_addr, Mnt_parent_addr, Vfsmount_addr, Mnt_flags_addr,
            Mnt_child_addr, Mnt_devname_addr, Mnt_list_addr], #<),
    Mnt_hash_addr #= Base_addr,
    /* mnt_hash_addr is a list_head */
    Mnt_parent_addr #> Base_addr + 8,
    Mnt_list_addr - Base_addr #< 200,
    labeling([enum], [Mnt_devname_addr, Mnt_devname_val]),
    query_string_pointer(Mnt_devname_val),
    Mnt_devname_offset #= Mnt_devname_addr - Base_addr,
    /* the offset from mnt_mounts to mnt_list remains the same, so it's safe to use fixed offsets. */
    Mnt_child_addr #= Mnt_devname_addr - 32,
    Mnt_list_addr #= Mnt_devname_addr + 8,
    Mnt_flags_addr #= Vfsmount_addr + 16,
    labeling([enum], [Mnt_child_addr, Mnt_list_addr, Vfsmount_addr, Vfsmount_val]),
    /* Seems unnecessary 
    Mnt_list_offset #= Mnt_list_addr - Base_addr,
    Mnt_list #= Mnt_list_val - Mnt_list_offset,
    Mnt_list #> 0,
    query_mount_struct(Mnt_list, Mnt_devname_offset),
    */
    Vfsmount_val #>= 0,
    /* Here we can infer layout of dentry structure 
       Maybe need to infer using another dentry, somehow it may not be initialized. 
    */
    Vfsmount_addr #> 0,
    %query_dentry(Vfsmount_addr),

    labeling([enum], [Mnt_parent_addr, Mnt_parent_val]),
    /* To verify another mount struct, only one-level query, so it does not direct call query_mount recursively */
    
    query_mount_struct(Mnt_parent_val, Mnt_devname_offset),
    

    %get_time(End),
    %Time_past is End - Current,
    statistics(real_time, [End|_]),
    log("./profile/mount", "mnt_hash", Mnt_hash_addr, Base_addr),
    log("./profile/mount", "mnt_parent", Mnt_parent_addr, Base_addr),
    log("./profile/mount", "mnt_child", Mnt_child_addr, Base_addr),
    log("./profile/mount", "mnt_devname", Mnt_devname_addr, Base_addr),
    log("./profile/mount", "mnt_list", Mnt_list_addr, Base_addr),
    log("./profile/mount", "mount", End, Start).


possible_neigh_hash_table(Base_addr) :-
    /* neighbour **hash_buckets */
    pointer(Ptr),
    Ptr_profile = ([
        [Hash_buckest_addr, Hash_buckets_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Hash_buckest_addr #= Base_addr,
    labeling([enum], [Hash_buckest_addr, Hash_buckets_val]),
    process_create(path('python'),
                    ['subquery.py', Hash_buckets_val, "hash_buckets"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_hash_buckets(Base_addr) :-
    /* hash_buckets is an array of neighbour pointer 
       note that not all element are non-zero
    */
    pointer(Ptr),
    Ptr_profile = ([
        [Neighbour_addr, Neighbour_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Neighbour_addr #< Base_addr + 32,
    Neighbour_val #> 0,
    labeling([enum], [Neighbour_addr, Neighbour_val]),
    process_create(path('python'),
                    ['subquery.py', Neighbour_val, "neighbour"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_neighbour(Base_addr) :-
    /* net_device *dev at offset 464 */
    pointer(Ptr),
    Ptr_profile = ([
        [Dev_addr, Dev_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Dev_addr #>= Base_addr + 368,
    Dev_addr #=< Base_addr + 376,
    labeling([enum], [Dev_addr, Dev_val]),
    process_create(path('python'),
                    ['subquery.py', Dev_val, "net_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).


possible_net_device(Base_addr) :- 
    /*
        char             name[NAMSIZ];
        struct list_head dev_list;
        unsigned char    addr_len;
        unsigned int     promiscuity;
        struct in_device *ip_ptr;
    */
    statistics(real_time, [Start|_]),
    %get_time(Current),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Dev_list_addr, Dev_list_val],
        [IP_ptr_addr, IP_ptr_val]
    ]),
    Str_profile = ([
        [Name_addr, Name_val]
    ]),
    Int_profile = ([
        [Promisc_addr, Promisc_val],
        [Addr_len_addr, Addr_len_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),
    /* Hard to determine offsets for addr_len and promisc */
    chain([Name_addr, Dev_list_addr, Addr_len_addr, Promisc_addr, IP_ptr_addr], #<),
    Name_addr #>= Base_addr,
    Name_offset #= Name_addr - Base_addr,
    IP_ptr_addr #< Base_addr + 1000,
    /* dev_list offset can be hardcoded since it remains the same */
    Dev_list_addr #= Base_addr + 80,
    labeling([enum], [Name_addr, Dev_list_addr, Dev_list_val]),
    /* do not have a good constrain to narrow down ip_ptr, use its rough offset
       to reduce the search space. 
     */
    IP_ptr_addr #> Base_addr + 700,
    IP_ptr_val #> 0,
    labeling([enum], [IP_ptr_addr, IP_ptr_val]),
    query_in_device(IP_ptr_val),

    %get_time(End),
    %Time_past is End - Current,
    statistics(real_time, [End|_]),

    log("./profile/net_device", "name", Name_addr, Base_addr),
    log("./profile/net_device", "ip_ptr", IP_ptr_addr, Base_addr),
    log("./profile/net_device", "dev_list", Dev_list_addr, Base_addr),
    log("./profile/net_device", "net_device", End, Start).

query_in_device(IP_ptr_val) :-
    process_create(path('python'),
                    ['subquery.py', IP_ptr_val, "in_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).


query_mount_struct(Val, Offset) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "mount_struct", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).
