:- use_module(library(clpfd)).
:- style_check(-singleton).
pointer([
		[0, 0]
]).
unknown([
		[0x1030d608,3377777030066743],
		[0x1030d620,6192591222678353],
		[0x1030d638,3940791410075251],
		[0x1030d650,3377777031001434],
		[0x1030d668,6192591223630311],
		[0x1030d680,3377777031409307],
		[0x1030d698,3377845750341838],
		[0x1030d6b0,3377777029944750],
		[0x1030d6c8,3377777031406417],
		[0x1030d6e0,3940791409550301],
		[0x1030d6f8,3377777030226128],
		[0x1030d710,3377777031617158],
		[0x1030d728,3940791409901148],
		[0x1030d740,3377845750195217],
		[0x1030d758,3377777030038463],
		[0x1030d770,6192591223205556],
		[0x1030d788,3377777031780897],
		[0x1030d7a0,3377845749993581],
		[0x1030d7b8,3377777029982810],
		[0x1030d7d0,3377777030041837],
		[0x1030d7e8,3377777029979433],
		[0x1030d800,6192591222764113],
		[0x1030d818,3377845749683557],
		[0x1030d830,3377777030426223],
		[0x1030d848,3377777030751288],
		[0x1030d860,3377777030119663],
		[0x1030d878,3377777031656475],
		[0x1030d890,3377777030210442],
		[0x1030d8a8,3377777031474003],
		[0x1030d8c0,6192522503183904],
		[0x1030d8d8,3377777030988377],
		[0x1030d8f0,6192591223179687],
		[0x1030d908,3377777031335345],
		[0x1030d920,3377845749714169],
		[0x1030d938,3377845750220815],
		[0x1030d950,3377845750013603],
		[0x1030d968,3377777031301233],
		[0x1030d980,3377777030349365],
		[0x1030d998,3940791409968158],
		[0x1030d9b0,3377777030413760],
		[0x1030d9c8,3377777031084438],
		[0x1030d9e0,3941341163905794],
		[0x1030d9f8,3377777031325232],
		[0x1030da10,3377777030986209],
		[0x1030da28,3377777031502388],
		[0x1030da40,3377777031467600],
		[0x1030da58,3377777030652066],
		[0x1030da70,3377777031841180],
		[0x1030da88,3377777031907239],
		[0x1030daa0,6192591223720491],
		[0x1030dab8,3377777031905483],
		[0x1030dad0,3377777030259444],
		[0x1030dae8,3377777031529619],
		[0x1030db00,3377777029959414],
		[0x1030db18,3377777030048449],
		[0x1030db30,3377777029974312],
		[0x1030db48,3377777030288044],
		[0x1030db60,3377777031661492],
		[0x1030db78,3377845749666560],
		[0x1030db90,3377777030416367],
		[0x1030dba8,3377777030105656],
		[0x1030dbc0,3377777030109719],
		[0x1030dbd8,3377777032086450],
		[0x1030dbf0,3377777030087920],
		[0x1030dc08,3377845750025196],
		[0x1030dc20,3377845750284481],
		[0x1030dc38,3377777030316073],
		[0x1030dc50,6192522503188034],
		[0x1030dc68,3377845749985334],
		[0x1030dc80,5066622596320435],
		[0x1030dc98,3377777031076604],
		[0x1030dcb0,3377777031843886],
		[0x1030dcc8,3377845749469849],
		[0x1030dce0,3377777030131103],
		[0x1030dcf8,3377845749675936],
		[0x1030dd10,3377845749524343],
		[0x1030dd28,3377777031371268],
		[0x1030dd40,3377777031709355],
		[0x1030dd58,6192591223625245],
		[0x1030dd70,3377777031274530],
		[0x1030dd88,6192591223613716],
		[0x1030dda0,3377777031006056],
		[0x1030ddb8,3377777030273327],
		[0x1030ddd0,3377845750049205],
		[0x1030dde8,3377777030425568],
		[0x1030de00,6192591222934147],
		[0x1030de18,3377845750864190],
		[0x1030de30,3377777031557451],
		[0x1030de48,3377777030349334],
		[0x1030de60,3377777031339480],
		[0x1030de78,3377777031394153],
		[0x1030de90,3377777031565520],
		[0x1030dea8,3377777030314566],
		[0x1030dec0,3377777031638831],
		[0x1030ded8,3377777030018063],
		[0x1030def0,3377777030907146],
		[0x1030df08,3377777030375160],
		[0x1030df20,6192522503175239],
		[0x1030df38,3377777031727849],
		[0x1030df50,3377777030104729],
		[0x1030df68,3940722690165858],
		[0x1030df80,3377777031815545],
		[0x1030df98,3377777031235094],
		[0x1030dfb0,3377777031450690],
		[0x1030dfc8,3377777030107654],
		[0x1030dfe0,3377777030390935],
		[0x1030dff8,3377777030245039],
		[0x1030e010,3377845749665067],
		[0x1030e028,3377777031004908],
		[0x1030e040,3940791409061605],
		[0x1030e058,3377777031064750],
		[0x1030e070,3377777031799373],
		[0x1030e088,3377777031745303],
		[0x1030e0a0,6192591223382802],
		[0x1030e0b8,6192591223527093],
		[0x1030e0d0,3377777030097086],
		[0x1030e0e8,3377777031362255],
		[0x1030e100,3377845750017198],
		[0x1030e118,3377777031489197],
		[0x1030e130,3377777031773069],
		[0x1030e148,3377845751109257],
		[0x1030e160,3377845750364974],
		[0x1030e178,3377777030848750],
		[0x1030e190,3377777030770191],
		[0x1030e1a8,3377777031507483],
		[0x1030e1c0,3377777030919878],
		[0x1030e1d8,3377777031949739],
		[0x1030e1f0,3377777031563377],
		[0x1030e208,3377777030983517],
		[0x1030e220,3377777030126414],
		[0x1030e238,6192591223610731],
		[0x1030e250,3377845749627168],
		[0x1030e268,3377777031072199],
		[0x1030e280,3377777031086066],
		[0x1030e298,3377845751164725],
		[0x1030e2b0,6192591223571165],
		[0x1030e2c8,6192591223556745],
		[0x1030e2e0,3377845750035416],
		[0x1030e2f8,6192591222736501],
		[0x1030e310,3377777030349418],
		[0x1030e328,3377845749594039],
		[0x1030e340,3377777031073589],
		[0x1030e358,3377845749977032],
		[0x1030e370,3377777031032491],
		[0x1030e388,6192591223717606],
		[0x1030e3a0,3377777030139178],
		[0x1030e3b8,6192522503184259],
		[0x1030e3d0,3377777031480541],
		[0x1030e3e8,3377777030266229],
		[0x1030e400,3377777030397662],
		[0x1030e418,3377845750345479],
		[0x1030e430,3377845750237173],
		[0x1030e448,3377777030125694],
		[0x1030e460,6192591222564994],
		[0x1030e478,3377777030377953],
		[0x1030e490,3377777031258043],
		[0x1030e4a8,3377777031629514],
		[0x1030e4c0,6192591223581944],
		[0x1030e4d8,3377777030389095],
		[0x1030e4f0,3377777030310206],
		[0x1030e508,3940791409460898],
		[0x1030e520,3377845749723176],
		[0x1030e538,3940791409395255],
		[0x1030e550,3377777030437281],
		[0x1030e568,3377777030313721],
		[0x1030e580,3377777029981425],
		[0x1030e598,3377777031531726],
		[0x1030e5b0,3377845749646117],
		[0x1030e5c8,3377777030153884],
		[0x1030e5e0,3377845749870786],
		[0x1030e5f8,3377777030402291],
		[0, 0]
]).
long([
		[0x1030d600,28],
		[0x1030d610,20642384],
		[0x1030d618,34],
		[0x1030d628,48946160],
		[0x1030d640,34173216],
		[0x1030d648,35],
		[0x1030d658,24728960],
		[0x1030d660,962],
		[0x1030d670,49193784],
		[0x1030d678,24],
		[0x1030d688,31186480],
		[0x1030d6a0,21852160],
		[0x1030d6a8,529],
		[0x1030d6b8,7005648],
		[0x1030d6c0,236],
		[0x1030d6d0,25984112],
		[0x1030d6d8,125],
		[0x1030d6e8,34183168],
		[0x1030d6f0,18],
		[0x1030d700,7324592],
		[0x1030d708,7],
		[0x1030d718,8313328],
		[0x1030d730,34403680],
		[0x1030d738,41],
		[0x1030d748,8342448],
		[0x1030d760,21897536],
		[0x1030d768,284],
		[0x1030d778,49172136],
		[0x1030d780,168],
		[0x1030d790,7048432],
		[0x1030d798,126],
		[0x1030d7a8,9102112],
		[0x1030d7b0,234],
		[0x1030d7c0,16583072],
		[0x1030d7d8,26618880],
		[0x1030d7e0,2],
		[0x1030d7f0,20266160],
		[0x1030d808,49045160],
		[0x1030d810,136],
		[0x1030d820,21850624],
		[0x1030d828,599],
		[0x1030d838,31111984],
		[0x1030d850,8234144],
		[0x1030d868,20222352],
		[0x1030d880,12945520],
		[0x1030d888,21735],
		[0x1030d898,6894048],
		[0x1030d8a0,430],
		[0x1030d8b0,21516432],
		[0x1030d8b8,177],
		[0x1030d8c8,49003808],
		[0x1030d8e0,27894976],
		[0x1030d8e8,10],
		[0x1030d8f8,49170496],
		[0x1030d910,9237200],
		[0x1030d918,217],
		[0x1030d928,21571456],
		[0x1030d930,339],
		[0x1030d940,16691760],
		[0x1030d948,312],
		[0x1030d958,21969408],
		[0x1030d960,234],
		[0x1030d970,6769664],
		[0x1030d978,584],
		[0x1030d988,7715584],
		[0x1030d990,24],
		[0x1030d9a0,34442336],
		[0x1030d9b8,20870864],
		[0x1030d9c0,808],
		[0x1030d9d0,6766032],
		[0x1030d9d8,4],
		[0x1030d9e8,34443616],
		[0x1030da00,27734848],
		[0x1030da08,164],
		[0x1030da18,30188880],
		[0x1030da30,10360960],
		[0x1030da38,3226],
		[0x1030da48,21500064],
		[0x1030da60,12731728],
		[0x1030da68,634],
		[0x1030da78,17272624],
		[0x1030da80,4392],
		[0x1030da90,8056832],
		[0x1030da98,36],
		[0x1030daa8,48784752],
		[0x1030dab0,24],
		[0x1030dac0,20884048],
		[0x1030dac8,139],
		[0x1030dad8,25620112],
		[0x1030dae0,1795],
		[0x1030daf0,7294400],
		[0x1030daf8,770],
		[0x1030db08,7989296],
		[0x1030db10,12],
		[0x1030db20,7595008],
		[0x1030db28,288],
		[0x1030db38,28477296],
		[0x1030db40,6],
		[0x1030db50,6987344],
		[0x1030db58,333],
		[0x1030db68,8325936],
		[0x1030db70,34],
		[0x1030db80,11140976],
		[0x1030db88,305],
		[0x1030db98,7868032],
		[0x1030dba0,1348],
		[0x1030dbb0,8834144],
		[0x1030dbc8,17146784],
		[0x1030dbd0,19],
		[0x1030dbe0,9248160],
		[0x1030dbe8,2307],
		[0x1030dbf8,21501824],
		[0x1030dc10,21901424],
		[0x1030dc18,499],
		[0x1030dc28,27475072],
		[0x1030dc30,164],
		[0x1030dc40,29385328],
		[0x1030dc58,49118272],
		[0x1030dc70,10709248],
		[0x1030dc78,234],
		[0x1030dc88,47314688],
		[0x1030dc90,16256],
		[0x1030dca0,7293376],
		[0x1030dca8,1020],
		[0x1030dcb8,22205024],
		[0x1030dcd0,32905744],
		[0x1030dcd8,5],
		[0x1030dce8,21952432],
		[0x1030dd00,32906272],
		[0x1030dd08,8],
		[0x1030dd18,9586832],
		[0x1030dd20,5],
		[0x1030dd30,21695872],
		[0x1030dd38,21],
		[0x1030dd48,9995696],
		[0x1030dd50,1765],
		[0x1030dd60,49192680],
		[0x1030dd68,24],
		[0x1030dd78,25955296],
		[0x1030dd90,49205880],
		[0x1030dda8,10040496],
		[0x1030ddb0,873],
		[0x1030ddc0,13264896],
		[0x1030ddc8,325],
		[0x1030ddd8,27613248],
		[0x1030dde0,211],
		[0x1030ddf0,21232464],
		[0x1030ddf8,798],
		[0x1030de08,48788432],
		[0x1030de20,21562560],
		[0x1030de28,404],
		[0x1030de38,8105536],
		[0x1030de40,240],
		[0x1030de50,7714608],
		[0x1030de58,5],
		[0x1030de68,10464736],
		[0x1030de70,2315],
		[0x1030de80,21154544],
		[0x1030de98,30657248],
		[0x1030dea0,350],
		[0x1030deb0,7273440],
		[0x1030dec8,20162736],
		[0x1030ded0,19],
		[0x1030dee0,24327104],
		[0x1030dee8,2],
		[0x1030def8,6821136],
		[0x1030df00,177],
		[0x1030df10,20374784],
		[0x1030df18,1501],
		[0x1030df28,49144288],
		[0x1030df40,28398592],
		[0x1030df48,463],
		[0x1030df58,28760512],
		[0x1030df60,2],
		[0x1030df70,38435552],
		[0x1030df78,576],
		[0x1030df88,31983536],
		[0x1030df90,2862],
		[0x1030dfa0,14332112],
		[0x1030dfa8,4036],
		[0x1030dfb8,12903024],
		[0x1030dfc0,19],
		[0x1030dfd0,32672240],
		[0x1030dfd8,19],
		[0x1030dfe8,32715312],
		[0x1030dff0,312],
		[0x1030e000,24567200],
		[0x1030e018,31729088],
		[0x1030e020,311],
		[0x1030e030,17952576],
		[0x1030e038,11928],
		[0x1030e048,34664448],
		[0x1030e050,37],
		[0x1030e060,28709648],
		[0x1030e078,22329808],
		[0x1030e080,128],
		[0x1030e090,28030064],
		[0x1030e098,398],
		[0x1030e0a8,48848928],
		[0x1030e0b0,32],
		[0x1030e0c0,48933088],
		[0x1030e0c8,16],
		[0x1030e0d8,22310896],
		[0x1030e0e0,732],
		[0x1030e0f0,22718736],
		[0x1030e108,20911008],
		[0x1030e110,302],
		[0x1030e120,21225792],
		[0x1030e128,424],
		[0x1030e138,7662256],
		[0x1030e150,32921872],
		[0x1030e158,413],
		[0x1030e168,22368096],
		[0x1030e170,167],
		[0x1030e180,28057120],
		[0x1030e188,2],
		[0x1030e198,32907584],
		[0x1030e1a0,196],
		[0x1030e1b0,12624848],
		[0x1030e1b8,41],
		[0x1030e1c8,18842464],
		[0x1030e1d0,161],
		[0x1030e1e0,19141824],
		[0x1030e1e8,1946],
		[0x1030e1f8,29883952],
		[0x1030e200,13062],
		[0x1030e210,16497712],
		[0x1030e218,34],
		[0x1030e228,21453376],
		[0x1030e240,49195032],
		[0x1030e248,24],
		[0x1030e258,10449680],
		[0x1030e260,5],
		[0x1030e270,20300576],
		[0x1030e288,24575088],
		[0x1030e290,3693],
		[0x1030e2a0,24699952],
		[0x1030e2b8,49197384],
		[0x1030e2d0,49204584],
		[0x1030e2e8,10947184],
		[0x1030e2f0,850],
		[0x1030e300,48963592],
		[0x1030e308,24],
		[0x1030e318,7715360],
		[0x1030e320,21],
		[0x1030e330,10449632],
		[0x1030e338,2],
		[0x1030e348,7181200],
		[0x1030e360,14143472],
		[0x1030e368,511],
		[0x1030e378,25235072],
		[0x1030e380,24],
		[0x1030e390,49188424],
		[0x1030e398,24],
		[0x1030e3a8,8897520],
		[0x1030e3b0,15],
		[0x1030e3c0,49007328],
		[0x1030e3d8,13160016],
		[0x1030e3e0,1907],
		[0x1030e3f0,25234880],
		[0x1030e3f8,25],
		[0x1030e408,8070480],
		[0x1030e410,34],
		[0x1030e420,10236144],
		[0x1030e428,864],
		[0x1030e438,32962240],
		[0x1030e440,729],
		[0x1030e450,20891600],
		[0x1030e458,962],
		[0x1030e468,48794072],
		[0x1030e470,40],
		[0x1030e480,7700896],
		[0x1030e488,42],
		[0x1030e498,8119888],
		[0x1030e4a0,219],
		[0x1030e4b0,22205904],
		[0x1030e4b8,180],
		[0x1030e4c8,49198392],
		[0x1030e4e0,6849056],
		[0x1030e4e8,365],
		[0x1030e4f8,14929440],
		[0x1030e500,356],
		[0x1030e510,34681056],
		[0x1030e518,25],
		[0x1030e528,9156544],
		[0x1030e530,468],
		[0x1030e540,34689472],
		[0x1030e548,38],
		[0x1030e558,21965648],
		[0x1030e560,9],
		[0x1030e570,24969904],
		[0x1030e578,5],
		[0x1030e588,22899360],
		[0x1030e5a0,27444624],
		[0x1030e5b8,7148432],
		[0x1030e5d0,7724112],
		[0x1030e5d8,5],
		[0x1030e5e8,6881040],
		[0x1030e5f0,26],
		[0, 0]
]).
int([
		[0x1030d600,28],
		[0x1030d604,0],
		[0x1030d614,0],
		[0x1030d618,34],
		[0x1030d61c,0],
		[0x1030d62c,0],
		[0x1030d630,120],
		[0x1030d634,0],
		[0x1030d644,0],
		[0x1030d648,35],
		[0x1030d64c,0],
		[0x1030d65c,0],
		[0x1030d660,962],
		[0x1030d664,0],
		[0x1030d674,0],
		[0x1030d678,24],
		[0x1030d67c,0],
		[0x1030d68c,0],
		[0x1030d690,69],
		[0x1030d694,0],
		[0x1030d6a4,0],
		[0x1030d6a8,529],
		[0x1030d6ac,0],
		[0x1030d6b0,5550],
		[0x1030d6bc,0],
		[0x1030d6c0,236],
		[0x1030d6c4,0],
		[0x1030d6d4,0],
		[0x1030d6d8,125],
		[0x1030d6dc,0],
		[0x1030d6ec,0],
		[0x1030d6f0,18],
		[0x1030d6f4,0],
		[0x1030d704,0],
		[0x1030d708,7],
		[0x1030d70c,0],
		[0x1030d71c,0],
		[0x1030d720,53],
		[0x1030d724,0],
		[0x1030d734,0],
		[0x1030d738,41],
		[0x1030d73c,0],
		[0x1030d74c,0],
		[0x1030d750,76],
		[0x1030d754,0],
		[0x1030d764,0],
		[0x1030d768,284],
		[0x1030d76c,0],
		[0x1030d77c,0],
		[0x1030d780,168],
		[0x1030d784,0],
		[0x1030d794,0],
		[0x1030d798,126],
		[0x1030d79c,0],
		[0x1030d7ac,0],
		[0x1030d7b0,234],
		[0x1030d7b4,0],
		[0x1030d7c4,0],
		[0x1030d7c8,68],
		[0x1030d7cc,0],
		[0x1030d7dc,0],
		[0x1030d7e0,2],
		[0x1030d7e4,0],
		[0x1030d7f4,0],
		[0x1030d7f8,109],
		[0x1030d7fc,0],
		[0x1030d80c,0],
		[0x1030d810,136],
		[0x1030d814,0],
		[0x1030d824,0],
		[0x1030d828,599],
		[0x1030d82c,0],
		[0x1030d83c,0],
		[0x1030d840,72],
		[0x1030d844,0],
		[0x1030d854,0],
		[0x1030d858,81],
		[0x1030d85c,0],
		[0x1030d86c,0],
		[0x1030d870,71],
		[0x1030d874,0],
		[0x1030d884,0],
		[0x1030d888,21735],
		[0x1030d88c,0],
		[0x1030d89c,0],
		[0x1030d8a0,430],
		[0x1030d8a4,0],
		[0x1030d8b4,0],
		[0x1030d8b8,177],
		[0x1030d8bc,0],
		[0x1030d8cc,0],
		[0x1030d8d0,56],
		[0x1030d8d4,0],
		[0x1030d8e4,0],
		[0x1030d8e8,10],
		[0x1030d8ec,0],
		[0x1030d8fc,0],
		[0x1030d900,112],
		[0x1030d904,0],
		[0x1030d914,0],
		[0x1030d918,217],
		[0x1030d91c,0],
		[0x1030d92c,0],
		[0x1030d930,339],
		[0x1030d934,0],
		[0x1030d944,0],
		[0x1030d948,312],
		[0x1030d94c,0],
		[0x1030d95c,0],
		[0x1030d960,234],
		[0x1030d964,0],
		[0x1030d974,0],
		[0x1030d978,584],
		[0x1030d97c,0],
		[0x1030d98c,0],
		[0x1030d990,24],
		[0x1030d994,0],
		[0x1030d9a4,0],
		[0x1030d9a8,73],
		[0x1030d9ac,0],
		[0x1030d9bc,0],
		[0x1030d9c0,808],
		[0x1030d9c4,0],
		[0x1030d9d4,0],
		[0x1030d9d8,4],
		[0x1030d9dc,0],
		[0x1030d9ec,0],
		[0x1030d9f0,71],
		[0x1030d9f4,0],
		[0x1030da04,0],
		[0x1030da08,164],
		[0x1030da0c,0],
		[0x1030da1c,0],
		[0x1030da20,54],
		[0x1030da24,0],
		[0x1030da34,0],
		[0x1030da38,3226],
		[0x1030da3c,0],
		[0x1030da4c,0],
		[0x1030da50,54],
		[0x1030da54,0],
		[0x1030da64,0],
		[0x1030da68,634],
		[0x1030da6c,0],
		[0x1030da7c,0],
		[0x1030da80,4392],
		[0x1030da84,0],
		[0x1030da94,0],
		[0x1030da98,36],
		[0x1030da9c,0],
		[0x1030daac,0],
		[0x1030dab0,24],
		[0x1030dab4,0],
		[0x1030dac4,0],
		[0x1030dac8,139],
		[0x1030dacc,0],
		[0x1030dadc,0],
		[0x1030dae0,1795],
		[0x1030dae4,0],
		[0x1030daf4,0],
		[0x1030daf8,770],
		[0x1030dafc,0],
		[0x1030db00,20214],
		[0x1030db0c,0],
		[0x1030db10,12],
		[0x1030db14,0],
		[0x1030db24,0],
		[0x1030db28,288],
		[0x1030db2c,0],
		[0x1030db3c,0],
		[0x1030db40,6],
		[0x1030db44,0],
		[0x1030db54,0],
		[0x1030db58,333],
		[0x1030db5c,0],
		[0x1030db6c,0],
		[0x1030db70,34],
		[0x1030db74,0],
		[0x1030db84,0],
		[0x1030db88,305],
		[0x1030db8c,0],
		[0x1030db9c,0],
		[0x1030dba0,1348],
		[0x1030dba4,0],
		[0x1030dbb4,0],
		[0x1030dbb8,111],
		[0x1030dbbc,0],
		[0x1030dbcc,0],
		[0x1030dbd0,19],
		[0x1030dbd4,0],
		[0x1030dbe4,0],
		[0x1030dbe8,2307],
		[0x1030dbec,0],
		[0x1030dbfc,0],
		[0x1030dc00,57],
		[0x1030dc04,0],
		[0x1030dc14,0],
		[0x1030dc18,499],
		[0x1030dc1c,0],
		[0x1030dc2c,0],
		[0x1030dc30,164],
		[0x1030dc34,0],
		[0x1030dc44,0],
		[0x1030dc48,68],
		[0x1030dc4c,0],
		[0x1030dc5c,0],
		[0x1030dc60,56],
		[0x1030dc64,0],
		[0x1030dc74,0],
		[0x1030dc78,234],
		[0x1030dc7c,0],
		[0x1030dc8c,0],
		[0x1030dc90,16256],
		[0x1030dc94,0],
		[0x1030dca4,0],
		[0x1030dca8,1020],
		[0x1030dcac,0],
		[0x1030dcbc,0],
		[0x1030dcc0,66],
		[0x1030dcc4,0],
		[0x1030dcd4,0],
		[0x1030dcd8,5],
		[0x1030dcdc,0],
		[0x1030dcec,0],
		[0x1030dcf0,77],
		[0x1030dcf4,0],
		[0x1030dd04,0],
		[0x1030dd08,8],
		[0x1030dd0c,0],
		[0x1030dd1c,0],
		[0x1030dd20,5],
		[0x1030dd24,0],
		[0x1030dd34,0],
		[0x1030dd38,21],
		[0x1030dd3c,0],
		[0x1030dd4c,0],
		[0x1030dd50,1765],
		[0x1030dd54,0],
		[0x1030dd64,0],
		[0x1030dd68,24],
		[0x1030dd6c,0],
		[0x1030dd7c,0],
		[0x1030dd80,78],
		[0x1030dd84,0],
		[0x1030dd94,0],
		[0x1030dd98,48],
		[0x1030dd9c,0],
		[0x1030ddac,0],
		[0x1030ddb0,873],
		[0x1030ddb4,0],
		[0x1030ddc4,0],
		[0x1030ddc8,325],
		[0x1030ddcc,0],
		[0x1030dddc,0],
		[0x1030dde0,211],
		[0x1030dde4,0],
		[0x1030ddf4,0],
		[0x1030ddf8,798],
		[0x1030ddfc,0],
		[0x1030de0c,0],
		[0x1030de10,104],
		[0x1030de14,0],
		[0x1030de24,0],
		[0x1030de28,404],
		[0x1030de2c,0],
		[0x1030de3c,0],
		[0x1030de40,240],
		[0x1030de44,0],
		[0x1030de54,0],
		[0x1030de58,5],
		[0x1030de5c,0],
		[0x1030de6c,0],
		[0x1030de70,2315],
		[0x1030de74,0],
		[0x1030de84,0],
		[0x1030de88,63],
		[0x1030de8c,0],
		[0x1030de9c,0],
		[0x1030dea0,350],
		[0x1030dea4,0],
		[0x1030deb4,0],
		[0x1030deb8,103],
		[0x1030debc,0],
		[0x1030decc,0],
		[0x1030ded0,19],
		[0x1030ded4,0],
		[0x1030dee4,0],
		[0x1030dee8,2],
		[0x1030deec,0],
		[0x1030defc,0],
		[0x1030df00,177],
		[0x1030df04,0],
		[0x1030df14,0],
		[0x1030df18,1501],
		[0x1030df1c,0],
		[0x1030df2c,0],
		[0x1030df30,56],
		[0x1030df34,0],
		[0x1030df44,0],
		[0x1030df48,463],
		[0x1030df4c,0],
		[0x1030df5c,0],
		[0x1030df60,2],
		[0x1030df64,0],
		[0x1030df74,0],
		[0x1030df78,576],
		[0x1030df7c,0],
		[0x1030df8c,0],
		[0x1030df90,2862],
		[0x1030df94,0],
		[0x1030dfa4,0],
		[0x1030dfa8,4036],
		[0x1030dfac,0],
		[0x1030dfbc,0],
		[0x1030dfc0,19],
		[0x1030dfc4,0],
		[0x1030dfd4,0],
		[0x1030dfd8,19],
		[0x1030dfdc,0],
		[0x1030dfec,0],
		[0x1030dff0,312],
		[0x1030dff4,0],
		[0x1030e004,0],
		[0x1030e008,101],
		[0x1030e00c,0],
		[0x1030e01c,0],
		[0x1030e020,311],
		[0x1030e024,0],
		[0x1030e034,0],
		[0x1030e038,11928],
		[0x1030e03c,0],
		[0x1030e04c,0],
		[0x1030e050,37],
		[0x1030e054,0],
		[0x1030e064,0],
		[0x1030e068,65],
		[0x1030e06c,0],
		[0x1030e07c,0],
		[0x1030e080,128],
		[0x1030e084,0],
		[0x1030e094,0],
		[0x1030e098,398],
		[0x1030e09c,0],
		[0x1030e0ac,0],
		[0x1030e0b0,32],
		[0x1030e0b4,0],
		[0x1030e0c4,0],
		[0x1030e0c8,16],
		[0x1030e0cc,0],
		[0x1030e0dc,0],
		[0x1030e0e0,732],
		[0x1030e0e4,0],
		[0x1030e0f4,0],
		[0x1030e0f8,72],
		[0x1030e0fc,0],
		[0x1030e10c,0],
		[0x1030e110,302],
		[0x1030e114,0],
		[0x1030e124,0],
		[0x1030e128,424],
		[0x1030e12c,0],
		[0x1030e13c,0],
		[0x1030e140,54],
		[0x1030e144,0],
		[0x1030e154,0],
		[0x1030e158,413],
		[0x1030e15c,0],
		[0x1030e16c,0],
		[0x1030e170,167],
		[0x1030e174,0],
		[0x1030e184,0],
		[0x1030e188,2],
		[0x1030e18c,0],
		[0x1030e19c,0],
		[0x1030e1a0,196],
		[0x1030e1a4,0],
		[0x1030e1b4,0],
		[0x1030e1b8,41],
		[0x1030e1bc,0],
		[0x1030e1cc,0],
		[0x1030e1d0,161],
		[0x1030e1d4,0],
		[0x1030e1e4,0],
		[0x1030e1e8,1946],
		[0x1030e1ec,0],
		[0x1030e1fc,0],
		[0x1030e200,13062],
		[0x1030e204,0],
		[0x1030e214,0],
		[0x1030e218,34],
		[0x1030e21c,0],
		[0x1030e22c,0],
		[0x1030e230,106],
		[0x1030e234,0],
		[0x1030e244,0],
		[0x1030e248,24],
		[0x1030e24c,0],
		[0x1030e25c,0],
		[0x1030e260,5],
		[0x1030e264,0],
		[0x1030e274,0],
		[0x1030e278,49],
		[0x1030e27c,0],
		[0x1030e28c,0],
		[0x1030e290,3693],
		[0x1030e294,0],
		[0x1030e2a4,0],
		[0x1030e2a8,96],
		[0x1030e2ac,0],
		[0x1030e2bc,0],
		[0x1030e2c0,48],
		[0x1030e2c4,0],
		[0x1030e2d4,0],
		[0x1030e2d8,48],
		[0x1030e2dc,0],
		[0x1030e2ec,0],
		[0x1030e2f0,850],
		[0x1030e2f4,0],
		[0x1030e304,0],
		[0x1030e308,24],
		[0x1030e30c,0],
		[0x1030e31c,0],
		[0x1030e320,21],
		[0x1030e324,0],
		[0x1030e334,0],
		[0x1030e338,2],
		[0x1030e33c,0],
		[0x1030e34c,0],
		[0x1030e350,77],
		[0x1030e354,0],
		[0x1030e364,0],
		[0x1030e368,511],
		[0x1030e36c,0],
		[0x1030e37c,0],
		[0x1030e380,24],
		[0x1030e384,0],
		[0x1030e394,0],
		[0x1030e398,24],
		[0x1030e39c,0],
		[0x1030e3ac,0],
		[0x1030e3b0,15],
		[0x1030e3b4,0],
		[0x1030e3c4,0],
		[0x1030e3c8,56],
		[0x1030e3cc,0],
		[0x1030e3dc,0],
		[0x1030e3e0,1907],
		[0x1030e3e4,0],
		[0x1030e3f4,0],
		[0x1030e3f8,25],
		[0x1030e3fc,0],
		[0x1030e40c,0],
		[0x1030e410,34],
		[0x1030e414,0],
		[0x1030e424,0],
		[0x1030e428,864],
		[0x1030e42c,0],
		[0x1030e43c,0],
		[0x1030e440,729],
		[0x1030e444,0],
		[0x1030e454,0],
		[0x1030e458,962],
		[0x1030e45c,0],
		[0x1030e46c,0],
		[0x1030e470,40],
		[0x1030e474,0],
		[0x1030e484,0],
		[0x1030e488,42],
		[0x1030e48c,0],
		[0x1030e49c,0],
		[0x1030e4a0,219],
		[0x1030e4a4,0],
		[0x1030e4b4,0],
		[0x1030e4b8,180],
		[0x1030e4bc,0],
		[0x1030e4cc,0],
		[0x1030e4d0,48],
		[0x1030e4d4,0],
		[0x1030e4e4,0],
		[0x1030e4e8,365],
		[0x1030e4ec,0],
		[0x1030e4fc,0],
		[0x1030e500,356],
		[0x1030e504,0],
		[0x1030e514,0],
		[0x1030e518,25],
		[0x1030e51c,0],
		[0x1030e52c,0],
		[0x1030e530,468],
		[0x1030e534,0],
		[0x1030e544,0],
		[0x1030e548,38],
		[0x1030e54c,0],
		[0x1030e55c,0],
		[0x1030e560,9],
		[0x1030e564,0],
		[0x1030e574,0],
		[0x1030e578,5],
		[0x1030e57c,0],
		[0x1030e58c,0],
		[0x1030e590,84],
		[0x1030e594,0],
		[0x1030e5a4,0],
		[0x1030e5a8,55],
		[0x1030e5ac,0],
		[0x1030e5bc,0],
		[0x1030e5c0,62],
		[0x1030e5c4,0],
		[0x1030e5d4,0],
		[0x1030e5d8,5],
		[0x1030e5dc,0],
		[0x1030e5ec,0],
		[0x1030e5f0,26],
		[0x1030e5f4,0],
		[0, 0]
]).
string_val([
		[0, 0]
]).
/* This file contains recursive predicates */
:- use_module(library(clpfd)).
:- use_module(reif).
:- style_check(-singleton).

isTrue([X, Y]):-
    X == 49.

isTrue([X|Tail]):-
    isTrue(Tail).

log(File_name, Name, Addr, Base):-
    Offset #= Addr - Base,
    open(File_name, append, Stream),
    write(Stream, Name),
    write(Stream, ':'),
    write(Stream, Offset),
    nl(Stream),
    close(Stream).

possible_task_struct(Base_addr) :-
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM2_addr, Pid_addr, Tgid_addr, Real_parent_addr, Parent_addr , Child_addr, 
           Group_leader_addr, Thread_group_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    %MM2_addr #> Base_addr + 1000,
    Tasks_addr #> MM2_addr - 100,
    %FS_struct_addr #< Base_addr + 4000,
    Tgid_addr #= Pid_addr + 4,
    Real_parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr - 8,
    Child_addr #= Parent_addr + 8,
    %FIXME This may be too strong
    Group_leader_addr #=< Child_addr +32,
    %Comm_addr #= Base_addr + 1656,
    %Tasks_addr #= Base_addr + 1072,
    %FS_struct_addr #= Base_addr + 2640,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    % make query after labeling
    MM2_val #> 0,
    integer(MM2_val),
    
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val,  Comm_addr, Comm_val ]),

    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_parent_addr, Real_parent_val, Group_leader_addr, Group_leader_val]),
    Real_parent_val #> 0,
    Group_leader_val #> 0,
    query_ts(Real_parent_val, Comm_offset, Tasks_offset),
    query_ts(Group_leader_val, Comm_offset, Tasks_offset),

    labeling([enum], [Cred_addr, Cred_val]),
    Cred_val #> 0,
    query_cred(Cred_val),

    labeling([enum], [FS_struct_addr, FS_struct_val]),
    FS_struct_val #> 0,
    %query_fs_struct(FS_struct_val),



    get_time(End),
    Time_past is End - Current,
    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    log("profile.txt", "tasks", Tasks_addr, Base_addr),
    log("profile.txt", "mm_struct", MM2_addr, Base_addr),
    log("profile.txt", "comm", Comm_addr, Base_addr),
    log("profile.txt", "parent", Parent_addr, Base_addr),
    log("profile.txt", "group_leader", Group_leader_addr, Base_addr),
    log("profile.txt", "cred", Cred_addr, Base_addr),

    
    print_nl('tasks offset', Tasks_offset),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).

possible_string_pointer(Base_addr) :-
    /* Verify if this pointer points to a stirng */
    string_val(Str),
    Str_profile = [
        [Name_addr, Name_val]
    ],
    tuples_in(Str_profile, Str),
    Name_addr #= Base_addr.

query_string_pointer(Val) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "string_pointer"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_mount_struct(Base_addr, Offset) :-
    pointer(Ptr),
    Ptr_profile = ([
        [Mnt_devname_addr, Mnt_devname_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Mnt_devname_addr #= Base_addr + Offset,
    labeling([enum], [Mnt_devname_addr, Mnt_devname_val]),
    query_string_pointer(Mnt_devname_val).



possible_kernel_param(Base_addr) :-
    string_val(Str),
    Str_profile = [
        [Name_addr, Name_val]
    ],
    tuples_in(Str_profile, Str),
    Name_addr #= Base_addr.

possible_in_device(Base_addr) :-
    /* in_ifaddr remains the same across kernel versions 
       but we need this query to find ip_ptr in net_device struct
    */
    /*
        struct net_device *dev;
        int               refcnt;
        int               dead;
        struct in_ifaddr  *ifa_list;
    */
    pointer(Ptr),
    int(Int),
    Ptr_profile = ([
        [Dev_addr, Dev_val],
        [Ifa_list_addr, Ifa_list_val]
    ]),
    Int_profile = ([
        [Refcnt_addr, Refcnt_val],
        [Dead_addr, Dead_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Dead_addr #= Refcnt_addr + 4,
    chain([Dev_addr, Refcnt_addr, Dead_addr, Ifa_list_addr], #<),
    Dev_addr #= Base_addr,
    Ifa_list_addr #= Base_addr + 16,
    labeling([enum], [Ifa_list_addr, Ifa_list_val]),

    process_create(path('python'),
                    ['subquery.py', Ifa_list_val, "in_ifaddr"],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_in_ifaddr(Base_addr) :-
    /* in_ifaddr remains the same across kernel versions */
    pointer(Ptr),
    Ptr_profile = ([
        [Hash_addr, Hash_val],
        [Ifa_next_addr, Ifa_next_val],
        [Ifa_dev_addr, Ifa_dev_val],
        [Rcu_head_addr, Rcu_head_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([Hash_addr, Ifa_next_addr, Ifa_dev_addr, Rcu_head_addr], #<),
    Hash_addr #= Base_addr,
    Ifa_next_addr #= Hash_addr + 16,
    Ifa_dev_addr #= Ifa_next_addr + 8,
    Rcu_head_addr #= Ifa_dev_addr + 8,
    labeling([enum], [Hash_addr, Ifa_next_addr, Ifa_dev_addr, Rcu_head_addr]).



possible_mm_struct(Current_addr) :- 
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    % TODO: ADD vm_area_struct *mmap
    Ptr_profile = [
        [Mmap_addr, Mmap_val],
        [Pgd_addr, Pgd_val]  
    ],
    Ulong_profile = [
        [Mmap_base_addr, Mmap_base_val],
        [Mmap_legacy_base_addr, Mmap_legacy_base_val],
        [Task_size_addr, Task_size_val],
        [High_vm_end_addr, High_vm_end_val],
        [Start_brk_addr, Start_brk_val],
        [Brk_addr, Brk_val],
        [Start_stack_addr, Start_stack_val],
        [ARG_start_addr, ARG_start_val]
    ],
    Mmap_addr #= Current_addr,


    Mmap_base_addr #> Mmap_addr,
    %FIXME mmap_base need more value constraint, because we removed mmap_legacy_base and highest_vm_end.
    Mmap_base_val #> 0x7f0000000000,
    %FIXME in old linux version, e.g., there is no mmap_legacy_base and highest_vm_enb
    %chain([Mmap_base_addr, Mmap_legacy_base_addr, Task_size_addr, High_vm_end_addr, Pgd_addr], #<),
    chain([Mmap_base_addr, Task_size_addr, Pgd_addr], #<),

    %FIXME: This rule may be too strong
    %High_vm_end_addr #= Mmap_base_addr + 24, 
    Pgd_addr #> Task_size_addr,
    Pgd_addr #=< Task_size_addr + 40,
    %FIXME: This rule may not be true for other mm_struct.
    Task_size_val #>= 0x7ffffffff000,

    %Mmap_base_addr #= Current_addr + 40,
    %Mmap_legacy_base_addr #= Current_addr + 40,
    %Task_size_addr #= Current_addr + 48,
    %High_vm_end_addr #= Current_addr + 72,

    Start_brk_addr #> Pgd_addr,
    Start_stack_val #> 0x7ff000000000,
    % TODO: Convert this to index comparison. 
    ARG_start_addr #< Current_addr + 500,
    chain([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr], #<),
    ARG_start_addr #= Start_brk_addr + 24,
    Brk_val #< 0x7ff000000000,
    ARG_start_val #> 0x7ff000000000,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),


    labeling([enum], [Mmap_addr, Mmap_val, Mmap_base_addr, Pgd_addr, Pgd_val]),
    Mmap_val #> 0,
    Pgd_val #> 0,
    
    process_create(path('python'),
                    ['subquery.py', Mmap_val, "vm_area_struct", 2],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    label([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr]),
    statistics(real_time, [End|_]),

    log("./profile/mm_struct", "mmap", Mmap_addr, Current_addr),
    log("./profile/mm_struct", "mmap_base", Mmap_base_addr, Current_addr),
    log("./profile/mm_struct", "pgd", Pgd_addr, Current_addr),
    log("./profile/mm_struct", "start_brk", Start_brk_addr, Current_addr),
    log("./profile/mm_struct", "brk", Brk_addr, Current_addr),
    log("./profile/mm_struct", "start_stack", Start_stack_addr, Current_addr),
    log("./profile/mm_struct", "arg_start", ARG_start_addr, Current_addr).
    log("./profile/mm_struct", "mm_struct", End, Start).


possible_vm_area_struct(Base_addr, Level) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [VM_next_addr, VM_next_val],
        [VM_file_addr, VM_file_val]
    ],
    Ulong_profile = [
        [VM_start_addr, VM_start_val],
        [VM_end_addr, VM_end_val],
        [VM_flag_addr, VM_flag_val]
        /*VM_pgoff is 0, and we do not consider 0 as ulong*/
        %[VM_pgoff_addr, VM_pgoff_val]
    ],
    VM_start_addr #>= Base_addr,
    chain([VM_start_addr, VM_end_addr, VM_next_addr, VM_flag_addr, VM_file_addr], #<),
    VM_end_addr #= VM_start_addr + 8,
    VM_next_addr #= VM_end_addr + 8,
    VM_next_addr #< Base_addr + 32,
    VM_file_addr #< Base_addr + 180,
    VM_pgoff_addr #= VM_file_addr - 8,
    VM_file_addr #= Base_addr + 160,

    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    %FIXME: VM_flag may need value constraints.

    label([VM_next_addr, VM_next_val]),

    labeling([enum], [VM_start_addr, VM_end_addr, VM_flag_addr, VM_pgoff_addr, VM_file_addr, VM_file_val]),
    
    VM_file_val #> 0,
    process_create(path('python'),
                ['subquery.py', VM_file_val, "vm_file"],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    statistics(real_time, [End|_]),

    log("./profile/vm_area_struct", "vm_start", VM_start_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_end", VM_end_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_next", VM_next_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_flag", VM_flag_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_pgoff", VM_pgoff_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_file", VM_file_addr, Base_addr).
    log("./profile/vm_area_struct", "vm_area_struct", End, Start).

check_vm_area_struct(Base_addr, Level) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "vm_area_struct", Level],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vm_file(Base_addr) :-
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [Vfs_mount_addr, Vfs_mount_val],
        [Dentry_addr, Dentry_val],
        [F_op_addr, F_op_val]
    ],
    tuples_in(Ptr_profile, Ptr),
    Vfs_mount_addr #> Base_addr,
    Dentry_addr #= Vfs_mount_addr + 8,
    Dentry_addr #< Base_addr + 40,
    Vfs_mount_val #> 0,
    Dentry_val #> 0,
    F_op_addr #= Base_addr + 40, 
    F_op_val #> 0,
    chain([Vfs_mount_addr, Dentry_addr, F_op_addr], #<),
    labeling([enum], [Vfs_mount_val, Dentry_val, F_op_addr, F_op_val]),


    process_create(path('python'),
                    ['subquery.py', Vfs_mount_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    /*
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/
    

    %query_file_operation(F_op_addr),

    log("./profile/file", "vfs_mount", Vfs_mount_addr, Base_addr),
    log("./profile/file", "dentry", Dentry_addr, Base_addr),
    log("./profile/file", "f_op", F_op_addr, Base_addr).



query_file_operation(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result).

possible_name_pointer(Val, Name_offset) :-
    /* The value at val+name_offset is a string pointer */
    current_predicate(pointer/1),
    pointer(Ptr),
    Ptr_profile = ([
        [Name_addr, Name_val]
    ]),
    Name_addr #= Val + Name_offset,
    tuples_in(Ptr_profile, Ptr),
    labeling([enum], [Name_addr, Name_val]),
    query_string_pointer(Name_val).

possible_vfs_mount(Base_addr) :-
    pointer(Ptr),
    int(Int),
    Ptr_profile = [
        [Dentry_addr, Dentry_val],
        [Mnt_sb_addr, Mnt_sb_val]
    ],
    Int_profile = [
        [Mnt_flags_addr, Mnt_flags_val]
    ],
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Dentry_addr #= Base_addr,
    Dentry_val #> 0,
    Mnt_flags_addr #= Dentry_addr + 16,
    Mnt_flags_val #>= 0,
    Mnt_sb_val #> 0,
    chain([Dentry_addr, Mnt_sb_addr, Mnt_flags_addr], #<),
    label([Dentry_addr, Dentry_val, Mnt_flags_addr, Mnt_flags_val]).
 
possible_dentry(Base_addr) :-
    /*
        struct dentry *d_parent;
        struct qstr d_name -> char *name; it's a name pointer
        struct inode *d_inode;
        unsigned char d_iname[LEN];
        const struct dentry_operations *d_op;
        struct list_head d_child;
        struct list_head d_subdirs;
        union {
	        struct hlist_node d_alias;
	        struct rcu_head d_rcu;
        } d_u;
    */
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    string_val(Str),
    Ptr_profile = [
        [Dparent_addr, Dparent_val],
        [Dname_addr, Dname_val],
        [D_inode_addr, D_inode_val],
        [D_op_addr, D_op_val],
        [Dchild_addr, Dchild_val],
        [D_subdirs_addr, D_subdirs_val]
    ],
    Str_profile = [
        [D_iname_addr, D_iname_val]
    ],
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    Dparent_addr #> Base_addr,
    chain([Dparent_addr, Dname_addr, D_inode_addr, D_iname_addr, 
            D_op_addr, Dchild_addr, D_subdirs_addr], #<),
    D_subdirs_addr #= Dchild_addr + 16,
    D_subdirs_addr #< Base_addr + 200,
    Dparent_val #> 0,
    labeling([enum], [Dname_addr, Dname_val]),
    query_string_pointer(Dname_val),
    labeling([enum], [D_iname_addr, D_iname_val]),
    D_iname_offset #= D_iname_addr - Base_addr,
    Dname_offset #= Dname_addr - Base_addr,
    labeling([enum], [Dparent_addr, Dparent_val]),
    Parent_dname #= Dparent_val + Dname_offset,
    process_create(path('python'),
                    ['subquery.py', Parent_dname, "name_pointer", Dname_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    %labeling([enum], [D_inode_addr, D_inode_val]),
    %query_inode(D_inode_val),

    labeling([enum], [Dchild_addr, Dchild_val]),
    Dchild_offset #= Dchild_addr - Base_addr,
    Dchild_init #= Dchild_val - Dchild_offset,
    query_name_pointer(Dchild_init, Dname_offset),

    /* This can be hardcoded as d_child_addr + 16 */
    labeling([enum], [D_subdirs_addr, D_subdirs_val]),
    Dsubdirs_offset #= D_subdirs_addr - Base_addr,
    D_subdirs_init #= D_subdirs_val - Dsubdirs_offset,
    query_name_pointer(D_subdirs_init, Dname_offset),

    statistics(real_time, [End|_]),

    log("./profile/dentry", "parent", Dparent_addr, Base_addr),
    log("./profile/dentry", "inode", D_inode_val, Base_addr),
    log("./profile/dentry", "d_iname", D_iname_addr, Base_addr),
    log("./profile/dentry", "dchild", Dchild_addr, Base_addr),
    log("./profile/dentry", "d_subdirs", D_subdirs_addr, Base_addr),
    log("./profile/dentry", "dentry", End, Start).

query_inode(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_inode(Base_addr) :-
    /*
        struct inode_operations *i_op;
        struct super_block      *i_sb;
        struct address_space    *i_mapping;
    */
    statistics(real_time, [Start|_]),

    pointer(Ptr),
    long(Ulg),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [I_op_addr, I_op_val],
        [I_sb_addr, I_sb_val],
        [I_mapping_addr, I_mapping_val],
        [I_fop_addr, I_fop_val]
    ]),
    Ulong_profile = ([
        /* i_mode is actually not long type. */
        [I_mode_addr, I_mode_val],
        [I_ino_addr, I_ino_val],
        [I_size_addr, I_size_val],
        [I_atime_addr, I_atime_val],
        [_I_atime_addr, _I_atime_val],
        [I_mtime_addr, I_mtime_val],
        [I_ctime_addr, I_ctime_val],
        [_I_ctime_addr, _I_ctime_val]
    ]),
    Int_profile = ([
        [I_uid_addr, I_uid_val],
        [I_gid_addr, I_gid_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    tuples_in(Int_profile, Int),

    chain([I_mode_addr, I_uid_addr, I_gid_addr, I_op_addr, I_sb_addr, I_mapping_addr, I_ino_addr,
           I_size_addr, I_atime_addr, _I_atime_addr, I_mtime_addr, I_ctime_addr, _I_ctime_addr, I_fop_addr], #<),

    I_mode_addr #= Base_addr,
    I_mode_val #> 0,
    I_gid_addr #= I_mode_addr + 8,
    %I_op_addr #= Base_addr + 32,
    I_op_addr #=< Base_addr + 32,
    I_op_val #> 0,
    labeling([enum], [I_op_addr, I_op_val]),
    query_inode_operations(I_op_val),

    I_sb_addr #= I_op_addr + 8,
    I_mapping_addr #= I_sb_addr + 8,
    I_atime_addr #= I_size_addr + 8,
    I_mtime_addr #= I_atime_addr + 16,
    I_ctime_addr #= I_mtime_addr + 16,
    _I_ctime_addr #= I_ctime_addr + 8,
    I_size_val #> 0,
    I_atime_val #> 4096,
    I_mtime_val #> 4096,
    I_ctime_val #> 4096,
    I_fop_addr #< Base_addr + 400,
    labeling([enum], [I_sb_addr, I_mapping_addr, I_atime_addr, I_mtime_addr, I_ctime_addr]),


    labeling([enum], [I_fop_addr, I_fop_val]),
    I_fop_val #> 0,
    query_inode_operations(I_fop_val),
    statistics(real_time, [End|_]),


    log("./profile/inode", "I_mode_addr", I_mode_addr, Base_addr),
    log("./profile/inode", "I_uid_addr", I_uid_addr, Base_addr),
    log("./profile/inode", "I_gid_addr", I_gid_addr, Base_addr),
    log("./profile/inode", "I_op_addr", I_op_addr, Base_addr),
    log("./profile/inode", "I_sb_addr", I_sb_addr, Base_addr),
    log("./profile/inode", "I_mapping_addr", I_mapping_addr, Base_addr),
    log("./profile/inode", "I_size_addr", I_size_addr, Base_addr),
    log("./profile/inode", "I_atime_addr", I_atime_addr, Base_addr),
    log("./profile/inode", "I_mtime_addr", I_mtime_addr, Base_addr),
    log("./profile/inode", "I_ctime_addr", I_ctime_addr, Base_addr),
    log("./profile/inode", "I_fop_addr", I_fop_addr, Base_addr),
    log("./profile/inode", "inode", End, Start).


query_inode_operations(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_name_pointer(Base_addr, Offset) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "name_pointer", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_inode_operations(Base_addr) :-
    /* a bunch of function pointers. */
    pointer(Ptr),
    Ptr_profile = ([
        [_L1_addr, _L1_val],
        [_L2_addr, _L2_val],
        [_L3_addr, _L3_val],
        [_L4_addr, _L4_val],
        [_L5_addr, _L5_val],
        [_L6_addr, _L6_val],
        [_L7_addr, _L7_val],
        [_L8_addr, _L8_val],
        [_L9_addr, _L9_val],
        [_L10_addr, _L10_val],
        [_L11_addr, _L11_val],
        [_L12_addr, _L12_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([_L1_addr, _L2_addr, _L3_addr, _L4_addr, _L5_addr, _L6_addr, _L7_addr,
           _L8_addr, _L9_addr, _L10_addr, _L11_addr, _L12_addr], #<),
    _L1_addr #= Base_addr,
    _L12_addr #= Base_addr + 88.




possible_nothing() :-

    %log("profile.txt", "dentry addr", Base_addr, 0),
    Dparent_addr #> Base_addr,
    Dname_addr #> 0,
    Dname_addr #< Base_addr + 200,
    %Dname_addr #= Base_addr + 160,
    %FIXME This child rule is not applicable for old kernel version. 
    %chain([Dparent_addr, Dname_addr, Dchild_addr], #<),
    %Dchild_addr #< Base_addr + 200,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    labeling([enum], [Dparent_addr, Dparent_val, Dname_addr, Dchild_addr, Dchild_val]),
    Dname_offset #= Dname_addr - Base_addr,
    integer(Dname_offset),
    Dparent_val #> 0,
    
    %FIXME d_parent may not be initialized
    /*process_create(path('python'),
                ['subquery.py', Dparent_val, "d_entry", Dname_offset],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/

    %FIXME: may need to find another way for all list_head. 
    /*Dchild_offset #= Dchild_addr - Base_addr,
    integer(Dchild_offset),
    Dchild_base #= Dchild_val - Dchild_offset,
    integer(Dchild_base),
    Dchild_base #> 0,
    process_create(path('python'),
                ['subquery.py', Dchild_base, "d_entry", Dname_offset],
                [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    statistics(real_time, [End|_]).
/*
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    log("profile.txt", "d_parent", Dparent_addr, Base_addr),
    log("profile.txt", "d_child", Dchild_addr, Base_addr),
    log("profile.txt", "dentry time", End, Start).
*/
possible_d_entry(Base_addr, Dname_offset) :-
    current_predicate(string_val/1),
    string_val(Str),
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    Dname_addr #= Base_addr + Dname_offset,
    tuples_in(Str_profile, Str),
    label([Dname_addr]).

possible_list_head(Tasks_val, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_val, Tasks_addr]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],
    Comm_addr #= Tasks_val - Tasks_offset + Comm_offset,
    Tasks_addr #\= Tasks_val,
    tuples_in(Str_profile, Str),
    tuples_in(Ptr_profile, Ptr),
    label([Comm_addr]).

possible_ts(Base_addr, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_addr, Tasks_val]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],

    Comm_addr #= Base_addr + Comm_offset,
    Tasks_addr #= Base_addr + Tasks_offset,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),

    label([Tasks_val]),
    
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "list_head", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_cred(Base_addr) :-
    statistics(real_time, [Start|_]),

    int(Int),
    long(Ulg),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3],
        [Addr4, Val4],
        [Addr5, Val5],
        [Addr6, Val6],
        [Addr7, Val7],
        [Addr8, Val8],
        [Addr9, Val9]
    ],
    %FIXME For now, this rule is hard-coded because we do not consider 0 as a unsign long number. 
    %So that for cred whos val10 is 0, this rule does not apply.
    /*Ulong_profile = [
        [Addr10, Val10],
        [Addr11, Val11]
    ],*/
    Addr1 #> Base_addr,
    %chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9, Addr10, Addr11], #<),
    chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9], #<),
    Addr1 #= Base_addr + 4,
    Addr9 #= Addr1 + 32,
    %Addr11 #< Base_addr + 120,
    tuples_in(Int_profile, Int),
    %tuples_in(Ulong_profile, Ulg),
    statistics(real_time, [End|_]),
    labeling([enum], [Addr1, Addr2, Addr5, Addr6]),
    log("./profile/cred", "cred", End, Start),
    log('./profile/cred', "uid", Addr1, Base_addr),
    log('./profile/cred', "gid", Addr2, Base_addr),
    log('./profile/cred', "euid", Addr5, Base_addr),
    log('./profile/cred', "egid", Addr6, Base_addr).

possible_fs_struct(Base_addr) :-
    statistics(real_time, [Start|_]),
    int(Int),
    pointer(Ptr),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3]
    ],
    Ptr_profile = [
        [Root_addr, Root_val],
        [PWD_addr, PWD_val]
    ],
    Addr1 #>= Base_addr,
    chain([Addr1, Addr2, Addr3, Root_addr, PWD_addr], #<),
    PWD_addr #= Root_addr + 16,
    PWD_addr #< Base_addr + 50,
    tuples_in(Int_profile, Int),
    tuples_in(Ptr_profile, Ptr),
    Root_val #> 0,
    PWD_val #> 0,
    label([Root_addr, Root_val]),
    
    process_create(path('python'),
                    ['subquery.py', Root_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    label([PWD_addr, PWD_val]),
    process_create(path('python'),
                    ['subquery.py', PWD_val, "dentry"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    statistics(real_time, [End|_]),
    log("profile.txt", "fs time", End, Start),
    log('profile.txt', "Root", Root_addr, Base_addr),
    log('profile.txt', "pwd", PWD_addr, Base_addr),
    log('profile.txt', "fs_struct", End, Start),

possible_mount(Base_addr) :-
    /* struct hlist_head mnt_hash;
       struct mount *mnt_parent; 
       struct vfsmount mnt;
       struct list_head mnt_mounts;
       struct list_head mnt_child;
       struct list_head mnt_instance;
       const char *mnt_devname;
       struct list_head mnt_list;
    */
    statistics(real_time, [Start|_]),
    %get_time(Current),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Mnt_hash_addr, Mnt_hash_val],
        [Mnt_parent_addr, Mnt_parent_val],
        [Vfsmount_addr, Vfsmount_val],
        [Mnt_child_addr, Mnt_child_val],
        [Mnt_devname_addr, Mnt_devname_val],
        [Mnt_list_addr, Mnt_list_val]
    ]),
    Int_profile = ([
        [Mnt_flags_addr, Mnt_flags_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    /* Order Invariants */
    chain([Mnt_hash_addr, Mnt_parent_addr, Vfsmount_addr, Mnt_flags_addr,
            Mnt_child_addr, Mnt_devname_addr, Mnt_list_addr], #<),
    Mnt_hash_addr #= Base_addr,
    /* mnt_hash_addr is a list_head */
    Mnt_parent_addr #> Base_addr + 8,
    Mnt_list_addr - Base_addr #< 200,
    labeling([enum], [Mnt_devname_addr, Mnt_devname_val]),
    query_string_pointer(Mnt_devname_val),
    Mnt_devname_offset #= Mnt_devname_addr - Base_addr,
    /* the offset from mnt_mounts to mnt_list remains the same, so it's safe to use fixed offsets. */
    Mnt_child_addr #= Mnt_devname_addr - 32,
    Mnt_list_addr #= Mnt_devname_addr + 8,
    Mnt_flags_addr #= Vfsmount_addr + 16,
    labeling([enum], [Mnt_child_addr, Mnt_list_addr, Vfsmount_addr, Vfsmount_val]),
    /* Seems unnecessary 
    Mnt_list_offset #= Mnt_list_addr - Base_addr,
    Mnt_list #= Mnt_list_val - Mnt_list_offset,
    Mnt_list #> 0,
    query_mount_struct(Mnt_list, Mnt_devname_offset),
    */
    Vfsmount_val #>= 0,
    /* Here we can infer layout of dentry structure 
       Maybe need to infer using another dentry, somehow it may not be initialized. 
    */
    Vfsmount_addr #> 0,
    %query_dentry(Vfsmount_addr),

    labeling([enum], [Mnt_parent_addr, Mnt_parent_val]),
    /* To verify another mount struct, only one-level query, so it does not direct call query_mount recursively */
    
    query_mount_struct(Mnt_parent_val, Mnt_devname_offset),
    

    %get_time(End),
    %Time_past is End - Current,
    statistics(real_time, [End|_]),
    log("./profile/mount", "mnt_hash", Mnt_hash_addr, Base_addr),
    log("./profile/mount", "mnt_parent", Mnt_parent_addr, Base_addr),
    log("./profile/mount", "mnt_child", Mnt_child_addr, Base_addr),
    log("./profile/mount", "mnt_devname", Mnt_devname_addr, Base_addr),
    log("./profile/mount", "mnt_list", Mnt_list_addr, Base_addr),
    log("./profile/mount", "mount", End, Start).


possible_neigh_hash_table(Base_addr) :-
    /* neighbour **hash_buckets */
    pointer(Ptr),
    Ptr_profile = ([
        [Hash_buckest_addr, Hash_buckets_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Hash_buckest_addr #= Base_addr,
    labeling([enum], [Hash_buckest_addr, Hash_buckets_val]),
    process_create(path('python'),
                    ['subquery.py', Hash_buckets_val, "hash_buckets"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_hash_buckets(Base_addr) :-
    /* hash_buckets is an array of neighbour pointer 
       note that not all element are non-zero
    */
    pointer(Ptr),
    Ptr_profile = ([
        [Neighbour_addr, Neighbour_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Neighbour_addr #< Base_addr + 32,
    Neighbour_val #> 0,
    labeling([enum], [Neighbour_addr, Neighbour_val]),
    process_create(path('python'),
                    ['subquery.py', Neighbour_val, "neighbour"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_neighbour(Base_addr) :-
    /* net_device *dev at offset 464 */
    pointer(Ptr),
    Ptr_profile = ([
        [Dev_addr, Dev_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Dev_addr #= Base_addr + 368,
    labeling([enum], [Dev_addr, Dev_val]),
    process_create(path('python'),
                    ['subquery.py', Dev_val, "net_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).


possible_net_device(Base_addr) :- 
    /*
        char             name[NAMSIZ];
        struct list_head dev_list;
        unsigned char    addr_len;
        unsigned int     promiscuity;
        struct in_device *ip_ptr;
    */
    statistics(real_time, [Start|_]),
    %get_time(Current),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Dev_list_addr, Dev_list_val],
        [IP_ptr_addr, IP_ptr_val]
    ]),
    Str_profile = ([
        [Name_addr, Name_val]
    ]),
    Int_profile = ([
        [Promisc_addr, Promisc_val],
        [Addr_len_addr, Addr_len_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),
    /* Hard to determine offsets for addr_len and promisc */
    chain([Name_addr, Dev_list_addr, Addr_len_addr, Promisc_addr, IP_ptr_addr], #<),
    Name_addr #>= Base_addr,
    Name_offset #= Name_addr - Base_addr,
    IP_ptr_addr #< Base_addr + 1000,
    /* dev_list offset can be hardcoded since it remains the same */
    Dev_list_addr #= Base_addr + 80,
    labeling([enum], [Name_addr, Dev_list_addr, Dev_list_val]),
    /* do not have a good constrain to narrow down ip_ptr, use its rough offset
       to reduce the search space. 
     */
    IP_ptr_addr #> Base_addr + 700,
    IP_ptr_val #> 0,
    labeling([enum], [IP_ptr_addr, IP_ptr_val]),
    query_in_device(IP_ptr_val),

    %get_time(End),
    %Time_past is End - Current,
    statistics(real_time, [End|_]),

    log("./profile/net_device", "name", Name_addr, Base_addr),
    log("./profile/net_device", "ip_ptr", IP_ptr_addr, Base_addr),
    log("./profile/net_device", "dev_list", Dev_list_addr, Base_addr),
    log("./profile/net_device", "net_device", End, Start).

query_in_device(IP_ptr_val) :-
    process_create(path('python'),
                    ['subquery.py', IP_ptr_val, "in_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).


query_mount_struct(Val, Offset) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "mount_struct", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).
