:- use_module(library(clpfd)).
:- style_check(-singleton).
pointer([
		[0x13e9c190,334088064],
		[0x13e9c198,0],
		[0x13e9c1a0,334088097],
		[0x13e9c1a8,0],
		[0x13e9c1b0,0],
		[0x13e9c1c0,520032256],
		[0x13e9c1d8,334088152],
		[0x13e9c1e0,0],
		[0x13e9c1e8,0],
		[0x13e9c1f8,334086648],
		[0x13e9c200,334086648],
		[0x13e9c208,0],
		[0x13e9c210,436515264],
		[0x13e9c218,0],
		[0x13e9c220,333582592],
		[0x13e9c228,0],
		[0x13e9c230,0],
		[0x13e9c238,0],
		[0x13e9c250,334087104],
		[0x13e9c258,334089216],
		[0x13e9c260,334088865],
		[0x13e9c268,334089632],
		[0x13e9c270,334089056],
		[0x13e9c280,520032256],
		[0x13e9c298,0],
		[0x13e9c2a0,0],
		[0x13e9c2a8,0],
		[0x13e9c2b0,0],
		[0x13e9c2b8,334086840],
		[0x13e9c2c0,334086840],
		[0x13e9c2c8,0],
		[0x13e9c2d0,436456992],
		[0x13e9c2d8,0],
		[0x13e9c2e0,0],
		[0x13e9c2e8,436212512],
		[0x13e9c2f0,0],
		[0x13e9c2f8,0],
		[0x13e9c328,0],
		[0x13e9c330,0],
		[0x13e9c338,0],
		[0x13e9c348,0],
		[0x13e9c350,0],
		[0x13e9c358,0],
		[0x13e9c360,0],
		[0x13e9c368,0],
		[0x13e9c370,0],
		[0x13e9c378,391356288],
		[0x13e9c380,367293312],
		[0x13e9c388,440733696],
		[0x13e9c390,451439424],
		[0x13e9c398,0],
		[0x13e9c3a0,0],
		[0x13e9c3a8,0],
		[0x13e9c3b0,0],
		[0x13e9c3b8,0],
		[0x13e9c3d0,451688512],
		[0x13e9c3d8,334086720],
		[0x13e9c3e0,334089633],
		[0x13e9c3e8,451688544],
		[0x13e9c3f0,0],
		[0x13e9c3f8,0],
		[0x13e9c400,520032256],
		[0x13e9c418,333542617],
		[0x13e9c420,0],
		[0x13e9c428,0],
		[0x13e9c438,334445584],
		[0x13e9c440,334445584],
		[0x13e9c448,334342976],
		[0x13e9c450,436515264],
		[0x13e9c460,333584640],
		[0x13e9c468,0],
		[0x13e9c470,0],
		[0x13e9c478,0],
		[0x13e9c490,334087872],
		[0x13e9c498,334058816],
		[0x13e9c4a0,334088865],
		[0x13e9c4a8,334089440],
		[0x13e9c4b0,334060576],
		[0x13e9c4b8,0],
		[0x13e9c4c0,520032256],
		[0x13e9c4d8,449865881],
		[0x13e9c4e0,0],
		[0x13e9c4e8,0],
		[0x13e9c4f8,334087416],
		[0x13e9c500,334087416],
		[0x13e9c508,0],
		[0x13e9c510,436515264],
		[0x13e9c518,0],
		[0x13e9c520,333583104],
		[0x13e9c528,0],
		[0x13e9c530,0],
		[0x13e9c538,0],
		[0x13e9c550,334087680],
		[0x13e9c558,334088832],
		[0x13e9c560,334089057],
		[0x13e9c568,334087712],
		[0x13e9c570,0],
		[0x13e9c580,520032256],
		[0x13e9c598,0],
		[0x13e9c5a0,0],
		[0x13e9c5a8,0],
		[0x13e9c5b0,0],
		[0x13e9c5b8,334443984],
		[0x13e9c5c0,334443984],
		[0x13e9c5c8,334342256],
		[0x13e9c5d0,0],
		[0x13e9c5e0,0],
		[0x13e9c5e8,0],
		[0x13e9c5f0,0],
		[0x13e9c5f8,0],
		[0x13e9c610,334089024],
		[0x13e9c618,334087488],
		[0x13e9c620,334087520],
		[0x13e9c628,0],
		[0x13e9c630,0],
		[0x13e9c640,520032256],
		[0x13e9c660,0],
		[0x13e9c668,0],
		[0x13e9c670,0],
		[0x13e9c678,334087800],
		[0x13e9c680,334087800],
		[0x13e9c688,0],
		[0x13e9c690,436515264],
		[0x13e9c698,0],
		[0x13e9c6a0,451569152],
		[0x13e9c6a8,0],
		[0x13e9c6b0,0],
		[0x13e9c6b8,0],
		[0x13e9c6d0,334089408],
		[0x13e9c6d8,334087296],
		[0x13e9c6e0,334089441],
		[0x13e9c6e8,0],
		[0x13e9c6f0,0],
		[0x13e9c6f8,0],
		[0x13e9c700,520032256],
		[0x13e9c718,449866073],
		[0x13e9c720,334059096],
		[0x13e9c728,393007192],
		[0x13e9c738,334087992],
		[0x13e9c740,334087992],
		[0x13e9c748,0],
		[0x13e9c750,436515264],
		[0x13e9c760,333583104],
		[0x13e9c768,0],
		[0x13e9c770,0],
		[0x13e9c778,0],
		[0x13e9c790,450773760],
		[0x13e9c798,334086528],
		[0x13e9c7a0,334059232],
		[0x13e9c7a8,334088288],
		[0x13e9c7b0,334086560],
		[0x13e9c7c0,520032256],
		[0x13e9c7e0,450773848],
		[0x13e9c7e8,334086616],
		[0x13e9c7f8,334446288],
		[0x13e9c800,334446288],
		[0x13e9c808,334342496],
		[0x13e9c810,436515264],
		[0x13e9c820,333582592],
		[0x13e9c828,0],
		[0x13e9c830,0],
		[0x13e9c838,0],
		[0x13e9c850,334086336],
		[0x13e9c858,450773760],
		[0x13e9c860,334088097],
		[0x13e9c868,334086368],
		[0x13e9c870,450773792],
		[0x13e9c880,520032256],
		[0x13e9c898,0],
		[0x13e9c8a0,0],
		[0x13e9c8a8,0],
		[0x13e9c8b0,0],
		[0x13e9c8b8,334445904],
		[0x13e9c8c0,334445904],
		[0x13e9c8c8,334341216],
		[0x13e9c8d0,0],
		[0x13e9c8e0,0],
		[0x13e9c8e8,0],
		[0x13e9c8f0,0],
		[0x13e9c8f8,0],
		[0x13e9c910,334060544],
		[0x13e9c918,334057664],
		[0x13e9c920,334060577],
		[0x13e9c928,0],
		[0x13e9c930,0],
		[0x13e9c938,0],
		[0x13e9c940,520032256],
		[0x13e9c958,334060632],
		[0x13e9c960,0],
		[0x13e9c968,0],
		[0x13e9c978,334088568],
		[0x13e9c980,334088568],
		[0x13e9c988,0],
		[0x13e9c990,436515264],
		[0x13e9c9a0,333582848],
		[0x13e9c9a8,0],
		[0x13e9c9b0,0],
		[0x13e9c9b8,0],
		[0x13e9c9c0,0],
		[0x13e9c9d0,0],
		[0x13e9c9d8,0],
		[0x13e9c9e0,334504736],
		[0x13e9c9e8,334000928],
		[0x13e9c9f0,396044576],
		[0x13e9ca00,520040448],
		[0x13e9ca18,462593688],
		[0x13e9ca20,0],
		[0x13e9ca28,0],
		[0x13e9ca38,334088760],
		[0x13e9ca40,334088760],
		[0x13e9ca48,0],
		[0x13e9ca50,436515264],
		[0x13e9ca58,0],
		[0x13e9ca60,520104704],
		[0x13e9ca68,0],
		[0x13e9ca70,0],
		[0x13e9ca78,0],
		[0x13e9ca90,334087488],
		[0x13e9ca98,334089792],
		[0x13e9caa0,334057696],
		[0x13e9caa8,334086752],
		[0x13e9cab0,334087328],
		[0x13e9cac0,520032256],
		[0x13e9cad8,333543577],
		[0x13e9cae0,0],
		[0x13e9cae8,0],
		[0x13e9caf8,334088952],
		[0x13e9cb00,334088952],
		[0x13e9cb08,0],
		[0x13e9cb10,436515264],
		[0x13e9cb18,0],
		[0x13e9cb20,333584640],
		[0x13e9cb28,0],
		[0x13e9cb30,0],
		[0x13e9cb38,0],
		[0x13e9cb50,334089216],
		[0x13e9cb58,334087680],
		[0x13e9cb60,334086752],
		[0x13e9cb68,334089248],
		[0x13e9cb70,334087520],
		[0x13e9cb80,520032256],
		[0x13e9cb98,333501080],
		[0x13e9cba0,0],
		[0x13e9cba8,0],
		[0x13e9cbb8,334089144],
		[0x13e9cbc0,334089144],
		[0x13e9cbc8,0],
		[0x13e9cbd0,436515264],
		[0x13e9cbd8,0],
		[0x13e9cbe0,333846784],
		[0x13e9cbe8,0],
		[0x13e9cbf0,0],
		[0x13e9cbf8,0],
		[0x13e9cc10,334086720],
		[0x13e9cc18,334089024],
		[0x13e9cc20,334089057],
		[0x13e9cc28,0],
		[0x13e9cc30,0],
		[0x13e9cc38,0],
		[0x13e9cc40,520032256],
		[0x13e9cc58,0],
		[0x13e9cc60,0],
		[0x13e9cc68,0],
		[0x13e9cc70,0],
		[0x13e9cc78,334089336],
		[0x13e9cc80,334089336],
		[0x13e9cc88,0],
		[0x13e9cc90,436456992],
		[0x13e9cc98,0],
		[0x13e9cca0,0],
		[0x13e9cca8,436212480],
		[0x13e9ccb0,0],
		[0x13e9ccb8,0],
		[0x13e9ccd0,334059008],
		[0x13e9ccd8,334087872],
		[0x13e9cce0,334087328],
		[0x13e9cce8,334089824],
		[0x13e9ccf0,334087904],
		[0x13e9ccf8,0],
		[0x13e9cd00,520032256],
		[0x13e9cd18,451614105],
		[0x13e9cd20,0],
		[0x13e9cd28,0],
		[0x13e9cd38,334445520],
		[0x13e9cd40,334445520],
		[0x13e9cd48,334343776],
		[0x13e9cd50,436515264],
		[0x13e9cd60,333583104],
		[0x13e9cd68,0],
		[0x13e9cd70,0],
		[0x13e9cd78,0],
		[0x13e9cd90,334086144],
		[0x13e9cd98,451688512],
		[0x13e9cda0,334086752],
		[0x13e9cda8,334086176],
		[0x13e9cdb0,334087136],
		[0x13e9cdc0,520032256],
		[0x13e9cdd8,0],
		[0x13e9cde0,0],
		[0x13e9cde8,0],
		[0x13e9cdf0,0],
		[0x13e9cdf8,334445840],
		[0x13e9ce00,334445840],
		[0x13e9ce08,334342416],
		[0x13e9ce10,0],
		[0x13e9ce20,0],
		[0x13e9ce28,0],
		[0x13e9ce30,0],
		[0x13e9ce38,0],
		[0x13e9ce50,334088832],
		[0x13e9ce58,334059008],
		[0x13e9ce60,334089441],
		[0x13e9ce68,0],
		[0x13e9ce70,334059040],
		[0x13e9ce78,0],
		[0x13e9ce80,520032256],
		[0x13e9ce98,0],
		[0x13e9cea0,0],
		[0x13e9cea8,0],
		[0x13e9ceb0,0],
		[0x13e9ceb8,334443280],
		[0x13e9cec0,334443280],
		[0x13e9cec8,334342016],
		[0x13e9ced0,0],
		[0x13e9cee0,0],
		[0x13e9cee8,0],
		[0x13e9cef0,0],
		[0x13e9cef8,0],
		[0x13e9cf00,334088640],
		[0x13e9cf10,0],
		[0x13e9cf18,0],
		[0x13e9cf20,396044576],
		[0x13e9cf28,0],
		[0x13e9cf30,0],
		[0x13e9cf40,520040448],
		[0x13e9cf58,462593880],
		[0x13e9cf60,0],
		[0x13e9cf68,0],
		[0x13e9cf78,334090104],
		[0x13e9cf80,334090104],
		[0x13e9cf88,0],
		[0x13e9cf90,436515264],
		[0x13e9cf98,0],
		[0x13e9cfa0,520102400],
		[0x13e9cfa8,0],
		[0x13e9cfb0,0],
		[0x13e9cfb8,0],
		[0x13e9d068,0],
		[0x13e9d070,0],
		[0x13e9d078,0],
		[0x13e9d080,0],
		[0x13e9d088,0],
		[0x13e9d090,0],
		[0x13e9d098,0],
		[0x13e9d0a0,0],
		[0x13e9d0a8,0],
		[0x13e9d0b0,0],
		[0x13e9d0b8,0],
		[0x13e9d0c0,0],
		[0x13e9d0c8,0],
		[0x13e9d0d0,0],
		[0x13e9d0d8,0],
		[0x13e9d0e0,0],
		[0x13e9d0e8,0],
		[0x13e9d0f0,0],
		[0x13e9d0f8,0],
		[0x13e9d100,0],
		[0x13e9d108,0],
		[0x13e9d110,0],
		[0x13e9d118,0],
		[0x13e9d120,0],
		[0x13e9d128,0],
		[0x13e9d130,0],
		[0x13e9d138,0],
		[0x13e9d140,0],
		[0x13e9d148,0],
		[0x13e9d150,0],
		[0x13e9d158,0],
		[0x13e9d160,0],
		[0x13e9d168,0],
		[0x13e9d170,0],
		[0x13e9d178,0],
		[0, 0]
]).
unknown([
		[0x13e9c408,9223372036854775845],
		[0x13e9c588,9223372036854775845],
		[0x13e9c648,9223372036854775845],
		[0x13e9c7c8,9223372036854775845],
		[0x13e9c888,9223372036854775845],
		[0x13e9ca08,9223372036854775845],
		[0x13e9cb88,9223372036854775845],
		[0x13e9cc48,9223372036854775845],
		[0x13e9cd08,9223372036854775845],
		[0x13e9cdc8,9223372036854775845],
		[0x13e9ce88,9223372036854775845],
		[0x13e9cf48,9223372036854775845],
		[0, 0]
]).
long([
		[0x13e9c180,4194304],
		[0x13e9c188,4317184],
		[0x13e9c1b8,4194304],
		[0x13e9c1c8,37],
		[0x13e9c1d0,134219893],
		[0x13e9c1f0,29],
		[0x13e9c240,140264610611200],
		[0x13e9c248,140264610619392],
		[0x13e9c278,472876535808],
		[0x13e9c288,37],
		[0x13e9c290,134479989],
		[0x13e9c300,4294967296010],
		[0x13e9c308,4294967297000],
		[0x13e9c310,4294967297000],
		[0x13e9c318,4294967297000],
		[0x13e9c320,1000],
		[0x13e9c340,274877906943],
		[0x13e9c3c0,140264610619392],
		[0x13e9c3c8,140264610623488],
		[0x13e9c410,135268465],
		[0x13e9c430,37],
		[0x13e9c458,37],
		[0x13e9c480,140264606134272],
		[0x13e9c488,140264606261248],
		[0x13e9c4c8,37],
		[0x13e9c4d0,134217845],
		[0x13e9c4f0,30],
		[0x13e9c540,140264610508800],
		[0x13e9c548,140264610529280],
		[0x13e9c578,1982464],
		[0x13e9c590,135266419],
		[0x13e9c5d8,34244289675],
		[0x13e9c600,140264610566144],
		[0x13e9c608,140264610570240],
		[0x13e9c638,36864],
		[0x13e9c650,134217841],
		[0x13e9c658,1],
		[0x13e9c6c0,140264606261248],
		[0x13e9c6c8,140264608354304],
		[0x13e9c708,288],
		[0x13e9c710,134217840],
		[0x13e9c730,541],
		[0x13e9c758,31],
		[0x13e9c780,6410240],
		[0x13e9c788,6414336],
		[0x13e9c7b8,140264585400320],
		[0x13e9c7d0,135268465],
		[0x13e9c7d8,1],
		[0x13e9c7f0,30],
		[0x13e9c818,29],
		[0x13e9c840,6418432],
		[0x13e9c848,6893568],
		[0x13e9c878,140264585400320],
		[0x13e9c890,135266419],
		[0x13e9c8d8,1567],
		[0x13e9c900,140264603996160],
		[0x13e9c908,140264606093312],
		[0x13e9c948,288],
		[0x13e9c950,134217840],
		[0x13e9c970,959],
		[0x13e9c998,448],
		[0x13e9c9c8,140108628705280],
		[0x13e9c9f8,57344],
		[0x13e9ca10,134217841],
		[0x13e9ca30,185],
		[0x13e9ca80,140264608370688],
		[0x13e9ca88,140264608526336],
		[0x13e9cab8,472876535808],
		[0x13e9cac8,37],
		[0x13e9cad0,134219893],
		[0x13e9caf0,37],
		[0x13e9cb40,140264610570240],
		[0x13e9cb48,140264610598912],
		[0x13e9cb78,1982464],
		[0x13e9cb90,134217937],
		[0x13e9cbb0,6],
		[0x13e9cc00,140264610598912],
		[0x13e9cc08,140264610611200],
		[0x13e9cc50,201606161],
		[0x13e9ccc0,140264608354304],
		[0x13e9ccc8,140264608358400],
		[0x13e9cd10,135266417],
		[0x13e9cd30,30],
		[0x13e9cd58,30],
		[0x13e9cd80,140264610627584],
		[0x13e9cd88,140264610631680],
		[0x13e9cdb8,472876535808],
		[0x13e9cdd0,135266419],
		[0x13e9ce18,34244289704],
		[0x13e9ce40,140264608362496],
		[0x13e9ce48,140264608370688],
		[0x13e9ce90,135266419],
		[0x13e9ced8,34244289151],
		[0x13e9cf08,140108627943424],
		[0x13e9cf38,32768],
		[0x13e9cf50,134217841],
		[0x13e9cf70,291],
		[0x13e9d060,7631459],
		[0, 0]
]).
int([
		[0x13e9c184,0],
		[0x13e9c18c,0],
		[0x13e9c198,0],
		[0x13e9c19c,0],
		[0x13e9c1a8,0],
		[0x13e9c1ac,0],
		[0x13e9c1b0,0],
		[0x13e9c1b4,0],
		[0x13e9c1bc,0],
		[0x13e9c1c8,37],
		[0x13e9c1cc,0],
		[0x13e9c1d4,0],
		[0x13e9c1e0,0],
		[0x13e9c1e4,0],
		[0x13e9c1e8,0],
		[0x13e9c1ec,0],
		[0x13e9c1f0,29],
		[0x13e9c1f4,0],
		[0x13e9c208,0],
		[0x13e9c20c,0],
		[0x13e9c218,0],
		[0x13e9c21c,0],
		[0x13e9c228,0],
		[0x13e9c22c,0],
		[0x13e9c230,0],
		[0x13e9c234,0],
		[0x13e9c238,0],
		[0x13e9c23c,0],
		[0x13e9c244,32657],
		[0x13e9c24c,32657],
		[0x13e9c27c,110],
		[0x13e9c288,37],
		[0x13e9c28c,0],
		[0x13e9c294,0],
		[0x13e9c298,0],
		[0x13e9c29c,0],
		[0x13e9c2a0,0],
		[0x13e9c2a4,0],
		[0x13e9c2a8,0],
		[0x13e9c2ac,0],
		[0x13e9c2b0,0],
		[0x13e9c2b4,0],
		[0x13e9c2c8,0],
		[0x13e9c2cc,0],
		[0x13e9c2d8,0],
		[0x13e9c2dc,0],
		[0x13e9c2e0,0],
		[0x13e9c2e4,0],
		[0x13e9c2f0,0],
		[0x13e9c2f4,0],
		[0x13e9c2f8,0],
		[0x13e9c2fc,0],
		[0x13e9c300,10],
		[0x13e9c304,1000],
		[0x13e9c308,1000],
		[0x13e9c30c,1000],
		[0x13e9c310,1000],
		[0x13e9c314,1000],
		[0x13e9c318,1000],
		[0x13e9c31c,1000],
		[0x13e9c320,1000],
		[0x13e9c324,0],
		[0x13e9c328,0],
		[0x13e9c32c,0],
		[0x13e9c330,0],
		[0x13e9c334,0],
		[0x13e9c338,0],
		[0x13e9c33c,0],
		[0x13e9c344,63],
		[0x13e9c348,0],
		[0x13e9c34c,0],
		[0x13e9c350,0],
		[0x13e9c354,0],
		[0x13e9c358,0],
		[0x13e9c35c,0],
		[0x13e9c360,0],
		[0x13e9c364,0],
		[0x13e9c368,0],
		[0x13e9c36c,0],
		[0x13e9c370,0],
		[0x13e9c374,0],
		[0x13e9c398,0],
		[0x13e9c39c,0],
		[0x13e9c3a0,0],
		[0x13e9c3a4,0],
		[0x13e9c3a8,0],
		[0x13e9c3ac,0],
		[0x13e9c3b0,0],
		[0x13e9c3b4,0],
		[0x13e9c3b8,0],
		[0x13e9c3bc,0],
		[0x13e9c3c4,32657],
		[0x13e9c3cc,32657],
		[0x13e9c3f0,0],
		[0x13e9c3f4,0],
		[0x13e9c3f8,0],
		[0x13e9c3fc,0],
		[0x13e9c408,37],
		[0x13e9c414,0],
		[0x13e9c420,0],
		[0x13e9c424,0],
		[0x13e9c428,0],
		[0x13e9c42c,0],
		[0x13e9c430,37],
		[0x13e9c434,0],
		[0x13e9c458,37],
		[0x13e9c45c,0],
		[0x13e9c468,0],
		[0x13e9c46c,0],
		[0x13e9c470,0],
		[0x13e9c474,0],
		[0x13e9c478,0],
		[0x13e9c47c,0],
		[0x13e9c484,32657],
		[0x13e9c48c,32657],
		[0x13e9c4b8,0],
		[0x13e9c4bc,0],
		[0x13e9c4c8,37],
		[0x13e9c4cc,0],
		[0x13e9c4d4,0],
		[0x13e9c4e0,0],
		[0x13e9c4e4,0],
		[0x13e9c4e8,0],
		[0x13e9c4ec,0],
		[0x13e9c4f0,30],
		[0x13e9c4f4,0],
		[0x13e9c508,0],
		[0x13e9c50c,0],
		[0x13e9c518,0],
		[0x13e9c51c,0],
		[0x13e9c528,0],
		[0x13e9c52c,0],
		[0x13e9c530,0],
		[0x13e9c534,0],
		[0x13e9c538,0],
		[0x13e9c53c,0],
		[0x13e9c544,32657],
		[0x13e9c54c,32657],
		[0x13e9c570,0],
		[0x13e9c574,0],
		[0x13e9c57c,0],
		[0x13e9c588,37],
		[0x13e9c594,0],
		[0x13e9c598,0],
		[0x13e9c59c,0],
		[0x13e9c5a0,0],
		[0x13e9c5a4,0],
		[0x13e9c5a8,0],
		[0x13e9c5ac,0],
		[0x13e9c5b0,0],
		[0x13e9c5b4,0],
		[0x13e9c5d0,0],
		[0x13e9c5d4,0],
		[0x13e9c5dc,7],
		[0x13e9c5e0,0],
		[0x13e9c5e4,0],
		[0x13e9c5e8,0],
		[0x13e9c5ec,0],
		[0x13e9c5f0,0],
		[0x13e9c5f4,0],
		[0x13e9c5f8,0],
		[0x13e9c5fc,0],
		[0x13e9c604,32657],
		[0x13e9c60c,32657],
		[0x13e9c628,0],
		[0x13e9c62c,0],
		[0x13e9c630,0],
		[0x13e9c634,0],
		[0x13e9c63c,0],
		[0x13e9c648,37],
		[0x13e9c654,0],
		[0x13e9c658,1],
		[0x13e9c65c,0],
		[0x13e9c660,0],
		[0x13e9c664,0],
		[0x13e9c668,0],
		[0x13e9c66c,0],
		[0x13e9c670,0],
		[0x13e9c674,0],
		[0x13e9c688,0],
		[0x13e9c68c,0],
		[0x13e9c698,0],
		[0x13e9c69c,0],
		[0x13e9c6a8,0],
		[0x13e9c6ac,0],
		[0x13e9c6b0,0],
		[0x13e9c6b4,0],
		[0x13e9c6b8,0],
		[0x13e9c6bc,0],
		[0x13e9c6c4,32657],
		[0x13e9c6cc,32657],
		[0x13e9c6e8,0],
		[0x13e9c6ec,0],
		[0x13e9c6f0,0],
		[0x13e9c6f4,0],
		[0x13e9c6f8,0],
		[0x13e9c6fc,0],
		[0x13e9c708,288],
		[0x13e9c70c,0],
		[0x13e9c714,0],
		[0x13e9c730,541],
		[0x13e9c734,0],
		[0x13e9c748,0],
		[0x13e9c74c,0],
		[0x13e9c758,31],
		[0x13e9c75c,0],
		[0x13e9c768,0],
		[0x13e9c76c,0],
		[0x13e9c770,0],
		[0x13e9c774,0],
		[0x13e9c778,0],
		[0x13e9c77c,0],
		[0x13e9c784,0],
		[0x13e9c78c,0],
		[0x13e9c7bc,32657],
		[0x13e9c7c8,37],
		[0x13e9c7d4,0],
		[0x13e9c7d8,1],
		[0x13e9c7dc,0],
		[0x13e9c7f0,30],
		[0x13e9c7f4,0],
		[0x13e9c818,29],
		[0x13e9c81c,0],
		[0x13e9c828,0],
		[0x13e9c82c,0],
		[0x13e9c830,0],
		[0x13e9c834,0],
		[0x13e9c838,0],
		[0x13e9c83c,0],
		[0x13e9c844,0],
		[0x13e9c84c,0],
		[0x13e9c87c,32657],
		[0x13e9c888,37],
		[0x13e9c894,0],
		[0x13e9c898,0],
		[0x13e9c89c,0],
		[0x13e9c8a0,0],
		[0x13e9c8a4,0],
		[0x13e9c8a8,0],
		[0x13e9c8ac,0],
		[0x13e9c8b0,0],
		[0x13e9c8b4,0],
		[0x13e9c8d0,0],
		[0x13e9c8d4,0],
		[0x13e9c8d8,1567],
		[0x13e9c8dc,0],
		[0x13e9c8e0,0],
		[0x13e9c8e4,0],
		[0x13e9c8e8,0],
		[0x13e9c8ec,0],
		[0x13e9c8f0,0],
		[0x13e9c8f4,0],
		[0x13e9c8f8,0],
		[0x13e9c8fc,0],
		[0x13e9c904,32657],
		[0x13e9c90c,32657],
		[0x13e9c928,0],
		[0x13e9c92c,0],
		[0x13e9c930,0],
		[0x13e9c934,0],
		[0x13e9c938,0],
		[0x13e9c93c,0],
		[0x13e9c948,288],
		[0x13e9c94c,0],
		[0x13e9c954,0],
		[0x13e9c960,0],
		[0x13e9c964,0],
		[0x13e9c968,0],
		[0x13e9c96c,0],
		[0x13e9c970,959],
		[0x13e9c974,0],
		[0x13e9c988,0],
		[0x13e9c98c,0],
		[0x13e9c998,448],
		[0x13e9c99c,0],
		[0x13e9c9a8,0],
		[0x13e9c9ac,0],
		[0x13e9c9b0,0],
		[0x13e9c9b4,0],
		[0x13e9c9b8,0],
		[0x13e9c9bc,0],
		[0x13e9c9c0,0],
		[0x13e9c9c4,0],
		[0x13e9c9cc,32621],
		[0x13e9c9d0,0],
		[0x13e9c9d4,0],
		[0x13e9c9d8,0],
		[0x13e9c9dc,0],
		[0x13e9c9fc,0],
		[0x13e9ca08,37],
		[0x13e9ca14,0],
		[0x13e9ca20,0],
		[0x13e9ca24,0],
		[0x13e9ca28,0],
		[0x13e9ca2c,0],
		[0x13e9ca30,185],
		[0x13e9ca34,0],
		[0x13e9ca48,0],
		[0x13e9ca4c,0],
		[0x13e9ca58,0],
		[0x13e9ca5c,0],
		[0x13e9ca68,0],
		[0x13e9ca6c,0],
		[0x13e9ca70,0],
		[0x13e9ca74,0],
		[0x13e9ca78,0],
		[0x13e9ca7c,0],
		[0x13e9ca84,32657],
		[0x13e9ca8c,32657],
		[0x13e9cabc,110],
		[0x13e9cac8,37],
		[0x13e9cacc,0],
		[0x13e9cad4,0],
		[0x13e9cae0,0],
		[0x13e9cae4,0],
		[0x13e9cae8,0],
		[0x13e9caec,0],
		[0x13e9caf0,37],
		[0x13e9caf4,0],
		[0x13e9cb08,0],
		[0x13e9cb0c,0],
		[0x13e9cb18,0],
		[0x13e9cb1c,0],
		[0x13e9cb28,0],
		[0x13e9cb2c,0],
		[0x13e9cb30,0],
		[0x13e9cb34,0],
		[0x13e9cb38,0],
		[0x13e9cb3c,0],
		[0x13e9cb44,32657],
		[0x13e9cb4c,32657],
		[0x13e9cb7c,0],
		[0x13e9cb88,37],
		[0x13e9cb94,0],
		[0x13e9cba0,0],
		[0x13e9cba4,0],
		[0x13e9cba8,0],
		[0x13e9cbac,0],
		[0x13e9cbb0,6],
		[0x13e9cbb4,0],
		[0x13e9cbc8,0],
		[0x13e9cbcc,0],
		[0x13e9cbd8,0],
		[0x13e9cbdc,0],
		[0x13e9cbe8,0],
		[0x13e9cbec,0],
		[0x13e9cbf0,0],
		[0x13e9cbf4,0],
		[0x13e9cbf8,0],
		[0x13e9cbfc,0],
		[0x13e9cc04,32657],
		[0x13e9cc0c,32657],
		[0x13e9cc28,0],
		[0x13e9cc2c,0],
		[0x13e9cc30,0],
		[0x13e9cc34,0],
		[0x13e9cc38,0],
		[0x13e9cc3c,0],
		[0x13e9cc48,37],
		[0x13e9cc54,0],
		[0x13e9cc58,0],
		[0x13e9cc5c,0],
		[0x13e9cc60,0],
		[0x13e9cc64,0],
		[0x13e9cc68,0],
		[0x13e9cc6c,0],
		[0x13e9cc70,0],
		[0x13e9cc74,0],
		[0x13e9cc88,0],
		[0x13e9cc8c,0],
		[0x13e9cc98,0],
		[0x13e9cc9c,0],
		[0x13e9cca0,0],
		[0x13e9cca4,0],
		[0x13e9ccb0,0],
		[0x13e9ccb4,0],
		[0x13e9ccb8,0],
		[0x13e9ccbc,0],
		[0x13e9ccc4,32657],
		[0x13e9cccc,32657],
		[0x13e9ccf8,0],
		[0x13e9ccfc,0],
		[0x13e9cd08,37],
		[0x13e9cd14,0],
		[0x13e9cd20,0],
		[0x13e9cd24,0],
		[0x13e9cd28,0],
		[0x13e9cd2c,0],
		[0x13e9cd30,30],
		[0x13e9cd34,0],
		[0x13e9cd58,30],
		[0x13e9cd5c,0],
		[0x13e9cd68,0],
		[0x13e9cd6c,0],
		[0x13e9cd70,0],
		[0x13e9cd74,0],
		[0x13e9cd78,0],
		[0x13e9cd7c,0],
		[0x13e9cd84,32657],
		[0x13e9cd8c,32657],
		[0x13e9cdbc,110],
		[0x13e9cdc8,37],
		[0x13e9cdd4,0],
		[0x13e9cdd8,0],
		[0x13e9cddc,0],
		[0x13e9cde0,0],
		[0x13e9cde4,0],
		[0x13e9cde8,0],
		[0x13e9cdec,0],
		[0x13e9cdf0,0],
		[0x13e9cdf4,0],
		[0x13e9ce10,0],
		[0x13e9ce14,0],
		[0x13e9ce1c,7],
		[0x13e9ce20,0],
		[0x13e9ce24,0],
		[0x13e9ce28,0],
		[0x13e9ce2c,0],
		[0x13e9ce30,0],
		[0x13e9ce34,0],
		[0x13e9ce38,0],
		[0x13e9ce3c,0],
		[0x13e9ce44,32657],
		[0x13e9ce4c,32657],
		[0x13e9ce68,0],
		[0x13e9ce6c,0],
		[0x13e9ce78,0],
		[0x13e9ce7c,0],
		[0x13e9ce88,37],
		[0x13e9ce94,0],
		[0x13e9ce98,0],
		[0x13e9ce9c,0],
		[0x13e9cea0,0],
		[0x13e9cea4,0],
		[0x13e9cea8,0],
		[0x13e9ceac,0],
		[0x13e9ceb0,0],
		[0x13e9ceb4,0],
		[0x13e9ced0,0],
		[0x13e9ced4,0],
		[0x13e9cedc,7],
		[0x13e9cee0,0],
		[0x13e9cee4,0],
		[0x13e9cee8,0],
		[0x13e9ceec,0],
		[0x13e9cef0,0],
		[0x13e9cef4,0],
		[0x13e9cef8,0],
		[0x13e9cefc,0],
		[0x13e9cf0c,32621],
		[0x13e9cf10,0],
		[0x13e9cf14,0],
		[0x13e9cf18,0],
		[0x13e9cf1c,0],
		[0x13e9cf28,0],
		[0x13e9cf2c,0],
		[0x13e9cf30,0],
		[0x13e9cf34,0],
		[0x13e9cf3c,0],
		[0x13e9cf48,37],
		[0x13e9cf54,0],
		[0x13e9cf60,0],
		[0x13e9cf64,0],
		[0x13e9cf68,0],
		[0x13e9cf6c,0],
		[0x13e9cf70,291],
		[0x13e9cf74,0],
		[0x13e9cf88,0],
		[0x13e9cf8c,0],
		[0x13e9cf98,0],
		[0x13e9cf9c,0],
		[0x13e9cfa8,0],
		[0x13e9cfac,0],
		[0x13e9cfb0,0],
		[0x13e9cfb4,0],
		[0x13e9cfb8,0],
		[0x13e9cfbc,0],
		[0x13e9d064,0],
		[0x13e9d068,0],
		[0x13e9d06c,0],
		[0x13e9d070,0],
		[0x13e9d074,0],
		[0x13e9d078,0],
		[0x13e9d07c,0],
		[0x13e9d080,0],
		[0x13e9d084,0],
		[0x13e9d088,0],
		[0x13e9d08c,0],
		[0x13e9d090,0],
		[0x13e9d094,0],
		[0x13e9d098,0],
		[0x13e9d09c,0],
		[0x13e9d0a0,0],
		[0x13e9d0a4,0],
		[0x13e9d0a8,0],
		[0x13e9d0ac,0],
		[0x13e9d0b0,0],
		[0x13e9d0b4,0],
		[0x13e9d0b8,0],
		[0x13e9d0bc,0],
		[0x13e9d0c0,0],
		[0x13e9d0c4,0],
		[0x13e9d0c8,0],
		[0x13e9d0cc,0],
		[0x13e9d0d0,0],
		[0x13e9d0d4,0],
		[0x13e9d0d8,0],
		[0x13e9d0dc,0],
		[0x13e9d0e0,0],
		[0x13e9d0e4,0],
		[0x13e9d0e8,0],
		[0x13e9d0ec,0],
		[0x13e9d0f0,0],
		[0x13e9d0f4,0],
		[0x13e9d0f8,0],
		[0x13e9d0fc,0],
		[0x13e9d100,0],
		[0x13e9d104,0],
		[0x13e9d108,0],
		[0x13e9d10c,0],
		[0x13e9d110,0],
		[0x13e9d114,0],
		[0x13e9d118,0],
		[0x13e9d11c,0],
		[0x13e9d120,0],
		[0x13e9d124,0],
		[0x13e9d128,0],
		[0x13e9d12c,0],
		[0x13e9d130,0],
		[0x13e9d134,0],
		[0x13e9d138,0],
		[0x13e9d13c,0],
		[0x13e9d140,0],
		[0x13e9d144,0],
		[0x13e9d148,0],
		[0x13e9d14c,0],
		[0x13e9d150,0],
		[0x13e9d154,0],
		[0x13e9d158,0],
		[0x13e9d15c,0],
		[0x13e9d160,0],
		[0x13e9d164,0],
		[0x13e9d168,0],
		[0x13e9d16c,0],
		[0x13e9d170,0],
		[0x13e9d174,0],
		[0x13e9d178,0],
		[0x13e9d17c,0],
		[0, 0]
]).
string_val([
		[0x13e9d000,7018986666877744431],
		[0x13e9d008,7305732916824204658],
		[0x13e9d010,8386093285481477234],
		[0x13e9d018,7811909647642620773],
		[0x13e9d020,8316303966479540588],
		[0x13e9d028,8314045423722325865],
		[0x13e9d030,7809933691868831603],
		[0x13e9d038,7020383333836088169],
		[0x13e9d040,7598824250528463218],
		[0x13e9d048,7957695015157983590],
		[0x13e9d050,7598258015748571487],
		[0x13e9d058,3329083023665625460],
		[0, 0]
]).
:- use_module(library(clpfd)).
:- use_module(reif).
:- style_check(-singleton).

isTrue([X, Y]):-
    X == 49.

isTrue([X|Tail]):-
    isTrue(Tail).

log(File_name, Name, Addr, Base):-
    Offset #= Addr - Base,
    open(File_name, append, Stream),
    write(Stream, Name),
    write(Stream, ':'),
    write(Stream, Offset),
    nl(Stream),
    close(Stream).

possible_task_struct(Base_addr) :-
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM2_addr, Pid_addr, Tgid_addr, Real_parent_addr, Parent_addr , Child_addr, 
           Group_leader_addr, Thread_group_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    %MM2_addr #> Base_addr + 1000,
    Tasks_addr #> MM2_addr - 100,
    %FS_struct_addr #< Base_addr + 4000,
    Tgid_addr #= Pid_addr + 4,
    Real_parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr - 8,
    Child_addr #= Parent_addr + 8,
    %FIXME This may be too strong
    Group_leader_addr #=< Child_addr +32,
    %Comm_addr #= Base_addr + 1656,
    %Tasks_addr #= Base_addr + 1072,
    %FS_struct_addr #= Base_addr + 2640,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    % make query after labeling
    MM2_val #> 0,
    integer(MM2_val),
    
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val,  Comm_addr, Comm_val ]),

    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_parent_addr, Real_parent_val, Group_leader_addr, Group_leader_val]),
    Real_parent_val #> 0,
    Group_leader_val #> 0,
    query_ts(Real_parent_val, Comm_offset, Tasks_offset),
    query_ts(Group_leader_val, Comm_offset, Tasks_offset),

    labeling([enum], [Cred_addr, Cred_val]),
    Cred_val #> 0,
    query_cred(Cred_val),

    labeling([enum], [FS_struct_addr, FS_struct_val]),
    FS_struct_val #> 0,
    %query_fs_struct(FS_struct_val),



    get_time(End),
    Time_past is End - Current,
    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    log("profile.txt", "tasks", Tasks_addr, Base_addr),
    log("profile.txt", "mm_struct", MM2_addr, Base_addr),
    log("profile.txt", "comm", Comm_addr, Base_addr),
    log("profile.txt", "parent", Parent_addr, Base_addr),
    log("profile.txt", "group_leader", Group_leader_addr, Base_addr),
    log("profile.txt", "cred", Cred_addr, Base_addr),

    
    print_nl('tasks offset', Tasks_offset),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).

possible_mm_struct(Current_addr) :- 
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    % TODO: ADD vm_area_struct *mmap
    Ptr_profile = [
        [Mmap_addr, Mmap_val],
        [Pgd_addr, Pgd_val]  
    ],
    Ulong_profile = [
        [Mmap_base_addr, Mmap_base_val],
        [Mmap_legacy_base_addr, Mmap_legacy_base_val],
        [Task_size_addr, Task_size_val],
        [High_vm_end_addr, High_vm_end_val],
        [Start_brk_addr, Start_brk_val],
        [Brk_addr, Brk_val],
        [Start_stack_addr, Start_stack_val],
        [ARG_start_addr, ARG_start_val]
    ],
    Mmap_addr #= Current_addr,


    Mmap_base_addr #> Mmap_addr,
    %FIXME mmap_base need more value constraint, because we removed mmap_legacy_base and highest_vm_end.
    Mmap_base_val #> 0x7f0000000000,
    %FIXME in old linux version, e.g., there is no mmap_legacy_base and highest_vm_enb
    %chain([Mmap_base_addr, Mmap_legacy_base_addr, Task_size_addr, High_vm_end_addr, Pgd_addr], #<),
    chain([Mmap_base_addr, Task_size_addr, Pgd_addr], #<),

    %FIXME: This rule may be too strong
    %High_vm_end_addr #= Mmap_base_addr + 24, 
    Pgd_addr #> Task_size_addr,
    Pgd_addr #=< Task_size_addr + 40,
    %FIXME: This rule may not be true for other mm_struct.
    Task_size_val #>= 0x7ffffffff000,

    %Mmap_base_addr #= Current_addr + 40,
    %Mmap_legacy_base_addr #= Current_addr + 40,
    %Task_size_addr #= Current_addr + 48,
    %High_vm_end_addr #= Current_addr + 72,

    Start_brk_addr #> Pgd_addr,
    Start_stack_val #> 0x7ff000000000,
    % TODO: Convert this to index comparison. 
    ARG_start_addr #< Current_addr + 500,
    chain([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr], #<),
    ARG_start_addr #= Start_brk_addr + 24,
    Brk_val #< 0x7ff000000000,
    ARG_start_val #> 0x7ff000000000,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),


    labeling([enum], [Mmap_addr, Mmap_val, Mmap_base_addr, Pgd_addr, Pgd_val]),
    Mmap_val #> 0,
    Pgd_val #> 0,
    
    process_create(path('python'),
                    ['subquery.py', Mmap_val, "vm_area_struct", 2],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    label([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr]),
    statistics(real_time, [End|_]),

    log("profile.txt", "mmap", Mmap_addr, Current_addr),
    log("profile.txt", "mmap_base", Mmap_base_addr, Current_addr),
    log("profile.txt", "pgd", Pgd_addr, Current_addr),
    log("profile.txt", "start_brk", Start_brk_addr, Current_addr),
    log("profile.txt", "brk", Brk_addr, Current_addr),
    log("profile.txt", "start_stack", Start_stack_addr, Current_addr),
    log("profile.txt", "arg_start", ARG_start_addr, Current_addr),
    log("profile.txt", "mm_struct time", End, Start).


possible_vm_area_struct(Base_addr, Level) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [VM_next_addr, VM_next_val],
        [VM_file_addr, VM_file_val]
    ],
    Ulong_profile = [
        [VM_start_addr, VM_start_val],
        [VM_end_addr, VM_end_val],
        [VM_flag_addr, VM_flag_val]
        %VM_pgoff is 0, and we do not consider 0 as ulong
        %[VM_pgoff_addr, VM_pgoff_val]
    ],
    VM_start_addr #>= Base_addr,
    chain([VM_start_addr, VM_end_addr, VM_next_addr, VM_flag_addr, VM_file_addr], #<),
    VM_end_addr #= VM_start_addr + 8,
    VM_next_addr #= VM_end_addr + 8,
    VM_next_addr #< Base_addr + 32,
    VM_file_addr #< Base_addr + 180,
    VM_pgoff_addr #= VM_file_addr - 8,
    %VM_file_addr #= Base_addr + 160,

    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    %FIXME: VM_flag may need value constraints.

    label([VM_next_addr, VM_next_val]),
    /*if_(Level = 2,
        call(check_vm_area_struct, VM_next_val, 1),
        1 = 1),*/
    %Level #> 1 #==> check_vm_area_struct(VM_next_val, 1),

    labeling([enum], [VM_start_addr, VM_end_addr, VM_flag_addr, VM_pgoff_addr, VM_file_addr, VM_file_val]),
    
    VM_file_val #> 0,
    process_create(path('python'),
                ['subquery.py', VM_file_val, "vm_file"],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    statistics(real_time, [End|_]),

    log("profile.txt", "vm_start", VM_start_addr, Base_addr),
    log("profile.txt", "vm_end", VM_end_addr, Base_addr),
    log("profile.txt", "vm_next", VM_next_addr, Base_addr),
    log("profile.txt", "vm_flag", VM_flag_addr, Base_addr),
    log("profile.txt", "vm_pgoff", VM_pgoff_addr, Base_addr),
    log("profile.txt", "vm_file", VM_file_addr, Base_addr),
    log("profile.txt", "vm_area_struct time", End, Start).

check_vm_area_struct(Base_addr, Level) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "vm_area_struct", Level],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vm_file(Base_addr) :-
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [Vfs_mount_addr, Vfs_mount_val],
        [Dentry_addr, Dentry_val]
    ],
    Vfs_mount_addr #> Base_addr,
    Dentry_addr #= Vfs_mount_addr + 8,
    Dentry_addr #< Base_addr + 40,
    tuples_in(Ptr_profile, Ptr),
    label([Vfs_mount_val, Dentry_val]),
    Vfs_mount_val #>0,
    Dentry_val #> 0,
    %FIXME seems like we do not need this, make sure the string is not addr=0
/*
    process_create(path('python'),
                    ['subquery.py', Vfs_mount_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vfs_mount(Base_addr) :-
    pointer(Ptr),
    Ptr_profile = [
        [Dentry_addr, Dentry_val]
    ],
    Dentry_addr #< Base_addr + 16,
    tuples_in(Ptr_profile, Ptr),
    label([Dentry_val]),
    Dentry_val #> 0,
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).
    
possible_dentry(Base_addr) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    string_val(Str),
    Ptr_profile = [
        [Dparent_addr, Dparent_val],
        [Dchild_addr, Dchild_val]
    ],
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    %log("profile.txt", "dentry addr", Base_addr, 0),
    Dparent_addr #> Base_addr,
    Dname_addr #> 0,
    Dname_addr #< Base_addr + 200,
    %Dname_addr #= Base_addr + 160,
    %FIXME This child rule is not applicable for old kernel version. 
    %chain([Dparent_addr, Dname_addr, Dchild_addr], #<),
    %Dchild_addr #< Base_addr + 200,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    labeling([enum], [Dparent_addr, Dparent_val, Dname_addr, Dchild_addr, Dchild_val]),
    Dname_offset #= Dname_addr - Base_addr,
    integer(Dname_offset),
    Dparent_val #> 0,
    
    %FIXME d_parent may not be initialized
    /*process_create(path('python'),
                ['subquery.py', Dparent_val, "d_entry", Dname_offset],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/

    %FIXME: may need to find another way for all list_head. 
    /*Dchild_offset #= Dchild_addr - Base_addr,
    integer(Dchild_offset),
    Dchild_base #= Dchild_val - Dchild_offset,
    integer(Dchild_base),
    Dchild_base #> 0,
    process_create(path('python'),
                ['subquery.py', Dchild_base, "d_entry", Dname_offset],
                [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    statistics(real_time, [End|_]).
/*
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    log("profile.txt", "d_parent", Dparent_addr, Base_addr),
    log("profile.txt", "d_child", Dchild_addr, Base_addr),
    log("profile.txt", "dentry time", End, Start).
*/
possible_d_entry(Base_addr, Dname_offset) :-
    current_predicate(string_val/1),
    string_val(Str),
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    Dname_addr #= Base_addr + Dname_offset,
    tuples_in(Str_profile, Str),
    label([Dname_addr]).

possible_list_head(Tasks_val, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_val, Tasks_addr]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],
    Comm_addr #= Tasks_val - Tasks_offset + Comm_offset,
    Tasks_addr #\= Tasks_val,
    tuples_in(Str_profile, Str),
    tuples_in(Ptr_profile, Ptr),
    label([Comm_addr]).

possible_ts(Base_addr, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_addr, Tasks_val]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],

    Comm_addr #= Base_addr + Comm_offset,
    Tasks_addr #= Base_addr + Tasks_offset,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),

    label([Tasks_val]),
    
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "list_head", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_cred(Base_addr) :-
    statistics(real_time, [Start|_]),

    int(Int),
    long(Ulg),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3],
        [Addr4, Val4],
        [Addr5, Val5],
        [Addr6, Val6],
        [Addr7, Val7],
        [Addr8, Val8],
        [Addr9, Val9]
    ],
    %FIXME For now, this rule is hard-coded because we do not consider 0 as a unsign long number. 
    %So that for cred whos val10 is 0, this rule does not apply.
    /*Ulong_profile = [
        [Addr10, Val10],
        [Addr11, Val11]
    ],*/
    Addr1 #> Base_addr,
    %chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9, Addr10, Addr11], #<),
    chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9], #<),
    Addr1 #= Base_addr + 4,
    Addr9 #= Addr1 + 32,
    %Addr11 #< Base_addr + 120,
    tuples_in(Int_profile, Int),
    %tuples_in(Ulong_profile, Ulg),
    statistics(real_time, [End|_]),
    labeling([enum], [Addr1, Addr2, Addr5, Addr6]),
    log("profile.txt", "cred time", End, Start),
    log('profile.txt', "uid", Addr1, Base_addr),
    log('profile.txt', "gid", Addr2, Base_addr),
    log('profile.txt', "euid", Addr5, Base_addr),
    log('profile.txt', "egid", Addr6, Base_addr).

possible_fs_struct(Base_addr) :-
    statistics(real_time, [Start|_]),
    int(Int),
    pointer(Ptr),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3]
    ],
    Ptr_profile = [
        [Root_addr, Root_val],
        [PWD_addr, PWD_val]
    ],
    Addr1 #>= Base_addr,
    chain([Addr1, Addr2, Addr3, Root_addr, PWD_addr], #<),
    PWD_addr #= Root_addr + 16,
    PWD_addr #< Base_addr + 50,
    tuples_in(Int_profile, Int),
    tuples_in(Ptr_profile, Ptr),
    label([Root_addr, Root_val]),
    
    process_create(path('python'),
                    ['subquery.py', Root_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    label([PWD_addr, PWD_val]),
    process_create(path('python'),
                    ['subquery.py', PWD_val, "dentry"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    statistics(real_time, [End|_]),
    log("profile.txt", "fs time", End, Start),
    log('profile.txt', "Root", Root_addr, Base_addr),
    log('profile.txt', "pwd", PWD_addr, Base_addr).
