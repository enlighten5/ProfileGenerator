:- use_module(library(clpfd)).
:- style_check(-singleton).
pointer([
		[0x39222f10,958540992],
		[0x39222f18,0],
		[0x39222f20,958541025],
		[0x39222f28,0],
		[0x39222f30,0],
		[0x39222f40,1017147392],
		[0x39222f58,958541080],
		[0x39222f60,0],
		[0x39222f68,0],
		[0x39222f78,958541688],
		[0x39222f80,958541688],
		[0x39222f88,0],
		[0x39222f90,388280768],
		[0x39222f98,0],
		[0x39222fa0,987693824],
		[0x39222fa8,0],
		[0x39222fb0,0],
		[0x39222fb8,0],
		[0x39223000,0],
		[0x39223008,0],
		[0x39223010,0],
		[0x39223018,0],
		[0x39223020,0],
		[0x39223028,0],
		[0x39223030,0],
		[0x39223038,0],
		[0x39223040,0],
		[0x39223048,0],
		[0x39223050,0],
		[0x39223058,0],
		[0x39223060,0],
		[0x39223068,0],
		[0x39223070,0],
		[0x39223078,0],
		[0x39223080,0],
		[0x39223088,0],
		[0x39223090,0],
		[0x39223098,0],
		[0x392230a0,0],
		[0x392230a8,0],
		[0x392230b0,0],
		[0x392230b8,0],
		[0x392230c0,0],
		[0x392230c8,0],
		[0x392230d0,0],
		[0x392230d8,0],
		[0x392230e0,0],
		[0x392230e8,0],
		[0x392230f0,0],
		[0x392230f8,0],
		[0x39223100,0],
		[0x39223108,0],
		[0x39223110,0],
		[0x39223118,0],
		[0x39223120,0],
		[0x39223128,0],
		[0x39223130,0],
		[0x39223138,0],
		[0x39223140,0],
		[0x39223148,0],
		[0x39223150,0],
		[0x39223158,0],
		[0x39223160,0],
		[0x39223168,0],
		[0x39223170,0],
		[0x39223178,0],
		[0x39223180,0],
		[0x39223188,0],
		[0x39223190,0],
		[0x39223198,0],
		[0x392231a0,0],
		[0x392231a8,0],
		[0x392231b0,0],
		[0x392231b8,0],
		[0x392231c0,0],
		[0x392231c8,0],
		[0x392231d0,0],
		[0x392231d8,0],
		[0x392231e0,0],
		[0x392231e8,0],
		[0x392231f0,0],
		[0x392231f8,0],
		[0x39223200,0],
		[0x39223208,0],
		[0x39223210,0],
		[0x39223218,0],
		[0x39223220,0],
		[0x39223228,0],
		[0x39223230,0],
		[0x39223238,0],
		[0x39223240,0],
		[0x39223248,0],
		[0x39223250,0],
		[0x39223258,0],
		[0x39223260,0],
		[0x39223268,0],
		[0x39223270,0],
		[0x39223278,0],
		[0x39223280,0],
		[0x39223288,0],
		[0x39223290,0],
		[0x39223298,0],
		[0x392232a0,0],
		[0x392232a8,0],
		[0x392232b0,0],
		[0x392232b8,0],
		[0x392232c0,0],
		[0x392232c8,0],
		[0x392232d0,0],
		[0x392232d8,0],
		[0x392232e0,0],
		[0x392232e8,0],
		[0x392232f0,0],
		[0x392232f8,0],
		[0x39223300,0],
		[0x39223308,0],
		[0x39223310,0],
		[0x39223318,0],
		[0x39223320,0],
		[0x39223328,0],
		[0x39223330,0],
		[0x39223338,0],
		[0x39223340,0],
		[0x39223348,0],
		[0x39223350,0],
		[0x39223358,0],
		[0x39223360,0],
		[0x39223368,0],
		[0x39223370,0],
		[0x39223378,0],
		[0x39223380,0],
		[0x39223388,0],
		[0x39223390,0],
		[0x39223398,0],
		[0x392233a0,0],
		[0x392233a8,0],
		[0x392233b0,0],
		[0x392233b8,0],
		[0x392233c0,0],
		[0x392233c8,0],
		[0x392233d0,0],
		[0x392233d8,0],
		[0x392233e0,0],
		[0x392233e8,0],
		[0x392233f0,0],
		[0x392233f8,0],
		[0x39223400,0],
		[0x39223408,0],
		[0x39223410,0],
		[0x39223418,0],
		[0x39223420,0],
		[0x39223428,0],
		[0x39223430,0],
		[0x39223438,0],
		[0x39223440,0],
		[0x39223448,0],
		[0x39223450,0],
		[0x39223458,0],
		[0x39223460,0],
		[0x39223468,0],
		[0x39223470,0],
		[0x39223478,0],
		[0x39223480,0],
		[0x39223488,0],
		[0x39223490,0],
		[0x39223498,0],
		[0x392234a0,0],
		[0x392234a8,0],
		[0x392234b0,0],
		[0x392234b8,0],
		[0x392234c0,0],
		[0x392234c8,0],
		[0x392234d0,0],
		[0x392234d8,0],
		[0x392234e0,0],
		[0x392234e8,0],
		[0x392234f0,0],
		[0x392234f8,0],
		[0x39223500,0],
		[0x39223508,0],
		[0x39223510,0],
		[0x39223518,0],
		[0x39223520,0],
		[0x39223528,0],
		[0x39223530,0],
		[0x39223538,0],
		[0x39223540,0],
		[0x39223548,0],
		[0x39223550,0],
		[0x39223558,0],
		[0x39223560,0],
		[0x39223568,0],
		[0x39223570,0],
		[0x39223578,0],
		[0x39223580,0],
		[0x39223588,0],
		[0x39223590,0],
		[0x39223598,0],
		[0x392235a0,0],
		[0x392235a8,0],
		[0x392235b0,0],
		[0x392235b8,0],
		[0x392235c0,0],
		[0x392235c8,0],
		[0x392235d0,0],
		[0x392235d8,0],
		[0x392235e0,0],
		[0x392235e8,0],
		[0x392235f0,0],
		[0x392235f8,0],
		[0x39223600,0],
		[0x39223608,0],
		[0x39223610,0],
		[0x39223618,0],
		[0x39223620,0],
		[0x39223628,0],
		[0x39223630,0],
		[0x39223638,0],
		[0x39223640,0],
		[0x39223648,0],
		[0x39223650,0],
		[0x39223658,0],
		[0x39223660,0],
		[0x39223668,0],
		[0x39223670,0],
		[0x39223678,0],
		[0x39223680,0],
		[0x39223688,0],
		[0x39223690,0],
		[0x39223698,0],
		[0x392236a0,0],
		[0x392236a8,0],
		[0x392236b0,0],
		[0x392236b8,0],
		[0x392236c0,0],
		[0x392236c8,0],
		[0x392236d0,0],
		[0x392236d8,0],
		[0x392236e0,0],
		[0x392236e8,0],
		[0x392236f0,0],
		[0x392236f8,0],
		[0x39223700,0],
		[0x39223708,0],
		[0x39223710,0],
		[0x39223718,0],
		[0x39223720,0],
		[0x39223728,0],
		[0x39223730,0],
		[0x39223738,0],
		[0x39223740,0],
		[0x39223748,0],
		[0x39223750,0],
		[0x39223758,0],
		[0x39223760,0],
		[0x39223768,0],
		[0x39223770,0],
		[0x39223778,0],
		[0x39223780,0],
		[0x39223788,0],
		[0x39223790,0],
		[0x39223798,0],
		[0x392237a0,0],
		[0x392237a8,0],
		[0x392237b0,0],
		[0x392237b8,0],
		[0x392237c0,0],
		[0x392237c8,0],
		[0x392237d0,0],
		[0x392237d8,0],
		[0x392237e0,0],
		[0x392237e8,0],
		[0x392237f0,0],
		[0x392237f8,0],
		[0x39223800,0],
		[0x39223808,0],
		[0x39223810,0],
		[0x39223818,0],
		[0x39223820,0],
		[0x39223828,0],
		[0x39223830,0],
		[0x39223838,0],
		[0x39223840,0],
		[0x39223848,0],
		[0x39223850,0],
		[0x39223858,0],
		[0x39223860,0],
		[0x39223868,0],
		[0x39223870,0],
		[0x39223878,0],
		[0x39223880,0],
		[0x39223888,0],
		[0x39223890,0],
		[0x39223898,0],
		[0x392238a0,0],
		[0x392238a8,0],
		[0x392238b0,0],
		[0x392238b8,0],
		[0x392238c0,0],
		[0x392238c8,0],
		[0x392238d0,0],
		[0x392238d8,0],
		[0x392238e0,0],
		[0x392238e8,0],
		[0x392238f0,0],
		[0x392238f8,0],
		[0x39223900,0],
		[0x39223908,0],
		[0x39223910,0],
		[0x39223918,0],
		[0x39223920,0],
		[0x39223928,0],
		[0x39223930,0],
		[0x39223938,0],
		[0x39223940,0],
		[0x39223948,0],
		[0x39223950,0],
		[0x39223958,0],
		[0x39223960,0],
		[0x39223968,0],
		[0x39223970,0],
		[0x39223978,0],
		[0x39223980,0],
		[0x39223988,0],
		[0x39223990,0],
		[0x39223998,0],
		[0x392239a0,0],
		[0x392239a8,0],
		[0x392239b0,0],
		[0x392239b8,0],
		[0x392239c0,0],
		[0x392239c8,0],
		[0x392239d0,0],
		[0x392239d8,0],
		[0x392239e0,0],
		[0x392239e8,0],
		[0x392239f0,0],
		[0x392239f8,0],
		[0x39223a00,0],
		[0x39223a08,0],
		[0x39223a10,0],
		[0x39223a18,0],
		[0x39223a20,0],
		[0x39223a28,0],
		[0x39223a30,0],
		[0x39223a38,0],
		[0x39223a40,0],
		[0x39223a50,0],
		[0x39223a68,0],
		[0x39223a70,0],
		[0x39223a78,0],
		[0x39223a80,0],
		[0x39223a88,0],
		[0x39223a90,0],
		[0x39223a98,0],
		[0x39223aa0,0],
		[0x39223aa8,0],
		[0x39223ab0,0],
		[0x39223ab8,0],
		[0x39223ac0,0],
		[0x39223ac8,0],
		[0x39223ad0,0],
		[0x39223ad8,0],
		[0x39223ae0,0],
		[0x39223ae8,0],
		[0x39223af0,0],
		[0x39223af8,0],
		[0x39223b00,0],
		[0x39223b08,0],
		[0x39223b10,0],
		[0x39223b18,0],
		[0x39223b20,0],
		[0x39223b28,0],
		[0x39223b30,0],
		[0x39223b38,0],
		[0x39223b40,0],
		[0x39223b48,0],
		[0x39223b50,0],
		[0x39223b58,0],
		[0x39223b60,0],
		[0x39223b68,0],
		[0x39223b70,0],
		[0x39223b78,0],
		[0x39223b80,0],
		[0x39223b88,0],
		[0x39223b90,0],
		[0x39223b98,0],
		[0x39223ba0,0],
		[0x39223ba8,0],
		[0x39223bb0,0],
		[0x39223bb8,0],
		[0x39223bc0,0],
		[0x39223bc8,0],
		[0x39223bd0,0],
		[0x39223bd8,0],
		[0x39223be0,0],
		[0x39223be8,0],
		[0x39223bf0,0],
		[0x39223bf8,0],
		[0x39223c00,0],
		[0x39223c08,0],
		[0x39223c10,0],
		[0x39223c18,0],
		[0x39223c20,0],
		[0x39223c28,0],
		[0x39223c30,0],
		[0x39223c38,0],
		[0x39223c40,0],
		[0x39223c48,0],
		[0x39223c50,0],
		[0x39223c58,0],
		[0x39223c60,0],
		[0x39223c68,0],
		[0x39223c70,0],
		[0x39223c78,0],
		[0x39223c80,0],
		[0x39223c88,0],
		[0x39223c90,0],
		[0x39223c98,0],
		[0x39223ca0,0],
		[0x39223ca8,0],
		[0x39223cb0,0],
		[0x39223cb8,0],
		[0x39223cc0,0],
		[0x39223cc8,0],
		[0x39223cd0,0],
		[0x39223cd8,0],
		[0x39223ce0,0],
		[0x39223ce8,0],
		[0x39223cf0,0],
		[0x39223cf8,0],
		[0x39223d00,0],
		[0x39223d08,0],
		[0x39223d10,0],
		[0x39223d18,0],
		[0x39223d20,0],
		[0x39223d28,0],
		[0x39223d30,0],
		[0x39223d38,0],
		[0x39223d40,0],
		[0x39223d48,0],
		[0x39223d50,0],
		[0x39223d58,0],
		[0x39223d60,0],
		[0x39223d68,0],
		[0x39223d70,0],
		[0x39223d78,0],
		[0x39223d80,0],
		[0x39223d88,0],
		[0x39223d90,0],
		[0x39223d98,0],
		[0x39223da0,0],
		[0x39223da8,0],
		[0x39223db0,0],
		[0x39223db8,0],
		[0x39223dc0,0],
		[0x39223dc8,0],
		[0x39223dd0,0],
		[0x39223dd8,0],
		[0x39223de0,0],
		[0x39223de8,0],
		[0x39223df0,0],
		[0x39223df8,0],
		[0x39223e00,0],
		[0x39223e08,0],
		[0x39223e10,0],
		[0x39223e18,0],
		[0x39223e20,0],
		[0x39223e28,0],
		[0x39223e30,0],
		[0x39223e38,0],
		[0x39223e40,0],
		[0x39223e48,0],
		[0x39223e50,0],
		[0x39223e58,0],
		[0x39223e60,0],
		[0x39223e68,0],
		[0x39223e70,0],
		[0x39223e78,0],
		[0x39223e80,0],
		[0x39223e88,0],
		[0x39223e90,0],
		[0x39223e98,0],
		[0x39223ea0,0],
		[0x39223ea8,0],
		[0x39223eb0,0],
		[0x39223eb8,0],
		[0x39223ec0,0],
		[0x39223ec8,0],
		[0x39223ed0,0],
		[0x39223ed8,0],
		[0x39223ee0,0],
		[0x39223ee8,0],
		[0x39223ef0,0],
		[0x39223ef8,0],
		[0, 0]
]).
unknown([
		[0x39222fc0,18444363128523688586],
		[0x39222fc8,18444363128523688586],
		[0x39222fd0,18444363128523688586],
		[0x39222fd8,18444363128523688586],
		[0x39222fe0,18444363128523688586],
		[0x39222fe8,18444363128523688586],
		[0x39222ff0,18444363128523688586],
		[0x39222ff8,18444363128523688586],
		[0, 0]
]).
long([
		[0x39222f00,4194304],
		[0x39222f08,4284416],
		[0x39222f38,4194304],
		[0x39222f50,134219893],
		[0x39222f70,21],
		[0x39223a48,849960997],
		[0x39223a58,854024229],
		[0x39223a60,905367589],
		[0, 0]
]).
int([
		[0x39222f04,0],
		[0x39222f0c,0],
		[0x39222f18,0],
		[0x39222f1c,0],
		[0x39222f28,0],
		[0x39222f2c,0],
		[0x39222f30,0],
		[0x39222f34,0],
		[0x39222f3c,0],
		[0x39222f48,37],
		[0x39222f4c,0],
		[0x39222f54,0],
		[0x39222f60,0],
		[0x39222f64,0],
		[0x39222f68,0],
		[0x39222f6c,0],
		[0x39222f70,21],
		[0x39222f74,0],
		[0x39222f88,0],
		[0x39222f8c,0],
		[0x39222f98,0],
		[0x39222f9c,0],
		[0x39222fa8,0],
		[0x39222fac,0],
		[0x39222fb0,0],
		[0x39222fb4,0],
		[0x39222fb8,0],
		[0x39222fbc,0],
		[0x39223000,0],
		[0x39223004,0],
		[0x39223008,0],
		[0x3922300c,0],
		[0x39223010,0],
		[0x39223014,0],
		[0x39223018,0],
		[0x3922301c,0],
		[0x39223020,0],
		[0x39223024,0],
		[0x39223028,0],
		[0x3922302c,0],
		[0x39223030,0],
		[0x39223034,0],
		[0x39223038,0],
		[0x3922303c,0],
		[0x39223040,0],
		[0x39223044,0],
		[0x39223048,0],
		[0x3922304c,0],
		[0x39223050,0],
		[0x39223054,0],
		[0x39223058,0],
		[0x3922305c,0],
		[0x39223060,0],
		[0x39223064,0],
		[0x39223068,0],
		[0x3922306c,0],
		[0x39223070,0],
		[0x39223074,0],
		[0x39223078,0],
		[0x3922307c,0],
		[0x39223080,0],
		[0x39223084,0],
		[0x39223088,0],
		[0x3922308c,0],
		[0x39223090,0],
		[0x39223094,0],
		[0x39223098,0],
		[0x3922309c,0],
		[0x392230a0,0],
		[0x392230a4,0],
		[0x392230a8,0],
		[0x392230ac,0],
		[0x392230b0,0],
		[0x392230b4,0],
		[0x392230b8,0],
		[0x392230bc,0],
		[0x392230c0,0],
		[0x392230c4,0],
		[0x392230c8,0],
		[0x392230cc,0],
		[0x392230d0,0],
		[0x392230d4,0],
		[0x392230d8,0],
		[0x392230dc,0],
		[0x392230e0,0],
		[0x392230e4,0],
		[0x392230e8,0],
		[0x392230ec,0],
		[0x392230f0,0],
		[0x392230f4,0],
		[0x392230f8,0],
		[0x392230fc,0],
		[0x39223100,0],
		[0x39223104,0],
		[0x39223108,0],
		[0x3922310c,0],
		[0x39223110,0],
		[0x39223114,0],
		[0x39223118,0],
		[0x3922311c,0],
		[0x39223120,0],
		[0x39223124,0],
		[0x39223128,0],
		[0x3922312c,0],
		[0x39223130,0],
		[0x39223134,0],
		[0x39223138,0],
		[0x3922313c,0],
		[0x39223140,0],
		[0x39223144,0],
		[0x39223148,0],
		[0x3922314c,0],
		[0x39223150,0],
		[0x39223154,0],
		[0x39223158,0],
		[0x3922315c,0],
		[0x39223160,0],
		[0x39223164,0],
		[0x39223168,0],
		[0x3922316c,0],
		[0x39223170,0],
		[0x39223174,0],
		[0x39223178,0],
		[0x3922317c,0],
		[0x39223180,0],
		[0x39223184,0],
		[0x39223188,0],
		[0x3922318c,0],
		[0x39223190,0],
		[0x39223194,0],
		[0x39223198,0],
		[0x3922319c,0],
		[0x392231a0,0],
		[0x392231a4,0],
		[0x392231a8,0],
		[0x392231ac,0],
		[0x392231b0,0],
		[0x392231b4,0],
		[0x392231b8,0],
		[0x392231bc,0],
		[0x392231c0,0],
		[0x392231c4,0],
		[0x392231c8,0],
		[0x392231cc,0],
		[0x392231d0,0],
		[0x392231d4,0],
		[0x392231d8,0],
		[0x392231dc,0],
		[0x392231e0,0],
		[0x392231e4,0],
		[0x392231e8,0],
		[0x392231ec,0],
		[0x392231f0,0],
		[0x392231f4,0],
		[0x392231f8,0],
		[0x392231fc,0],
		[0x39223200,0],
		[0x39223204,0],
		[0x39223208,0],
		[0x3922320c,0],
		[0x39223210,0],
		[0x39223214,0],
		[0x39223218,0],
		[0x3922321c,0],
		[0x39223220,0],
		[0x39223224,0],
		[0x39223228,0],
		[0x3922322c,0],
		[0x39223230,0],
		[0x39223234,0],
		[0x39223238,0],
		[0x3922323c,0],
		[0x39223240,0],
		[0x39223244,0],
		[0x39223248,0],
		[0x3922324c,0],
		[0x39223250,0],
		[0x39223254,0],
		[0x39223258,0],
		[0x3922325c,0],
		[0x39223260,0],
		[0x39223264,0],
		[0x39223268,0],
		[0x3922326c,0],
		[0x39223270,0],
		[0x39223274,0],
		[0x39223278,0],
		[0x3922327c,0],
		[0x39223280,0],
		[0x39223284,0],
		[0x39223288,0],
		[0x3922328c,0],
		[0x39223290,0],
		[0x39223294,0],
		[0x39223298,0],
		[0x3922329c,0],
		[0x392232a0,0],
		[0x392232a4,0],
		[0x392232a8,0],
		[0x392232ac,0],
		[0x392232b0,0],
		[0x392232b4,0],
		[0x392232b8,0],
		[0x392232bc,0],
		[0x392232c0,0],
		[0x392232c4,0],
		[0x392232c8,0],
		[0x392232cc,0],
		[0x392232d0,0],
		[0x392232d4,0],
		[0x392232d8,0],
		[0x392232dc,0],
		[0x392232e0,0],
		[0x392232e4,0],
		[0x392232e8,0],
		[0x392232ec,0],
		[0x392232f0,0],
		[0x392232f4,0],
		[0x392232f8,0],
		[0x392232fc,0],
		[0x39223300,0],
		[0x39223304,0],
		[0x39223308,0],
		[0x3922330c,0],
		[0x39223310,0],
		[0x39223314,0],
		[0x39223318,0],
		[0x3922331c,0],
		[0x39223320,0],
		[0x39223324,0],
		[0x39223328,0],
		[0x3922332c,0],
		[0x39223330,0],
		[0x39223334,0],
		[0x39223338,0],
		[0x3922333c,0],
		[0x39223340,0],
		[0x39223344,0],
		[0x39223348,0],
		[0x3922334c,0],
		[0x39223350,0],
		[0x39223354,0],
		[0x39223358,0],
		[0x3922335c,0],
		[0x39223360,0],
		[0x39223364,0],
		[0x39223368,0],
		[0x3922336c,0],
		[0x39223370,0],
		[0x39223374,0],
		[0x39223378,0],
		[0x3922337c,0],
		[0x39223380,0],
		[0x39223384,0],
		[0x39223388,0],
		[0x3922338c,0],
		[0x39223390,0],
		[0x39223394,0],
		[0x39223398,0],
		[0x3922339c,0],
		[0x392233a0,0],
		[0x392233a4,0],
		[0x392233a8,0],
		[0x392233ac,0],
		[0x392233b0,0],
		[0x392233b4,0],
		[0x392233b8,0],
		[0x392233bc,0],
		[0x392233c0,0],
		[0x392233c4,0],
		[0x392233c8,0],
		[0x392233cc,0],
		[0x392233d0,0],
		[0x392233d4,0],
		[0x392233d8,0],
		[0x392233dc,0],
		[0x392233e0,0],
		[0x392233e4,0],
		[0x392233e8,0],
		[0x392233ec,0],
		[0x392233f0,0],
		[0x392233f4,0],
		[0x392233f8,0],
		[0x392233fc,0],
		[0x39223400,0],
		[0x39223404,0],
		[0x39223408,0],
		[0x3922340c,0],
		[0x39223410,0],
		[0x39223414,0],
		[0x39223418,0],
		[0x3922341c,0],
		[0x39223420,0],
		[0x39223424,0],
		[0x39223428,0],
		[0x3922342c,0],
		[0x39223430,0],
		[0x39223434,0],
		[0x39223438,0],
		[0x3922343c,0],
		[0x39223440,0],
		[0x39223444,0],
		[0x39223448,0],
		[0x3922344c,0],
		[0x39223450,0],
		[0x39223454,0],
		[0x39223458,0],
		[0x3922345c,0],
		[0x39223460,0],
		[0x39223464,0],
		[0x39223468,0],
		[0x3922346c,0],
		[0x39223470,0],
		[0x39223474,0],
		[0x39223478,0],
		[0x3922347c,0],
		[0x39223480,0],
		[0x39223484,0],
		[0x39223488,0],
		[0x3922348c,0],
		[0x39223490,0],
		[0x39223494,0],
		[0x39223498,0],
		[0x3922349c,0],
		[0x392234a0,0],
		[0x392234a4,0],
		[0x392234a8,0],
		[0x392234ac,0],
		[0x392234b0,0],
		[0x392234b4,0],
		[0x392234b8,0],
		[0x392234bc,0],
		[0x392234c0,0],
		[0x392234c4,0],
		[0x392234c8,0],
		[0x392234cc,0],
		[0x392234d0,0],
		[0x392234d4,0],
		[0x392234d8,0],
		[0x392234dc,0],
		[0x392234e0,0],
		[0x392234e4,0],
		[0x392234e8,0],
		[0x392234ec,0],
		[0x392234f0,0],
		[0x392234f4,0],
		[0x392234f8,0],
		[0x392234fc,0],
		[0x39223500,0],
		[0x39223504,0],
		[0x39223508,0],
		[0x3922350c,0],
		[0x39223510,0],
		[0x39223514,0],
		[0x39223518,0],
		[0x3922351c,0],
		[0x39223520,0],
		[0x39223524,0],
		[0x39223528,0],
		[0x3922352c,0],
		[0x39223530,0],
		[0x39223534,0],
		[0x39223538,0],
		[0x3922353c,0],
		[0x39223540,0],
		[0x39223544,0],
		[0x39223548,0],
		[0x3922354c,0],
		[0x39223550,0],
		[0x39223554,0],
		[0x39223558,0],
		[0x3922355c,0],
		[0x39223560,0],
		[0x39223564,0],
		[0x39223568,0],
		[0x3922356c,0],
		[0x39223570,0],
		[0x39223574,0],
		[0x39223578,0],
		[0x3922357c,0],
		[0x39223580,0],
		[0x39223584,0],
		[0x39223588,0],
		[0x3922358c,0],
		[0x39223590,0],
		[0x39223594,0],
		[0x39223598,0],
		[0x3922359c,0],
		[0x392235a0,0],
		[0x392235a4,0],
		[0x392235a8,0],
		[0x392235ac,0],
		[0x392235b0,0],
		[0x392235b4,0],
		[0x392235b8,0],
		[0x392235bc,0],
		[0x392235c0,0],
		[0x392235c4,0],
		[0x392235c8,0],
		[0x392235cc,0],
		[0x392235d0,0],
		[0x392235d4,0],
		[0x392235d8,0],
		[0x392235dc,0],
		[0x392235e0,0],
		[0x392235e4,0],
		[0x392235e8,0],
		[0x392235ec,0],
		[0x392235f0,0],
		[0x392235f4,0],
		[0x392235f8,0],
		[0x392235fc,0],
		[0x39223600,0],
		[0x39223604,0],
		[0x39223608,0],
		[0x3922360c,0],
		[0x39223610,0],
		[0x39223614,0],
		[0x39223618,0],
		[0x3922361c,0],
		[0x39223620,0],
		[0x39223624,0],
		[0x39223628,0],
		[0x3922362c,0],
		[0x39223630,0],
		[0x39223634,0],
		[0x39223638,0],
		[0x3922363c,0],
		[0x39223640,0],
		[0x39223644,0],
		[0x39223648,0],
		[0x3922364c,0],
		[0x39223650,0],
		[0x39223654,0],
		[0x39223658,0],
		[0x3922365c,0],
		[0x39223660,0],
		[0x39223664,0],
		[0x39223668,0],
		[0x3922366c,0],
		[0x39223670,0],
		[0x39223674,0],
		[0x39223678,0],
		[0x3922367c,0],
		[0x39223680,0],
		[0x39223684,0],
		[0x39223688,0],
		[0x3922368c,0],
		[0x39223690,0],
		[0x39223694,0],
		[0x39223698,0],
		[0x3922369c,0],
		[0x392236a0,0],
		[0x392236a4,0],
		[0x392236a8,0],
		[0x392236ac,0],
		[0x392236b0,0],
		[0x392236b4,0],
		[0x392236b8,0],
		[0x392236bc,0],
		[0x392236c0,0],
		[0x392236c4,0],
		[0x392236c8,0],
		[0x392236cc,0],
		[0x392236d0,0],
		[0x392236d4,0],
		[0x392236d8,0],
		[0x392236dc,0],
		[0x392236e0,0],
		[0x392236e4,0],
		[0x392236e8,0],
		[0x392236ec,0],
		[0x392236f0,0],
		[0x392236f4,0],
		[0x392236f8,0],
		[0x392236fc,0],
		[0x39223700,0],
		[0x39223704,0],
		[0x39223708,0],
		[0x3922370c,0],
		[0x39223710,0],
		[0x39223714,0],
		[0x39223718,0],
		[0x3922371c,0],
		[0x39223720,0],
		[0x39223724,0],
		[0x39223728,0],
		[0x3922372c,0],
		[0x39223730,0],
		[0x39223734,0],
		[0x39223738,0],
		[0x3922373c,0],
		[0x39223740,0],
		[0x39223744,0],
		[0x39223748,0],
		[0x3922374c,0],
		[0x39223750,0],
		[0x39223754,0],
		[0x39223758,0],
		[0x3922375c,0],
		[0x39223760,0],
		[0x39223764,0],
		[0x39223768,0],
		[0x3922376c,0],
		[0x39223770,0],
		[0x39223774,0],
		[0x39223778,0],
		[0x3922377c,0],
		[0x39223780,0],
		[0x39223784,0],
		[0x39223788,0],
		[0x3922378c,0],
		[0x39223790,0],
		[0x39223794,0],
		[0x39223798,0],
		[0x3922379c,0],
		[0x392237a0,0],
		[0x392237a4,0],
		[0x392237a8,0],
		[0x392237ac,0],
		[0x392237b0,0],
		[0x392237b4,0],
		[0x392237b8,0],
		[0x392237bc,0],
		[0x392237c0,0],
		[0x392237c4,0],
		[0x392237c8,0],
		[0x392237cc,0],
		[0x392237d0,0],
		[0x392237d4,0],
		[0x392237d8,0],
		[0x392237dc,0],
		[0x392237e0,0],
		[0x392237e4,0],
		[0x392237e8,0],
		[0x392237ec,0],
		[0x392237f0,0],
		[0x392237f4,0],
		[0x392237f8,0],
		[0x392237fc,0],
		[0x39223800,0],
		[0x39223804,0],
		[0x39223808,0],
		[0x3922380c,0],
		[0x39223810,0],
		[0x39223814,0],
		[0x39223818,0],
		[0x3922381c,0],
		[0x39223820,0],
		[0x39223824,0],
		[0x39223828,0],
		[0x3922382c,0],
		[0x39223830,0],
		[0x39223834,0],
		[0x39223838,0],
		[0x3922383c,0],
		[0x39223840,0],
		[0x39223844,0],
		[0x39223848,0],
		[0x3922384c,0],
		[0x39223850,0],
		[0x39223854,0],
		[0x39223858,0],
		[0x3922385c,0],
		[0x39223860,0],
		[0x39223864,0],
		[0x39223868,0],
		[0x3922386c,0],
		[0x39223870,0],
		[0x39223874,0],
		[0x39223878,0],
		[0x3922387c,0],
		[0x39223880,0],
		[0x39223884,0],
		[0x39223888,0],
		[0x3922388c,0],
		[0x39223890,0],
		[0x39223894,0],
		[0x39223898,0],
		[0x3922389c,0],
		[0x392238a0,0],
		[0x392238a4,0],
		[0x392238a8,0],
		[0x392238ac,0],
		[0x392238b0,0],
		[0x392238b4,0],
		[0x392238b8,0],
		[0x392238bc,0],
		[0x392238c0,0],
		[0x392238c4,0],
		[0x392238c8,0],
		[0x392238cc,0],
		[0x392238d0,0],
		[0x392238d4,0],
		[0x392238d8,0],
		[0x392238dc,0],
		[0x392238e0,0],
		[0x392238e4,0],
		[0x392238e8,0],
		[0x392238ec,0],
		[0x392238f0,0],
		[0x392238f4,0],
		[0x392238f8,0],
		[0x392238fc,0],
		[0x39223900,0],
		[0x39223904,0],
		[0x39223908,0],
		[0x3922390c,0],
		[0x39223910,0],
		[0x39223914,0],
		[0x39223918,0],
		[0x3922391c,0],
		[0x39223920,0],
		[0x39223924,0],
		[0x39223928,0],
		[0x3922392c,0],
		[0x39223930,0],
		[0x39223934,0],
		[0x39223938,0],
		[0x3922393c,0],
		[0x39223940,0],
		[0x39223944,0],
		[0x39223948,0],
		[0x3922394c,0],
		[0x39223950,0],
		[0x39223954,0],
		[0x39223958,0],
		[0x3922395c,0],
		[0x39223960,0],
		[0x39223964,0],
		[0x39223968,0],
		[0x3922396c,0],
		[0x39223970,0],
		[0x39223974,0],
		[0x39223978,0],
		[0x3922397c,0],
		[0x39223980,0],
		[0x39223984,0],
		[0x39223988,0],
		[0x3922398c,0],
		[0x39223990,0],
		[0x39223994,0],
		[0x39223998,0],
		[0x3922399c,0],
		[0x392239a0,0],
		[0x392239a4,0],
		[0x392239a8,0],
		[0x392239ac,0],
		[0x392239b0,0],
		[0x392239b4,0],
		[0x392239b8,0],
		[0x392239bc,0],
		[0x392239c0,0],
		[0x392239c4,0],
		[0x392239c8,0],
		[0x392239cc,0],
		[0x392239d0,0],
		[0x392239d4,0],
		[0x392239d8,0],
		[0x392239dc,0],
		[0x392239e0,0],
		[0x392239e4,0],
		[0x392239e8,0],
		[0x392239ec,0],
		[0x392239f0,0],
		[0x392239f4,0],
		[0x392239f8,0],
		[0x392239fc,0],
		[0x39223a00,0],
		[0x39223a04,0],
		[0x39223a08,0],
		[0x39223a0c,0],
		[0x39223a10,0],
		[0x39223a14,0],
		[0x39223a18,0],
		[0x39223a1c,0],
		[0x39223a20,0],
		[0x39223a24,0],
		[0x39223a28,0],
		[0x39223a2c,0],
		[0x39223a30,0],
		[0x39223a34,0],
		[0x39223a38,0],
		[0x39223a3c,0],
		[0x39223a40,0],
		[0x39223a44,0],
		[0x39223a4c,0],
		[0x39223a50,0],
		[0x39223a54,0],
		[0x39223a5c,0],
		[0x39223a64,0],
		[0x39223a68,0],
		[0x39223a6c,0],
		[0x39223a70,0],
		[0x39223a74,0],
		[0x39223a78,0],
		[0x39223a7c,0],
		[0x39223a80,0],
		[0x39223a84,0],
		[0x39223a88,0],
		[0x39223a8c,0],
		[0x39223a90,0],
		[0x39223a94,0],
		[0x39223a98,0],
		[0x39223a9c,0],
		[0x39223aa0,0],
		[0x39223aa4,0],
		[0x39223aa8,0],
		[0x39223aac,0],
		[0x39223ab0,0],
		[0x39223ab4,0],
		[0x39223ab8,0],
		[0x39223abc,0],
		[0x39223ac0,0],
		[0x39223ac4,0],
		[0x39223ac8,0],
		[0x39223acc,0],
		[0x39223ad0,0],
		[0x39223ad4,0],
		[0x39223ad8,0],
		[0x39223adc,0],
		[0x39223ae0,0],
		[0x39223ae4,0],
		[0x39223ae8,0],
		[0x39223aec,0],
		[0x39223af0,0],
		[0x39223af4,0],
		[0x39223af8,0],
		[0x39223afc,0],
		[0x39223b00,0],
		[0x39223b04,0],
		[0x39223b08,0],
		[0x39223b0c,0],
		[0x39223b10,0],
		[0x39223b14,0],
		[0x39223b18,0],
		[0x39223b1c,0],
		[0x39223b20,0],
		[0x39223b24,0],
		[0x39223b28,0],
		[0x39223b2c,0],
		[0x39223b30,0],
		[0x39223b34,0],
		[0x39223b38,0],
		[0x39223b3c,0],
		[0x39223b40,0],
		[0x39223b44,0],
		[0x39223b48,0],
		[0x39223b4c,0],
		[0x39223b50,0],
		[0x39223b54,0],
		[0x39223b58,0],
		[0x39223b5c,0],
		[0x39223b60,0],
		[0x39223b64,0],
		[0x39223b68,0],
		[0x39223b6c,0],
		[0x39223b70,0],
		[0x39223b74,0],
		[0x39223b78,0],
		[0x39223b7c,0],
		[0x39223b80,0],
		[0x39223b84,0],
		[0x39223b88,0],
		[0x39223b8c,0],
		[0x39223b90,0],
		[0x39223b94,0],
		[0x39223b98,0],
		[0x39223b9c,0],
		[0x39223ba0,0],
		[0x39223ba4,0],
		[0x39223ba8,0],
		[0x39223bac,0],
		[0x39223bb0,0],
		[0x39223bb4,0],
		[0x39223bb8,0],
		[0x39223bbc,0],
		[0x39223bc0,0],
		[0x39223bc4,0],
		[0x39223bc8,0],
		[0x39223bcc,0],
		[0x39223bd0,0],
		[0x39223bd4,0],
		[0x39223bd8,0],
		[0x39223bdc,0],
		[0x39223be0,0],
		[0x39223be4,0],
		[0x39223be8,0],
		[0x39223bec,0],
		[0x39223bf0,0],
		[0x39223bf4,0],
		[0x39223bf8,0],
		[0x39223bfc,0],
		[0x39223c00,0],
		[0x39223c04,0],
		[0x39223c08,0],
		[0x39223c0c,0],
		[0x39223c10,0],
		[0x39223c14,0],
		[0x39223c18,0],
		[0x39223c1c,0],
		[0x39223c20,0],
		[0x39223c24,0],
		[0x39223c28,0],
		[0x39223c2c,0],
		[0x39223c30,0],
		[0x39223c34,0],
		[0x39223c38,0],
		[0x39223c3c,0],
		[0x39223c40,0],
		[0x39223c44,0],
		[0x39223c48,0],
		[0x39223c4c,0],
		[0x39223c50,0],
		[0x39223c54,0],
		[0x39223c58,0],
		[0x39223c5c,0],
		[0x39223c60,0],
		[0x39223c64,0],
		[0x39223c68,0],
		[0x39223c6c,0],
		[0x39223c70,0],
		[0x39223c74,0],
		[0x39223c78,0],
		[0x39223c7c,0],
		[0x39223c80,0],
		[0x39223c84,0],
		[0x39223c88,0],
		[0x39223c8c,0],
		[0x39223c90,0],
		[0x39223c94,0],
		[0x39223c98,0],
		[0x39223c9c,0],
		[0x39223ca0,0],
		[0x39223ca4,0],
		[0x39223ca8,0],
		[0x39223cac,0],
		[0x39223cb0,0],
		[0x39223cb4,0],
		[0x39223cb8,0],
		[0x39223cbc,0],
		[0x39223cc0,0],
		[0x39223cc4,0],
		[0x39223cc8,0],
		[0x39223ccc,0],
		[0x39223cd0,0],
		[0x39223cd4,0],
		[0x39223cd8,0],
		[0x39223cdc,0],
		[0x39223ce0,0],
		[0x39223ce4,0],
		[0x39223ce8,0],
		[0x39223cec,0],
		[0x39223cf0,0],
		[0x39223cf4,0],
		[0x39223cf8,0],
		[0x39223cfc,0],
		[0x39223d00,0],
		[0x39223d04,0],
		[0x39223d08,0],
		[0x39223d0c,0],
		[0x39223d10,0],
		[0x39223d14,0],
		[0x39223d18,0],
		[0x39223d1c,0],
		[0x39223d20,0],
		[0x39223d24,0],
		[0x39223d28,0],
		[0x39223d2c,0],
		[0x39223d30,0],
		[0x39223d34,0],
		[0x39223d38,0],
		[0x39223d3c,0],
		[0x39223d40,0],
		[0x39223d44,0],
		[0x39223d48,0],
		[0x39223d4c,0],
		[0x39223d50,0],
		[0x39223d54,0],
		[0x39223d58,0],
		[0x39223d5c,0],
		[0x39223d60,0],
		[0x39223d64,0],
		[0x39223d68,0],
		[0x39223d6c,0],
		[0x39223d70,0],
		[0x39223d74,0],
		[0x39223d78,0],
		[0x39223d7c,0],
		[0x39223d80,0],
		[0x39223d84,0],
		[0x39223d88,0],
		[0x39223d8c,0],
		[0x39223d90,0],
		[0x39223d94,0],
		[0x39223d98,0],
		[0x39223d9c,0],
		[0x39223da0,0],
		[0x39223da4,0],
		[0x39223da8,0],
		[0x39223dac,0],
		[0x39223db0,0],
		[0x39223db4,0],
		[0x39223db8,0],
		[0x39223dbc,0],
		[0x39223dc0,0],
		[0x39223dc4,0],
		[0x39223dc8,0],
		[0x39223dcc,0],
		[0x39223dd0,0],
		[0x39223dd4,0],
		[0x39223dd8,0],
		[0x39223ddc,0],
		[0x39223de0,0],
		[0x39223de4,0],
		[0x39223de8,0],
		[0x39223dec,0],
		[0x39223df0,0],
		[0x39223df4,0],
		[0x39223df8,0],
		[0x39223dfc,0],
		[0x39223e00,0],
		[0x39223e04,0],
		[0x39223e08,0],
		[0x39223e0c,0],
		[0x39223e10,0],
		[0x39223e14,0],
		[0x39223e18,0],
		[0x39223e1c,0],
		[0x39223e20,0],
		[0x39223e24,0],
		[0x39223e28,0],
		[0x39223e2c,0],
		[0x39223e30,0],
		[0x39223e34,0],
		[0x39223e38,0],
		[0x39223e3c,0],
		[0x39223e40,0],
		[0x39223e44,0],
		[0x39223e48,0],
		[0x39223e4c,0],
		[0x39223e50,0],
		[0x39223e54,0],
		[0x39223e58,0],
		[0x39223e5c,0],
		[0x39223e60,0],
		[0x39223e64,0],
		[0x39223e68,0],
		[0x39223e6c,0],
		[0x39223e70,0],
		[0x39223e74,0],
		[0x39223e78,0],
		[0x39223e7c,0],
		[0x39223e80,0],
		[0x39223e84,0],
		[0x39223e88,0],
		[0x39223e8c,0],
		[0x39223e90,0],
		[0x39223e94,0],
		[0x39223e98,0],
		[0x39223e9c,0],
		[0x39223ea0,0],
		[0x39223ea4,0],
		[0x39223ea8,0],
		[0x39223eac,0],
		[0x39223eb0,0],
		[0x39223eb4,0],
		[0x39223eb8,0],
		[0x39223ebc,0],
		[0x39223ec0,0],
		[0x39223ec4,0],
		[0x39223ec8,0],
		[0x39223ecc,0],
		[0x39223ed0,0],
		[0x39223ed4,0],
		[0x39223ed8,0],
		[0x39223edc,0],
		[0x39223ee0,0],
		[0x39223ee4,0],
		[0x39223ee8,0],
		[0x39223eec,0],
		[0x39223ef0,0],
		[0x39223ef4,0],
		[0x39223ef8,0],
		[0x39223efc,0],
		[0, 0]
]).
string_val([
		[0x39222f48,37],
		[0, 0]
]).
/* This file contains recursive predicates */
:- use_module(library(clpfd)).
:- use_module(reif).
:- style_check(-singleton).

isTrue([X, Y]):-
    X == 49.

isTrue([X|Tail]):-
    isTrue(Tail).

log(File_name, Name, Addr, Base):-
    Offset #= Addr - Base,
    open(File_name, append, Stream),
    write(Stream, Name),
    write(Stream, ':'),
    write(Stream, Offset),
    nl(Stream),
    close(Stream).

possible_string_pointer(Base_addr) :-
    /* Verify if this pointer points to a stirng */
    string_val(Str),
    Str_profile = [
        [Name_addr, Name_val]
    ],
    tuples_in(Str_profile, Str),
    Name_addr #= Base_addr.

query_string_pointer(Val) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "string_pointer"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_mount_struct(Base_addr, Offset) :-
    pointer(Ptr),
    Ptr_profile = ([
        [Mnt_devname_addr, Mnt_devname_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Mnt_devname_addr #= Base_addr + Offset,
    labeling([enum], [Mnt_devname_addr, Mnt_devname_val]),
    query_string_pointer(Mnt_devname_val).

possible_kernel_param(Base_addr) :-
    string_val(Str),
    Str_profile = [
        [Name_addr, Name_val]
    ],
    tuples_in(Str_profile, Str),
    Name_addr #= Base_addr.

possible_in_device(Base_addr) :-
    /* in_ifaddr remains the same across kernel versions 
       but we need this query to find ip_ptr in net_device struct
    */
    /*
        struct net_device *dev;
        int               refcnt;
        int               dead;
        struct in_ifaddr  *ifa_list;
    */
    pointer(Ptr),
    int(Int),
    Ptr_profile = ([
        [Dev_addr, Dev_val],
        [Ifa_list_addr, Ifa_list_val]
    ]),
    Int_profile = ([
        [Refcnt_addr, Refcnt_val],
        [Dead_addr, Dead_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Dead_addr #= Refcnt_addr + 4,
    chain([Dev_addr, Refcnt_addr, Dead_addr, Ifa_list_addr], #<),
    Dev_addr #= Base_addr,
    Ifa_list_addr #= Base_addr + 16,
    labeling([enum], [Ifa_list_addr, Ifa_list_val]),

    process_create(path('python'),
                    ['subquery.py', Ifa_list_val, "in_ifaddr"],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_in_ifaddr(Base_addr) :-
    /* in_ifaddr remains the same across kernel versions */
    pointer(Ptr),
    Ptr_profile = ([
        [Hash_addr, Hash_val],
        [Ifa_next_addr, Ifa_next_val],
        [Ifa_dev_addr, Ifa_dev_val],
        [Rcu_head_addr, Rcu_head_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([Hash_addr, Ifa_next_addr, Ifa_dev_addr, Rcu_head_addr], #<),
    Hash_addr #= Base_addr,
    Ifa_next_addr #= Hash_addr + 16,
    Ifa_dev_addr #= Ifa_next_addr + 8,
    Rcu_head_addr #= Ifa_dev_addr + 8,
    labeling([enum], [Hash_addr, Ifa_next_addr, Ifa_dev_addr, Rcu_head_addr]).

possible_mm_struct(Current_addr) :- 
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),

    Ptr_profile = [
        [Mmap_addr, Mmap_val],
        [Pgd_addr, Pgd_val]  
    ],
    Ulong_profile = [
        [Mmap_base_addr, Mmap_base_val],
        [Task_size_addr, Task_size_val],
        [Start_brk_addr, Start_brk_val],
        [Brk_addr, Brk_val],
        [Start_stack_addr, Start_stack_val],
        [ARG_start_addr, ARG_start_val]
    ],
    Mmap_addr #= Current_addr,
    Mmap_base_val #> 0x7f0000000000,
    chain([Mmap_addr, Mmap_base_addr, Task_size_addr, Pgd_addr], #<),
    Pgd_addr #> Task_size_addr,
    Pgd_addr #=< Task_size_addr + 40,
    %FIXME: This rule may not be true for other mm_struct.
    Task_size_val #>= 0x7ffffffff000,

    Start_brk_addr #> Pgd_addr,
    Start_stack_val #> 0x7ff000000000,
    ARG_start_addr #< Current_addr + 500,
    chain([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr], #<),
    ARG_start_addr #= Start_brk_addr + 24,
    Brk_val #< 0x7ff000000000,
    ARG_start_val #> 0x7ff000000000,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),

    Mmap_val #> 0,
    Pgd_val #> 0,
    labeling([enum], [Mmap_addr, Mmap_val, Mmap_base_addr, Pgd_addr, Pgd_val]),
    
    process_create(path('python'),
                    ['subquery.py', Mmap_val, "vm_area_struct", Current_addr],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    label([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr]),
    statistics(real_time, [End|_]),

    log("./profile/mm_struct", "mmap", Mmap_addr, Current_addr),
    log("./profile/mm_struct", "mmap_base", Mmap_base_addr, Current_addr),
    log("./profile/mm_struct", "pgd", Pgd_addr, Current_addr),
    log("./profile/mm_struct", "start_brk", Start_brk_addr, Current_addr),
    log("./profile/mm_struct", "brk", Brk_addr, Current_addr),
    log("./profile/mm_struct", "start_stack", Start_stack_addr, Current_addr),
    log("./profile/mm_struct", "arg_start", ARG_start_addr, Current_addr),
    log("./profile/mm_struct", "mm_struct", End, Start).


possible_vm_area_struct(Base_addr, MM_addr) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [VM_next_addr, VM_next_val],
        [Vm_mm_addr, Vm_mm_val],
        [VM_file_addr, VM_file_val]
    ],
    Ulong_profile = [
        [VM_start_addr, VM_start_val],
        [VM_end_addr, VM_end_val],
        [VM_flag_addr, VM_flag_val]
        /*VM_pgoff is 0, and we do not consider 0 as ulong*/
        %[VM_pgoff_addr, VM_pgoff_val]
    ],
    VM_start_addr #>= Base_addr,
    chain([VM_start_addr, VM_end_addr, VM_next_addr, Vm_mm_addr, VM_flag_addr, VM_file_addr], #<),
    VM_end_addr #= VM_start_addr + 8,
    VM_next_addr #= VM_end_addr + 8,
    VM_next_addr #< Base_addr + 32,

    Vm_mm_val #= MM_addr,
    VM_file_addr #< Base_addr + 180,
    VM_pgoff_addr #= VM_file_addr - 8,
    VM_flag_val #< 0x88888888,
    VM_file_addr #< Base_addr + 200,

    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    %FIXME: VM_flag may need value constraints.

    label([VM_next_addr, VM_next_val]),
    /* vm_file maybe zero */
    labeling([enum], [VM_start_addr, VM_end_addr, Vm_mm_addr, Vm_mm_val, VM_flag_addr, VM_pgoff_addr, VM_file_addr, VM_file_val]),
    
    VM_file_val #> 0,
    process_create(path('python'),
                ['subquery.py', VM_file_val, "vm_file"],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    statistics(real_time, [End|_]),

    log("./profile/vm_area_struct", "vm_start", VM_start_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_end", VM_end_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_next", VM_next_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_mm", Vm_mm_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_flag", VM_flag_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_pgoff", VM_pgoff_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_file", VM_file_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_area_struct", End, Start).

check_vm_area_struct(Base_addr, Level) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "vm_area_struct", Level],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vm_file(Base_addr) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [Vfs_mount_addr, Vfs_mount_val],
        [Dentry_addr, Dentry_val],
        [F_op_addr, F_op_val]
    ],
    tuples_in(Ptr_profile, Ptr),
    Vfs_mount_addr #> Base_addr,
    Dentry_addr #= Vfs_mount_addr + 8,
    Dentry_addr #< Base_addr + 40,
    Vfs_mount_val #> 0,
    Dentry_val #> 0,
    F_op_addr #= Base_addr + 40, 
    F_op_val #> 0,
    chain([Vfs_mount_addr, Dentry_addr, F_op_addr], #<),
    labeling([enum], [Vfs_mount_val, Dentry_val, F_op_addr, F_op_val]),


    process_create(path('python'),
                    ['subquery.py', Vfs_mount_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),
/*
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/
    query_file_operation(F_op_val),
    statistics(real_time, [End|_]),

    log("./profile/file", "f_path", Vfs_mount_addr, Base_addr),
    log("./profile/file", "f_op", F_op_addr, Base_addr),
    log("./profile/file", "file", End, Start).

query_file_operation(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result).

possible_name_pointer(Val, Name_offset) :-
    /* The value at val+name_offset is a string pointer */
    current_predicate(pointer/1),
    pointer(Ptr),
    Ptr_profile = ([
        [Name_addr, Name_val]
    ]),
    Name_addr #= Val + Name_offset,
    tuples_in(Ptr_profile, Ptr),
    labeling([enum], [Name_addr, Name_val]),
    query_string_pointer(Name_val).

possible_vfs_mount(Base_addr) :-
    pointer(Ptr),
    int(Int),
    Ptr_profile = [
        [Dentry_addr, Dentry_val],
        [Mnt_sb_addr, Mnt_sb_val]
    ],
    Int_profile = [
        [Mnt_flags_addr, Mnt_flags_val]
    ],
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Dentry_addr #= Base_addr,
    Dentry_val #> 0,
    Mnt_flags_addr #= Dentry_addr + 16,
    Mnt_flags_val #>= 0,
    Mnt_sb_val #> 0,
    chain([Dentry_addr, Mnt_sb_addr, Mnt_flags_addr], #<),
    label([Dentry_addr, Dentry_val, Mnt_flags_addr, Mnt_flags_val]).
 
possible_dentry(Base_addr) :-
    /*
        struct dentry *d_parent;
        struct qstr d_name contains char *name; it's a name pointer
        struct inode *d_inode;
        unsigned char d_iname[LEN];
        const struct dentry_operations *d_op;
        struct list_head d_child;
        struct list_head d_subdirs;
        union {
	        struct hlist_node d_alias;
	        struct rcu_head d_rcu;
        } d_u;
    */
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    string_val(Str),
    Ptr_profile = [
        [Dparent_addr, Dparent_val],
        [Dname_addr, Dname_val],
        [D_inode_addr, D_inode_val],
        [D_op_addr, D_op_val],
        [Dchild_addr, Dchild_val],
        [D_subdirs_addr, D_subdirs_val]
    ],
    Str_profile = [
        [D_iname_addr, D_iname_val]
    ],
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    Dparent_addr #> Base_addr,
    chain([Dparent_addr, Dname_addr, D_inode_addr, D_iname_addr, 
            D_op_addr, Dchild_addr, D_subdirs_addr], #<),
    D_subdirs_addr #= Dchild_addr + 16,
    D_subdirs_addr #< Base_addr + 200,
    Dparent_val #> 0,
    labeling([enum], [Dname_addr, Dname_val]),
    query_string_pointer(Dname_val),
    labeling([enum], [D_iname_addr, D_iname_val]),
    D_iname_offset #= D_iname_addr - Base_addr,
    Dname_offset #= Dname_addr - Base_addr,
    labeling([enum], [Dparent_addr, Dparent_val]),
    Parent_dname #= Dparent_val + Dname_offset,
    process_create(path('python'),
                    ['subquery.py', Parent_dname, "name_pointer", Dname_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    labeling([enum], [D_inode_addr, D_inode_val]),
    query_inode(D_inode_val),
    /* d_op might be zero! */
    labeling([enum], [D_op_addr, D_op_val]),
    %query_file_operation(D_op_val),

    labeling([enum], [Dchild_addr, Dchild_val]),
    Dchild_offset #= Dchild_addr - Base_addr,
    Dchild_init #= Dchild_val - Dchild_offset,
    query_name_pointer(Dchild_init, Dname_offset),

    /* This can be hardcoded as d_child_addr + 16 */
    labeling([enum], [D_subdirs_addr, D_subdirs_val]),
    Dsubdirs_offset #= D_subdirs_addr - Base_addr,
    D_subdirs_init #= D_subdirs_val - Dsubdirs_offset,
    query_name_pointer(D_subdirs_init, Dname_offset),

    _Name_addr #= Dname_addr - 8,

    statistics(real_time, [End|_]),

    log("./profile/dentry", "parent", Dparent_addr, Base_addr),
    log("./profile/dentry", "d_name", _Name_addr, Base_addr),
    log("./profile/dentry", "d_inode", D_inode_addr, Base_addr),
    log("./profile/dentry", "d_iname", D_iname_addr, Base_addr),
    log("./profile/dentry", "dchild", Dchild_addr, Base_addr),
    log("./profile/dentry", "d_subdirs", D_subdirs_addr, Base_addr),
    log("./profile/dentry", "dentry", End, Start).

query_inode(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_inode(Base_addr) :-
    /*
        struct inode_operations *i_op;
        struct super_block      *i_sb;
        struct address_space    *i_mapping;
    */
    statistics(real_time, [Start|_]),

    pointer(Ptr),
    long(Ulg),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [I_op_addr, I_op_val],
        [I_sb_addr, I_sb_val],
        [I_mapping_addr, I_mapping_val],
        [I_fop_addr, I_fop_val]
    ]),
    Ulong_profile = ([
        /* i_mode is actually not long type. */
        [I_mode_addr, I_mode_val],
        [I_ino_addr, I_ino_val],
        [I_size_addr, I_size_val],
        [I_atime_addr, I_atime_val],
        [_I_atime_addr, _I_atime_val],
        [I_mtime_addr, I_mtime_val],
        [I_ctime_addr, I_ctime_val],
        [_I_ctime_addr, _I_ctime_val]
    ]),
    Int_profile = ([
        [I_uid_addr, I_uid_val],
        [I_gid_addr, I_gid_val],
        [_atomic_t_addr, _atomic_t_val],
        [_atomic_t2_addr, _atomic_t2_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    tuples_in(Int_profile, Int),

    chain([I_mode_addr, I_uid_addr, I_gid_addr, I_op_addr, I_sb_addr, I_mapping_addr, I_ino_addr,
           I_size_addr, I_atime_addr, _I_atime_addr, I_mtime_addr, I_ctime_addr, _I_ctime_addr, 
           _atomic_t_addr, _atomic_t2_addr, I_fop_addr], #<),

    I_mode_addr #= Base_addr,
    I_mode_val #> 0,
    I_gid_addr #= I_mode_addr + 8,
    %I_op_addr #= Base_addr + 32,
    I_op_addr #=< Base_addr + 32,
    I_op_val #> 0,
    labeling([enum], [I_op_addr, I_op_val]),
    query_inode_operations(I_op_val),

    I_sb_addr #= I_op_addr + 8,
    I_mapping_addr #= I_sb_addr + 8,
    I_atime_addr #= I_size_addr + 8,
    I_mtime_addr #= I_atime_addr + 16,
    I_ctime_addr #= I_mtime_addr + 16,
    _I_ctime_addr #= I_ctime_addr + 8,
    I_size_val #> 0,
    I_atime_val #> 4096,
    I_mtime_val #> 4096,
    I_ctime_val #> 4096,
    I_fop_addr #< Base_addr + 400,
    labeling([enum], [I_sb_addr, I_mapping_addr, I_atime_addr, I_mtime_addr, I_ctime_addr]),
    I_fop_addr #= _atomic_t_addr + 8,
    labeling([enum], [I_fop_addr, I_fop_val]),
    I_fop_val #> 0,
    query_inode_operations(I_fop_val),

    statistics(real_time, [End|_]),
    log("./profile/inode", "I_mode_addr", I_mode_addr, Base_addr),
    log("./profile/inode", "I_uid_addr", I_uid_addr, Base_addr),
    log("./profile/inode", "I_gid_addr", I_gid_addr, Base_addr),
    log("./profile/inode", "I_op_addr", I_op_addr, Base_addr),
    log("./profile/inode", "I_sb_addr", I_sb_addr, Base_addr),
    log("./profile/inode", "I_mapping_addr", I_mapping_addr, Base_addr),
    log("./profile/inode", "I_size_addr", I_size_addr, Base_addr),
    log("./profile/inode", "I_atime_addr", I_atime_addr, Base_addr),
    log("./profile/inode", "I_mtime_addr", I_mtime_addr, Base_addr),
    log("./profile/inode", "I_ctime_addr", I_ctime_addr, Base_addr),
    log("./profile/inode", "I_fop_addr", I_fop_addr, Base_addr),
    log("./profile/inode", "inode", End, Start).


query_inode_operations(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_name_pointer(Base_addr, Offset) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "name_pointer", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_inode_operations(Base_addr) :-
    /* a bunch of function pointers. */
    pointer(Ptr),
    Ptr_profile = ([
        [_L1_addr, _L1_val],
        [_L2_addr, _L2_val],
        [_L3_addr, _L3_val],
        [_L4_addr, _L4_val],
        [_L5_addr, _L5_val],
        [_L6_addr, _L6_val],
        [_L7_addr, _L7_val],
        [_L8_addr, _L8_val],
        [_L9_addr, _L9_val],
        [_L10_addr, _L10_val],
        [_L11_addr, _L11_val],
        [_L12_addr, _L12_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([_L1_addr, _L2_addr, _L3_addr, _L4_addr, _L5_addr, _L6_addr, _L7_addr,
           _L8_addr, _L9_addr, _L10_addr, _L11_addr, _L12_addr], #<),
    _L1_addr #= Base_addr,
    _L12_addr #= Base_addr + 88.

possible_d_entry(Base_addr, Dname_offset) :-
    current_predicate(string_val/1),
    string_val(Str),
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    Dname_addr #= Base_addr + Dname_offset,
    tuples_in(Str_profile, Str),
    label([Dname_addr]).

possible_list_head(Tasks_val, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_val, Tasks_addr]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],
    Comm_addr #= Tasks_val - Tasks_offset + Comm_offset,
    Tasks_addr #\= Tasks_val,
    tuples_in(Str_profile, Str),
    tuples_in(Ptr_profile, Ptr),
    label([Comm_addr]).

possible_ts(Base_addr, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_addr, Tasks_val]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],

    Comm_addr #= Base_addr + Comm_offset,
    Tasks_addr #= Base_addr + Tasks_offset,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),

    label([Tasks_val]),
    
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "list_head", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_cred(Base_addr) :-
    statistics(real_time, [Start|_]),

    int(Int),
    long(Ulg),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3],
        [Addr4, Val4],
        [Addr5, Val5],
        [Addr6, Val6],
        [Addr7, Val7],
        [Addr8, Val8],
        [Addr9, Val9]
    ],
    %FIXME For now, this rule is hard-coded because we do not consider 0 as a unsign long number. 
    %So that for cred whos val10 is 0, this rule does not apply.
    /*Ulong_profile = [
        [Addr10, Val10],
        [Addr11, Val11]
    ],*/
    Addr1 #> Base_addr,
    %chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9, Addr10, Addr11], #<),
    chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9], #<),
    Addr1 #= Base_addr + 4,
    Addr9 #= Addr1 + 32,
    %Addr11 #< Base_addr + 120,
    tuples_in(Int_profile, Int),
    %tuples_in(Ulong_profile, Ulg),
    statistics(real_time, [End|_]),
    labeling([enum], [Addr1, Addr2, Addr5, Addr6]),
    log("./profile/cred", "cred", End, Start),
    log('./profile/cred', "uid", Addr1, Base_addr),
    log('./profile/cred', "gid", Addr2, Base_addr),
    log('./profile/cred', "euid", Addr5, Base_addr),
    log('./profile/cred', "egid", Addr6, Base_addr).

possible_fs_struct(Base_addr) :-
    statistics(real_time, [Start|_]),
    int(Int),
    pointer(Ptr),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3]
    ],
    Ptr_profile = [
        [Root_addr, Root_val],
        [Root_dentry_addr, Root_dentry_val],
        [PWD_addr, PWD_val]
    ],
    Addr1 #>= Base_addr,
    Root_dentry_addr #= Root_addr + 8,
    chain([Addr1, Addr2, Addr3, Root_addr, Root_dentry_addr, PWD_addr], #<),
    PWD_addr #= Root_addr + 16,
    PWD_addr #< Base_addr + 50,
    tuples_in(Int_profile, Int),
    tuples_in(Ptr_profile, Ptr),
    Root_val #> 0,
    PWD_val #> 0,
    label([Root_addr, Root_val, Root_dentry_addr, Root_dentry_val]),
    /* some times the dentry fields are zero, use vfs_mount instead */
    process_create(path('python'),
                    ['subquery.py', Root_val, "vfs_mount"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    query_dentry(Root_dentry_val),

    label([PWD_addr, PWD_val]),
    process_create(path('python'),
                    ['subquery.py', PWD_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    statistics(real_time, [End|_]),
    log("./profile/fs_struct", "fs time", End, Start),
    log('./profile/fs_struct', "Root", Root_addr, Base_addr),
    log('./profile/fs_struct', "pwd", PWD_addr, Base_addr),
    log('./profile/fs_struct', "fs_struct", End, Start).

possible_mount(Base_addr) :-
    /* struct hlist_head mnt_hash;
       struct mount *mnt_parent; 
       struct vfsmount mnt;
       struct list_head mnt_mounts;
       struct list_head mnt_child;
       struct list_head mnt_instance;
       const char *mnt_devname;
       struct list_head mnt_list;
    */
    statistics(real_time, [Start|_]),
    %get_time(Current),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Mnt_hash_addr, Mnt_hash_val],
        [Mnt_parent_addr, Mnt_parent_val],
        [Vfsmount_addr, Vfsmount_val],
        [Mnt_child_addr, Mnt_child_val],
        [Mnt_devname_addr, Mnt_devname_val],
        [Mnt_list_addr, Mnt_list_val]
    ]),
    Int_profile = ([
        [Mnt_flags_addr, Mnt_flags_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    /* Order Invariants */
    chain([Mnt_hash_addr, Mnt_parent_addr, Vfsmount_addr, Mnt_flags_addr,
            Mnt_child_addr, Mnt_devname_addr, Mnt_list_addr], #<),
    Mnt_hash_addr #= Base_addr,
    /* mnt_hash_addr is a list_head */
    Mnt_parent_addr #> Base_addr + 8,
    Mnt_list_addr - Base_addr #< 200,
    labeling([enum], [Mnt_devname_addr, Mnt_devname_val]),
    query_string_pointer(Mnt_devname_val),
    Mnt_devname_offset #= Mnt_devname_addr - Base_addr,
    /* the offset from mnt_mounts to mnt_list remains the same, so it's safe to use fixed offsets. */
    Mnt_child_addr #= Mnt_devname_addr - 32,
    Mnt_list_addr #= Mnt_devname_addr + 8,
    Mnt_flags_addr #= Vfsmount_addr + 16,
    labeling([enum], [Mnt_child_addr, Mnt_list_addr, Vfsmount_addr, Vfsmount_val]),
    Vfsmount_val #>= 0,
    /* Here we can infer layout of dentry structure 
       Maybe need to infer using another dentry, somehow it may not be initialized. 
    */
    Vfsmount_addr #> 0,
    %query_dentry(Vfsmount_addr),

    labeling([enum], [Mnt_parent_addr, Mnt_parent_val]),
    /* To verify another mount struct, only one-level query, so it does not direct call query_mount recursively */
    
    query_mount_struct(Mnt_parent_val, Mnt_devname_offset),
    
    %get_time(End),
    %Time_past is End - Current,
    statistics(real_time, [End|_]),
    log("./profile/mount", "mnt_hash", Mnt_hash_addr, Base_addr),
    log("./profile/mount", "mnt_parent", Mnt_parent_addr, Base_addr),
    log("./profile/mount", "mnt_child", Mnt_child_addr, Base_addr),
    log("./profile/mount", "mnt_devname", Mnt_devname_addr, Base_addr),
    log("./profile/mount", "mnt_list", Mnt_list_addr, Base_addr),
    log("./profile/mount", "mount", End, Start).

possible_neigh_hash_table(Base_addr) :-
    /* neighbour **hash_buckets */
    pointer(Ptr),
    Ptr_profile = ([
        [Hash_buckest_addr, Hash_buckets_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Hash_buckest_addr #= Base_addr,
    labeling([enum], [Hash_buckest_addr, Hash_buckets_val]),
    process_create(path('python'),
                    ['subquery.py', Hash_buckets_val, "hash_buckets"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_hash_buckets(Base_addr) :-
    /* hash_buckets is an array of neighbour pointer 
       note that not all element are non-zero
    */
    pointer(Ptr),
    Ptr_profile = ([
        [Neighbour_addr, Neighbour_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Neighbour_addr #< Base_addr + 32,
    Neighbour_val #> 0,
    labeling([enum], [Neighbour_addr, Neighbour_val]),
    process_create(path('python'),
                    ['subquery.py', Neighbour_val, "neighbour"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_neighbour(Base_addr) :-
    /* net_device *dev at offset 464 */
    pointer(Ptr),
    Ptr_profile = ([
        [Dev_addr, Dev_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Dev_addr #>= Base_addr + 360,
    Dev_addr #=< Base_addr + 376,
    labeling([enum], [Dev_addr, Dev_val]),
    process_create(path('python'),
                    ['subquery.py', Dev_val, "net_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_net_device(Base_addr) :- 
    /*
        char             name[NAMSIZ];
        struct list_head dev_list;
        unsigned char    addr_len;
        unsigned int     promiscuity;
        struct in_device *ip_ptr;
    */
    statistics(real_time, [Start|_]),

    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Dev_list_addr, Dev_list_val],
        [_atalk_ptr_addr, _atalk_ptr_val],
        [IP_ptr_addr, IP_ptr_val],
        [_dn_ptr_addr, _dn_ptr_val],
        [_ip6_ptr_addr, _ip6_ptr_val],
        [Dev_addr_addr, Dev_addr_val]
    ]),
    Str_profile = ([
        [Name_addr, Name_val],
        [Broad_cast_addr, Broad_cast_val]
    ]),
    Int_profile = ([
        [Promisc_addr, Promisc_val],
        [Addr_len_addr, Addr_len_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),
    /* Hard to determine offsets for addr_len and promisc */
    chain([Name_addr, Dev_list_addr, Addr_len_addr, Promisc_addr, 
           _atalk_ptr_addr, IP_ptr_addr, _dn_ptr_addr, _ip6_ptr_addr, Dev_addr_addr, Broad_cast_addr], #<),
    Name_addr #= Base_addr,
    Name_offset #= Name_addr - Base_addr,
    IP_ptr_addr #= _atalk_ptr_addr + 8,
    IP_ptr_addr #< Base_addr + 1000,
    _ip6_ptr_addr #= IP_ptr_addr + 16,

    /* dev_list offset can be hardcoded since it remains the same */
    Dev_list_addr #= Base_addr + 80,
    labeling([enum], [Name_addr, Dev_list_addr, Dev_list_val]),
    /* do not have a good constrain to narrow down ip_ptr, use its rough offset
       to reduce the search space. 
     */
    IP_ptr_addr #> Base_addr + 700,
    IP_ptr_val #> 0,
    labeling([enum], [IP_ptr_addr, IP_ptr_val]),
    query_in_device(IP_ptr_val),

    %labeling([enum], [Dev_addr_addr, Dev_addr_val]),
    %query_string_pointer(Dev_addr_val),

    statistics(real_time, [End|_]),

    log("./profile/net_device", "name", Name_addr, Base_addr),
    log("./profile/net_device", "ip_ptr", IP_ptr_addr, Base_addr),
    log("./profile/net_device", "dev_list", Dev_list_addr, Base_addr),
    log("./profile/net_device", "net_device", End, Start).

query_in_device(IP_ptr_val) :-
    process_create(path('python'),
                    ['subquery.py', IP_ptr_val, "in_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_mount_struct(Val, Offset) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "mount_struct", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_dentry(Dentry_val) :-
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).
