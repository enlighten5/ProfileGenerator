:- use_module(library(clpfd)).
:- style_check(-singleton).
pointer([
		[0x6574ad8,106384256],
		[0x6574ae0,0],
		[0x6574ae8,106384289],
		[0x6574af0,0],
		[0x6574af8,0],
		[0x6574b08,118094848],
		[0x6574b20,107864888],
		[0x6574b28,0],
		[0x6574b30,0],
		[0x6574b40,106384192],
		[0x6574b48,106384192],
		[0x6574b50,0],
		[0x6574b58,27370496],
		[0x6574b60,0],
		[0x6574b68,106621696],
		[0x6574b70,0],
		[0x6574b78,0],
		[0x6574b90,106384992],
		[0x6574b98,106384072],
		[0x6574ba0,106381897],
		[0x6574ba8,106381344],
		[0x6574bb0,106384104],
		[0x6574bc0,118094848],
		[0x6574bd8,107867280],
		[0x6574be0,0],
		[0x6574be8,0],
		[0x6574bf8,106319184],
		[0x6574c00,106319184],
		[0x6574c08,111979880],
		[0x6574c10,27370496],
		[0x6574c20,106621696],
		[0x6574c28,0],
		[0x6574c30,0],
		[0x6574c38,0],
		[0x6574c48,106381680],
		[0x6574c50,0],
		[0x6574c58,106381713],
		[0x6574c60,0],
		[0x6574c68,0],
		[0x6574c78,118090368],
		[0x6574c90,106385080],
		[0x6574c98,0],
		[0x6574ca0,0],
		[0x6574cb0,106384560],
		[0x6574cb8,106384560],
		[0x6574cc0,0],
		[0x6574cc8,27370496],
		[0x6574cd0,0],
		[0x6574cd8,106123520],
		[0x6574ce0,0],
		[0x6574ce8,0],
		[0x6574d00,106382968],
		[0x6574d08,106383888],
		[0x6574d10,106383000],
		[0x6574d18,0],
		[0x6574d20,0],
		[0x6574d30,118094848],
		[0x6574d48,0],
		[0x6574d50,0],
		[0x6574d58,0],
		[0x6574d60,0],
		[0x6574d68,106384744],
		[0x6574d70,106384744],
		[0x6574d78,0],
		[0x6574d80,27332928],
		[0x6574d88,0],
		[0x6574d90,0],
		[0x6574d98,27265984],
		[0x6574da0,0],
		[0x6574da8,106381496],
		[0x6574db8,106383152],
		[0x6574dc0,106381496],
		[0x6574dd0,107864464],
		[0x6574dd8,106381712],
		[0x6574de8,118090368],
		[0x6574e00,0],
		[0x6574e08,0],
		[0x6574e10,0],
		[0x6574e18,0],
		[0x6574e20,106384928],
		[0x6574e28,106384928],
		[0x6574e30,111980144],
		[0x6574e38,0],
		[0x6574e48,0],
		[0x6574e50,0],
		[0x6574e58,0],
		[0x6574e70,106382048],
		[0x6574e78,106384256],
		[0x6574e80,106382080],
		[0x6574e88,0],
		[0x6574e90,0],
		[0x6574e98,0],
		[0x6574ea0,118094848],
		[0x6574eb8,107864152],
		[0x6574ec0,0],
		[0x6574ec8,0],
		[0x6574ed8,106316368],
		[0x6574ee0,106316368],
		[0x6574ee8,111979880],
		[0x6574ef0,27370496],
		[0x6574f00,106621696],
		[0x6574f08,0],
		[0x6574f10,0],
		[0x6574f28,106382232],
		[0x6574f30,106381864],
		[0x6574f38,106382264],
		[0x6574f40,0],
		[0x6574f48,0],
		[0x6574f50,0],
		[0x6574f58,118094848],
		[0x6574f70,107864336],
		[0x6574f78,0],
		[0x6574f80,0],
		[0x6574f90,106317904],
		[0x6574f98,106317904],
		[0x6574fa0,111978736],
		[0x6574fa8,27370496],
		[0x6574fb8,106622720],
		[0x6574fc0,0],
		[0x6574fc8,0],
		[0x6574fd0,0],
		[0x6574fd8,0],
		[0x6574fe0,0],
		[0x6574fe8,0],
		[0x6574ff0,0],
		[0x6574ff8,0],
		[0x6575000,0],
		[0x6575008,0],
		[0x6575010,0],
		[0x6575018,0],
		[0x6575020,0],
		[0x6575028,0],
		[0x6575030,0],
		[0x6575080,0],
		[0x6575088,0],
		[0x6575090,0],
		[0x6575098,0],
		[0x65750a0,0],
		[0x65750a8,0],
		[0x65750b0,0],
		[0x65750b8,0],
		[0x65750c0,0],
		[0x65750c8,0],
		[0x65750d0,0],
		[0x65750d8,0],
		[0x65750e0,0],
		[0x65750e8,0],
		[0x65750f0,0],
		[0x65750f8,0],
		[0x6575100,0],
		[0x6575108,0],
		[0x6575110,0],
		[0x6575118,0],
		[0x6575120,0],
		[0x6575128,0],
		[0x6575130,0],
		[0x6575138,0],
		[0x6575140,0],
		[0x6575148,0],
		[0x6575150,0],
		[0x6575158,0],
		[0x6575160,0],
		[0x6575168,0],
		[0x6575170,0],
		[0x6575178,0],
		[0x6575180,0],
		[0x6575188,0],
		[0x6575190,0],
		[0x6575198,0],
		[0x65751a0,0],
		[0x65751a8,0],
		[0x65751b0,0],
		[0x65751b8,0],
		[0x65751c0,0],
		[0x65751c8,0],
		[0x65751d0,0],
		[0x65751d8,0],
		[0x65751e0,0],
		[0x65751e8,0],
		[0x65751f0,0],
		[0x65751f8,0],
		[0x6575200,0],
		[0x6575208,0],
		[0x6575210,0],
		[0x6575218,0],
		[0x6575220,0],
		[0x6575228,0],
		[0x6575230,0],
		[0x6575238,0],
		[0x6575240,0],
		[0x6575248,0],
		[0x6575250,0],
		[0x6575258,0],
		[0x6575260,0],
		[0x6575268,0],
		[0x6575270,0],
		[0x6575278,0],
		[0x6575280,0],
		[0x6575288,0],
		[0x6575290,0],
		[0x6575298,0],
		[0x65752a0,0],
		[0x65752a8,0],
		[0x65752b0,0],
		[0x65752b8,0],
		[0x65752c0,0],
		[0x65752c8,0],
		[0x65752d0,0],
		[0x65752d8,0],
		[0x65752e0,0],
		[0x65752e8,0],
		[0x65752f0,0],
		[0x65752f8,0],
		[0x6575300,0],
		[0x6575308,0],
		[0x6575310,0],
		[0x6575318,0],
		[0x6575320,0],
		[0x6575328,0],
		[0x6575330,0],
		[0x6575338,0],
		[0x6575340,0],
		[0x6575348,0],
		[0x6575350,0],
		[0x6575358,0],
		[0x6575360,0],
		[0x6575368,0],
		[0x6575370,0],
		[0x6575378,0],
		[0x6575380,0],
		[0x6575388,0],
		[0x6575390,0],
		[0x6575398,0],
		[0x65753a0,0],
		[0x65753a8,0],
		[0x65753b0,0],
		[0x65753b8,0],
		[0x65753c0,0],
		[0x65753c8,0],
		[0x65753d0,0],
		[0x65753d8,0],
		[0x65753e0,0],
		[0x65753e8,0],
		[0x65753f0,0],
		[0x65753f8,0],
		[0x6575400,0],
		[0x6575408,0],
		[0x6575410,0],
		[0x6575418,0],
		[0x6575420,0],
		[0x6575428,0],
		[0x6575430,0],
		[0x6575438,0],
		[0x6575440,0],
		[0x6575448,0],
		[0x6575450,0],
		[0x6575458,0],
		[0x6575460,0],
		[0x6575468,0],
		[0x6575470,0],
		[0x6575478,0],
		[0x6575480,0],
		[0x6575488,0],
		[0x6575490,0],
		[0x6575498,0],
		[0x65754a0,0],
		[0x65754a8,0],
		[0x65754b0,0],
		[0x65754b8,0],
		[0x65754c0,0],
		[0x65754c8,0],
		[0x65754d0,0],
		[0x65754d8,0],
		[0x65754e0,0],
		[0x65754e8,0],
		[0x65754f0,0],
		[0x65754f8,0],
		[0x6575500,0],
		[0x6575508,0],
		[0x6575510,0],
		[0x6575518,0],
		[0x6575520,0],
		[0x6575528,0],
		[0x6575530,0],
		[0x6575538,0],
		[0x6575540,0],
		[0x6575548,0],
		[0x6575550,0],
		[0x6575558,0],
		[0x6575560,0],
		[0x6575568,0],
		[0x6575570,0],
		[0x6575578,0],
		[0x6575580,0],
		[0x6575588,0],
		[0x6575590,0],
		[0x6575598,0],
		[0x65755a0,0],
		[0x65755a8,0],
		[0x65755b0,0],
		[0x65755b8,0],
		[0x65755c0,0],
		[0x65755c8,0],
		[0x65755d0,0],
		[0x65755d8,0],
		[0x65755e0,0],
		[0x65755e8,0],
		[0x65755f0,0],
		[0x65755f8,0],
		[0x6575600,0],
		[0x6575608,0],
		[0x6575610,0],
		[0x6575618,0],
		[0x6575620,0],
		[0x6575628,0],
		[0x6575630,0],
		[0x6575638,0],
		[0x6575640,0],
		[0x6575648,0],
		[0x6575650,0],
		[0x6575658,0],
		[0x6575660,0],
		[0x6575668,0],
		[0x6575670,0],
		[0x6575678,0],
		[0x6575680,0],
		[0x6575688,0],
		[0x6575690,0],
		[0x6575698,0],
		[0x65756a0,0],
		[0x65756a8,0],
		[0x65756b0,0],
		[0x65756b8,0],
		[0x65756c0,0],
		[0x65756c8,0],
		[0x65756d0,0],
		[0x65756d8,0],
		[0x65756e0,0],
		[0x65756e8,0],
		[0x65756f0,0],
		[0x65756f8,0],
		[0x6575700,0],
		[0x6575708,0],
		[0x6575710,0],
		[0x6575718,0],
		[0x6575720,0],
		[0x6575728,0],
		[0x6575730,0],
		[0x6575738,0],
		[0x6575740,0],
		[0x6575748,0],
		[0x6575750,0],
		[0x6575758,0],
		[0x6575760,0],
		[0x6575768,0],
		[0x6575770,0],
		[0x6575778,0],
		[0x6575780,0],
		[0x6575788,0],
		[0x6575790,0],
		[0x6575798,0],
		[0x65757a0,0],
		[0x65757a8,0],
		[0x65757b0,0],
		[0x65757b8,0],
		[0x65757c0,0],
		[0x65757c8,0],
		[0x65757d0,0],
		[0x65757d8,0],
		[0x65757e0,0],
		[0x65757e8,0],
		[0x65757f0,0],
		[0x65757f8,0],
		[0x6575800,0],
		[0x6575808,0],
		[0x6575810,0],
		[0x6575818,0],
		[0x6575820,0],
		[0x6575828,0],
		[0x6575830,0],
		[0x6575838,0],
		[0x6575840,0],
		[0x6575848,0],
		[0x6575850,0],
		[0x6575858,0],
		[0x6575860,0],
		[0x6575868,0],
		[0x6575870,0],
		[0x6575878,0],
		[0x6575880,0],
		[0x6575888,0],
		[0x6575890,0],
		[0x6575898,0],
		[0x65758a0,0],
		[0x65758a8,0],
		[0x65758b0,0],
		[0x65758b8,0],
		[0x65758c0,0],
		[0x65758c8,0],
		[0x65758d0,0],
		[0x65758d8,0],
		[0x65758e0,0],
		[0x65758e8,0],
		[0x65758f0,0],
		[0x65758f8,0],
		[0x6575900,0],
		[0x6575908,0],
		[0x6575910,0],
		[0x6575918,0],
		[0x6575920,0],
		[0x6575928,0],
		[0x6575930,0],
		[0x6575938,0],
		[0x6575940,0],
		[0x6575948,0],
		[0x6575950,0],
		[0x6575958,0],
		[0x6575960,0],
		[0x6575968,0],
		[0x6575970,0],
		[0x6575978,0],
		[0x6575980,0],
		[0x6575988,0],
		[0x6575990,0],
		[0x6575998,0],
		[0x65759a0,0],
		[0x65759a8,0],
		[0x65759b0,0],
		[0x65759b8,0],
		[0x65759c0,0],
		[0x65759c8,0],
		[0x65759d0,0],
		[0x65759d8,0],
		[0x65759e0,0],
		[0x65759e8,0],
		[0x65759f0,0],
		[0x65759f8,0],
		[0x6575a00,0],
		[0x6575a08,0],
		[0x6575a10,0],
		[0x6575a18,0],
		[0x6575a20,0],
		[0x6575a28,0],
		[0x6575a30,0],
		[0x6575a38,0],
		[0x6575a40,0],
		[0x6575a48,0],
		[0x6575a50,0],
		[0x6575a58,0],
		[0x6575a60,0],
		[0x6575a68,0],
		[0x6575a70,0],
		[0x6575a78,0],
		[0x6575a80,0],
		[0x6575a88,0],
		[0x6575a90,0],
		[0x6575a98,0],
		[0x6575aa0,0],
		[0x6575aa8,0],
		[0x6575ab0,0],
		[0x6575ab8,0],
		[0x6575ac0,0],
		[0, 0]
]).
unknown([
		[0x6574bc8,9223372036854775845],
		[0x6574d38,9223372036854775845],
		[0x6574df0,9223372036854775845],
		[0x6574ea8,9223372036854775845],
		[0x6574f60,9223372036854775845],
		[0x6575038,9223372036977590373],
		[0x6575040,9223372036977975399],
		[0, 0]
]).
long([
		[0x6574ac8,4194304],
		[0x6574ad0,4562944],
		[0x6574b00,4194304],
		[0x6574b10,37],
		[0x6574b18,2165],
		[0x6574b38,89],
		[0x6574b80,6660096],
		[0x6574b88,6664192],
		[0x6574bb8,140115663077376],
		[0x6574bd0,1050737],
		[0x6574bf0,90],
		[0x6574c18,90],
		[0x6574c40,4562944],
		[0x6574c70,4194304],
		[0x6574c80,37],
		[0x6574c88,2165],
		[0x6574ca8,89],
		[0x6574cf0,140724492214272],
		[0x6574cf8,140724492226560],
		[0x6574d28,73728],
		[0x6574d40,67388433],
		[0x6574db0,8019968],
		[0x6574dc8,1],
		[0x6574de0,140442291687424],
		[0x6574df8,1048691],
		[0x6574e40,1957],
		[0x6574e60,6664192],
		[0x6574e68,6668288],
		[0x6574eb0,1050739],
		[0x6574ed0,91],
		[0x6574ef8,91],
		[0x6574f18,140115702075392],
		[0x6574f20,140115702079488],
		[0x6574f68,1050739],
		[0x6574f88,106],
		[0x6574fb0,106],
		[0x6575048,129761317],
		[0x6575050,129765413],
		[0x6575058,129769509],
		[0x6575060,129773605],
		[0x6575068,129781797],
		[0x6575070,129785893],
		[0x6575078,129789989],
		[0, 0]
]).
int([
		[0x6574acc,0],
		[0x6574ad4,0],
		[0x6574ae0,0],
		[0x6574ae4,0],
		[0x6574af0,0],
		[0x6574af4,0],
		[0x6574af8,0],
		[0x6574afc,0],
		[0x6574b04,0],
		[0x6574b10,37],
		[0x6574b14,0],
		[0x6574b18,2165],
		[0x6574b1c,0],
		[0x6574b28,0],
		[0x6574b2c,0],
		[0x6574b30,0],
		[0x6574b34,0],
		[0x6574b38,89],
		[0x6574b3c,0],
		[0x6574b50,0],
		[0x6574b54,0],
		[0x6574b60,0],
		[0x6574b64,0],
		[0x6574b70,0],
		[0x6574b74,0],
		[0x6574b78,0],
		[0x6574b7c,0],
		[0x6574b84,0],
		[0x6574b8c,0],
		[0x6574bbc,32623],
		[0x6574bc8,37],
		[0x6574bd4,0],
		[0x6574be0,0],
		[0x6574be4,0],
		[0x6574be8,0],
		[0x6574bec,0],
		[0x6574bf0,90],
		[0x6574bf4,0],
		[0x6574c18,90],
		[0x6574c1c,0],
		[0x6574c28,0],
		[0x6574c2c,0],
		[0x6574c30,0],
		[0x6574c34,0],
		[0x6574c38,0],
		[0x6574c3c,0],
		[0x6574c44,0],
		[0x6574c50,0],
		[0x6574c54,0],
		[0x6574c60,0],
		[0x6574c64,0],
		[0x6574c68,0],
		[0x6574c6c,0],
		[0x6574c74,0],
		[0x6574c80,37],
		[0x6574c84,0],
		[0x6574c88,2165],
		[0x6574c8c,0],
		[0x6574c98,0],
		[0x6574c9c,0],
		[0x6574ca0,0],
		[0x6574ca4,0],
		[0x6574ca8,89],
		[0x6574cac,0],
		[0x6574cc0,0],
		[0x6574cc4,0],
		[0x6574cd0,0],
		[0x6574cd4,0],
		[0x6574ce0,0],
		[0x6574ce4,0],
		[0x6574ce8,0],
		[0x6574cec,0],
		[0x6574cf4,32764],
		[0x6574cfc,32764],
		[0x6574d18,0],
		[0x6574d1c,0],
		[0x6574d20,0],
		[0x6574d24,0],
		[0x6574d2c,0],
		[0x6574d38,37],
		[0x6574d44,0],
		[0x6574d48,0],
		[0x6574d4c,0],
		[0x6574d50,0],
		[0x6574d54,0],
		[0x6574d58,0],
		[0x6574d5c,0],
		[0x6574d60,0],
		[0x6574d64,0],
		[0x6574d78,0],
		[0x6574d7c,0],
		[0x6574d88,0],
		[0x6574d8c,0],
		[0x6574d90,0],
		[0x6574d94,0],
		[0x6574da0,0],
		[0x6574da4,0],
		[0x6574db4,0],
		[0x6574dc8,1],
		[0x6574dcc,0],
		[0x6574de4,32699],
		[0x6574df0,37],
		[0x6574dfc,0],
		[0x6574e00,0],
		[0x6574e04,0],
		[0x6574e08,0],
		[0x6574e0c,0],
		[0x6574e10,0],
		[0x6574e14,0],
		[0x6574e18,0],
		[0x6574e1c,0],
		[0x6574e38,0],
		[0x6574e3c,0],
		[0x6574e40,1957],
		[0x6574e44,0],
		[0x6574e48,0],
		[0x6574e4c,0],
		[0x6574e50,0],
		[0x6574e54,0],
		[0x6574e58,0],
		[0x6574e5c,0],
		[0x6574e64,0],
		[0x6574e6c,0],
		[0x6574e88,0],
		[0x6574e8c,0],
		[0x6574e90,0],
		[0x6574e94,0],
		[0x6574e98,0],
		[0x6574e9c,0],
		[0x6574ea8,37],
		[0x6574eb4,0],
		[0x6574ec0,0],
		[0x6574ec4,0],
		[0x6574ec8,0],
		[0x6574ecc,0],
		[0x6574ed0,91],
		[0x6574ed4,0],
		[0x6574ef8,91],
		[0x6574efc,0],
		[0x6574f08,0],
		[0x6574f0c,0],
		[0x6574f10,0],
		[0x6574f14,0],
		[0x6574f1c,32623],
		[0x6574f24,32623],
		[0x6574f40,0],
		[0x6574f44,0],
		[0x6574f48,0],
		[0x6574f4c,0],
		[0x6574f50,0],
		[0x6574f54,0],
		[0x6574f60,37],
		[0x6574f6c,0],
		[0x6574f78,0],
		[0x6574f7c,0],
		[0x6574f80,0],
		[0x6574f84,0],
		[0x6574f88,106],
		[0x6574f8c,0],
		[0x6574fb0,106],
		[0x6574fb4,0],
		[0x6574fc0,0],
		[0x6574fc4,0],
		[0x6574fc8,0],
		[0x6574fcc,0],
		[0x6574fd0,0],
		[0x6574fd4,0],
		[0x6574fd8,0],
		[0x6574fdc,0],
		[0x6574fe0,0],
		[0x6574fe4,0],
		[0x6574fe8,0],
		[0x6574fec,0],
		[0x6574ff0,0],
		[0x6574ff4,0],
		[0x6574ff8,0],
		[0x6574ffc,0],
		[0x6575000,0],
		[0x6575004,0],
		[0x6575008,0],
		[0x657500c,0],
		[0x6575010,0],
		[0x6575014,0],
		[0x6575018,0],
		[0x657501c,0],
		[0x6575020,0],
		[0x6575024,0],
		[0x6575028,0],
		[0x657502c,0],
		[0x6575030,0],
		[0x6575034,0],
		[0x657504c,0],
		[0x6575054,0],
		[0x657505c,0],
		[0x6575064,0],
		[0x657506c,0],
		[0x6575074,0],
		[0x657507c,0],
		[0x6575080,0],
		[0x6575084,0],
		[0x6575088,0],
		[0x657508c,0],
		[0x6575090,0],
		[0x6575094,0],
		[0x6575098,0],
		[0x657509c,0],
		[0x65750a0,0],
		[0x65750a4,0],
		[0x65750a8,0],
		[0x65750ac,0],
		[0x65750b0,0],
		[0x65750b4,0],
		[0x65750b8,0],
		[0x65750bc,0],
		[0x65750c0,0],
		[0x65750c4,0],
		[0x65750c8,0],
		[0x65750cc,0],
		[0x65750d0,0],
		[0x65750d4,0],
		[0x65750d8,0],
		[0x65750dc,0],
		[0x65750e0,0],
		[0x65750e4,0],
		[0x65750e8,0],
		[0x65750ec,0],
		[0x65750f0,0],
		[0x65750f4,0],
		[0x65750f8,0],
		[0x65750fc,0],
		[0x6575100,0],
		[0x6575104,0],
		[0x6575108,0],
		[0x657510c,0],
		[0x6575110,0],
		[0x6575114,0],
		[0x6575118,0],
		[0x657511c,0],
		[0x6575120,0],
		[0x6575124,0],
		[0x6575128,0],
		[0x657512c,0],
		[0x6575130,0],
		[0x6575134,0],
		[0x6575138,0],
		[0x657513c,0],
		[0x6575140,0],
		[0x6575144,0],
		[0x6575148,0],
		[0x657514c,0],
		[0x6575150,0],
		[0x6575154,0],
		[0x6575158,0],
		[0x657515c,0],
		[0x6575160,0],
		[0x6575164,0],
		[0x6575168,0],
		[0x657516c,0],
		[0x6575170,0],
		[0x6575174,0],
		[0x6575178,0],
		[0x657517c,0],
		[0x6575180,0],
		[0x6575184,0],
		[0x6575188,0],
		[0x657518c,0],
		[0x6575190,0],
		[0x6575194,0],
		[0x6575198,0],
		[0x657519c,0],
		[0x65751a0,0],
		[0x65751a4,0],
		[0x65751a8,0],
		[0x65751ac,0],
		[0x65751b0,0],
		[0x65751b4,0],
		[0x65751b8,0],
		[0x65751bc,0],
		[0x65751c0,0],
		[0x65751c4,0],
		[0x65751c8,0],
		[0x65751cc,0],
		[0x65751d0,0],
		[0x65751d4,0],
		[0x65751d8,0],
		[0x65751dc,0],
		[0x65751e0,0],
		[0x65751e4,0],
		[0x65751e8,0],
		[0x65751ec,0],
		[0x65751f0,0],
		[0x65751f4,0],
		[0x65751f8,0],
		[0x65751fc,0],
		[0x6575200,0],
		[0x6575204,0],
		[0x6575208,0],
		[0x657520c,0],
		[0x6575210,0],
		[0x6575214,0],
		[0x6575218,0],
		[0x657521c,0],
		[0x6575220,0],
		[0x6575224,0],
		[0x6575228,0],
		[0x657522c,0],
		[0x6575230,0],
		[0x6575234,0],
		[0x6575238,0],
		[0x657523c,0],
		[0x6575240,0],
		[0x6575244,0],
		[0x6575248,0],
		[0x657524c,0],
		[0x6575250,0],
		[0x6575254,0],
		[0x6575258,0],
		[0x657525c,0],
		[0x6575260,0],
		[0x6575264,0],
		[0x6575268,0],
		[0x657526c,0],
		[0x6575270,0],
		[0x6575274,0],
		[0x6575278,0],
		[0x657527c,0],
		[0x6575280,0],
		[0x6575284,0],
		[0x6575288,0],
		[0x657528c,0],
		[0x6575290,0],
		[0x6575294,0],
		[0x6575298,0],
		[0x657529c,0],
		[0x65752a0,0],
		[0x65752a4,0],
		[0x65752a8,0],
		[0x65752ac,0],
		[0x65752b0,0],
		[0x65752b4,0],
		[0x65752b8,0],
		[0x65752bc,0],
		[0x65752c0,0],
		[0x65752c4,0],
		[0x65752c8,0],
		[0x65752cc,0],
		[0x65752d0,0],
		[0x65752d4,0],
		[0x65752d8,0],
		[0x65752dc,0],
		[0x65752e0,0],
		[0x65752e4,0],
		[0x65752e8,0],
		[0x65752ec,0],
		[0x65752f0,0],
		[0x65752f4,0],
		[0x65752f8,0],
		[0x65752fc,0],
		[0x6575300,0],
		[0x6575304,0],
		[0x6575308,0],
		[0x657530c,0],
		[0x6575310,0],
		[0x6575314,0],
		[0x6575318,0],
		[0x657531c,0],
		[0x6575320,0],
		[0x6575324,0],
		[0x6575328,0],
		[0x657532c,0],
		[0x6575330,0],
		[0x6575334,0],
		[0x6575338,0],
		[0x657533c,0],
		[0x6575340,0],
		[0x6575344,0],
		[0x6575348,0],
		[0x657534c,0],
		[0x6575350,0],
		[0x6575354,0],
		[0x6575358,0],
		[0x657535c,0],
		[0x6575360,0],
		[0x6575364,0],
		[0x6575368,0],
		[0x657536c,0],
		[0x6575370,0],
		[0x6575374,0],
		[0x6575378,0],
		[0x657537c,0],
		[0x6575380,0],
		[0x6575384,0],
		[0x6575388,0],
		[0x657538c,0],
		[0x6575390,0],
		[0x6575394,0],
		[0x6575398,0],
		[0x657539c,0],
		[0x65753a0,0],
		[0x65753a4,0],
		[0x65753a8,0],
		[0x65753ac,0],
		[0x65753b0,0],
		[0x65753b4,0],
		[0x65753b8,0],
		[0x65753bc,0],
		[0x65753c0,0],
		[0x65753c4,0],
		[0x65753c8,0],
		[0x65753cc,0],
		[0x65753d0,0],
		[0x65753d4,0],
		[0x65753d8,0],
		[0x65753dc,0],
		[0x65753e0,0],
		[0x65753e4,0],
		[0x65753e8,0],
		[0x65753ec,0],
		[0x65753f0,0],
		[0x65753f4,0],
		[0x65753f8,0],
		[0x65753fc,0],
		[0x6575400,0],
		[0x6575404,0],
		[0x6575408,0],
		[0x657540c,0],
		[0x6575410,0],
		[0x6575414,0],
		[0x6575418,0],
		[0x657541c,0],
		[0x6575420,0],
		[0x6575424,0],
		[0x6575428,0],
		[0x657542c,0],
		[0x6575430,0],
		[0x6575434,0],
		[0x6575438,0],
		[0x657543c,0],
		[0x6575440,0],
		[0x6575444,0],
		[0x6575448,0],
		[0x657544c,0],
		[0x6575450,0],
		[0x6575454,0],
		[0x6575458,0],
		[0x657545c,0],
		[0x6575460,0],
		[0x6575464,0],
		[0x6575468,0],
		[0x657546c,0],
		[0x6575470,0],
		[0x6575474,0],
		[0x6575478,0],
		[0x657547c,0],
		[0x6575480,0],
		[0x6575484,0],
		[0x6575488,0],
		[0x657548c,0],
		[0x6575490,0],
		[0x6575494,0],
		[0x6575498,0],
		[0x657549c,0],
		[0x65754a0,0],
		[0x65754a4,0],
		[0x65754a8,0],
		[0x65754ac,0],
		[0x65754b0,0],
		[0x65754b4,0],
		[0x65754b8,0],
		[0x65754bc,0],
		[0x65754c0,0],
		[0x65754c4,0],
		[0x65754c8,0],
		[0x65754cc,0],
		[0x65754d0,0],
		[0x65754d4,0],
		[0x65754d8,0],
		[0x65754dc,0],
		[0x65754e0,0],
		[0x65754e4,0],
		[0x65754e8,0],
		[0x65754ec,0],
		[0x65754f0,0],
		[0x65754f4,0],
		[0x65754f8,0],
		[0x65754fc,0],
		[0x6575500,0],
		[0x6575504,0],
		[0x6575508,0],
		[0x657550c,0],
		[0x6575510,0],
		[0x6575514,0],
		[0x6575518,0],
		[0x657551c,0],
		[0x6575520,0],
		[0x6575524,0],
		[0x6575528,0],
		[0x657552c,0],
		[0x6575530,0],
		[0x6575534,0],
		[0x6575538,0],
		[0x657553c,0],
		[0x6575540,0],
		[0x6575544,0],
		[0x6575548,0],
		[0x657554c,0],
		[0x6575550,0],
		[0x6575554,0],
		[0x6575558,0],
		[0x657555c,0],
		[0x6575560,0],
		[0x6575564,0],
		[0x6575568,0],
		[0x657556c,0],
		[0x6575570,0],
		[0x6575574,0],
		[0x6575578,0],
		[0x657557c,0],
		[0x6575580,0],
		[0x6575584,0],
		[0x6575588,0],
		[0x657558c,0],
		[0x6575590,0],
		[0x6575594,0],
		[0x6575598,0],
		[0x657559c,0],
		[0x65755a0,0],
		[0x65755a4,0],
		[0x65755a8,0],
		[0x65755ac,0],
		[0x65755b0,0],
		[0x65755b4,0],
		[0x65755b8,0],
		[0x65755bc,0],
		[0x65755c0,0],
		[0x65755c4,0],
		[0x65755c8,0],
		[0x65755cc,0],
		[0x65755d0,0],
		[0x65755d4,0],
		[0x65755d8,0],
		[0x65755dc,0],
		[0x65755e0,0],
		[0x65755e4,0],
		[0x65755e8,0],
		[0x65755ec,0],
		[0x65755f0,0],
		[0x65755f4,0],
		[0x65755f8,0],
		[0x65755fc,0],
		[0x6575600,0],
		[0x6575604,0],
		[0x6575608,0],
		[0x657560c,0],
		[0x6575610,0],
		[0x6575614,0],
		[0x6575618,0],
		[0x657561c,0],
		[0x6575620,0],
		[0x6575624,0],
		[0x6575628,0],
		[0x657562c,0],
		[0x6575630,0],
		[0x6575634,0],
		[0x6575638,0],
		[0x657563c,0],
		[0x6575640,0],
		[0x6575644,0],
		[0x6575648,0],
		[0x657564c,0],
		[0x6575650,0],
		[0x6575654,0],
		[0x6575658,0],
		[0x657565c,0],
		[0x6575660,0],
		[0x6575664,0],
		[0x6575668,0],
		[0x657566c,0],
		[0x6575670,0],
		[0x6575674,0],
		[0x6575678,0],
		[0x657567c,0],
		[0x6575680,0],
		[0x6575684,0],
		[0x6575688,0],
		[0x657568c,0],
		[0x6575690,0],
		[0x6575694,0],
		[0x6575698,0],
		[0x657569c,0],
		[0x65756a0,0],
		[0x65756a4,0],
		[0x65756a8,0],
		[0x65756ac,0],
		[0x65756b0,0],
		[0x65756b4,0],
		[0x65756b8,0],
		[0x65756bc,0],
		[0x65756c0,0],
		[0x65756c4,0],
		[0x65756c8,0],
		[0x65756cc,0],
		[0x65756d0,0],
		[0x65756d4,0],
		[0x65756d8,0],
		[0x65756dc,0],
		[0x65756e0,0],
		[0x65756e4,0],
		[0x65756e8,0],
		[0x65756ec,0],
		[0x65756f0,0],
		[0x65756f4,0],
		[0x65756f8,0],
		[0x65756fc,0],
		[0x6575700,0],
		[0x6575704,0],
		[0x6575708,0],
		[0x657570c,0],
		[0x6575710,0],
		[0x6575714,0],
		[0x6575718,0],
		[0x657571c,0],
		[0x6575720,0],
		[0x6575724,0],
		[0x6575728,0],
		[0x657572c,0],
		[0x6575730,0],
		[0x6575734,0],
		[0x6575738,0],
		[0x657573c,0],
		[0x6575740,0],
		[0x6575744,0],
		[0x6575748,0],
		[0x657574c,0],
		[0x6575750,0],
		[0x6575754,0],
		[0x6575758,0],
		[0x657575c,0],
		[0x6575760,0],
		[0x6575764,0],
		[0x6575768,0],
		[0x657576c,0],
		[0x6575770,0],
		[0x6575774,0],
		[0x6575778,0],
		[0x657577c,0],
		[0x6575780,0],
		[0x6575784,0],
		[0x6575788,0],
		[0x657578c,0],
		[0x6575790,0],
		[0x6575794,0],
		[0x6575798,0],
		[0x657579c,0],
		[0x65757a0,0],
		[0x65757a4,0],
		[0x65757a8,0],
		[0x65757ac,0],
		[0x65757b0,0],
		[0x65757b4,0],
		[0x65757b8,0],
		[0x65757bc,0],
		[0x65757c0,0],
		[0x65757c4,0],
		[0x65757c8,0],
		[0x65757cc,0],
		[0x65757d0,0],
		[0x65757d4,0],
		[0x65757d8,0],
		[0x65757dc,0],
		[0x65757e0,0],
		[0x65757e4,0],
		[0x65757e8,0],
		[0x65757ec,0],
		[0x65757f0,0],
		[0x65757f4,0],
		[0x65757f8,0],
		[0x65757fc,0],
		[0x6575800,0],
		[0x6575804,0],
		[0x6575808,0],
		[0x657580c,0],
		[0x6575810,0],
		[0x6575814,0],
		[0x6575818,0],
		[0x657581c,0],
		[0x6575820,0],
		[0x6575824,0],
		[0x6575828,0],
		[0x657582c,0],
		[0x6575830,0],
		[0x6575834,0],
		[0x6575838,0],
		[0x657583c,0],
		[0x6575840,0],
		[0x6575844,0],
		[0x6575848,0],
		[0x657584c,0],
		[0x6575850,0],
		[0x6575854,0],
		[0x6575858,0],
		[0x657585c,0],
		[0x6575860,0],
		[0x6575864,0],
		[0x6575868,0],
		[0x657586c,0],
		[0x6575870,0],
		[0x6575874,0],
		[0x6575878,0],
		[0x657587c,0],
		[0x6575880,0],
		[0x6575884,0],
		[0x6575888,0],
		[0x657588c,0],
		[0x6575890,0],
		[0x6575894,0],
		[0x6575898,0],
		[0x657589c,0],
		[0x65758a0,0],
		[0x65758a4,0],
		[0x65758a8,0],
		[0x65758ac,0],
		[0x65758b0,0],
		[0x65758b4,0],
		[0x65758b8,0],
		[0x65758bc,0],
		[0x65758c0,0],
		[0x65758c4,0],
		[0x65758c8,0],
		[0x65758cc,0],
		[0x65758d0,0],
		[0x65758d4,0],
		[0x65758d8,0],
		[0x65758dc,0],
		[0x65758e0,0],
		[0x65758e4,0],
		[0x65758e8,0],
		[0x65758ec,0],
		[0x65758f0,0],
		[0x65758f4,0],
		[0x65758f8,0],
		[0x65758fc,0],
		[0x6575900,0],
		[0x6575904,0],
		[0x6575908,0],
		[0x657590c,0],
		[0x6575910,0],
		[0x6575914,0],
		[0x6575918,0],
		[0x657591c,0],
		[0x6575920,0],
		[0x6575924,0],
		[0x6575928,0],
		[0x657592c,0],
		[0x6575930,0],
		[0x6575934,0],
		[0x6575938,0],
		[0x657593c,0],
		[0x6575940,0],
		[0x6575944,0],
		[0x6575948,0],
		[0x657594c,0],
		[0x6575950,0],
		[0x6575954,0],
		[0x6575958,0],
		[0x657595c,0],
		[0x6575960,0],
		[0x6575964,0],
		[0x6575968,0],
		[0x657596c,0],
		[0x6575970,0],
		[0x6575974,0],
		[0x6575978,0],
		[0x657597c,0],
		[0x6575980,0],
		[0x6575984,0],
		[0x6575988,0],
		[0x657598c,0],
		[0x6575990,0],
		[0x6575994,0],
		[0x6575998,0],
		[0x657599c,0],
		[0x65759a0,0],
		[0x65759a4,0],
		[0x65759a8,0],
		[0x65759ac,0],
		[0x65759b0,0],
		[0x65759b4,0],
		[0x65759b8,0],
		[0x65759bc,0],
		[0x65759c0,0],
		[0x65759c4,0],
		[0x65759c8,0],
		[0x65759cc,0],
		[0x65759d0,0],
		[0x65759d4,0],
		[0x65759d8,0],
		[0x65759dc,0],
		[0x65759e0,0],
		[0x65759e4,0],
		[0x65759e8,0],
		[0x65759ec,0],
		[0x65759f0,0],
		[0x65759f4,0],
		[0x65759f8,0],
		[0x65759fc,0],
		[0x6575a00,0],
		[0x6575a04,0],
		[0x6575a08,0],
		[0x6575a0c,0],
		[0x6575a10,0],
		[0x6575a14,0],
		[0x6575a18,0],
		[0x6575a1c,0],
		[0x6575a20,0],
		[0x6575a24,0],
		[0x6575a28,0],
		[0x6575a2c,0],
		[0x6575a30,0],
		[0x6575a34,0],
		[0x6575a38,0],
		[0x6575a3c,0],
		[0x6575a40,0],
		[0x6575a44,0],
		[0x6575a48,0],
		[0x6575a4c,0],
		[0x6575a50,0],
		[0x6575a54,0],
		[0x6575a58,0],
		[0x6575a5c,0],
		[0x6575a60,0],
		[0x6575a64,0],
		[0x6575a68,0],
		[0x6575a6c,0],
		[0x6575a70,0],
		[0x6575a74,0],
		[0x6575a78,0],
		[0x6575a7c,0],
		[0x6575a80,0],
		[0x6575a84,0],
		[0x6575a88,0],
		[0x6575a8c,0],
		[0x6575a90,0],
		[0x6575a94,0],
		[0x6575a98,0],
		[0x6575a9c,0],
		[0x6575aa0,0],
		[0x6575aa4,0],
		[0x6575aa8,0],
		[0x6575aac,0],
		[0x6575ab0,0],
		[0x6575ab4,0],
		[0x6575ab8,0],
		[0x6575abc,0],
		[0x6575ac0,0],
		[0x6575ac4,0],
		[0, 0]
]).
string_val([
		[0, 0]
]).
:- use_module(library(clpfd)).
:- use_module(reif).
:- style_check(-singleton).

isTrue([X, Y]):-
    X == 49.

isTrue([X|Tail]):-
    isTrue(Tail).

log(File_name, Name, Addr, Base):-
    Offset #= Addr - Base,
    open(File_name, append, Stream),
    write(Stream, Name),
    write(Stream, ':'),
    write(Stream, Offset),
    nl(Stream),
    close(Stream).

possible_task_struct(Base_addr) :-
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM2_addr, Pid_addr, Tgid_addr, Real_parent_addr, Parent_addr , Child_addr, 
           Group_leader_addr, Thread_group_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    %MM2_addr #> Base_addr + 1000,
    Tasks_addr #> MM2_addr - 100,
    %FS_struct_addr #< Base_addr + 4000,
    Tgid_addr #= Pid_addr + 4,
    Real_parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr - 8,
    Child_addr #= Parent_addr + 8,
    %FIXME This may be too strong
    Group_leader_addr #=< Child_addr +32,
    %Comm_addr #= Base_addr + 1656,
    %Tasks_addr #= Base_addr + 1072,
    %FS_struct_addr #= Base_addr + 2640,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    % make query after labeling
    MM2_val #> 0,
    integer(MM2_val),
    
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val,  Comm_addr, Comm_val ]),

    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_parent_addr, Real_parent_val, Group_leader_addr, Group_leader_val]),
    Real_parent_val #> 0,
    Group_leader_val #> 0,
    query_ts(Real_parent_val, Comm_offset, Tasks_offset),
    query_ts(Group_leader_val, Comm_offset, Tasks_offset),

    labeling([enum], [Cred_addr, Cred_val]),
    Cred_val #> 0,
    query_cred(Cred_val),

    labeling([enum], [FS_struct_addr, FS_struct_val]),
    FS_struct_val #> 0,
    %query_fs_struct(FS_struct_val),



    get_time(End),
    Time_past is End - Current,
    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    log("profile.txt", "tasks", Tasks_addr, Base_addr),
    log("profile.txt", "mm_struct", MM2_addr, Base_addr),
    log("profile.txt", "comm", Comm_addr, Base_addr),
    log("profile.txt", "parent", Parent_addr, Base_addr),
    log("profile.txt", "group_leader", Group_leader_addr, Base_addr),
    log("profile.txt", "cred", Cred_addr, Base_addr),

    
    print_nl('tasks offset', Tasks_offset),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).

possible_mm_struct(Current_addr) :- 
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    % TODO: ADD vm_area_struct *mmap
    Ptr_profile = [
        [Mmap_addr, Mmap_val],
        [Pgd_addr, Pgd_val]  
    ],
    Ulong_profile = [
        [Mmap_base_addr, Mmap_base_val],
        [Mmap_legacy_base_addr, Mmap_legacy_base_val],
        [Task_size_addr, Task_size_val],
        [High_vm_end_addr, High_vm_end_val],
        [Start_brk_addr, Start_brk_val],
        [Brk_addr, Brk_val],
        [Start_stack_addr, Start_stack_val],
        [ARG_start_addr, ARG_start_val]
    ],
    Mmap_addr #= Current_addr,


    Mmap_base_addr #> Mmap_addr,
    %FIXME mmap_base need more value constraint, because we removed mmap_legacy_base and highest_vm_end.
    Mmap_base_val #> 0x7f0000000000,
    %FIXME in old linux version, e.g., there is no mmap_legacy_base and highest_vm_enb
    %chain([Mmap_base_addr, Mmap_legacy_base_addr, Task_size_addr, High_vm_end_addr, Pgd_addr], #<),
    chain([Mmap_base_addr, Task_size_addr, Pgd_addr], #<),

    %FIXME: This rule may be too strong
    %High_vm_end_addr #= Mmap_base_addr + 24, 
    Pgd_addr #> Task_size_addr,
    Pgd_addr #=< Task_size_addr + 40,
    %FIXME: This rule may not be true for other mm_struct.
    Task_size_val #>= 0x7ffffffff000,

    %Mmap_base_addr #= Current_addr + 40,
    %Mmap_legacy_base_addr #= Current_addr + 40,
    %Task_size_addr #= Current_addr + 48,
    %High_vm_end_addr #= Current_addr + 72,

    Start_brk_addr #> Pgd_addr,
    Start_stack_val #> 0x7ff000000000,
    % TODO: Convert this to index comparison. 
    ARG_start_addr #< Current_addr + 500,
    chain([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr], #<),
    ARG_start_addr #= Start_brk_addr + 24,
    Brk_val #< 0x7ff000000000,
    ARG_start_val #> 0x7ff000000000,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),


    labeling([enum], [Mmap_addr, Mmap_val, Mmap_base_addr, Pgd_addr, Pgd_val]),
    Mmap_val #> 0,
    Pgd_val #> 0,
    
    process_create(path('python'),
                    ['subquery.py', Mmap_val, "vm_area_struct", 2],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    label([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr]),
    statistics(real_time, [End|_]),

    log("profile.txt", "mmap", Mmap_addr, Current_addr),
    log("profile.txt", "mmap_base", Mmap_base_addr, Current_addr),
    log("profile.txt", "pgd", Pgd_addr, Current_addr),
    log("profile.txt", "start_brk", Start_brk_addr, Current_addr),
    log("profile.txt", "brk", Brk_addr, Current_addr),
    log("profile.txt", "start_stack", Start_stack_addr, Current_addr),
    log("profile.txt", "arg_start", ARG_start_addr, Current_addr),
    log("profile.txt", "mm_struct time", End, Start).


possible_vm_area_struct(Base_addr, Level) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [VM_next_addr, VM_next_val],
        [VM_file_addr, VM_file_val]
    ],
    Ulong_profile = [
        [VM_start_addr, VM_start_val],
        [VM_end_addr, VM_end_val],
        [VM_flag_addr, VM_flag_val]
        %VM_pgoff is 0, and we do not consider 0 as ulong
        %[VM_pgoff_addr, VM_pgoff_val]
    ],
    VM_start_addr #>= Base_addr,
    chain([VM_start_addr, VM_end_addr, VM_next_addr, VM_flag_addr, VM_file_addr], #<),
    VM_end_addr #= VM_start_addr + 8,
    VM_next_addr #= VM_end_addr + 8,
    VM_next_addr #< Base_addr + 32,
    VM_file_addr #< Base_addr + 180,
    VM_pgoff_addr #= VM_file_addr - 8,
    %VM_file_addr #= Base_addr + 160,

    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    %FIXME: VM_flag may need value constraints.

    label([VM_next_addr, VM_next_val]),
    /*if_(Level = 2,
        call(check_vm_area_struct, VM_next_val, 1),
        1 = 1),*/
    %Level #> 1 #==> check_vm_area_struct(VM_next_val, 1),

    labeling([enum], [VM_start_addr, VM_end_addr, VM_flag_addr, VM_pgoff_addr, VM_file_addr, VM_file_val]),
    
    VM_file_val #> 0,
    process_create(path('python'),
                ['subquery.py', VM_file_val, "vm_file"],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    statistics(real_time, [End|_]),

    log("profile.txt", "vm_start", VM_start_addr, Base_addr),
    log("profile.txt", "vm_end", VM_end_addr, Base_addr),
    log("profile.txt", "vm_next", VM_next_addr, Base_addr),
    log("profile.txt", "vm_flag", VM_flag_addr, Base_addr),
    log("profile.txt", "vm_pgoff", VM_pgoff_addr, Base_addr),
    log("profile.txt", "vm_file", VM_file_addr, Base_addr),
    log("profile.txt", "vm_area_struct time", End, Start).

check_vm_area_struct(Base_addr, Level) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "vm_area_struct", Level],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vm_file(Base_addr) :-
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [Vfs_mount_addr, Vfs_mount_val],
        [Dentry_addr, Dentry_val]
    ],
    Vfs_mount_addr #> Base_addr,
    Dentry_addr #= Vfs_mount_addr + 8,
    Dentry_addr #< Base_addr + 40,
    tuples_in(Ptr_profile, Ptr),
    label([Vfs_mount_val, Dentry_val]),
    Vfs_mount_val #>0,
    Dentry_val #> 0,
    %FIXME seems like we do not need this, make sure the string is not addr=0
/*
    process_create(path('python'),
                    ['subquery.py', Vfs_mount_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vfs_mount(Base_addr) :-
    pointer(Ptr),
    Ptr_profile = [
        [Dentry_addr, Dentry_val]
    ],
    Dentry_addr #< Base_addr + 16,
    tuples_in(Ptr_profile, Ptr),
    label([Dentry_val]),
    Dentry_val #> 0,
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).
    
possible_dentry(Base_addr) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    string_val(Str),
    Ptr_profile = [
        [Dparent_addr, Dparent_val],
        [Dchild_addr, Dchild_val]
    ],
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    %log("profile.txt", "dentry addr", Base_addr, 0),
    Dparent_addr #> Base_addr,
    Dname_addr #> 0,
    Dname_addr #< Base_addr + 200,
    %Dname_addr #= Base_addr + 160,
    %FIXME This child rule is not applicable for old kernel version. 
    %chain([Dparent_addr, Dname_addr, Dchild_addr], #<),
    %Dchild_addr #< Base_addr + 200,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    labeling([enum], [Dparent_addr, Dparent_val, Dname_addr, Dchild_addr, Dchild_val]),
    Dname_offset #= Dname_addr - Base_addr,
    integer(Dname_offset),
    Dparent_val #> 0,
    
    %FIXME d_parent may not be initialized
    /*process_create(path('python'),
                ['subquery.py', Dparent_val, "d_entry", Dname_offset],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/

    %FIXME: may need to find another way for all list_head. 
    /*Dchild_offset #= Dchild_addr - Base_addr,
    integer(Dchild_offset),
    Dchild_base #= Dchild_val - Dchild_offset,
    integer(Dchild_base),
    Dchild_base #> 0,
    process_create(path('python'),
                ['subquery.py', Dchild_base, "d_entry", Dname_offset],
                [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    statistics(real_time, [End|_]).
/*
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    log("profile.txt", "d_parent", Dparent_addr, Base_addr),
    log("profile.txt", "d_child", Dchild_addr, Base_addr),
    log("profile.txt", "dentry time", End, Start).
*/
possible_d_entry(Base_addr, Dname_offset) :-
    current_predicate(string_val/1),
    string_val(Str),
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    Dname_addr #= Base_addr + Dname_offset,
    tuples_in(Str_profile, Str),
    label([Dname_addr]).

possible_list_head(Tasks_val, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_val, Tasks_addr]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],
    Comm_addr #= Tasks_val - Tasks_offset + Comm_offset,
    Tasks_addr #\= Tasks_val,
    tuples_in(Str_profile, Str),
    tuples_in(Ptr_profile, Ptr),
    label([Comm_addr]).

possible_ts(Base_addr, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_addr, Tasks_val]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],

    Comm_addr #= Base_addr + Comm_offset,
    Tasks_addr #= Base_addr + Tasks_offset,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),

    label([Tasks_val]),
    
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "list_head", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_cred(Base_addr) :-
    statistics(real_time, [Start|_]),

    int(Int),
    long(Ulg),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3],
        [Addr4, Val4],
        [Addr5, Val5],
        [Addr6, Val6],
        [Addr7, Val7],
        [Addr8, Val8],
        [Addr9, Val9]
    ],
    %FIXME For now, this rule is hard-coded because we do not consider 0 as a unsign long number. 
    %So that for cred whos val10 is 0, this rule does not apply.
    /*Ulong_profile = [
        [Addr10, Val10],
        [Addr11, Val11]
    ],*/
    Addr1 #> Base_addr,
    %chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9, Addr10, Addr11], #<),
    chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9], #<),
    Addr1 #= Base_addr + 4,
    Addr9 #= Addr1 + 32,
    %Addr11 #< Base_addr + 120,
    tuples_in(Int_profile, Int),
    %tuples_in(Ulong_profile, Ulg),
    statistics(real_time, [End|_]),
    labeling([enum], [Addr1, Addr2, Addr5, Addr6]),
    log("profile.txt", "cred time", End, Start),
    log('profile.txt', "uid", Addr1, Base_addr),
    log('profile.txt', "gid", Addr2, Base_addr),
    log('profile.txt', "euid", Addr5, Base_addr),
    log('profile.txt', "egid", Addr6, Base_addr).

possible_fs_struct(Base_addr) :-
    statistics(real_time, [Start|_]),
    int(Int),
    pointer(Ptr),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3]
    ],
    Ptr_profile = [
        [Root_addr, Root_val],
        [PWD_addr, PWD_val]
    ],
    Addr1 #>= Base_addr,
    chain([Addr1, Addr2, Addr3, Root_addr, PWD_addr], #<),
    PWD_addr #= Root_addr + 16,
    PWD_addr #< Base_addr + 50,
    tuples_in(Int_profile, Int),
    tuples_in(Ptr_profile, Ptr),
    label([Root_addr, Root_val]),
    
    process_create(path('python'),
                    ['subquery.py', Root_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    label([PWD_addr, PWD_val]),
    process_create(path('python'),
                    ['subquery.py', PWD_val, "dentry"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    statistics(real_time, [End|_]),
    log("profile.txt", "fs time", End, Start),
    log('profile.txt', "Root", Root_addr, Base_addr),
    log('profile.txt', "pwd", PWD_addr, Base_addr).
