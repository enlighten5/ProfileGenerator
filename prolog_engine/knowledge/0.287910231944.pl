:- use_module(library(clpfd)).
:- style_check(-singleton).
pointer([
		[0x185dfb80,505815640],
		[0x185dfb88,407914280],
		[0x185dfb98,247691888],
		[0x185dfbd0,422797312],
		[0x185dfbf0,0],
		[0x185dfbf8,161470209],
		[0x185dfc00,0],
		[0x185dfc08,408812552],
		[0x185dfc10,408812552],
		[0x185dfc18,408812568],
		[0x185dfc20,408812568],
		[0x185dfc40,0],
		[0x185dfc48,0],
		[0x185dfc68,0],
		[0x185dfc70,0],
		[0x185dfd58,0],
		[0x185dfd78,0],
		[0x185dfd88,0],
		[0x185dfd98,0],
		[0x185dfda8,0],
		[0x185dfdb8,0],
		[0x185dfdd8,0],
		[0x185dfe00,0],
		[0x185dfe08,0],
		[0x185dfe10,0],
		[0x185dfe18,0],
		[0x185dfe20,0],
		[0x185dfe28,0],
		[0x185dfe30,0],
		[0x185dfe38,0],
		[0x185dfe50,0],
		[0x185dfe58,0],
		[0x185dfe60,271668896],
		[0x185dfe78,0],
		[0x185dfe80,0],
		[0x185dfe88,0],
		[0x185dfe90,408813200],
		[0x185dfe98,408813200],
		[0x185dfea0,0],
		[0x185dfea8,0],
		[0x185dfeb0,0],
		[0x185dfeb8,0],
		[0x185dfec0,408813248],
		[0x185dfec8,408813248],
		[0x185dfed8,264246240],
		[0x185dfee0,0],
		[0x185dfef8,0],
		[0x185dff00,0],
		[0x185dff08,0],
		[0x185dff10,517521728],
		[0x185dff18,270888128],
		[0x185dff20,220507392],
		[0x185dff28,0],
		[0x185dff38,0],
		[0x185dff40,0],
		[0x185dff48,0],
		[0x185dff50,0],
		[0x185dff58,0],
		[0x185dff60,0],
		[0x185dff68,0],
		[0x185dff70,0],
		[0x185dff78,0],
		[0x185dff80,0],
		[0x185dff88,0],
		[0x185dff90,0],
		[0x185dff98,0],
		[0x185dffa0,0],
		[0x185dffa8,0],
		[0x185dffb0,0],
		[0x185dffb8,0],
		[0x185dffc0,0],
		[0x185dffc8,0],
		[0x185dffd0,0],
		[0x185dffd8,0],
		[0x185dffe0,0],
		[0x185dffe8,0],
		[0x185dfff0,0],
		[0x185dfff8,0],
		[0x185e0000,0],
		[0x185e0008,0],
		[0x185e0010,407041632],
		[0x185e0018,419357824],
		[0x185e0020,517451312],
		[0x185e0028,265083104],
		[0x185e0030,0],
		[0x185e0048,0],
		[0x185e0050,0],
		[0x185e0058,408813656],
		[0x185e0060,408813656],
		[0x185e0068,0],
		[0x185e0070,0],
		[0x185e0078,0],
		[0x185e0080,0],
		[0x185e0088,0],
		[0x185e0090,518841856],
		[0x185e0098,0],
		[0x185e00a0,0],
		[0x185e00a8,0],
		[0x185e00b8,0],
		[0x185e00c0,158250496],
		[0x185e00c8,0],
		[0x185e00d0,408813776],
		[0x185e00d8,408813776],
		[0x185e00e0,408813792],
		[0x185e00e8,408813792],
		[0x185e00f0,517451680],
		[0x185e00f8,0],
		[0x185e0108,0],
		[0x185e0110,401623904],
		[0x185e0118,178483584],
		[0x185e0120,411566080],
		[0x185e0128,264646400],
		[0x185e0130,0],
		[0x185e0138,0],
		[0x185e0148,0],
		[0x185e0150,0],
		[0x185e0158,408813912],
		[0x185e0160,408813912],
		[0x185e0170,0],
		[0x185e0178,0],
		[0x185e0180,0],
		[0x185e0188,0],
		[0x185e0190,518841856],
		[0x185e0198,0],
		[0x185e01a0,0],
		[0x185e01a8,0],
		[0x185e01b8,0],
		[0x185e01c0,0],
		[0x185e01c8,518740096],
		[0x185e01d0,408814032],
		[0x185e01d8,408814032],
		[0x185e01e0,408814048],
		[0x185e01e8,408814048],
		[0x185e01f0,411566448],
		[0x185e01f8,0],
		[0x185e0208,0],
		[0x185e0210,401622304],
		[0x185e0218,179727936],
		[0x185e0220,177185360],
		[0x185e0228,264646400],
		[0x185e0230,0],
		[0x185e0238,0],
		[0x185e0248,0],
		[0x185e0250,0],
		[0x185e0258,408814168],
		[0x185e0260,408814168],
		[0x185e0270,0],
		[0x185e0278,0],
		[0x185e0280,0],
		[0x185e0288,0],
		[0x185e0290,518841856],
		[0x185e0298,0],
		[0x185e02a0,0],
		[0x185e02a8,0],
		[0x185e02b8,0],
		[0x185e02c0,0],
		[0x185e02c8,518740096],
		[0x185e02d0,408814288],
		[0x185e02d8,408814288],
		[0x185e02e0,408814304],
		[0x185e02e8,408814304],
		[0x185e02f0,177185728],
		[0x185e02f8,0],
		[0x185e0308,0],
		[0x185e0310,401559584],
		[0x185e0318,178485312],
		[0x185e0320,179941424],
		[0x185e0328,264646400],
		[0x185e0330,0],
		[0x185e0338,0],
		[0x185e0348,0],
		[0x185e0350,0],
		[0x185e0358,408814424],
		[0x185e0360,408814424],
		[0x185e0370,0],
		[0x185e0378,0],
		[0x185e0380,0],
		[0x185e0388,0],
		[0x185e0390,518841856],
		[0x185e0398,0],
		[0x185e03a0,0],
		[0x185e03a8,0],
		[0x185e03b8,0],
		[0x185e03c0,0],
		[0x185e03c8,518740096],
		[0x185e03d0,408814544],
		[0x185e03d8,408814544],
		[0x185e03e0,408814560],
		[0x185e03e8,408814560],
		[0x185e03f0,179941792],
		[0x185e03f8,0],
		[0x185e0408,0],
		[0x185e0410,401624224],
		[0x185e0418,178485120],
		[0x185e0420,411572592],
		[0x185e0428,264646400],
		[0x185e0430,0],
		[0x185e0438,0],
		[0x185e0448,0],
		[0x185e0450,0],
		[0x185e0458,408814680],
		[0x185e0460,408814680],
		[0x185e0470,0],
		[0x185e0478,0],
		[0x185e0480,0],
		[0x185e0488,0],
		[0x185e0490,518841856],
		[0x185e0498,0],
		[0x185e04a0,0],
		[0x185e04a8,0],
		[0x185e04b8,0],
		[0x185e04c0,0],
		[0x185e04c8,518740096],
		[0x185e04d0,408814800],
		[0x185e04d8,408814800],
		[0x185e04e0,408814816],
		[0x185e04e8,408814816],
		[0x185e04f0,411572960],
		[0x185e04f8,0],
		[0x185e0508,0],
		[0x185e0510,0],
		[0x185e0518,0],
		[0x185e0520,0],
		[0x185e0528,0],
		[0x185e0530,0],
		[0x185e0538,0],
		[0x185e0548,0],
		[0x185e0550,0],
		[0x185e0558,408814936],
		[0x185e0560,408814936],
		[0x185e0568,0],
		[0x185e0570,0],
		[0x185e0578,0],
		[0x185e0580,0],
		[0x185e0588,0],
		[0x185e0590,518841856],
		[0x185e0598,0],
		[0x185e05a0,0],
		[0x185e05a8,0],
		[0x185e05b0,0],
		[0x185e05b8,0],
		[0x185e05c0,0],
		[0x185e05c8,0],
		[0x185e05d0,408815056],
		[0x185e05d8,408815056],
		[0x185e05e0,408815072],
		[0x185e05e8,408815072],
		[0x185e05f0,0],
		[0x185e05f8,0],
		[0x185e0608,0],
		[0x185e0610,0],
		[0x185e0618,0],
		[0x185e0620,0],
		[0x185e0628,0],
		[0x185e0630,0],
		[0x185e0638,0],
		[0x185e0648,0],
		[0x185e0650,0],
		[0x185e0658,408815192],
		[0x185e0660,408815192],
		[0x185e0668,0],
		[0x185e0670,0],
		[0x185e0678,0],
		[0x185e0680,0],
		[0x185e0688,0],
		[0x185e0690,518841856],
		[0x185e0698,0],
		[0x185e06a0,0],
		[0x185e06a8,0],
		[0x185e06b0,0],
		[0x185e06b8,0],
		[0x185e06c0,0],
		[0x185e06c8,0],
		[0x185e06d0,408815312],
		[0x185e06d8,408815312],
		[0x185e06e0,408815328],
		[0x185e06e8,408815328],
		[0x185e06f0,0],
		[0x185e06f8,0],
		[0x185e0700,0],
		[0x185e0708,0],
		[0x185e0710,519472096],
		[0x185e0718,397202368],
		[0x185e0720,411309856],
		[0x185e0728,264570688],
		[0x185e0730,0],
		[0x185e0748,0],
		[0x185e0750,0],
		[0x185e0758,408815448],
		[0x185e0760,408815448],
		[0x185e0768,0],
		[0x185e0770,0],
		[0x185e0778,0],
		[0x185e0780,0],
		[0x185e0788,0],
		[0x185e0790,518856256],
		[0x185e0798,0],
		[0x185e07a0,0],
		[0x185e07a8,0],
		[0x185e07b0,0],
		[0x185e07b8,0],
		[0x185e07c0,206493808],
		[0x185e07c8,141283328],
		[0x185e07d0,408815568],
		[0x185e07d8,408815568],
		[0x185e07e0,408815584],
		[0x185e07e8,408815584],
		[0x185e07f0,411310224],
		[0x185e07f8,0],
		[0x185e0800,0],
		[0x185e0808,0],
		[0x185e0810,517331488],
		[0x185e0818,178483776],
		[0x185e0820,396614272],
		[0x185e0828,265486176],
		[0x185e0830,0],
		[0x185e0848,0],
		[0x185e0850,0],
		[0x185e0858,408815704],
		[0x185e0860,408815704],
		[0x185e0868,0],
		[0x185e0870,0],
		[0x185e0878,0],
		[0x185e0880,0],
		[0x185e0888,0],
		[0x185e0890,518841856],
		[0x185e0898,0],
		[0x185e08a0,0],
		[0x185e08a8,0],
		[0x185e08b0,0],
		[0x185e08b8,0],
		[0x185e08c0,158249512],
		[0x185e08c8,396614144],
		[0x185e08d0,408815824],
		[0x185e08d8,408815824],
		[0x185e08e0,408815840],
		[0x185e08e8,408815840],
		[0x185e08f0,396614640],
		[0x185e08f8,0],
		[0x185e0908,0],
		[0x185e0910,519472096],
		[0x185e0918,414484160],
		[0x185e0920,411309856],
		[0x185e0928,264570688],
		[0x185e0930,0],
		[0x185e0938,0],
		[0x185e0948,0],
		[0x185e0950,0],
		[0x185e0958,408815960],
		[0x185e0960,408815960],
		[0x185e0968,0],
		[0x185e0970,0],
		[0x185e0978,0],
		[0x185e0980,0],
		[0x185e0988,0],
		[0x185e0990,518856256],
		[0x185e0998,0],
		[0x185e09a0,0],
		[0x185e09a8,0],
		[0x185e09b0,0],
		[0x185e09b8,0],
		[0x185e09c0,0],
		[0x185e09d0,408816080],
		[0x185e09d8,408816080],
		[0x185e09e0,408816096],
		[0x185e09e8,408816096],
		[0x185e09f0,411310224],
		[0x185e09f8,0],
		[0x185e0a08,0],
		[0x185e0a10,0],
		[0x185e0a18,0],
		[0x185e0a20,0],
		[0x185e0a28,0],
		[0x185e0a30,0],
		[0x185e0a38,0],
		[0x185e0a48,0],
		[0x185e0a50,0],
		[0x185e0a58,408816216],
		[0x185e0a60,408816216],
		[0x185e0a68,0],
		[0x185e0a70,0],
		[0x185e0a78,0],
		[0x185e0a80,0],
		[0x185e0a88,0],
		[0x185e0a90,518841856],
		[0x185e0a98,0],
		[0x185e0aa0,0],
		[0x185e0aa8,0],
		[0x185e0ab0,0],
		[0x185e0ab8,0],
		[0x185e0ac0,0],
		[0x185e0ac8,0],
		[0x185e0ad0,408816336],
		[0x185e0ad8,408816336],
		[0x185e0ae0,408816352],
		[0x185e0ae8,408816352],
		[0x185e0af0,0],
		[0x185e0af8,0],
		[0x185e0b08,0],
		[0x185e0b10,401624544],
		[0x185e0b18,411622208],
		[0x185e0b20,179256256],
		[0x185e0b28,264646400],
		[0x185e0b30,0],
		[0x185e0b38,0],
		[0x185e0b48,0],
		[0x185e0b50,0],
		[0x185e0b58,408816472],
		[0x185e0b60,408816472],
		[0x185e0b70,0],
		[0x185e0b78,0],
		[0, 0]
]).
unknown([
		[0x185dfe40,18446744073709551508],
		[0x185e0040,2814874321190912],
		[0x185e0100,13432694064432756745],
		[0x185e0140,3800041034645505],
		[0x185e0200,13432694064432755721],
		[0x185e0240,3800041034645505],
		[0x185e0300,13432694064432757513],
		[0x185e0340,3800041034645505],
		[0x185e0400,13432694064432758537],
		[0x185e0440,3800041034645505],
		[0x185e0500,13432694064432757001],
		[0x185e0600,5013946429268114441],
		[0x185e0740,3940662558851074],
		[0x185e0840,3940662558851074],
		[0x185e0900,13432694064432758025],
		[0x185e0940,3940662558851074],
		[0x185e09c8,18446662305051275264],
		[0x185e0a00,13432694064432757513],
		[0x185e0b00,13432694064432755721],
		[0x185e0b40,3800041034645505],
		[0, 0]
]).
long([
		[0x185dfb90,128],
		[0x185dfba0,140273071501312],
		[0x185dfba8,47359723667456],
		[0x185dfbb0,4160618496],
		[0x185dfbb8,1431777280],
		[0x185dfbc0,140737488351232],
		[0x185dfbc8,140723330007040],
		[0x185dfbd8,4294967297],
		[0x185dfbe0,90112],
		[0x185dfbe8,211],
		[0x185dfc28,2823],
		[0x185dfc30,58268],
		[0x185dfc38,41884],
		[0x185dfc50,4806],
		[0x185dfc58,2419],
		[0x185dfc60,33],
		[0x185dfc78,93957528313856],
		[0x185dfc80,93957529273829],
		[0x185dfc88,93957529629584],
		[0x185dfc90,93957529915432],
		[0x185dfc98,93957533724672],
		[0x185dfca0,93957535956992],
		[0x185dfca8,140723329208144],
		[0x185dfcb0,140723329212179],
		[0x185dfcb8,140723329212197],
		[0x185dfcc0,140723329212197],
		[0x185dfcc8,140723329212397],
		[0x185dfcd0,33],
		[0x185dfcd8,140723330002944],
		[0x185dfce0,16],
		[0x185dfce8,126548989],
		[0x185dfcf0,6],
		[0x185dfcf8,4096],
		[0x185dfd00,17],
		[0x185dfd08,100],
		[0x185dfd10,3],
		[0x185dfd18,93957528313920],
		[0x185dfd20,4],
		[0x185dfd28,56],
		[0x185dfd30,5],
		[0x185dfd38,11],
		[0x185dfd40,7],
		[0x185dfd48,140273071304704],
		[0x185dfd50,8],
		[0x185dfd60,9],
		[0x185dfd68,93957528548960],
		[0x185dfd70,11],
		[0x185dfd80,12],
		[0x185dfd90,13],
		[0x185dfda0,14],
		[0x185dfdb0,23],
		[0x185dfdc0,25],
		[0x185dfdc8,140723329208585],
		[0x185dfdd0,26],
		[0x185dfde0,31],
		[0x185dfde8,140723329212397],
		[0x185dfdf0,15],
		[0x185dfdf8,140723329208601],
		[0x185dfe48,746],
		[0x185dfe68,200],
		[0x185dfe70,10341],
		[0x185dfed0,140723330002944],
		[0x185dfef0,205],
		[0x185dff30,4294905711],
		[0x185e0038,1],
		[0x185e0168,4],
		[0x185e0268,4],
		[0x185e0368,4],
		[0x185e0468,4],
		[0x185e0540,8589967617],
		[0x185e0640,8589967617],
		[0x185e0738,1],
		[0x185e0838,2],
		[0x185e0a40,8589967617],
		[0x185e0b68,4],
		[0, 0]
]).
int([
		[0x185dfb90,128],
		[0x185dfb94,0],
		[0x185dfba4,32659],
		[0x185dfbac,11026],
		[0x185dfbb4,0],
		[0x185dfbbc,0],
		[0x185dfbcc,32764],
		[0x185dfbd8,1],
		[0x185dfbdc,1],
		[0x185dfbe4,0],
		[0x185dfbe8,211],
		[0x185dfbec,0],
		[0x185dfbf0,0],
		[0x185dfbf4,0],
		[0x185dfc00,0],
		[0x185dfc04,0],
		[0x185dfc28,2823],
		[0x185dfc2c,0],
		[0x185dfc34,0],
		[0x185dfc3c,0],
		[0x185dfc40,0],
		[0x185dfc44,0],
		[0x185dfc48,0],
		[0x185dfc4c,0],
		[0x185dfc50,4806],
		[0x185dfc54,0],
		[0x185dfc58,2419],
		[0x185dfc5c,0],
		[0x185dfc60,33],
		[0x185dfc64,0],
		[0x185dfc68,0],
		[0x185dfc6c,0],
		[0x185dfc70,0],
		[0x185dfc74,0],
		[0x185dfc7c,21876],
		[0x185dfc84,21876],
		[0x185dfc8c,21876],
		[0x185dfc94,21876],
		[0x185dfc9c,21876],
		[0x185dfca4,21876],
		[0x185dfcac,32764],
		[0x185dfcb4,32764],
		[0x185dfcbc,32764],
		[0x185dfcc4,32764],
		[0x185dfccc,32764],
		[0x185dfcd0,33],
		[0x185dfcd4,0],
		[0x185dfcdc,32764],
		[0x185dfce0,16],
		[0x185dfce4,0],
		[0x185dfcec,0],
		[0x185dfcf0,6],
		[0x185dfcf4,0],
		[0x185dfcf8,4096],
		[0x185dfcfc,0],
		[0x185dfd00,17],
		[0x185dfd04,0],
		[0x185dfd08,100],
		[0x185dfd0c,0],
		[0x185dfd10,3],
		[0x185dfd14,0],
		[0x185dfd1c,21876],
		[0x185dfd20,4],
		[0x185dfd24,0],
		[0x185dfd28,56],
		[0x185dfd2c,0],
		[0x185dfd30,5],
		[0x185dfd34,0],
		[0x185dfd38,11],
		[0x185dfd3c,0],
		[0x185dfd40,7],
		[0x185dfd44,0],
		[0x185dfd4c,32659],
		[0x185dfd50,8],
		[0x185dfd54,0],
		[0x185dfd58,0],
		[0x185dfd5c,0],
		[0x185dfd60,9],
		[0x185dfd64,0],
		[0x185dfd6c,21876],
		[0x185dfd70,11],
		[0x185dfd74,0],
		[0x185dfd78,0],
		[0x185dfd7c,0],
		[0x185dfd80,12],
		[0x185dfd84,0],
		[0x185dfd88,0],
		[0x185dfd8c,0],
		[0x185dfd90,13],
		[0x185dfd94,0],
		[0x185dfd98,0],
		[0x185dfd9c,0],
		[0x185dfda0,14],
		[0x185dfda4,0],
		[0x185dfda8,0],
		[0x185dfdac,0],
		[0x185dfdb0,23],
		[0x185dfdb4,0],
		[0x185dfdb8,0],
		[0x185dfdbc,0],
		[0x185dfdc0,25],
		[0x185dfdc4,0],
		[0x185dfdcc,32764],
		[0x185dfdd0,26],
		[0x185dfdd4,0],
		[0x185dfdd8,0],
		[0x185dfddc,0],
		[0x185dfde0,31],
		[0x185dfde4,0],
		[0x185dfdec,32764],
		[0x185dfdf0,15],
		[0x185dfdf4,0],
		[0x185dfdfc,32764],
		[0x185dfe00,0],
		[0x185dfe04,0],
		[0x185dfe08,0],
		[0x185dfe0c,0],
		[0x185dfe10,0],
		[0x185dfe14,0],
		[0x185dfe18,0],
		[0x185dfe1c,0],
		[0x185dfe20,0],
		[0x185dfe24,0],
		[0x185dfe28,0],
		[0x185dfe2c,0],
		[0x185dfe30,0],
		[0x185dfe34,0],
		[0x185dfe38,0],
		[0x185dfe3c,0],
		[0x185dfe48,746],
		[0x185dfe4c,0],
		[0x185dfe50,0],
		[0x185dfe54,0],
		[0x185dfe58,0],
		[0x185dfe5c,0],
		[0x185dfe68,200],
		[0x185dfe6c,0],
		[0x185dfe70,10341],
		[0x185dfe74,0],
		[0x185dfe78,0],
		[0x185dfe7c,0],
		[0x185dfe80,0],
		[0x185dfe84,0],
		[0x185dfe88,0],
		[0x185dfe8c,0],
		[0x185dfea0,0],
		[0x185dfea4,0],
		[0x185dfea8,0],
		[0x185dfeac,0],
		[0x185dfeb0,0],
		[0x185dfeb4,0],
		[0x185dfeb8,0],
		[0x185dfebc,0],
		[0x185dfed4,32764],
		[0x185dfee0,0],
		[0x185dfee4,0],
		[0x185dfef0,205],
		[0x185dfef4,0],
		[0x185dfef8,0],
		[0x185dfefc,0],
		[0x185dff00,0],
		[0x185dff04,0],
		[0x185dff08,0],
		[0x185dff0c,0],
		[0x185dff28,0],
		[0x185dff2c,0],
		[0x185dff34,0],
		[0x185dff38,0],
		[0x185dff3c,0],
		[0x185dff40,0],
		[0x185dff44,0],
		[0x185dff48,0],
		[0x185dff4c,0],
		[0x185dff50,0],
		[0x185dff54,0],
		[0x185dff58,0],
		[0x185dff5c,0],
		[0x185dff60,0],
		[0x185dff64,0],
		[0x185dff68,0],
		[0x185dff6c,0],
		[0x185dff70,0],
		[0x185dff74,0],
		[0x185dff78,0],
		[0x185dff7c,0],
		[0x185dff80,0],
		[0x185dff84,0],
		[0x185dff88,0],
		[0x185dff8c,0],
		[0x185dff90,0],
		[0x185dff94,0],
		[0x185dff98,0],
		[0x185dff9c,0],
		[0x185dffa0,0],
		[0x185dffa4,0],
		[0x185dffa8,0],
		[0x185dffac,0],
		[0x185dffb0,0],
		[0x185dffb4,0],
		[0x185dffb8,0],
		[0x185dffbc,0],
		[0x185dffc0,0],
		[0x185dffc4,0],
		[0x185dffc8,0],
		[0x185dffcc,0],
		[0x185dffd0,0],
		[0x185dffd4,0],
		[0x185dffd8,0],
		[0x185dffdc,0],
		[0x185dffe0,0],
		[0x185dffe4,0],
		[0x185dffe8,0],
		[0x185dffec,0],
		[0x185dfff0,0],
		[0x185dfff4,0],
		[0x185dfff8,0],
		[0x185dfffc,0],
		[0x185e0000,0],
		[0x185e0004,0],
		[0x185e0008,0],
		[0x185e000c,0],
		[0x185e0030,0],
		[0x185e0034,0],
		[0x185e0038,1],
		[0x185e003c,0],
		[0x185e0048,0],
		[0x185e004c,0],
		[0x185e0050,0],
		[0x185e0054,0],
		[0x185e0068,0],
		[0x185e006c,0],
		[0x185e0070,0],
		[0x185e0074,0],
		[0x185e0078,0],
		[0x185e007c,0],
		[0x185e0080,0],
		[0x185e0084,0],
		[0x185e0088,0],
		[0x185e008c,0],
		[0x185e0098,0],
		[0x185e009c,0],
		[0x185e00a0,0],
		[0x185e00a4,0],
		[0x185e00a8,0],
		[0x185e00ac,0],
		[0x185e00b8,0],
		[0x185e00bc,0],
		[0x185e00c8,0],
		[0x185e00cc,0],
		[0x185e00f8,0],
		[0x185e00fc,0],
		[0x185e0108,0],
		[0x185e010c,0],
		[0x185e0130,0],
		[0x185e0134,0],
		[0x185e0138,0],
		[0x185e013c,0],
		[0x185e0148,0],
		[0x185e014c,0],
		[0x185e0150,0],
		[0x185e0154,0],
		[0x185e0168,4],
		[0x185e016c,0],
		[0x185e0170,0],
		[0x185e0174,0],
		[0x185e0178,0],
		[0x185e017c,0],
		[0x185e0180,0],
		[0x185e0184,0],
		[0x185e0188,0],
		[0x185e018c,0],
		[0x185e0198,0],
		[0x185e019c,0],
		[0x185e01a0,0],
		[0x185e01a4,0],
		[0x185e01a8,0],
		[0x185e01ac,0],
		[0x185e01b8,0],
		[0x185e01bc,0],
		[0x185e01c0,0],
		[0x185e01c4,0],
		[0x185e01f8,0],
		[0x185e01fc,0],
		[0x185e0208,0],
		[0x185e020c,0],
		[0x185e0230,0],
		[0x185e0234,0],
		[0x185e0238,0],
		[0x185e023c,0],
		[0x185e0248,0],
		[0x185e024c,0],
		[0x185e0250,0],
		[0x185e0254,0],
		[0x185e0268,4],
		[0x185e026c,0],
		[0x185e0270,0],
		[0x185e0274,0],
		[0x185e0278,0],
		[0x185e027c,0],
		[0x185e0280,0],
		[0x185e0284,0],
		[0x185e0288,0],
		[0x185e028c,0],
		[0x185e0298,0],
		[0x185e029c,0],
		[0x185e02a0,0],
		[0x185e02a4,0],
		[0x185e02a8,0],
		[0x185e02ac,0],
		[0x185e02b8,0],
		[0x185e02bc,0],
		[0x185e02c0,0],
		[0x185e02c4,0],
		[0x185e02f8,0],
		[0x185e02fc,0],
		[0x185e0308,0],
		[0x185e030c,0],
		[0x185e0330,0],
		[0x185e0334,0],
		[0x185e0338,0],
		[0x185e033c,0],
		[0x185e0348,0],
		[0x185e034c,0],
		[0x185e0350,0],
		[0x185e0354,0],
		[0x185e0368,4],
		[0x185e036c,0],
		[0x185e0370,0],
		[0x185e0374,0],
		[0x185e0378,0],
		[0x185e037c,0],
		[0x185e0380,0],
		[0x185e0384,0],
		[0x185e0388,0],
		[0x185e038c,0],
		[0x185e0398,0],
		[0x185e039c,0],
		[0x185e03a0,0],
		[0x185e03a4,0],
		[0x185e03a8,0],
		[0x185e03ac,0],
		[0x185e03b8,0],
		[0x185e03bc,0],
		[0x185e03c0,0],
		[0x185e03c4,0],
		[0x185e03f8,0],
		[0x185e03fc,0],
		[0x185e0408,0],
		[0x185e040c,0],
		[0x185e0430,0],
		[0x185e0434,0],
		[0x185e0438,0],
		[0x185e043c,0],
		[0x185e0448,0],
		[0x185e044c,0],
		[0x185e0450,0],
		[0x185e0454,0],
		[0x185e0468,4],
		[0x185e046c,0],
		[0x185e0470,0],
		[0x185e0474,0],
		[0x185e0478,0],
		[0x185e047c,0],
		[0x185e0480,0],
		[0x185e0484,0],
		[0x185e0488,0],
		[0x185e048c,0],
		[0x185e0498,0],
		[0x185e049c,0],
		[0x185e04a0,0],
		[0x185e04a4,0],
		[0x185e04a8,0],
		[0x185e04ac,0],
		[0x185e04b8,0],
		[0x185e04bc,0],
		[0x185e04c0,0],
		[0x185e04c4,0],
		[0x185e04f8,0],
		[0x185e04fc,0],
		[0x185e0508,0],
		[0x185e050c,0],
		[0x185e0510,0],
		[0x185e0514,0],
		[0x185e0518,0],
		[0x185e051c,0],
		[0x185e0520,0],
		[0x185e0524,0],
		[0x185e0528,0],
		[0x185e052c,0],
		[0x185e0530,0],
		[0x185e0534,0],
		[0x185e0538,0],
		[0x185e053c,0],
		[0x185e0544,2],
		[0x185e0548,0],
		[0x185e054c,0],
		[0x185e0550,0],
		[0x185e0554,0],
		[0x185e0568,0],
		[0x185e056c,0],
		[0x185e0570,0],
		[0x185e0574,0],
		[0x185e0578,0],
		[0x185e057c,0],
		[0x185e0580,0],
		[0x185e0584,0],
		[0x185e0588,0],
		[0x185e058c,0],
		[0x185e0598,0],
		[0x185e059c,0],
		[0x185e05a0,0],
		[0x185e05a4,0],
		[0x185e05a8,0],
		[0x185e05ac,0],
		[0x185e05b0,0],
		[0x185e05b4,0],
		[0x185e05b8,0],
		[0x185e05bc,0],
		[0x185e05c0,0],
		[0x185e05c4,0],
		[0x185e05c8,0],
		[0x185e05cc,0],
		[0x185e05f0,0],
		[0x185e05f4,0],
		[0x185e05f8,0],
		[0x185e05fc,0],
		[0x185e0608,0],
		[0x185e060c,0],
		[0x185e0610,0],
		[0x185e0614,0],
		[0x185e0618,0],
		[0x185e061c,0],
		[0x185e0620,0],
		[0x185e0624,0],
		[0x185e0628,0],
		[0x185e062c,0],
		[0x185e0630,0],
		[0x185e0634,0],
		[0x185e0638,0],
		[0x185e063c,0],
		[0x185e0644,2],
		[0x185e0648,0],
		[0x185e064c,0],
		[0x185e0650,0],
		[0x185e0654,0],
		[0x185e0668,0],
		[0x185e066c,0],
		[0x185e0670,0],
		[0x185e0674,0],
		[0x185e0678,0],
		[0x185e067c,0],
		[0x185e0680,0],
		[0x185e0684,0],
		[0x185e0688,0],
		[0x185e068c,0],
		[0x185e0698,0],
		[0x185e069c,0],
		[0x185e06a0,0],
		[0x185e06a4,0],
		[0x185e06a8,0],
		[0x185e06ac,0],
		[0x185e06b0,0],
		[0x185e06b4,0],
		[0x185e06b8,0],
		[0x185e06bc,0],
		[0x185e06c0,0],
		[0x185e06c4,0],
		[0x185e06c8,0],
		[0x185e06cc,0],
		[0x185e06f0,0],
		[0x185e06f4,0],
		[0x185e06f8,0],
		[0x185e06fc,0],
		[0x185e0700,0],
		[0x185e0704,0],
		[0x185e0708,0],
		[0x185e070c,0],
		[0x185e0730,0],
		[0x185e0734,0],
		[0x185e0738,1],
		[0x185e073c,0],
		[0x185e0740,2],
		[0x185e0748,0],
		[0x185e074c,0],
		[0x185e0750,0],
		[0x185e0754,0],
		[0x185e0768,0],
		[0x185e076c,0],
		[0x185e0770,0],
		[0x185e0774,0],
		[0x185e0778,0],
		[0x185e077c,0],
		[0x185e0780,0],
		[0x185e0784,0],
		[0x185e0788,0],
		[0x185e078c,0],
		[0x185e0798,0],
		[0x185e079c,0],
		[0x185e07a0,0],
		[0x185e07a4,0],
		[0x185e07a8,0],
		[0x185e07ac,0],
		[0x185e07b0,0],
		[0x185e07b4,0],
		[0x185e07b8,0],
		[0x185e07bc,0],
		[0x185e07f8,0],
		[0x185e07fc,0],
		[0x185e0800,0],
		[0x185e0804,0],
		[0x185e0808,0],
		[0x185e080c,0],
		[0x185e0830,0],
		[0x185e0834,0],
		[0x185e0838,2],
		[0x185e083c,0],
		[0x185e0840,2],
		[0x185e0848,0],
		[0x185e084c,0],
		[0x185e0850,0],
		[0x185e0854,0],
		[0x185e0868,0],
		[0x185e086c,0],
		[0x185e0870,0],
		[0x185e0874,0],
		[0x185e0878,0],
		[0x185e087c,0],
		[0x185e0880,0],
		[0x185e0884,0],
		[0x185e0888,0],
		[0x185e088c,0],
		[0x185e0898,0],
		[0x185e089c,0],
		[0x185e08a0,0],
		[0x185e08a4,0],
		[0x185e08a8,0],
		[0x185e08ac,0],
		[0x185e08b0,0],
		[0x185e08b4,0],
		[0x185e08b8,0],
		[0x185e08bc,0],
		[0x185e08f8,0],
		[0x185e08fc,0],
		[0x185e0908,0],
		[0x185e090c,0],
		[0x185e0930,0],
		[0x185e0934,0],
		[0x185e0938,0],
		[0x185e093c,0],
		[0x185e0940,2],
		[0x185e0948,0],
		[0x185e094c,0],
		[0x185e0950,0],
		[0x185e0954,0],
		[0x185e0968,0],
		[0x185e096c,0],
		[0x185e0970,0],
		[0x185e0974,0],
		[0x185e0978,0],
		[0x185e097c,0],
		[0x185e0980,0],
		[0x185e0984,0],
		[0x185e0988,0],
		[0x185e098c,0],
		[0x185e0998,0],
		[0x185e099c,0],
		[0x185e09a0,0],
		[0x185e09a4,0],
		[0x185e09a8,0],
		[0x185e09ac,0],
		[0x185e09b0,0],
		[0x185e09b4,0],
		[0x185e09b8,0],
		[0x185e09bc,0],
		[0x185e09c0,0],
		[0x185e09c4,0],
		[0x185e09f8,0],
		[0x185e09fc,0],
		[0x185e0a08,0],
		[0x185e0a0c,0],
		[0x185e0a10,0],
		[0x185e0a14,0],
		[0x185e0a18,0],
		[0x185e0a1c,0],
		[0x185e0a20,0],
		[0x185e0a24,0],
		[0x185e0a28,0],
		[0x185e0a2c,0],
		[0x185e0a30,0],
		[0x185e0a34,0],
		[0x185e0a38,0],
		[0x185e0a3c,0],
		[0x185e0a44,2],
		[0x185e0a48,0],
		[0x185e0a4c,0],
		[0x185e0a50,0],
		[0x185e0a54,0],
		[0x185e0a68,0],
		[0x185e0a6c,0],
		[0x185e0a70,0],
		[0x185e0a74,0],
		[0x185e0a78,0],
		[0x185e0a7c,0],
		[0x185e0a80,0],
		[0x185e0a84,0],
		[0x185e0a88,0],
		[0x185e0a8c,0],
		[0x185e0a98,0],
		[0x185e0a9c,0],
		[0x185e0aa0,0],
		[0x185e0aa4,0],
		[0x185e0aa8,0],
		[0x185e0aac,0],
		[0x185e0ab0,0],
		[0x185e0ab4,0],
		[0x185e0ab8,0],
		[0x185e0abc,0],
		[0x185e0ac0,0],
		[0x185e0ac4,0],
		[0x185e0ac8,0],
		[0x185e0acc,0],
		[0x185e0af0,0],
		[0x185e0af4,0],
		[0x185e0af8,0],
		[0x185e0afc,0],
		[0x185e0b08,0],
		[0x185e0b0c,0],
		[0x185e0b30,0],
		[0x185e0b34,0],
		[0x185e0b38,0],
		[0x185e0b3c,0],
		[0x185e0b48,0],
		[0x185e0b4c,0],
		[0x185e0b50,0],
		[0x185e0b54,0],
		[0x185e0b68,4],
		[0x185e0b6c,0],
		[0x185e0b70,0],
		[0x185e0b74,0],
		[0x185e0b78,0],
		[0x185e0b7c,0],
		[0, 0]
]).
string_val([
		[0, 0]
]).
:- use_module(library(clpfd)).
:- use_module(reif).
:- style_check(-singleton).

isTrue([X, Y]):-
    X == 49.

isTrue([X|Tail]):-
    isTrue(Tail).

log(File_name, Name, Addr, Base):-
    Offset #= Addr - Base,
    open(File_name, append, Stream),
    write(Stream, Name),
    write(Stream, ':'),
    write(Stream, Offset),
    nl(Stream),
    close(Stream).

possible_task_struct(Base_addr) :-
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM2_addr, Pid_addr, Tgid_addr, Real_parent_addr, Parent_addr , Child_addr, 
           Group_leader_addr, Thread_group_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    %MM2_addr #> Base_addr + 1000,
    Tasks_addr #> MM2_addr - 100,
    %FS_struct_addr #< Base_addr + 4000,
    Tgid_addr #= Pid_addr + 4,
    Real_parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr - 8,
    Child_addr #= Parent_addr + 8,
    %FIXME This may be too strong
    Group_leader_addr #=< Child_addr +32,
    %Comm_addr #= Base_addr + 1656,
    %Tasks_addr #= Base_addr + 1072,
    %FS_struct_addr #= Base_addr + 2640,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    % make query after labeling
    MM2_val #> 0,
    integer(MM2_val),
    
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val,  Comm_addr, Comm_val ]),

    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_parent_addr, Real_parent_val, Group_leader_addr, Group_leader_val]),
    Real_parent_val #> 0,
    Group_leader_val #> 0,
    query_ts(Real_parent_val, Comm_offset, Tasks_offset),
    query_ts(Group_leader_val, Comm_offset, Tasks_offset),

    labeling([enum], [Cred_addr, Cred_val]),
    Cred_val #> 0,
    query_cred(Cred_val),

    labeling([enum], [FS_struct_addr, FS_struct_val]),
    FS_struct_val #> 0,
    %query_fs_struct(FS_struct_val),



    get_time(End),
    Time_past is End - Current,
    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    log("profile.txt", "tasks", Tasks_addr, Base_addr),
    log("profile.txt", "mm_struct", MM2_addr, Base_addr),
    log("profile.txt", "comm", Comm_addr, Base_addr),
    log("profile.txt", "parent", Parent_addr, Base_addr),
    log("profile.txt", "group_leader", Group_leader_addr, Base_addr),
    log("profile.txt", "cred", Cred_addr, Base_addr),

    
    print_nl('tasks offset', Tasks_offset),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).

possible_mm_struct(Current_addr) :- 
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    % TODO: ADD vm_area_struct *mmap
    Ptr_profile = [
        [Mmap_addr, Mmap_val],
        [Pgd_addr, Pgd_val]  
    ],
    Ulong_profile = [
        [Mmap_base_addr, Mmap_base_val],
        [Mmap_legacy_base_addr, Mmap_legacy_base_val],
        [Task_size_addr, Task_size_val],
        [High_vm_end_addr, High_vm_end_val],
        [Start_brk_addr, Start_brk_val],
        [Brk_addr, Brk_val],
        [Start_stack_addr, Start_stack_val],
        [ARG_start_addr, ARG_start_val]
    ],
    Mmap_addr #= Current_addr,


    Mmap_base_addr #> Mmap_addr,
    %FIXME mmap_base need more value constraint, because we removed mmap_legacy_base and highest_vm_end.
    Mmap_base_val #> 0x7f0000000000,
    %FIXME in old linux version, e.g., there is no mmap_legacy_base and highest_vm_enb
    %chain([Mmap_base_addr, Mmap_legacy_base_addr, Task_size_addr, High_vm_end_addr, Pgd_addr], #<),
    chain([Mmap_base_addr, Task_size_addr, Pgd_addr], #<),

    %FIXME: This rule may be too strong
    %High_vm_end_addr #= Mmap_base_addr + 24, 
    Pgd_addr #> Task_size_addr,
    Pgd_addr #=< Task_size_addr + 40,
    %FIXME: This rule may not be true for other mm_struct.
    Task_size_val #>= 0x7ffffffff000,

    %Mmap_base_addr #= Current_addr + 40,
    %Mmap_legacy_base_addr #= Current_addr + 40,
    %Task_size_addr #= Current_addr + 48,
    %High_vm_end_addr #= Current_addr + 72,

    Start_brk_addr #> Pgd_addr,
    Start_stack_val #> 0x7ff000000000,
    % TODO: Convert this to index comparison. 
    ARG_start_addr #< Current_addr + 500,
    chain([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr], #<),
    ARG_start_addr #= Start_brk_addr + 24,
    Brk_val #< 0x7ff000000000,
    ARG_start_val #> 0x7ff000000000,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),


    labeling([enum], [Mmap_addr, Mmap_val, Mmap_base_addr, Pgd_addr, Pgd_val]),
    Mmap_val #> 0,
    Pgd_val #> 0,
    
    process_create(path('python'),
                    ['subquery.py', Mmap_val, "vm_area_struct", 2],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    label([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr]),
    statistics(real_time, [End|_]),

    log("profile.txt", "mmap", Mmap_addr, Current_addr),
    log("profile.txt", "mmap_base", Mmap_base_addr, Current_addr),
    log("profile.txt", "pgd", Pgd_addr, Current_addr),
    log("profile.txt", "start_brk", Start_brk_addr, Current_addr),
    log("profile.txt", "brk", Brk_addr, Current_addr),
    log("profile.txt", "start_stack", Start_stack_addr, Current_addr),
    log("profile.txt", "arg_start", ARG_start_addr, Current_addr),
    log("profile.txt", "mm_struct time", End, Start).


possible_vm_area_struct(Base_addr, Level) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [VM_next_addr, VM_next_val],
        [VM_file_addr, VM_file_val]
    ],
    Ulong_profile = [
        [VM_start_addr, VM_start_val],
        [VM_end_addr, VM_end_val],
        [VM_flag_addr, VM_flag_val]
        %VM_pgoff is 0, and we do not consider 0 as ulong
        %[VM_pgoff_addr, VM_pgoff_val]
    ],
    VM_start_addr #>= Base_addr,
    chain([VM_start_addr, VM_end_addr, VM_next_addr, VM_flag_addr, VM_file_addr], #<),
    VM_end_addr #= VM_start_addr + 8,
    VM_next_addr #= VM_end_addr + 8,
    VM_next_addr #< Base_addr + 32,
    VM_file_addr #< Base_addr + 180,
    VM_pgoff_addr #= VM_file_addr - 8,
    %VM_file_addr #= Base_addr + 160,

    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    %FIXME: VM_flag may need value constraints.

    label([VM_next_addr, VM_next_val]),
    /*if_(Level = 2,
        call(check_vm_area_struct, VM_next_val, 1),
        1 = 1),*/
    %Level #> 1 #==> check_vm_area_struct(VM_next_val, 1),

    labeling([enum], [VM_start_addr, VM_end_addr, VM_flag_addr, VM_pgoff_addr, VM_file_addr, VM_file_val]),
    
    VM_file_val #> 0,
    process_create(path('python'),
                ['subquery.py', VM_file_val, "vm_file"],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    statistics(real_time, [End|_]),

    log("profile.txt", "vm_start", VM_start_addr, Base_addr),
    log("profile.txt", "vm_end", VM_end_addr, Base_addr),
    log("profile.txt", "vm_next", VM_next_addr, Base_addr),
    log("profile.txt", "vm_flag", VM_flag_addr, Base_addr),
    log("profile.txt", "vm_pgoff", VM_pgoff_addr, Base_addr),
    log("profile.txt", "vm_file", VM_file_addr, Base_addr),
    log("profile.txt", "vm_area_struct time", End, Start).

check_vm_area_struct(Base_addr, Level) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "vm_area_struct", Level],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vm_file(Base_addr) :-
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [Vfs_mount_addr, Vfs_mount_val],
        [Dentry_addr, Dentry_val]
    ],
    Vfs_mount_addr #> Base_addr,
    Dentry_addr #= Vfs_mount_addr + 8,
    Dentry_addr #< Base_addr + 40,
    tuples_in(Ptr_profile, Ptr),
    label([Vfs_mount_val, Dentry_val]),
    Vfs_mount_val #>0,
    Dentry_val #> 0,
    %FIXME seems like we do not need this, make sure the string is not addr=0
/*
    process_create(path('python'),
                    ['subquery.py', Vfs_mount_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vfs_mount(Base_addr) :-
    pointer(Ptr),
    Ptr_profile = [
        [Dentry_addr, Dentry_val]
    ],
    Dentry_addr #< Base_addr + 16,
    tuples_in(Ptr_profile, Ptr),
    label([Dentry_val]),
    Dentry_val #> 0,
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).
    
possible_dentry(Base_addr) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    string_val(Str),
    Ptr_profile = [
        [Dparent_addr, Dparent_val],
        [Dchild_addr, Dchild_val]
    ],
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    %log("profile.txt", "dentry addr", Base_addr, 0),
    Dparent_addr #> Base_addr,
    Dname_addr #> 0,
    Dname_addr #< Base_addr + 200,
    %Dname_addr #= Base_addr + 160,
    %FIXME This child rule is not applicable for old kernel version. 
    %chain([Dparent_addr, Dname_addr, Dchild_addr], #<),
    %Dchild_addr #< Base_addr + 200,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    labeling([enum], [Dparent_addr, Dparent_val, Dname_addr, Dchild_addr, Dchild_val]),
    Dname_offset #= Dname_addr - Base_addr,
    integer(Dname_offset),
    Dparent_val #> 0,
    
    %FIXME d_parent may not be initialized
    /*process_create(path('python'),
                ['subquery.py', Dparent_val, "d_entry", Dname_offset],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/

    %FIXME: may need to find another way for all list_head. 
    /*Dchild_offset #= Dchild_addr - Base_addr,
    integer(Dchild_offset),
    Dchild_base #= Dchild_val - Dchild_offset,
    integer(Dchild_base),
    Dchild_base #> 0,
    process_create(path('python'),
                ['subquery.py', Dchild_base, "d_entry", Dname_offset],
                [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    statistics(real_time, [End|_]).
/*
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    log("profile.txt", "d_parent", Dparent_addr, Base_addr),
    log("profile.txt", "d_child", Dchild_addr, Base_addr),
    log("profile.txt", "dentry time", End, Start).
*/
possible_d_entry(Base_addr, Dname_offset) :-
    current_predicate(string_val/1),
    string_val(Str),
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    Dname_addr #= Base_addr + Dname_offset,
    tuples_in(Str_profile, Str),
    label([Dname_addr]).

possible_list_head(Tasks_val, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_val, Tasks_addr]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],
    Comm_addr #= Tasks_val - Tasks_offset + Comm_offset,
    Tasks_addr #\= Tasks_val,
    tuples_in(Str_profile, Str),
    tuples_in(Ptr_profile, Ptr),
    label([Comm_addr]).

possible_ts(Base_addr, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_addr, Tasks_val]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],

    Comm_addr #= Base_addr + Comm_offset,
    Tasks_addr #= Base_addr + Tasks_offset,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),

    label([Tasks_val]),
    
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "list_head", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_cred(Base_addr) :-
    statistics(real_time, [Start|_]),

    int(Int),
    long(Ulg),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3],
        [Addr4, Val4],
        [Addr5, Val5],
        [Addr6, Val6],
        [Addr7, Val7],
        [Addr8, Val8],
        [Addr9, Val9]
    ],
    %FIXME For now, this rule is hard-coded because we do not consider 0 as a unsign long number. 
    %So that for cred whos val10 is 0, this rule does not apply.
    /*Ulong_profile = [
        [Addr10, Val10],
        [Addr11, Val11]
    ],*/
    Addr1 #> Base_addr,
    %chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9, Addr10, Addr11], #<),
    chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9], #<),
    Addr1 #= Base_addr + 4,
    Addr9 #= Addr1 + 32,
    %Addr11 #< Base_addr + 120,
    tuples_in(Int_profile, Int),
    %tuples_in(Ulong_profile, Ulg),
    statistics(real_time, [End|_]),
    labeling([enum], [Addr1, Addr2, Addr5, Addr6]),
    log("profile.txt", "cred time", End, Start),
    log('profile.txt', "uid", Addr1, Base_addr),
    log('profile.txt', "gid", Addr2, Base_addr),
    log('profile.txt', "euid", Addr5, Base_addr),
    log('profile.txt', "egid", Addr6, Base_addr).

possible_fs_struct(Base_addr) :-
    statistics(real_time, [Start|_]),
    int(Int),
    pointer(Ptr),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3]
    ],
    Ptr_profile = [
        [Root_addr, Root_val],
        [PWD_addr, PWD_val]
    ],
    Addr1 #>= Base_addr,
    chain([Addr1, Addr2, Addr3, Root_addr, PWD_addr], #<),
    PWD_addr #= Root_addr + 16,
    PWD_addr #< Base_addr + 50,
    tuples_in(Int_profile, Int),
    tuples_in(Ptr_profile, Ptr),
    label([Root_addr, Root_val]),
    
    process_create(path('python'),
                    ['subquery.py', Root_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    label([PWD_addr, PWD_val]),
    process_create(path('python'),
                    ['subquery.py', PWD_val, "dentry"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    statistics(real_time, [End|_]),
    log("profile.txt", "fs time", End, Start),
    log('profile.txt', "Root", Root_addr, Base_addr),
    log('profile.txt', "pwd", PWD_addr, Base_addr).
