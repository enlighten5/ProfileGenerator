:- use_module(library(clpfd)).
:- style_check(-singleton).
pointer([
		[0x15cf7900,0],
		[0x15cf7908,0],
		[0x15cf7910,518898080],
		[0x15cf7918,402008320],
		[0x15cf7920,402091856],
		[0x15cf7928,436515008],
		[0x15cf7930,0],
		[0x15cf7948,0],
		[0x15cf7950,0],
		[0x15cf7958,365918552],
		[0x15cf7960,365918552],
		[0x15cf7968,0],
		[0x15cf7970,0],
		[0x15cf7978,0],
		[0x15cf7980,0],
		[0x15cf7988,0],
		[0x15cf7990,519210688],
		[0x15cf79b8,0],
		[0x15cf79c0,518810608],
		[0x15cf79c8,0],
		[0x15cf79d0,365918672],
		[0x15cf79d8,365918672],
		[0x15cf79e0,365918688],
		[0x15cf79e8,365918688],
		[0x15cf79f0,402092232],
		[0x15cf79f8,0],
		[0x15cf7a00,0],
		[0x15cf7a08,0],
		[0x15cf7a10,518898080],
		[0x15cf7a18,402016704],
		[0x15cf7a20,399037952],
		[0x15cf7a28,436515008],
		[0x15cf7a30,0],
		[0x15cf7a48,0],
		[0x15cf7a50,0],
		[0x15cf7a58,365918808],
		[0x15cf7a60,365918808],
		[0x15cf7a68,0],
		[0x15cf7a70,0],
		[0x15cf7a78,0],
		[0x15cf7a80,0],
		[0x15cf7a88,0],
		[0x15cf7a90,519210688],
		[0x15cf7ab8,0],
		[0x15cf7ac0,518811304],
		[0x15cf7ac8,0],
		[0x15cf7ad0,365918928],
		[0x15cf7ad8,365918928],
		[0x15cf7ae0,365918944],
		[0x15cf7ae8,365918944],
		[0x15cf7af0,399038328],
		[0x15cf7af8,0],
		[0x15cf7b00,0],
		[0x15cf7b08,0],
		[0x15cf7b10,518898080],
		[0x15cf7b18,460977472],
		[0x15cf7b20,460874408],
		[0x15cf7b28,436515008],
		[0x15cf7b30,0],
		[0x15cf7b48,0],
		[0x15cf7b50,0],
		[0x15cf7b58,365919064],
		[0x15cf7b60,365919064],
		[0x15cf7b70,0],
		[0x15cf7b78,0],
		[0x15cf7b80,0],
		[0x15cf7b88,0],
		[0x15cf7b90,519978560],
		[0x15cf7bb8,0],
		[0x15cf7bc0,518810688],
		[0x15cf7bc8,0],
		[0x15cf7bd0,365919184],
		[0x15cf7bd8,365919184],
		[0x15cf7be0,365919200],
		[0x15cf7be8,365919200],
		[0x15cf7bf0,460874784],
		[0x15cf7bf8,0],
		[0x15cf7c00,0],
		[0x15cf7c08,0],
		[0x15cf7c10,518898080],
		[0x15cf7c18,402158720],
		[0x15cf7c20,460836240],
		[0x15cf7c28,436515008],
		[0x15cf7c30,0],
		[0x15cf7c48,0],
		[0x15cf7c50,0],
		[0x15cf7c58,365919320],
		[0x15cf7c60,365919320],
		[0x15cf7c70,0],
		[0x15cf7c78,0],
		[0x15cf7c80,0],
		[0x15cf7c88,0],
		[0x15cf7c90,519978560],
		[0x15cf7cb8,0],
		[0x15cf7cc0,518807736],
		[0x15cf7cc8,0],
		[0x15cf7cd0,365919440],
		[0x15cf7cd8,365919440],
		[0x15cf7ce0,365919456],
		[0x15cf7ce8,365919456],
		[0x15cf7cf0,460836616],
		[0x15cf7cf8,0],
		[0x15cf7d00,0],
		[0x15cf7d08,0],
		[0x15cf7d10,518898080],
		[0x15cf7d18,460976128],
		[0x15cf7d20,460869008],
		[0x15cf7d28,436515008],
		[0x15cf7d30,0],
		[0x15cf7d48,0],
		[0x15cf7d50,0],
		[0x15cf7d58,365919576],
		[0x15cf7d60,365919576],
		[0x15cf7d70,0],
		[0x15cf7d78,0],
		[0x15cf7d80,0],
		[0x15cf7d88,0],
		[0x15cf7d90,519978560],
		[0x15cf7db8,0],
		[0x15cf7dc0,518809968],
		[0x15cf7dc8,0],
		[0x15cf7dd0,365919696],
		[0x15cf7dd8,365919696],
		[0x15cf7de0,365919712],
		[0x15cf7de8,365919712],
		[0x15cf7df0,460869384],
		[0x15cf7df8,0],
		[0x15cf7e00,0],
		[0x15cf7e08,0],
		[0x15cf7e10,518898080],
		[0x15cf7e18,460977664],
		[0x15cf7e20,399047672],
		[0x15cf7e28,436515008],
		[0x15cf7e30,0],
		[0x15cf7e48,0],
		[0x15cf7e50,0],
		[0x15cf7e58,365919832],
		[0x15cf7e60,365919832],
		[0x15cf7e70,0],
		[0x15cf7e78,0],
		[0x15cf7e80,0],
		[0x15cf7e88,0],
		[0x15cf7e90,519978560],
		[0x15cf7eb8,0],
		[0x15cf7ec0,518807800],
		[0x15cf7ec8,0],
		[0x15cf7ed0,365919952],
		[0x15cf7ed8,365919952],
		[0x15cf7ee0,365919968],
		[0x15cf7ee8,365919968],
		[0x15cf7ef0,399048048],
		[0x15cf7ef8,0],
		[0x15cf7f00,0],
		[0x15cf7f08,0],
		[0x15cf7f10,518898080],
		[0x15cf7f18,460979584],
		[0x15cf7f20,399041192],
		[0x15cf7f28,436515008],
		[0x15cf7f30,0],
		[0x15cf7f48,0],
		[0x15cf7f50,0],
		[0x15cf7f58,365920088],
		[0x15cf7f60,365920088],
		[0x15cf7f70,0],
		[0x15cf7f78,0],
		[0x15cf7f80,0],
		[0x15cf7f88,0],
		[0x15cf7f90,519978560],
		[0x15cf7fb8,0],
		[0x15cf7fc0,518810800],
		[0x15cf7fc8,0],
		[0x15cf7fd0,365920208],
		[0x15cf7fd8,365920208],
		[0x15cf7fe0,365920224],
		[0x15cf7fe8,365920224],
		[0x15cf7ff0,399041568],
		[0x15cf7ff8,0],
		[0x15cf8010,0],
		[0x15cf8018,0],
		[0x15cf8020,365920288],
		[0x15cf8028,365920288],
		[0x15cf8030,365920304],
		[0x15cf8038,365920304],
		[0x15cf8040,0],
		[0x15cf8048,0],
		[0x15cf8050,365920336],
		[0x15cf8058,365920336],
		[0x15cf8060,0],
		[0x15cf8070,0],
		[0x15cf8078,0],
		[0x15cf8080,0],
		[0x15cf8088,436447744],
		[0x15cf8090,472027136],
		[0x15cf8098,365920736],
		[0x15cf80a0,0],
		[0x15cf80b8,0],
		[0x15cf80f0,0],
		[0x15cf8100,0],
		[0x15cf8108,0],
		[0x15cf8110,0],
		[0x15cf8118,365920536],
		[0x15cf8120,365920536],
		[0x15cf8128,0],
		[0x15cf8130,0],
		[0x15cf8138,0],
		[0x15cf8140,0],
		[0x15cf8148,0],
		[0x15cf8150,0],
		[0x15cf8158,365920600],
		[0x15cf8160,365920600],
		[0x15cf8168,0],
		[0x15cf8170,0],
		[0x15cf8178,365920632],
		[0x15cf8180,365920632],
		[0x15cf8188,365929696],
		[0x15cf8190,365926216],
		[0x15cf8198,365920664],
		[0x15cf81a0,365920664],
		[0x15cf81a8,399286832],
		[0x15cf81b0,0],
		[0x15cf81b8,0],
		[0x15cf81c8,0],
		[0x15cf81d0,436463200],
		[0x15cf81d8,0],
		[0x15cf81e0,365920360],
		[0x15cf81f0,0],
		[0x15cf81f8,0],
		[0x15cf8200,0],
		[0x15cf8208,0],
		[0x15cf8210,365920784],
		[0x15cf8218,365920784],
		[0x15cf8220,0],
		[0x15cf8228,0],
		[0x15cf8230,0],
		[0x15cf8238,0],
		[0x15cf8240,0],
		[0x15cf8248,436464832],
		[0x15cf8250,0],
		[0x15cf8260,365920864],
		[0x15cf8268,365920864],
		[0x15cf8270,0],
		[0x15cf8278,365920888],
		[0x15cf8280,365920888],
		[0x15cf8288,0],
		[0x15cf8298,0],
		[0x15cf82a0,0],
		[0x15cf82a8,0],
		[0x15cf82b0,365925824],
		[0x15cf82c8,0],
		[0x15cf82d0,0],
		[0x15cf82d8,365920984],
		[0x15cf82e0,365920984],
		[0x15cf82e8,365921000],
		[0x15cf82f0,365921000],
		[0x15cf82f8,0],
		[0x15cf8300,0],
		[0x15cf8308,365921032],
		[0x15cf8310,365921032],
		[0x15cf8318,0],
		[0x15cf8330,450477248],
		[0x15cf8338,0],
		[0x15cf8340,436447744],
		[0x15cf8348,472027136],
		[0x15cf8350,365921432],
		[0x15cf8358,0],
		[0x15cf8370,0],
		[0x15cf83a8,0],
		[0x15cf83b8,0],
		[0x15cf83c0,0],
		[0x15cf83c8,0],
		[0x15cf83d0,365921232],
		[0x15cf83d8,365921232],
		[0x15cf83e0,0],
		[0x15cf83e8,0],
		[0x15cf83f0,0],
		[0x15cf83f8,0],
		[0x15cf8400,0],
		[0x15cf8408,0],
		[0x15cf8410,365921296],
		[0x15cf8418,365921296],
		[0x15cf8420,0],
		[0x15cf8428,0],
		[0x15cf8430,365921328],
		[0x15cf8438,365921328],
		[0x15cf8440,365927608],
		[0x15cf8448,373701976],
		[0x15cf8450,365921360],
		[0x15cf8458,365921360],
		[0x15cf8460,399920880],
		[0x15cf8468,0],
		[0x15cf8470,0],
		[0x15cf8480,0],
		[0x15cf8488,436463200],
		[0x15cf8490,0],
		[0x15cf8498,365921056],
		[0x15cf84a8,0],
		[0x15cf84b0,0],
		[0x15cf84b8,0],
		[0x15cf84c0,0],
		[0x15cf84c8,365921480],
		[0x15cf84d0,365921480],
		[0x15cf84d8,0],
		[0x15cf84e0,0],
		[0x15cf84e8,0],
		[0x15cf84f0,0],
		[0x15cf84f8,0],
		[0x15cf8500,436464832],
		[0x15cf8508,0],
		[0x15cf8518,365921560],
		[0x15cf8520,365921560],
		[0x15cf8528,0],
		[0x15cf8530,365921584],
		[0x15cf8538,365921584],
		[0x15cf8540,0],
		[0x15cf8550,0],
		[0x15cf8558,0],
		[0x15cf8560,0],
		[0x15cf8568,365921648],
		[0x15cf8590,365921680],
		[0x15cf8598,365921680],
		[0x15cf85a0,373689104],
		[0x15cf85a8,462372912],
		[0x15cf85b0,0],
		[0x15cf85b8,0],
		[0x15cf85c0,365921728],
		[0x15cf85c8,365921728],
		[0x15cf85d0,0],
		[0x15cf85e8,0],
		[0x15cf85f0,0],
		[0x15cf85f8,436448128],
		[0x15cf8600,518782976],
		[0x15cf8608,365922128],
		[0x15cf8610,0],
		[0x15cf8660,0],
		[0x15cf8678,0],
		[0x15cf8680,0],
		[0x15cf8688,365921928],
		[0x15cf8690,365921928],
		[0x15cf8698,0],
		[0x15cf86a0,0],
		[0x15cf86a8,0],
		[0x15cf86b0,0],
		[0x15cf86b8,0],
		[0x15cf86c0,0],
		[0x15cf86c8,365921992],
		[0x15cf86d0,365921992],
		[0x15cf86d8,0],
		[0x15cf86e0,0],
		[0x15cf86e8,365922024],
		[0x15cf86f0,365922024],
		[0x15cf86f8,365935960],
		[0x15cf8700,365934568],
		[0x15cf8708,365922056],
		[0x15cf8710,365922056],
		[0x15cf8718,460853424],
		[0x15cf8720,0],
		[0x15cf8728,0],
		[0x15cf8738,0],
		[0x15cf8740,436448320],
		[0x15cf8748,0],
		[0x15cf8750,365921752],
		[0x15cf8768,0],
		[0x15cf8770,0],
		[0x15cf8778,0],
		[0x15cf8780,365922176],
		[0x15cf8788,365922176],
		[0x15cf8790,0],
		[0x15cf8798,0],
		[0x15cf87a0,0],
		[0x15cf87a8,0],
		[0x15cf87b0,0],
		[0x15cf87b8,436448576],
		[0x15cf87c0,0],
		[0x15cf87d0,365922256],
		[0x15cf87d8,365922256],
		[0x15cf87e0,0],
		[0x15cf87e8,365922280],
		[0x15cf87f0,365922280],
		[0x15cf87f8,0],
		[0x15cf8808,0],
		[0x15cf8810,0],
		[0x15cf8818,0],
		[0x15cf8820,365930000],
		[0x15cf8838,0],
		[0x15cf8840,0],
		[0x15cf8848,365922376],
		[0x15cf8850,365922376],
		[0x15cf8858,365922392],
		[0x15cf8860,365922392],
		[0x15cf8868,0],
		[0x15cf8870,0],
		[0x15cf8878,365922424],
		[0x15cf8880,365922424],
		[0x15cf8888,0],
		[0x15cf8898,0],
		[0x15cf88a0,0],
		[0x15cf88a8,0],
		[0x15cf88b0,436448128],
		[0x15cf88b8,518782976],
		[0x15cf88c0,365922824],
		[0x15cf88c8,0],
		[0x15cf88e0,0],
		[0, 0]
]).
unknown([
		[0x15cf7940,703811995861024],
		[0x15cf7a40,703811995861024],
		[0x15cf7b40,703811995860992],
		[0x15cf7c40,703811995860992],
		[0x15cf7d40,703811995860992],
		[0x15cf7e40,703811995860992],
		[0x15cf7f40,703811995860992],
		[0x15cf80b0,45036584684224513],
		[0x15cf8258,90635810084225024],
		[0x15cf8368,522417561069944833],
		[0x15cf8510,90635810084225024],
		[0x15cf87c8,90635810084225024],
		[0, 0]
]).
long([
		[0x15cf7938,8],
		[0x15cf7998,211],
		[0x15cf79a0,137438953504],
		[0x15cf79a8,32],
		[0x15cf79b0,652],
		[0x15cf7a38,6],
		[0x15cf7a98,36],
		[0x15cf7aa0,137438953504],
		[0x15cf7aa8,32],
		[0x15cf7ab0,456],
		[0x15cf7b38,8],
		[0x15cf7b68,832],
		[0x15cf7b98,32],
		[0x15cf7ba0,137438953504],
		[0x15cf7ba8,32],
		[0x15cf7bb0,832],
		[0x15cf7c38,8],
		[0x15cf7c68,832],
		[0x15cf7c98,32],
		[0x15cf7ca0,137438953504],
		[0x15cf7ca8,32],
		[0x15cf7cb0,832],
		[0x15cf7d38,8],
		[0x15cf7d68,832],
		[0x15cf7d98,36],
		[0x15cf7da0,137438953504],
		[0x15cf7da8,32],
		[0x15cf7db0,832],
		[0x15cf7e38,8],
		[0x15cf7e68,832],
		[0x15cf7e98,32],
		[0x15cf7ea0,137438953504],
		[0x15cf7ea8,32],
		[0x15cf7eb0,832],
		[0x15cf7f38,8],
		[0x15cf7f68,832],
		[0x15cf7f98,36],
		[0x15cf7fa0,137438953504],
		[0x15cf7fa8,32],
		[0x15cf7fb0,832],
		[0x15cf8000,4294967296],
		[0x15cf8008,2097152],
		[0x15cf8068,795008],
		[0x15cf80a8,13133],
		[0x15cf80c0,1585687667],
		[0x15cf80c8,388000000],
		[0x15cf80d0,1585687667],
		[0x15cf80d8,388000000],
		[0x15cf80e0,1585687667],
		[0x15cf80e8,388000000],
		[0x15cf80f8,12],
		[0x15cf81c0,1],
		[0x15cf81e8,18350112],
		[0x15cf8290,1585687667],
		[0x15cf82b8,4294967296],
		[0x15cf82c0,2097152],
		[0x15cf8320,795056],
		[0x15cf8328,29],
		[0x15cf8360,13138],
		[0x15cf8378,1585687667],
		[0x15cf8380,424000000],
		[0x15cf8388,1585687667],
		[0x15cf8390,424000000],
		[0x15cf8398,1585687668],
		[0x15cf83a0,528000000],
		[0x15cf83b0,12],
		[0x15cf8478,1],
		[0x15cf84a0,18350112],
		[0x15cf8548,1585687667],
		[0x15cf8570,4294967296],
		[0x15cf8578,2097152],
		[0x15cf8580,1],
		[0x15cf8588,1],
		[0x15cf85d8,885120],
		[0x15cf85e0,17592186044416],
		[0x15cf8618,13187],
		[0x15cf8620,1],
		[0x15cf8628,175],
		[0x15cf8630,1585687667],
		[0x15cf8638,388000000],
		[0x15cf8640,1585687667],
		[0x15cf8648,388000000],
		[0x15cf8650,1585687667],
		[0x15cf8658,388000000],
		[0x15cf8668,12],
		[0x15cf8670,8],
		[0x15cf8730,1],
		[0x15cf8758,18350112],
		[0x15cf8760,646],
		[0x15cf8800,1585687667],
		[0x15cf8828,4294967296],
		[0x15cf8830,2097152],
		[0x15cf8890,885156],
		[0x15cf88d0,14604],
		[0x15cf88d8,1],
		[0x15cf88e8,1585687667],
		[0x15cf88f0,752000000],
		[0x15cf88f8,1585687667],
		[0, 0]
]).
int([
		[0x15cf7900,0],
		[0x15cf7904,0],
		[0x15cf7908,0],
		[0x15cf790c,0],
		[0x15cf7930,0],
		[0x15cf7934,0],
		[0x15cf7938,8],
		[0x15cf793c,0],
		[0x15cf7948,0],
		[0x15cf794c,0],
		[0x15cf7950,0],
		[0x15cf7954,0],
		[0x15cf7968,0],
		[0x15cf796c,0],
		[0x15cf7970,0],
		[0x15cf7974,0],
		[0x15cf7978,0],
		[0x15cf797c,0],
		[0x15cf7980,0],
		[0x15cf7984,0],
		[0x15cf7988,0],
		[0x15cf798c,0],
		[0x15cf7998,211],
		[0x15cf799c,0],
		[0x15cf79a0,32],
		[0x15cf79a4,32],
		[0x15cf79a8,32],
		[0x15cf79ac,0],
		[0x15cf79b0,652],
		[0x15cf79b4,0],
		[0x15cf79b8,0],
		[0x15cf79bc,0],
		[0x15cf79c8,0],
		[0x15cf79cc,0],
		[0x15cf79f8,0],
		[0x15cf79fc,0],
		[0x15cf7a00,0],
		[0x15cf7a04,0],
		[0x15cf7a08,0],
		[0x15cf7a0c,0],
		[0x15cf7a30,0],
		[0x15cf7a34,0],
		[0x15cf7a38,6],
		[0x15cf7a3c,0],
		[0x15cf7a48,0],
		[0x15cf7a4c,0],
		[0x15cf7a50,0],
		[0x15cf7a54,0],
		[0x15cf7a68,0],
		[0x15cf7a6c,0],
		[0x15cf7a70,0],
		[0x15cf7a74,0],
		[0x15cf7a78,0],
		[0x15cf7a7c,0],
		[0x15cf7a80,0],
		[0x15cf7a84,0],
		[0x15cf7a88,0],
		[0x15cf7a8c,0],
		[0x15cf7a98,36],
		[0x15cf7a9c,0],
		[0x15cf7aa0,32],
		[0x15cf7aa4,32],
		[0x15cf7aa8,32],
		[0x15cf7aac,0],
		[0x15cf7ab0,456],
		[0x15cf7ab4,0],
		[0x15cf7ab8,0],
		[0x15cf7abc,0],
		[0x15cf7ac8,0],
		[0x15cf7acc,0],
		[0x15cf7af8,0],
		[0x15cf7afc,0],
		[0x15cf7b00,0],
		[0x15cf7b04,0],
		[0x15cf7b08,0],
		[0x15cf7b0c,0],
		[0x15cf7b30,0],
		[0x15cf7b34,0],
		[0x15cf7b38,8],
		[0x15cf7b3c,0],
		[0x15cf7b48,0],
		[0x15cf7b4c,0],
		[0x15cf7b50,0],
		[0x15cf7b54,0],
		[0x15cf7b68,832],
		[0x15cf7b6c,0],
		[0x15cf7b70,0],
		[0x15cf7b74,0],
		[0x15cf7b78,0],
		[0x15cf7b7c,0],
		[0x15cf7b80,0],
		[0x15cf7b84,0],
		[0x15cf7b88,0],
		[0x15cf7b8c,0],
		[0x15cf7b98,32],
		[0x15cf7b9c,0],
		[0x15cf7ba0,32],
		[0x15cf7ba4,32],
		[0x15cf7ba8,32],
		[0x15cf7bac,0],
		[0x15cf7bb0,832],
		[0x15cf7bb4,0],
		[0x15cf7bb8,0],
		[0x15cf7bbc,0],
		[0x15cf7bc8,0],
		[0x15cf7bcc,0],
		[0x15cf7bf8,0],
		[0x15cf7bfc,0],
		[0x15cf7c00,0],
		[0x15cf7c04,0],
		[0x15cf7c08,0],
		[0x15cf7c0c,0],
		[0x15cf7c30,0],
		[0x15cf7c34,0],
		[0x15cf7c38,8],
		[0x15cf7c3c,0],
		[0x15cf7c48,0],
		[0x15cf7c4c,0],
		[0x15cf7c50,0],
		[0x15cf7c54,0],
		[0x15cf7c68,832],
		[0x15cf7c6c,0],
		[0x15cf7c70,0],
		[0x15cf7c74,0],
		[0x15cf7c78,0],
		[0x15cf7c7c,0],
		[0x15cf7c80,0],
		[0x15cf7c84,0],
		[0x15cf7c88,0],
		[0x15cf7c8c,0],
		[0x15cf7c98,32],
		[0x15cf7c9c,0],
		[0x15cf7ca0,32],
		[0x15cf7ca4,32],
		[0x15cf7ca8,32],
		[0x15cf7cac,0],
		[0x15cf7cb0,832],
		[0x15cf7cb4,0],
		[0x15cf7cb8,0],
		[0x15cf7cbc,0],
		[0x15cf7cc8,0],
		[0x15cf7ccc,0],
		[0x15cf7cf8,0],
		[0x15cf7cfc,0],
		[0x15cf7d00,0],
		[0x15cf7d04,0],
		[0x15cf7d08,0],
		[0x15cf7d0c,0],
		[0x15cf7d30,0],
		[0x15cf7d34,0],
		[0x15cf7d38,8],
		[0x15cf7d3c,0],
		[0x15cf7d48,0],
		[0x15cf7d4c,0],
		[0x15cf7d50,0],
		[0x15cf7d54,0],
		[0x15cf7d68,832],
		[0x15cf7d6c,0],
		[0x15cf7d70,0],
		[0x15cf7d74,0],
		[0x15cf7d78,0],
		[0x15cf7d7c,0],
		[0x15cf7d80,0],
		[0x15cf7d84,0],
		[0x15cf7d88,0],
		[0x15cf7d8c,0],
		[0x15cf7d98,36],
		[0x15cf7d9c,0],
		[0x15cf7da0,32],
		[0x15cf7da4,32],
		[0x15cf7da8,32],
		[0x15cf7dac,0],
		[0x15cf7db0,832],
		[0x15cf7db4,0],
		[0x15cf7db8,0],
		[0x15cf7dbc,0],
		[0x15cf7dc8,0],
		[0x15cf7dcc,0],
		[0x15cf7df8,0],
		[0x15cf7dfc,0],
		[0x15cf7e00,0],
		[0x15cf7e04,0],
		[0x15cf7e08,0],
		[0x15cf7e0c,0],
		[0x15cf7e30,0],
		[0x15cf7e34,0],
		[0x15cf7e38,8],
		[0x15cf7e3c,0],
		[0x15cf7e48,0],
		[0x15cf7e4c,0],
		[0x15cf7e50,0],
		[0x15cf7e54,0],
		[0x15cf7e68,832],
		[0x15cf7e6c,0],
		[0x15cf7e70,0],
		[0x15cf7e74,0],
		[0x15cf7e78,0],
		[0x15cf7e7c,0],
		[0x15cf7e80,0],
		[0x15cf7e84,0],
		[0x15cf7e88,0],
		[0x15cf7e8c,0],
		[0x15cf7e98,32],
		[0x15cf7e9c,0],
		[0x15cf7ea0,32],
		[0x15cf7ea4,32],
		[0x15cf7ea8,32],
		[0x15cf7eac,0],
		[0x15cf7eb0,832],
		[0x15cf7eb4,0],
		[0x15cf7eb8,0],
		[0x15cf7ebc,0],
		[0x15cf7ec8,0],
		[0x15cf7ecc,0],
		[0x15cf7ef8,0],
		[0x15cf7efc,0],
		[0x15cf7f00,0],
		[0x15cf7f04,0],
		[0x15cf7f08,0],
		[0x15cf7f0c,0],
		[0x15cf7f30,0],
		[0x15cf7f34,0],
		[0x15cf7f38,8],
		[0x15cf7f3c,0],
		[0x15cf7f48,0],
		[0x15cf7f4c,0],
		[0x15cf7f50,0],
		[0x15cf7f54,0],
		[0x15cf7f68,832],
		[0x15cf7f6c,0],
		[0x15cf7f70,0],
		[0x15cf7f74,0],
		[0x15cf7f78,0],
		[0x15cf7f7c,0],
		[0x15cf7f80,0],
		[0x15cf7f84,0],
		[0x15cf7f88,0],
		[0x15cf7f8c,0],
		[0x15cf7f98,36],
		[0x15cf7f9c,0],
		[0x15cf7fa0,32],
		[0x15cf7fa4,32],
		[0x15cf7fa8,32],
		[0x15cf7fac,0],
		[0x15cf7fb0,832],
		[0x15cf7fb4,0],
		[0x15cf7fb8,0],
		[0x15cf7fbc,0],
		[0x15cf7fc8,0],
		[0x15cf7fcc,0],
		[0x15cf7ff8,0],
		[0x15cf7ffc,0],
		[0x15cf8000,0],
		[0x15cf8004,1],
		[0x15cf800c,0],
		[0x15cf8010,0],
		[0x15cf8014,0],
		[0x15cf8018,0],
		[0x15cf801c,0],
		[0x15cf8040,0],
		[0x15cf8044,0],
		[0x15cf8048,0],
		[0x15cf804c,0],
		[0x15cf8060,0],
		[0x15cf8064,0],
		[0x15cf806c,0],
		[0x15cf8070,0],
		[0x15cf8074,0],
		[0x15cf8078,0],
		[0x15cf807c,0],
		[0x15cf8080,0],
		[0x15cf8084,0],
		[0x15cf80a0,0],
		[0x15cf80a4,0],
		[0x15cf80a8,13133],
		[0x15cf80ac,0],
		[0x15cf80b0,1],
		[0x15cf80b8,0],
		[0x15cf80bc,0],
		[0x15cf80c4,0],
		[0x15cf80cc,0],
		[0x15cf80d4,0],
		[0x15cf80dc,0],
		[0x15cf80e4,0],
		[0x15cf80ec,0],
		[0x15cf80f0,0],
		[0x15cf80f4,0],
		[0x15cf80f8,12],
		[0x15cf80fc,0],
		[0x15cf8100,0],
		[0x15cf8104,0],
		[0x15cf8108,0],
		[0x15cf810c,0],
		[0x15cf8110,0],
		[0x15cf8114,0],
		[0x15cf8128,0],
		[0x15cf812c,0],
		[0x15cf8130,0],
		[0x15cf8134,0],
		[0x15cf8138,0],
		[0x15cf813c,0],
		[0x15cf8140,0],
		[0x15cf8144,0],
		[0x15cf8148,0],
		[0x15cf814c,0],
		[0x15cf8150,0],
		[0x15cf8154,0],
		[0x15cf8168,0],
		[0x15cf816c,0],
		[0x15cf8170,0],
		[0x15cf8174,0],
		[0x15cf81b0,0],
		[0x15cf81b4,0],
		[0x15cf81b8,0],
		[0x15cf81bc,0],
		[0x15cf81c0,1],
		[0x15cf81c4,0],
		[0x15cf81c8,0],
		[0x15cf81cc,0],
		[0x15cf81d8,0],
		[0x15cf81dc,0],
		[0x15cf81ec,0],
		[0x15cf81f0,0],
		[0x15cf81f4,0],
		[0x15cf81f8,0],
		[0x15cf81fc,0],
		[0x15cf8200,0],
		[0x15cf8204,0],
		[0x15cf8208,0],
		[0x15cf820c,0],
		[0x15cf8220,0],
		[0x15cf8224,0],
		[0x15cf8228,0],
		[0x15cf822c,0],
		[0x15cf8230,0],
		[0x15cf8234,0],
		[0x15cf8238,0],
		[0x15cf823c,0],
		[0x15cf8240,0],
		[0x15cf8244,0],
		[0x15cf8250,0],
		[0x15cf8254,0],
		[0x15cf8258,0],
		[0x15cf8270,0],
		[0x15cf8274,0],
		[0x15cf8288,0],
		[0x15cf828c,0],
		[0x15cf8294,0],
		[0x15cf8298,0],
		[0x15cf829c,0],
		[0x15cf82a0,0],
		[0x15cf82a4,0],
		[0x15cf82a8,0],
		[0x15cf82ac,0],
		[0x15cf82b8,0],
		[0x15cf82bc,1],
		[0x15cf82c4,0],
		[0x15cf82c8,0],
		[0x15cf82cc,0],
		[0x15cf82d0,0],
		[0x15cf82d4,0],
		[0x15cf82f8,0],
		[0x15cf82fc,0],
		[0x15cf8300,0],
		[0x15cf8304,0],
		[0x15cf8318,0],
		[0x15cf831c,0],
		[0x15cf8324,0],
		[0x15cf8328,29],
		[0x15cf832c,0],
		[0x15cf8338,0],
		[0x15cf833c,0],
		[0x15cf8358,0],
		[0x15cf835c,0],
		[0x15cf8360,13138],
		[0x15cf8364,0],
		[0x15cf8368,1],
		[0x15cf8370,0],
		[0x15cf8374,0],
		[0x15cf837c,0],
		[0x15cf8384,0],
		[0x15cf838c,0],
		[0x15cf8394,0],
		[0x15cf839c,0],
		[0x15cf83a4,0],
		[0x15cf83a8,0],
		[0x15cf83ac,0],
		[0x15cf83b0,12],
		[0x15cf83b4,0],
		[0x15cf83b8,0],
		[0x15cf83bc,0],
		[0x15cf83c0,0],
		[0x15cf83c4,0],
		[0x15cf83c8,0],
		[0x15cf83cc,0],
		[0x15cf83e0,0],
		[0x15cf83e4,0],
		[0x15cf83e8,0],
		[0x15cf83ec,0],
		[0x15cf83f0,0],
		[0x15cf83f4,0],
		[0x15cf83f8,0],
		[0x15cf83fc,0],
		[0x15cf8400,0],
		[0x15cf8404,0],
		[0x15cf8408,0],
		[0x15cf840c,0],
		[0x15cf8420,0],
		[0x15cf8424,0],
		[0x15cf8428,0],
		[0x15cf842c,0],
		[0x15cf8468,0],
		[0x15cf846c,0],
		[0x15cf8470,0],
		[0x15cf8474,0],
		[0x15cf8478,1],
		[0x15cf847c,0],
		[0x15cf8480,0],
		[0x15cf8484,0],
		[0x15cf8490,0],
		[0x15cf8494,0],
		[0x15cf84a4,0],
		[0x15cf84a8,0],
		[0x15cf84ac,0],
		[0x15cf84b0,0],
		[0x15cf84b4,0],
		[0x15cf84b8,0],
		[0x15cf84bc,0],
		[0x15cf84c0,0],
		[0x15cf84c4,0],
		[0x15cf84d8,0],
		[0x15cf84dc,0],
		[0x15cf84e0,0],
		[0x15cf84e4,0],
		[0x15cf84e8,0],
		[0x15cf84ec,0],
		[0x15cf84f0,0],
		[0x15cf84f4,0],
		[0x15cf84f8,0],
		[0x15cf84fc,0],
		[0x15cf8508,0],
		[0x15cf850c,0],
		[0x15cf8510,0],
		[0x15cf8528,0],
		[0x15cf852c,0],
		[0x15cf8540,0],
		[0x15cf8544,0],
		[0x15cf854c,0],
		[0x15cf8550,0],
		[0x15cf8554,0],
		[0x15cf8558,0],
		[0x15cf855c,0],
		[0x15cf8560,0],
		[0x15cf8564,0],
		[0x15cf8570,0],
		[0x15cf8574,1],
		[0x15cf857c,0],
		[0x15cf8580,1],
		[0x15cf8584,0],
		[0x15cf8588,1],
		[0x15cf858c,0],
		[0x15cf85b0,0],
		[0x15cf85b4,0],
		[0x15cf85b8,0],
		[0x15cf85bc,0],
		[0x15cf85d0,0],
		[0x15cf85d4,0],
		[0x15cf85dc,0],
		[0x15cf85e0,0],
		[0x15cf85e4,4096],
		[0x15cf85e8,0],
		[0x15cf85ec,0],
		[0x15cf85f0,0],
		[0x15cf85f4,0],
		[0x15cf8610,0],
		[0x15cf8614,0],
		[0x15cf8618,13187],
		[0x15cf861c,0],
		[0x15cf8620,1],
		[0x15cf8624,0],
		[0x15cf8628,175],
		[0x15cf862c,0],
		[0x15cf8634,0],
		[0x15cf863c,0],
		[0x15cf8644,0],
		[0x15cf864c,0],
		[0x15cf8654,0],
		[0x15cf865c,0],
		[0x15cf8660,0],
		[0x15cf8664,0],
		[0x15cf8668,12],
		[0x15cf866c,0],
		[0x15cf8670,8],
		[0x15cf8674,0],
		[0x15cf8678,0],
		[0x15cf867c,0],
		[0x15cf8680,0],
		[0x15cf8684,0],
		[0x15cf8698,0],
		[0x15cf869c,0],
		[0x15cf86a0,0],
		[0x15cf86a4,0],
		[0x15cf86a8,0],
		[0x15cf86ac,0],
		[0x15cf86b0,0],
		[0x15cf86b4,0],
		[0x15cf86b8,0],
		[0x15cf86bc,0],
		[0x15cf86c0,0],
		[0x15cf86c4,0],
		[0x15cf86d8,0],
		[0x15cf86dc,0],
		[0x15cf86e0,0],
		[0x15cf86e4,0],
		[0x15cf8720,0],
		[0x15cf8724,0],
		[0x15cf8728,0],
		[0x15cf872c,0],
		[0x15cf8730,1],
		[0x15cf8734,0],
		[0x15cf8738,0],
		[0x15cf873c,0],
		[0x15cf8748,0],
		[0x15cf874c,0],
		[0x15cf875c,0],
		[0x15cf8760,646],
		[0x15cf8764,0],
		[0x15cf8768,0],
		[0x15cf876c,0],
		[0x15cf8770,0],
		[0x15cf8774,0],
		[0x15cf8778,0],
		[0x15cf877c,0],
		[0x15cf8790,0],
		[0x15cf8794,0],
		[0x15cf8798,0],
		[0x15cf879c,0],
		[0x15cf87a0,0],
		[0x15cf87a4,0],
		[0x15cf87a8,0],
		[0x15cf87ac,0],
		[0x15cf87b0,0],
		[0x15cf87b4,0],
		[0x15cf87c0,0],
		[0x15cf87c4,0],
		[0x15cf87c8,0],
		[0x15cf87e0,0],
		[0x15cf87e4,0],
		[0x15cf87f8,0],
		[0x15cf87fc,0],
		[0x15cf8804,0],
		[0x15cf8808,0],
		[0x15cf880c,0],
		[0x15cf8810,0],
		[0x15cf8814,0],
		[0x15cf8818,0],
		[0x15cf881c,0],
		[0x15cf8828,0],
		[0x15cf882c,1],
		[0x15cf8834,0],
		[0x15cf8838,0],
		[0x15cf883c,0],
		[0x15cf8840,0],
		[0x15cf8844,0],
		[0x15cf8868,0],
		[0x15cf886c,0],
		[0x15cf8870,0],
		[0x15cf8874,0],
		[0x15cf8888,0],
		[0x15cf888c,0],
		[0x15cf8894,0],
		[0x15cf8898,0],
		[0x15cf889c,0],
		[0x15cf88a0,0],
		[0x15cf88a4,0],
		[0x15cf88a8,0],
		[0x15cf88ac,0],
		[0x15cf88c8,0],
		[0x15cf88cc,0],
		[0x15cf88d0,14604],
		[0x15cf88d4,0],
		[0x15cf88d8,1],
		[0x15cf88dc,0],
		[0x15cf88e0,0],
		[0x15cf88e4,0],
		[0x15cf88ec,0],
		[0x15cf88f4,0],
		[0x15cf88fc,0],
		[0, 0]
]).
string_val([
		[0, 0]
]).
:- use_module(library(clpfd)).
:- use_module(reif).
:- style_check(-singleton).

isTrue([X, Y]):-
    X == 49.

isTrue([X|Tail]):-
    isTrue(Tail).

log(File_name, Name, Addr, Base):-
    Offset #= Addr - Base,
    open(File_name, append, Stream),
    write(Stream, Name),
    write(Stream, ':'),
    write(Stream, Offset),
    nl(Stream),
    close(Stream).

possible_task_struct(Base_addr) :-
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM2_addr, Pid_addr, Tgid_addr, Real_parent_addr, Parent_addr , Child_addr, 
           Group_leader_addr, Thread_group_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    %MM2_addr #> Base_addr + 1000,
    Tasks_addr #> MM2_addr - 100,
    %FS_struct_addr #< Base_addr + 4000,
    Tgid_addr #= Pid_addr + 4,
    Real_parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr - 8,
    Child_addr #= Parent_addr + 8,
    %FIXME This may be too strong
    Group_leader_addr #=< Child_addr +32,
    %Comm_addr #= Base_addr + 1656,
    %Tasks_addr #= Base_addr + 1072,
    %FS_struct_addr #= Base_addr + 2640,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    % make query after labeling
    MM2_val #> 0,
    integer(MM2_val),
    
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val,  Comm_addr, Comm_val ]),

    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_parent_addr, Real_parent_val, Group_leader_addr, Group_leader_val]),
    Real_parent_val #> 0,
    Group_leader_val #> 0,
    query_ts(Real_parent_val, Comm_offset, Tasks_offset),
    query_ts(Group_leader_val, Comm_offset, Tasks_offset),

    labeling([enum], [Cred_addr, Cred_val]),
    Cred_val #> 0,
    query_cred(Cred_val),

    labeling([enum], [FS_struct_addr, FS_struct_val]),
    FS_struct_val #> 0,
    %query_fs_struct(FS_struct_val),



    get_time(End),
    Time_past is End - Current,
    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    log("profile.txt", "tasks", Tasks_addr, Base_addr),
    log("profile.txt", "mm_struct", MM2_addr, Base_addr),
    log("profile.txt", "comm", Comm_addr, Base_addr),
    log("profile.txt", "parent", Parent_addr, Base_addr),
    log("profile.txt", "group_leader", Group_leader_addr, Base_addr),
    log("profile.txt", "cred", Cred_addr, Base_addr),

    
    print_nl('tasks offset', Tasks_offset),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).

possible_mm_struct(Current_addr) :- 
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    % TODO: ADD vm_area_struct *mmap
    Ptr_profile = [
        [Mmap_addr, Mmap_val],
        [Pgd_addr, Pgd_val]  
    ],
    Ulong_profile = [
        [Mmap_base_addr, Mmap_base_val],
        [Mmap_legacy_base_addr, Mmap_legacy_base_val],
        [Task_size_addr, Task_size_val],
        [High_vm_end_addr, High_vm_end_val],
        [Start_brk_addr, Start_brk_val],
        [Brk_addr, Brk_val],
        [Start_stack_addr, Start_stack_val],
        [ARG_start_addr, ARG_start_val]
    ],
    Mmap_addr #= Current_addr,


    Mmap_base_addr #> Mmap_addr,
    %FIXME mmap_base need more value constraint, because we removed mmap_legacy_base and highest_vm_end.
    Mmap_base_val #> 0x7f0000000000,
    %FIXME in old linux version, e.g., there is no mmap_legacy_base and highest_vm_enb
    %chain([Mmap_base_addr, Mmap_legacy_base_addr, Task_size_addr, High_vm_end_addr, Pgd_addr], #<),
    chain([Mmap_base_addr, Task_size_addr, Pgd_addr], #<),

    %FIXME: This rule may be too strong
    %High_vm_end_addr #= Mmap_base_addr + 24, 
    Pgd_addr #> Task_size_addr,
    Pgd_addr #=< Task_size_addr + 40,
    %FIXME: This rule may not be true for other mm_struct.
    Task_size_val #>= 0x7ffffffff000,

    %Mmap_base_addr #= Current_addr + 40,
    %Mmap_legacy_base_addr #= Current_addr + 40,
    %Task_size_addr #= Current_addr + 48,
    %High_vm_end_addr #= Current_addr + 72,

    Start_brk_addr #> Pgd_addr,
    Start_stack_val #> 0x7ff000000000,
    % TODO: Convert this to index comparison. 
    ARG_start_addr #< Current_addr + 500,
    chain([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr], #<),
    ARG_start_addr #= Start_brk_addr + 24,
    Brk_val #< 0x7ff000000000,
    ARG_start_val #> 0x7ff000000000,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),


    labeling([enum], [Mmap_addr, Mmap_val, Mmap_base_addr, Pgd_addr, Pgd_val]),
    Mmap_val #> 0,
    Pgd_val #> 0,
    
    process_create(path('python'),
                    ['subquery.py', Mmap_val, "vm_area_struct", 2],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    label([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr]),
    statistics(real_time, [End|_]),

    log("profile.txt", "mmap", Mmap_addr, Current_addr),
    log("profile.txt", "mmap_base", Mmap_base_addr, Current_addr),
    log("profile.txt", "pgd", Pgd_addr, Current_addr),
    log("profile.txt", "start_brk", Start_brk_addr, Current_addr),
    log("profile.txt", "brk", Brk_addr, Current_addr),
    log("profile.txt", "start_stack", Start_stack_addr, Current_addr),
    log("profile.txt", "arg_start", ARG_start_addr, Current_addr),
    log("profile.txt", "mm_struct time", End, Start).


possible_vm_area_struct(Base_addr, Level) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [VM_next_addr, VM_next_val],
        [VM_file_addr, VM_file_val]
    ],
    Ulong_profile = [
        [VM_start_addr, VM_start_val],
        [VM_end_addr, VM_end_val],
        [VM_flag_addr, VM_flag_val]
        %VM_pgoff is 0, and we do not consider 0 as ulong
        %[VM_pgoff_addr, VM_pgoff_val]
    ],
    VM_start_addr #>= Base_addr,
    chain([VM_start_addr, VM_end_addr, VM_next_addr, VM_flag_addr, VM_file_addr], #<),
    VM_end_addr #= VM_start_addr + 8,
    VM_next_addr #= VM_end_addr + 8,
    VM_next_addr #< Base_addr + 32,
    VM_file_addr #< Base_addr + 180,
    VM_pgoff_addr #= VM_file_addr - 8,
    %VM_file_addr #= Base_addr + 160,

    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    %FIXME: VM_flag may need value constraints.

    label([VM_next_addr, VM_next_val]),
    /*if_(Level = 2,
        call(check_vm_area_struct, VM_next_val, 1),
        1 = 1),*/
    %Level #> 1 #==> check_vm_area_struct(VM_next_val, 1),

    labeling([enum], [VM_start_addr, VM_end_addr, VM_flag_addr, VM_pgoff_addr, VM_file_addr, VM_file_val]),
    
    VM_file_val #> 0,
    process_create(path('python'),
                ['subquery.py', VM_file_val, "vm_file"],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    statistics(real_time, [End|_]),

    log("profile.txt", "vm_start", VM_start_addr, Base_addr),
    log("profile.txt", "vm_end", VM_end_addr, Base_addr),
    log("profile.txt", "vm_next", VM_next_addr, Base_addr),
    log("profile.txt", "vm_flag", VM_flag_addr, Base_addr),
    log("profile.txt", "vm_pgoff", VM_pgoff_addr, Base_addr),
    log("profile.txt", "vm_file", VM_file_addr, Base_addr),
    log("profile.txt", "vm_area_struct time", End, Start).

check_vm_area_struct(Base_addr, Level) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "vm_area_struct", Level],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vm_file(Base_addr) :-
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [Vfs_mount_addr, Vfs_mount_val],
        [Dentry_addr, Dentry_val]
    ],
    Vfs_mount_addr #> Base_addr,
    Dentry_addr #= Vfs_mount_addr + 8,
    Dentry_addr #< Base_addr + 40,
    tuples_in(Ptr_profile, Ptr),
    label([Vfs_mount_val, Dentry_val]),
    Vfs_mount_val #>0,
    Dentry_val #> 0,
    %FIXME seems like we do not need this, make sure the string is not addr=0
/*
    process_create(path('python'),
                    ['subquery.py', Vfs_mount_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vfs_mount(Base_addr) :-
    pointer(Ptr),
    Ptr_profile = [
        [Dentry_addr, Dentry_val]
    ],
    Dentry_addr #< Base_addr + 16,
    tuples_in(Ptr_profile, Ptr),
    label([Dentry_val]),
    Dentry_val #> 0,
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).
    
possible_dentry(Base_addr) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    string_val(Str),
    Ptr_profile = [
        [Dparent_addr, Dparent_val],
        [Dchild_addr, Dchild_val]
    ],
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    %log("profile.txt", "dentry addr", Base_addr, 0),
    Dparent_addr #> Base_addr,
    Dname_addr #> 0,
    Dname_addr #< Base_addr + 200,
    %Dname_addr #= Base_addr + 160,
    %FIXME This child rule is not applicable for old kernel version. 
    %chain([Dparent_addr, Dname_addr, Dchild_addr], #<),
    %Dchild_addr #< Base_addr + 200,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    labeling([enum], [Dparent_addr, Dparent_val, Dname_addr, Dchild_addr, Dchild_val]),
    Dname_offset #= Dname_addr - Base_addr,
    integer(Dname_offset),
    Dparent_val #> 0,
    
    %FIXME d_parent may not be initialized
    /*process_create(path('python'),
                ['subquery.py', Dparent_val, "d_entry", Dname_offset],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/

    %FIXME: may need to find another way for all list_head. 
    /*Dchild_offset #= Dchild_addr - Base_addr,
    integer(Dchild_offset),
    Dchild_base #= Dchild_val - Dchild_offset,
    integer(Dchild_base),
    Dchild_base #> 0,
    process_create(path('python'),
                ['subquery.py', Dchild_base, "d_entry", Dname_offset],
                [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    statistics(real_time, [End|_]).
/*
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    log("profile.txt", "d_parent", Dparent_addr, Base_addr),
    log("profile.txt", "d_child", Dchild_addr, Base_addr),
    log("profile.txt", "dentry time", End, Start).
*/
possible_d_entry(Base_addr, Dname_offset) :-
    current_predicate(string_val/1),
    string_val(Str),
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    Dname_addr #= Base_addr + Dname_offset,
    tuples_in(Str_profile, Str),
    label([Dname_addr]).

possible_list_head(Tasks_val, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_val, Tasks_addr]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],
    Comm_addr #= Tasks_val - Tasks_offset + Comm_offset,
    Tasks_addr #\= Tasks_val,
    tuples_in(Str_profile, Str),
    tuples_in(Ptr_profile, Ptr),
    label([Comm_addr]).

possible_ts(Base_addr, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_addr, Tasks_val]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],

    Comm_addr #= Base_addr + Comm_offset,
    Tasks_addr #= Base_addr + Tasks_offset,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),

    label([Tasks_val]),
    
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "list_head", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_cred(Base_addr) :-
    statistics(real_time, [Start|_]),

    int(Int),
    long(Ulg),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3],
        [Addr4, Val4],
        [Addr5, Val5],
        [Addr6, Val6],
        [Addr7, Val7],
        [Addr8, Val8],
        [Addr9, Val9]
    ],
    %FIXME For now, this rule is hard-coded because we do not consider 0 as a unsign long number. 
    %So that for cred whos val10 is 0, this rule does not apply.
    /*Ulong_profile = [
        [Addr10, Val10],
        [Addr11, Val11]
    ],*/
    Addr1 #> Base_addr,
    %chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9, Addr10, Addr11], #<),
    chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9], #<),
    Addr1 #= Base_addr + 4,
    Addr9 #= Addr1 + 32,
    %Addr11 #< Base_addr + 120,
    tuples_in(Int_profile, Int),
    %tuples_in(Ulong_profile, Ulg),
    statistics(real_time, [End|_]),
    labeling([enum], [Addr1, Addr2, Addr5, Addr6]),
    log("profile.txt", "cred time", End, Start),
    log('profile.txt', "uid", Addr1, Base_addr),
    log('profile.txt', "gid", Addr2, Base_addr),
    log('profile.txt', "euid", Addr5, Base_addr),
    log('profile.txt', "egid", Addr6, Base_addr).

possible_fs_struct(Base_addr) :-
    statistics(real_time, [Start|_]),
    int(Int),
    pointer(Ptr),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3]
    ],
    Ptr_profile = [
        [Root_addr, Root_val],
        [PWD_addr, PWD_val]
    ],
    Addr1 #>= Base_addr,
    chain([Addr1, Addr2, Addr3, Root_addr, PWD_addr], #<),
    PWD_addr #= Root_addr + 16,
    PWD_addr #< Base_addr + 50,
    tuples_in(Int_profile, Int),
    tuples_in(Ptr_profile, Ptr),
    label([Root_addr, Root_val]),
    
    process_create(path('python'),
                    ['subquery.py', Root_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    label([PWD_addr, PWD_val]),
    process_create(path('python'),
                    ['subquery.py', PWD_val, "dentry"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    statistics(real_time, [End|_]),
    log("profile.txt", "fs time", End, Start),
    log('profile.txt', "Root", Root_addr, Base_addr),
    log('profile.txt', "pwd", PWD_addr, Base_addr).
