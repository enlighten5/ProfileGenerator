:- use_module(library(clpfd)).
:- style_check(-singleton).
pointer([
		[0x13e00008,0],
		[0x13e00010,0],
		[0x13e00018,0],
		[0x13e00020,0],
		[0x13e00028,0],
		[0x13e00030,0],
		[0x13e00038,0],
		[0x13e00040,0],
		[0x13e00048,0],
		[0x13e00050,0],
		[0x13e00058,0],
		[0x13e00060,0],
		[0x13e00068,0],
		[0x13e00070,0],
		[0x13e00078,0],
		[0x13e00080,0],
		[0x13e00088,0],
		[0x13e00090,0],
		[0x13e00098,0],
		[0x13e000a0,0],
		[0x13e000a8,0],
		[0x13e000b0,0],
		[0x13e000b8,0],
		[0x13e000c0,0],
		[0x13e000c8,0],
		[0x13e000d0,0],
		[0x13e000d8,0],
		[0x13e000e0,0],
		[0x13e000e8,0],
		[0x13e000f0,0],
		[0x13e000f8,0],
		[0x13e00100,0],
		[0x13e00108,0],
		[0x13e00110,0],
		[0x13e00118,0],
		[0x13e00120,0],
		[0x13e00128,0],
		[0x13e00130,0],
		[0x13e00138,0],
		[0x13e00140,0],
		[0x13e00148,0],
		[0x13e00150,0],
		[0x13e00158,0],
		[0x13e00160,0],
		[0x13e00168,0],
		[0x13e00170,0],
		[0x13e00178,0],
		[0x13e00180,0],
		[0x13e00188,0],
		[0x13e00190,0],
		[0x13e00198,0],
		[0x13e001a0,0],
		[0x13e001a8,0],
		[0x13e001b0,0],
		[0x13e001b8,0],
		[0x13e001c0,0],
		[0x13e001c8,0],
		[0x13e001d0,0],
		[0x13e001d8,0],
		[0x13e001e0,0],
		[0x13e001e8,0],
		[0x13e001f0,0],
		[0x13e001f8,0],
		[0x13e00200,0],
		[0x13e00208,0],
		[0x13e00210,0],
		[0x13e00218,0],
		[0x13e00220,0],
		[0x13e00228,0],
		[0x13e00230,0],
		[0x13e00238,0],
		[0x13e00240,0],
		[0x13e00248,0],
		[0x13e00250,0],
		[0x13e00258,0],
		[0x13e00260,0],
		[0x13e00268,0],
		[0x13e00270,0],
		[0x13e00278,0],
		[0x13e00280,0],
		[0x13e00288,0],
		[0x13e00290,0],
		[0x13e00298,0],
		[0x13e002a0,0],
		[0x13e002a8,0],
		[0x13e002b0,0],
		[0x13e002b8,0],
		[0x13e002c0,0],
		[0x13e002c8,0],
		[0x13e002d0,0],
		[0x13e002d8,0],
		[0x13e002e0,0],
		[0x13e002e8,0],
		[0x13e002f0,0],
		[0x13e002f8,0],
		[0x13e00300,0],
		[0x13e00308,0],
		[0x13e00310,0],
		[0x13e00318,0],
		[0x13e00320,0],
		[0x13e00328,0],
		[0x13e00330,0],
		[0x13e00338,0],
		[0x13e00340,0],
		[0x13e00348,0],
		[0x13e00350,0],
		[0x13e00358,0],
		[0x13e00360,0],
		[0x13e00368,0],
		[0x13e00370,0],
		[0x13e00378,0],
		[0x13e00380,0],
		[0x13e00388,0],
		[0x13e00390,0],
		[0x13e00398,0],
		[0x13e003a0,0],
		[0x13e003a8,0],
		[0x13e003b0,0],
		[0x13e003b8,0],
		[0x13e003c0,0],
		[0x13e003c8,0],
		[0x13e003d0,0],
		[0x13e003d8,0],
		[0x13e003e0,0],
		[0x13e003e8,0],
		[0x13e003f0,0],
		[0x13e003f8,0],
		[0x13e00400,0],
		[0x13e00408,0],
		[0x13e00410,0],
		[0x13e00418,0],
		[0x13e00420,0],
		[0x13e00428,0],
		[0x13e00430,0],
		[0x13e00438,0],
		[0x13e00440,0],
		[0x13e00448,0],
		[0x13e00450,0],
		[0x13e00458,0],
		[0x13e00460,0],
		[0x13e00468,0],
		[0x13e00470,0],
		[0x13e00478,0],
		[0x13e00480,0],
		[0x13e00488,0],
		[0x13e00490,0],
		[0x13e00498,0],
		[0x13e004a0,0],
		[0x13e004a8,0],
		[0x13e004b0,0],
		[0x13e004b8,0],
		[0x13e004c0,0],
		[0x13e004c8,0],
		[0x13e004d0,0],
		[0x13e004d8,0],
		[0x13e004e0,0],
		[0x13e004e8,0],
		[0x13e004f0,0],
		[0x13e004f8,0],
		[0x13e00500,0],
		[0x13e00508,0],
		[0x13e00510,0],
		[0x13e00518,0],
		[0x13e00520,0],
		[0x13e00528,0],
		[0x13e00530,0],
		[0x13e00538,0],
		[0x13e00540,0],
		[0x13e00548,0],
		[0x13e00550,0],
		[0x13e00558,0],
		[0x13e00560,0],
		[0x13e00568,0],
		[0x13e00570,0],
		[0x13e00578,0],
		[0x13e00580,0],
		[0x13e00588,0],
		[0x13e00590,0],
		[0x13e00598,0],
		[0x13e005a0,0],
		[0x13e005a8,0],
		[0x13e005b0,0],
		[0x13e005b8,0],
		[0x13e005c0,0],
		[0x13e005c8,0],
		[0x13e005d0,0],
		[0x13e005d8,0],
		[0x13e005e0,0],
		[0x13e005e8,0],
		[0x13e005f0,0],
		[0x13e005f8,0],
		[0x13e00600,0],
		[0x13e00608,0],
		[0x13e00610,0],
		[0x13e00618,0],
		[0x13e00620,0],
		[0x13e00628,0],
		[0x13e00630,0],
		[0x13e00638,0],
		[0x13e00640,0],
		[0x13e00648,0],
		[0x13e00650,0],
		[0x13e00658,0],
		[0x13e00660,0],
		[0x13e00668,0],
		[0x13e00670,0],
		[0x13e00678,0],
		[0x13e00680,0],
		[0x13e00688,0],
		[0x13e00690,0],
		[0x13e00698,0],
		[0x13e006a0,0],
		[0x13e006a8,0],
		[0x13e006b0,0],
		[0x13e006b8,0],
		[0x13e006c0,0],
		[0x13e006c8,0],
		[0x13e006d0,0],
		[0x13e006d8,0],
		[0x13e006e0,0],
		[0x13e006e8,0],
		[0x13e006f0,0],
		[0x13e006f8,0],
		[0x13e00700,0],
		[0x13e00708,0],
		[0x13e00710,0],
		[0x13e00718,0],
		[0x13e00720,0],
		[0x13e00728,0],
		[0x13e00730,0],
		[0x13e00738,0],
		[0x13e00740,0],
		[0x13e00748,0],
		[0x13e00750,0],
		[0x13e00758,0],
		[0x13e00760,0],
		[0x13e00768,0],
		[0x13e00770,0],
		[0x13e00778,0],
		[0x13e00780,0],
		[0x13e00788,0],
		[0x13e00790,0],
		[0x13e00798,0],
		[0x13e007a0,0],
		[0x13e007a8,0],
		[0x13e007b0,0],
		[0x13e007b8,0],
		[0x13e007c0,0],
		[0x13e007c8,0],
		[0x13e007d0,0],
		[0x13e007d8,0],
		[0x13e007e0,0],
		[0x13e007e8,0],
		[0x13e007f0,0],
		[0x13e007f8,0],
		[0x13e00800,0],
		[0x13e00808,0],
		[0x13e00810,0],
		[0x13e00818,0],
		[0x13e00820,0],
		[0x13e00828,0],
		[0x13e00830,0],
		[0x13e00838,0],
		[0x13e00840,0],
		[0x13e00848,0],
		[0x13e00850,0],
		[0x13e00858,0],
		[0x13e00860,0],
		[0x13e00868,0],
		[0x13e00870,0],
		[0x13e00878,0],
		[0x13e00880,0],
		[0x13e00888,0],
		[0x13e00890,0],
		[0x13e00898,0],
		[0x13e008a0,0],
		[0x13e008a8,0],
		[0x13e008b0,0],
		[0x13e008b8,0],
		[0x13e008c0,0],
		[0x13e008c8,0],
		[0x13e008d0,0],
		[0x13e008d8,0],
		[0x13e008e0,0],
		[0x13e008e8,0],
		[0x13e008f0,0],
		[0x13e008f8,0],
		[0x13e00900,0],
		[0x13e00908,0],
		[0x13e00910,0],
		[0x13e00918,0],
		[0x13e00920,0],
		[0x13e00928,0],
		[0x13e00930,0],
		[0x13e00938,0],
		[0x13e00940,0],
		[0x13e00948,0],
		[0x13e00950,0],
		[0x13e00958,0],
		[0x13e00960,0],
		[0x13e00968,0],
		[0x13e00970,0],
		[0x13e00978,0],
		[0x13e00980,0],
		[0x13e00988,0],
		[0x13e00990,0],
		[0x13e00998,0],
		[0x13e009a0,0],
		[0x13e009a8,0],
		[0x13e009b0,0],
		[0x13e009b8,0],
		[0x13e009c0,0],
		[0x13e009c8,0],
		[0x13e009d0,0],
		[0x13e009d8,0],
		[0x13e009e0,0],
		[0x13e009e8,0],
		[0x13e009f0,0],
		[0x13e009f8,0],
		[0x13e00a00,0],
		[0x13e00a08,0],
		[0x13e00a10,0],
		[0x13e00a18,0],
		[0x13e00a20,0],
		[0x13e00a28,0],
		[0x13e00a30,0],
		[0x13e00a38,0],
		[0x13e00a40,0],
		[0x13e00a48,0],
		[0x13e00a50,0],
		[0x13e00a58,0],
		[0x13e00a60,0],
		[0x13e00a68,0],
		[0x13e00a70,0],
		[0x13e00a78,0],
		[0x13e00a80,0],
		[0x13e00a88,0],
		[0x13e00a90,0],
		[0x13e00a98,0],
		[0x13e00aa0,0],
		[0x13e00aa8,0],
		[0x13e00ab0,0],
		[0x13e00ab8,0],
		[0x13e00ac0,0],
		[0x13e00ac8,0],
		[0x13e00ad0,0],
		[0x13e00ad8,0],
		[0x13e00ae0,0],
		[0x13e00ae8,0],
		[0x13e00af0,0],
		[0x13e00af8,0],
		[0x13e00b00,0],
		[0x13e00b08,0],
		[0x13e00b10,0],
		[0x13e00b18,0],
		[0x13e00b20,0],
		[0x13e00b28,0],
		[0x13e00b30,0],
		[0x13e00b38,0],
		[0x13e00b40,0],
		[0x13e00b48,0],
		[0x13e00b50,0],
		[0x13e00b58,0],
		[0x13e00b60,0],
		[0x13e00b68,0],
		[0x13e00b70,0],
		[0x13e00b78,0],
		[0x13e00b80,0],
		[0x13e00b88,0],
		[0x13e00b90,0],
		[0x13e00b98,0],
		[0x13e00ba0,0],
		[0x13e00ba8,0],
		[0x13e00bb0,0],
		[0x13e00bb8,0],
		[0x13e00bc0,0],
		[0x13e00bc8,0],
		[0x13e00bd0,0],
		[0x13e00bd8,0],
		[0x13e00be0,0],
		[0x13e00be8,0],
		[0x13e00bf0,0],
		[0x13e00bf8,0],
		[0x13e00c00,0],
		[0x13e00c08,0],
		[0x13e00c10,0],
		[0x13e00c18,0],
		[0x13e00c20,0],
		[0x13e00c28,0],
		[0x13e00c30,0],
		[0x13e00c38,0],
		[0x13e00c40,0],
		[0x13e00c48,0],
		[0x13e00c50,0],
		[0x13e00c58,0],
		[0x13e00c60,0],
		[0x13e00c68,0],
		[0x13e00c70,0],
		[0x13e00c78,0],
		[0x13e00c80,0],
		[0x13e00c88,0],
		[0x13e00c90,0],
		[0x13e00c98,0],
		[0x13e00ca0,0],
		[0x13e00ca8,0],
		[0x13e00cb0,0],
		[0x13e00cb8,0],
		[0x13e00cc0,0],
		[0x13e00cc8,0],
		[0x13e00cd0,0],
		[0x13e00cd8,0],
		[0x13e00ce0,0],
		[0x13e00ce8,0],
		[0x13e00cf0,0],
		[0x13e00cf8,0],
		[0x13e00d00,0],
		[0x13e00d08,0],
		[0x13e00d10,0],
		[0x13e00d18,0],
		[0x13e00d20,0],
		[0x13e00d28,0],
		[0x13e00d30,0],
		[0x13e00d38,0],
		[0x13e00d40,0],
		[0x13e00d48,0],
		[0x13e00d50,0],
		[0x13e00d58,0],
		[0x13e00d60,0],
		[0x13e00d68,0],
		[0x13e00d70,0],
		[0x13e00d78,0],
		[0x13e00d80,0],
		[0x13e00d88,0],
		[0x13e00d90,0],
		[0x13e00d98,0],
		[0x13e00da0,0],
		[0x13e00da8,0],
		[0x13e00db0,0],
		[0x13e00db8,0],
		[0x13e00dc0,0],
		[0x13e00dc8,0],
		[0x13e00dd0,0],
		[0x13e00dd8,0],
		[0x13e00de0,0],
		[0x13e00de8,0],
		[0x13e00df0,0],
		[0x13e00df8,0],
		[0x13e00e00,0],
		[0x13e00e08,0],
		[0x13e00e10,0],
		[0x13e00e18,0],
		[0x13e00e20,0],
		[0x13e00e28,0],
		[0x13e00e30,0],
		[0x13e00e38,0],
		[0x13e00e40,0],
		[0x13e00e48,0],
		[0x13e00e50,0],
		[0x13e00e58,0],
		[0x13e00e60,0],
		[0x13e00e68,0],
		[0x13e00e70,0],
		[0x13e00e78,0],
		[0x13e00e80,0],
		[0x13e00e88,0],
		[0x13e00e90,0],
		[0x13e00e98,0],
		[0x13e00ea0,0],
		[0x13e00ea8,0],
		[0x13e00eb0,0],
		[0x13e00eb8,0],
		[0x13e00ec0,0],
		[0x13e00ec8,0],
		[0x13e00ed0,0],
		[0x13e00ed8,0],
		[0x13e00ee0,0],
		[0x13e00ee8,0],
		[0x13e00ef0,0],
		[0x13e00ef8,0],
		[0x13e00f00,0],
		[0x13e00f08,0],
		[0x13e00f10,0],
		[0x13e00f18,0],
		[0x13e00f20,0],
		[0x13e00f28,0],
		[0x13e00f30,0],
		[0x13e00f38,0],
		[0x13e00f40,0],
		[0x13e00f48,0],
		[0x13e00f50,0],
		[0x13e00f58,0],
		[0x13e00f60,0],
		[0x13e00f68,0],
		[0x13e00f70,0],
		[0x13e00f78,0],
		[0x13e00f80,0],
		[0x13e00f88,0],
		[0x13e00f90,0],
		[0x13e00f98,0],
		[0x13e00fa0,0],
		[0x13e00fa8,0],
		[0x13e00fb0,0],
		[0x13e00fb8,0],
		[0x13e00fc0,0],
		[0x13e00fc8,0],
		[0x13e00fd0,0],
		[0x13e00fd8,0],
		[0x13e00fe0,0],
		[0x13e00fe8,0],
		[0x13e00ff0,0],
		[0x13e00ff8,0],
		[0, 0]
]).
unknown([
		[0, 0]
]).
long([
		[0x13e00000,1470918301],
		[0, 0]
]).
int([
		[0x13e00004,0],
		[0x13e00008,0],
		[0x13e0000c,0],
		[0x13e00010,0],
		[0x13e00014,0],
		[0x13e00018,0],
		[0x13e0001c,0],
		[0x13e00020,0],
		[0x13e00024,0],
		[0x13e00028,0],
		[0x13e0002c,0],
		[0x13e00030,0],
		[0x13e00034,0],
		[0x13e00038,0],
		[0x13e0003c,0],
		[0x13e00040,0],
		[0x13e00044,0],
		[0x13e00048,0],
		[0x13e0004c,0],
		[0x13e00050,0],
		[0x13e00054,0],
		[0x13e00058,0],
		[0x13e0005c,0],
		[0x13e00060,0],
		[0x13e00064,0],
		[0x13e00068,0],
		[0x13e0006c,0],
		[0x13e00070,0],
		[0x13e00074,0],
		[0x13e00078,0],
		[0x13e0007c,0],
		[0x13e00080,0],
		[0x13e00084,0],
		[0x13e00088,0],
		[0x13e0008c,0],
		[0x13e00090,0],
		[0x13e00094,0],
		[0x13e00098,0],
		[0x13e0009c,0],
		[0x13e000a0,0],
		[0x13e000a4,0],
		[0x13e000a8,0],
		[0x13e000ac,0],
		[0x13e000b0,0],
		[0x13e000b4,0],
		[0x13e000b8,0],
		[0x13e000bc,0],
		[0x13e000c0,0],
		[0x13e000c4,0],
		[0x13e000c8,0],
		[0x13e000cc,0],
		[0x13e000d0,0],
		[0x13e000d4,0],
		[0x13e000d8,0],
		[0x13e000dc,0],
		[0x13e000e0,0],
		[0x13e000e4,0],
		[0x13e000e8,0],
		[0x13e000ec,0],
		[0x13e000f0,0],
		[0x13e000f4,0],
		[0x13e000f8,0],
		[0x13e000fc,0],
		[0x13e00100,0],
		[0x13e00104,0],
		[0x13e00108,0],
		[0x13e0010c,0],
		[0x13e00110,0],
		[0x13e00114,0],
		[0x13e00118,0],
		[0x13e0011c,0],
		[0x13e00120,0],
		[0x13e00124,0],
		[0x13e00128,0],
		[0x13e0012c,0],
		[0x13e00130,0],
		[0x13e00134,0],
		[0x13e00138,0],
		[0x13e0013c,0],
		[0x13e00140,0],
		[0x13e00144,0],
		[0x13e00148,0],
		[0x13e0014c,0],
		[0x13e00150,0],
		[0x13e00154,0],
		[0x13e00158,0],
		[0x13e0015c,0],
		[0x13e00160,0],
		[0x13e00164,0],
		[0x13e00168,0],
		[0x13e0016c,0],
		[0x13e00170,0],
		[0x13e00174,0],
		[0x13e00178,0],
		[0x13e0017c,0],
		[0x13e00180,0],
		[0x13e00184,0],
		[0x13e00188,0],
		[0x13e0018c,0],
		[0x13e00190,0],
		[0x13e00194,0],
		[0x13e00198,0],
		[0x13e0019c,0],
		[0x13e001a0,0],
		[0x13e001a4,0],
		[0x13e001a8,0],
		[0x13e001ac,0],
		[0x13e001b0,0],
		[0x13e001b4,0],
		[0x13e001b8,0],
		[0x13e001bc,0],
		[0x13e001c0,0],
		[0x13e001c4,0],
		[0x13e001c8,0],
		[0x13e001cc,0],
		[0x13e001d0,0],
		[0x13e001d4,0],
		[0x13e001d8,0],
		[0x13e001dc,0],
		[0x13e001e0,0],
		[0x13e001e4,0],
		[0x13e001e8,0],
		[0x13e001ec,0],
		[0x13e001f0,0],
		[0x13e001f4,0],
		[0x13e001f8,0],
		[0x13e001fc,0],
		[0x13e00200,0],
		[0x13e00204,0],
		[0x13e00208,0],
		[0x13e0020c,0],
		[0x13e00210,0],
		[0x13e00214,0],
		[0x13e00218,0],
		[0x13e0021c,0],
		[0x13e00220,0],
		[0x13e00224,0],
		[0x13e00228,0],
		[0x13e0022c,0],
		[0x13e00230,0],
		[0x13e00234,0],
		[0x13e00238,0],
		[0x13e0023c,0],
		[0x13e00240,0],
		[0x13e00244,0],
		[0x13e00248,0],
		[0x13e0024c,0],
		[0x13e00250,0],
		[0x13e00254,0],
		[0x13e00258,0],
		[0x13e0025c,0],
		[0x13e00260,0],
		[0x13e00264,0],
		[0x13e00268,0],
		[0x13e0026c,0],
		[0x13e00270,0],
		[0x13e00274,0],
		[0x13e00278,0],
		[0x13e0027c,0],
		[0x13e00280,0],
		[0x13e00284,0],
		[0x13e00288,0],
		[0x13e0028c,0],
		[0x13e00290,0],
		[0x13e00294,0],
		[0x13e00298,0],
		[0x13e0029c,0],
		[0x13e002a0,0],
		[0x13e002a4,0],
		[0x13e002a8,0],
		[0x13e002ac,0],
		[0x13e002b0,0],
		[0x13e002b4,0],
		[0x13e002b8,0],
		[0x13e002bc,0],
		[0x13e002c0,0],
		[0x13e002c4,0],
		[0x13e002c8,0],
		[0x13e002cc,0],
		[0x13e002d0,0],
		[0x13e002d4,0],
		[0x13e002d8,0],
		[0x13e002dc,0],
		[0x13e002e0,0],
		[0x13e002e4,0],
		[0x13e002e8,0],
		[0x13e002ec,0],
		[0x13e002f0,0],
		[0x13e002f4,0],
		[0x13e002f8,0],
		[0x13e002fc,0],
		[0x13e00300,0],
		[0x13e00304,0],
		[0x13e00308,0],
		[0x13e0030c,0],
		[0x13e00310,0],
		[0x13e00314,0],
		[0x13e00318,0],
		[0x13e0031c,0],
		[0x13e00320,0],
		[0x13e00324,0],
		[0x13e00328,0],
		[0x13e0032c,0],
		[0x13e00330,0],
		[0x13e00334,0],
		[0x13e00338,0],
		[0x13e0033c,0],
		[0x13e00340,0],
		[0x13e00344,0],
		[0x13e00348,0],
		[0x13e0034c,0],
		[0x13e00350,0],
		[0x13e00354,0],
		[0x13e00358,0],
		[0x13e0035c,0],
		[0x13e00360,0],
		[0x13e00364,0],
		[0x13e00368,0],
		[0x13e0036c,0],
		[0x13e00370,0],
		[0x13e00374,0],
		[0x13e00378,0],
		[0x13e0037c,0],
		[0x13e00380,0],
		[0x13e00384,0],
		[0x13e00388,0],
		[0x13e0038c,0],
		[0x13e00390,0],
		[0x13e00394,0],
		[0x13e00398,0],
		[0x13e0039c,0],
		[0x13e003a0,0],
		[0x13e003a4,0],
		[0x13e003a8,0],
		[0x13e003ac,0],
		[0x13e003b0,0],
		[0x13e003b4,0],
		[0x13e003b8,0],
		[0x13e003bc,0],
		[0x13e003c0,0],
		[0x13e003c4,0],
		[0x13e003c8,0],
		[0x13e003cc,0],
		[0x13e003d0,0],
		[0x13e003d4,0],
		[0x13e003d8,0],
		[0x13e003dc,0],
		[0x13e003e0,0],
		[0x13e003e4,0],
		[0x13e003e8,0],
		[0x13e003ec,0],
		[0x13e003f0,0],
		[0x13e003f4,0],
		[0x13e003f8,0],
		[0x13e003fc,0],
		[0x13e00400,0],
		[0x13e00404,0],
		[0x13e00408,0],
		[0x13e0040c,0],
		[0x13e00410,0],
		[0x13e00414,0],
		[0x13e00418,0],
		[0x13e0041c,0],
		[0x13e00420,0],
		[0x13e00424,0],
		[0x13e00428,0],
		[0x13e0042c,0],
		[0x13e00430,0],
		[0x13e00434,0],
		[0x13e00438,0],
		[0x13e0043c,0],
		[0x13e00440,0],
		[0x13e00444,0],
		[0x13e00448,0],
		[0x13e0044c,0],
		[0x13e00450,0],
		[0x13e00454,0],
		[0x13e00458,0],
		[0x13e0045c,0],
		[0x13e00460,0],
		[0x13e00464,0],
		[0x13e00468,0],
		[0x13e0046c,0],
		[0x13e00470,0],
		[0x13e00474,0],
		[0x13e00478,0],
		[0x13e0047c,0],
		[0x13e00480,0],
		[0x13e00484,0],
		[0x13e00488,0],
		[0x13e0048c,0],
		[0x13e00490,0],
		[0x13e00494,0],
		[0x13e00498,0],
		[0x13e0049c,0],
		[0x13e004a0,0],
		[0x13e004a4,0],
		[0x13e004a8,0],
		[0x13e004ac,0],
		[0x13e004b0,0],
		[0x13e004b4,0],
		[0x13e004b8,0],
		[0x13e004bc,0],
		[0x13e004c0,0],
		[0x13e004c4,0],
		[0x13e004c8,0],
		[0x13e004cc,0],
		[0x13e004d0,0],
		[0x13e004d4,0],
		[0x13e004d8,0],
		[0x13e004dc,0],
		[0x13e004e0,0],
		[0x13e004e4,0],
		[0x13e004e8,0],
		[0x13e004ec,0],
		[0x13e004f0,0],
		[0x13e004f4,0],
		[0x13e004f8,0],
		[0x13e004fc,0],
		[0x13e00500,0],
		[0x13e00504,0],
		[0x13e00508,0],
		[0x13e0050c,0],
		[0x13e00510,0],
		[0x13e00514,0],
		[0x13e00518,0],
		[0x13e0051c,0],
		[0x13e00520,0],
		[0x13e00524,0],
		[0x13e00528,0],
		[0x13e0052c,0],
		[0x13e00530,0],
		[0x13e00534,0],
		[0x13e00538,0],
		[0x13e0053c,0],
		[0x13e00540,0],
		[0x13e00544,0],
		[0x13e00548,0],
		[0x13e0054c,0],
		[0x13e00550,0],
		[0x13e00554,0],
		[0x13e00558,0],
		[0x13e0055c,0],
		[0x13e00560,0],
		[0x13e00564,0],
		[0x13e00568,0],
		[0x13e0056c,0],
		[0x13e00570,0],
		[0x13e00574,0],
		[0x13e00578,0],
		[0x13e0057c,0],
		[0x13e00580,0],
		[0x13e00584,0],
		[0x13e00588,0],
		[0x13e0058c,0],
		[0x13e00590,0],
		[0x13e00594,0],
		[0x13e00598,0],
		[0x13e0059c,0],
		[0x13e005a0,0],
		[0x13e005a4,0],
		[0x13e005a8,0],
		[0x13e005ac,0],
		[0x13e005b0,0],
		[0x13e005b4,0],
		[0x13e005b8,0],
		[0x13e005bc,0],
		[0x13e005c0,0],
		[0x13e005c4,0],
		[0x13e005c8,0],
		[0x13e005cc,0],
		[0x13e005d0,0],
		[0x13e005d4,0],
		[0x13e005d8,0],
		[0x13e005dc,0],
		[0x13e005e0,0],
		[0x13e005e4,0],
		[0x13e005e8,0],
		[0x13e005ec,0],
		[0x13e005f0,0],
		[0x13e005f4,0],
		[0x13e005f8,0],
		[0x13e005fc,0],
		[0x13e00600,0],
		[0x13e00604,0],
		[0x13e00608,0],
		[0x13e0060c,0],
		[0x13e00610,0],
		[0x13e00614,0],
		[0x13e00618,0],
		[0x13e0061c,0],
		[0x13e00620,0],
		[0x13e00624,0],
		[0x13e00628,0],
		[0x13e0062c,0],
		[0x13e00630,0],
		[0x13e00634,0],
		[0x13e00638,0],
		[0x13e0063c,0],
		[0x13e00640,0],
		[0x13e00644,0],
		[0x13e00648,0],
		[0x13e0064c,0],
		[0x13e00650,0],
		[0x13e00654,0],
		[0x13e00658,0],
		[0x13e0065c,0],
		[0x13e00660,0],
		[0x13e00664,0],
		[0x13e00668,0],
		[0x13e0066c,0],
		[0x13e00670,0],
		[0x13e00674,0],
		[0x13e00678,0],
		[0x13e0067c,0],
		[0x13e00680,0],
		[0x13e00684,0],
		[0x13e00688,0],
		[0x13e0068c,0],
		[0x13e00690,0],
		[0x13e00694,0],
		[0x13e00698,0],
		[0x13e0069c,0],
		[0x13e006a0,0],
		[0x13e006a4,0],
		[0x13e006a8,0],
		[0x13e006ac,0],
		[0x13e006b0,0],
		[0x13e006b4,0],
		[0x13e006b8,0],
		[0x13e006bc,0],
		[0x13e006c0,0],
		[0x13e006c4,0],
		[0x13e006c8,0],
		[0x13e006cc,0],
		[0x13e006d0,0],
		[0x13e006d4,0],
		[0x13e006d8,0],
		[0x13e006dc,0],
		[0x13e006e0,0],
		[0x13e006e4,0],
		[0x13e006e8,0],
		[0x13e006ec,0],
		[0x13e006f0,0],
		[0x13e006f4,0],
		[0x13e006f8,0],
		[0x13e006fc,0],
		[0x13e00700,0],
		[0x13e00704,0],
		[0x13e00708,0],
		[0x13e0070c,0],
		[0x13e00710,0],
		[0x13e00714,0],
		[0x13e00718,0],
		[0x13e0071c,0],
		[0x13e00720,0],
		[0x13e00724,0],
		[0x13e00728,0],
		[0x13e0072c,0],
		[0x13e00730,0],
		[0x13e00734,0],
		[0x13e00738,0],
		[0x13e0073c,0],
		[0x13e00740,0],
		[0x13e00744,0],
		[0x13e00748,0],
		[0x13e0074c,0],
		[0x13e00750,0],
		[0x13e00754,0],
		[0x13e00758,0],
		[0x13e0075c,0],
		[0x13e00760,0],
		[0x13e00764,0],
		[0x13e00768,0],
		[0x13e0076c,0],
		[0x13e00770,0],
		[0x13e00774,0],
		[0x13e00778,0],
		[0x13e0077c,0],
		[0x13e00780,0],
		[0x13e00784,0],
		[0x13e00788,0],
		[0x13e0078c,0],
		[0x13e00790,0],
		[0x13e00794,0],
		[0x13e00798,0],
		[0x13e0079c,0],
		[0x13e007a0,0],
		[0x13e007a4,0],
		[0x13e007a8,0],
		[0x13e007ac,0],
		[0x13e007b0,0],
		[0x13e007b4,0],
		[0x13e007b8,0],
		[0x13e007bc,0],
		[0x13e007c0,0],
		[0x13e007c4,0],
		[0x13e007c8,0],
		[0x13e007cc,0],
		[0x13e007d0,0],
		[0x13e007d4,0],
		[0x13e007d8,0],
		[0x13e007dc,0],
		[0x13e007e0,0],
		[0x13e007e4,0],
		[0x13e007e8,0],
		[0x13e007ec,0],
		[0x13e007f0,0],
		[0x13e007f4,0],
		[0x13e007f8,0],
		[0x13e007fc,0],
		[0x13e00800,0],
		[0x13e00804,0],
		[0x13e00808,0],
		[0x13e0080c,0],
		[0x13e00810,0],
		[0x13e00814,0],
		[0x13e00818,0],
		[0x13e0081c,0],
		[0x13e00820,0],
		[0x13e00824,0],
		[0x13e00828,0],
		[0x13e0082c,0],
		[0x13e00830,0],
		[0x13e00834,0],
		[0x13e00838,0],
		[0x13e0083c,0],
		[0x13e00840,0],
		[0x13e00844,0],
		[0x13e00848,0],
		[0x13e0084c,0],
		[0x13e00850,0],
		[0x13e00854,0],
		[0x13e00858,0],
		[0x13e0085c,0],
		[0x13e00860,0],
		[0x13e00864,0],
		[0x13e00868,0],
		[0x13e0086c,0],
		[0x13e00870,0],
		[0x13e00874,0],
		[0x13e00878,0],
		[0x13e0087c,0],
		[0x13e00880,0],
		[0x13e00884,0],
		[0x13e00888,0],
		[0x13e0088c,0],
		[0x13e00890,0],
		[0x13e00894,0],
		[0x13e00898,0],
		[0x13e0089c,0],
		[0x13e008a0,0],
		[0x13e008a4,0],
		[0x13e008a8,0],
		[0x13e008ac,0],
		[0x13e008b0,0],
		[0x13e008b4,0],
		[0x13e008b8,0],
		[0x13e008bc,0],
		[0x13e008c0,0],
		[0x13e008c4,0],
		[0x13e008c8,0],
		[0x13e008cc,0],
		[0x13e008d0,0],
		[0x13e008d4,0],
		[0x13e008d8,0],
		[0x13e008dc,0],
		[0x13e008e0,0],
		[0x13e008e4,0],
		[0x13e008e8,0],
		[0x13e008ec,0],
		[0x13e008f0,0],
		[0x13e008f4,0],
		[0x13e008f8,0],
		[0x13e008fc,0],
		[0x13e00900,0],
		[0x13e00904,0],
		[0x13e00908,0],
		[0x13e0090c,0],
		[0x13e00910,0],
		[0x13e00914,0],
		[0x13e00918,0],
		[0x13e0091c,0],
		[0x13e00920,0],
		[0x13e00924,0],
		[0x13e00928,0],
		[0x13e0092c,0],
		[0x13e00930,0],
		[0x13e00934,0],
		[0x13e00938,0],
		[0x13e0093c,0],
		[0x13e00940,0],
		[0x13e00944,0],
		[0x13e00948,0],
		[0x13e0094c,0],
		[0x13e00950,0],
		[0x13e00954,0],
		[0x13e00958,0],
		[0x13e0095c,0],
		[0x13e00960,0],
		[0x13e00964,0],
		[0x13e00968,0],
		[0x13e0096c,0],
		[0x13e00970,0],
		[0x13e00974,0],
		[0x13e00978,0],
		[0x13e0097c,0],
		[0x13e00980,0],
		[0x13e00984,0],
		[0x13e00988,0],
		[0x13e0098c,0],
		[0x13e00990,0],
		[0x13e00994,0],
		[0x13e00998,0],
		[0x13e0099c,0],
		[0x13e009a0,0],
		[0x13e009a4,0],
		[0x13e009a8,0],
		[0x13e009ac,0],
		[0x13e009b0,0],
		[0x13e009b4,0],
		[0x13e009b8,0],
		[0x13e009bc,0],
		[0x13e009c0,0],
		[0x13e009c4,0],
		[0x13e009c8,0],
		[0x13e009cc,0],
		[0x13e009d0,0],
		[0x13e009d4,0],
		[0x13e009d8,0],
		[0x13e009dc,0],
		[0x13e009e0,0],
		[0x13e009e4,0],
		[0x13e009e8,0],
		[0x13e009ec,0],
		[0x13e009f0,0],
		[0x13e009f4,0],
		[0x13e009f8,0],
		[0x13e009fc,0],
		[0x13e00a00,0],
		[0x13e00a04,0],
		[0x13e00a08,0],
		[0x13e00a0c,0],
		[0x13e00a10,0],
		[0x13e00a14,0],
		[0x13e00a18,0],
		[0x13e00a1c,0],
		[0x13e00a20,0],
		[0x13e00a24,0],
		[0x13e00a28,0],
		[0x13e00a2c,0],
		[0x13e00a30,0],
		[0x13e00a34,0],
		[0x13e00a38,0],
		[0x13e00a3c,0],
		[0x13e00a40,0],
		[0x13e00a44,0],
		[0x13e00a48,0],
		[0x13e00a4c,0],
		[0x13e00a50,0],
		[0x13e00a54,0],
		[0x13e00a58,0],
		[0x13e00a5c,0],
		[0x13e00a60,0],
		[0x13e00a64,0],
		[0x13e00a68,0],
		[0x13e00a6c,0],
		[0x13e00a70,0],
		[0x13e00a74,0],
		[0x13e00a78,0],
		[0x13e00a7c,0],
		[0x13e00a80,0],
		[0x13e00a84,0],
		[0x13e00a88,0],
		[0x13e00a8c,0],
		[0x13e00a90,0],
		[0x13e00a94,0],
		[0x13e00a98,0],
		[0x13e00a9c,0],
		[0x13e00aa0,0],
		[0x13e00aa4,0],
		[0x13e00aa8,0],
		[0x13e00aac,0],
		[0x13e00ab0,0],
		[0x13e00ab4,0],
		[0x13e00ab8,0],
		[0x13e00abc,0],
		[0x13e00ac0,0],
		[0x13e00ac4,0],
		[0x13e00ac8,0],
		[0x13e00acc,0],
		[0x13e00ad0,0],
		[0x13e00ad4,0],
		[0x13e00ad8,0],
		[0x13e00adc,0],
		[0x13e00ae0,0],
		[0x13e00ae4,0],
		[0x13e00ae8,0],
		[0x13e00aec,0],
		[0x13e00af0,0],
		[0x13e00af4,0],
		[0x13e00af8,0],
		[0x13e00afc,0],
		[0x13e00b00,0],
		[0x13e00b04,0],
		[0x13e00b08,0],
		[0x13e00b0c,0],
		[0x13e00b10,0],
		[0x13e00b14,0],
		[0x13e00b18,0],
		[0x13e00b1c,0],
		[0x13e00b20,0],
		[0x13e00b24,0],
		[0x13e00b28,0],
		[0x13e00b2c,0],
		[0x13e00b30,0],
		[0x13e00b34,0],
		[0x13e00b38,0],
		[0x13e00b3c,0],
		[0x13e00b40,0],
		[0x13e00b44,0],
		[0x13e00b48,0],
		[0x13e00b4c,0],
		[0x13e00b50,0],
		[0x13e00b54,0],
		[0x13e00b58,0],
		[0x13e00b5c,0],
		[0x13e00b60,0],
		[0x13e00b64,0],
		[0x13e00b68,0],
		[0x13e00b6c,0],
		[0x13e00b70,0],
		[0x13e00b74,0],
		[0x13e00b78,0],
		[0x13e00b7c,0],
		[0x13e00b80,0],
		[0x13e00b84,0],
		[0x13e00b88,0],
		[0x13e00b8c,0],
		[0x13e00b90,0],
		[0x13e00b94,0],
		[0x13e00b98,0],
		[0x13e00b9c,0],
		[0x13e00ba0,0],
		[0x13e00ba4,0],
		[0x13e00ba8,0],
		[0x13e00bac,0],
		[0x13e00bb0,0],
		[0x13e00bb4,0],
		[0x13e00bb8,0],
		[0x13e00bbc,0],
		[0x13e00bc0,0],
		[0x13e00bc4,0],
		[0x13e00bc8,0],
		[0x13e00bcc,0],
		[0x13e00bd0,0],
		[0x13e00bd4,0],
		[0x13e00bd8,0],
		[0x13e00bdc,0],
		[0x13e00be0,0],
		[0x13e00be4,0],
		[0x13e00be8,0],
		[0x13e00bec,0],
		[0x13e00bf0,0],
		[0x13e00bf4,0],
		[0x13e00bf8,0],
		[0x13e00bfc,0],
		[0x13e00c00,0],
		[0x13e00c04,0],
		[0x13e00c08,0],
		[0x13e00c0c,0],
		[0x13e00c10,0],
		[0x13e00c14,0],
		[0x13e00c18,0],
		[0x13e00c1c,0],
		[0x13e00c20,0],
		[0x13e00c24,0],
		[0x13e00c28,0],
		[0x13e00c2c,0],
		[0x13e00c30,0],
		[0x13e00c34,0],
		[0x13e00c38,0],
		[0x13e00c3c,0],
		[0x13e00c40,0],
		[0x13e00c44,0],
		[0x13e00c48,0],
		[0x13e00c4c,0],
		[0x13e00c50,0],
		[0x13e00c54,0],
		[0x13e00c58,0],
		[0x13e00c5c,0],
		[0x13e00c60,0],
		[0x13e00c64,0],
		[0x13e00c68,0],
		[0x13e00c6c,0],
		[0x13e00c70,0],
		[0x13e00c74,0],
		[0x13e00c78,0],
		[0x13e00c7c,0],
		[0x13e00c80,0],
		[0x13e00c84,0],
		[0x13e00c88,0],
		[0x13e00c8c,0],
		[0x13e00c90,0],
		[0x13e00c94,0],
		[0x13e00c98,0],
		[0x13e00c9c,0],
		[0x13e00ca0,0],
		[0x13e00ca4,0],
		[0x13e00ca8,0],
		[0x13e00cac,0],
		[0x13e00cb0,0],
		[0x13e00cb4,0],
		[0x13e00cb8,0],
		[0x13e00cbc,0],
		[0x13e00cc0,0],
		[0x13e00cc4,0],
		[0x13e00cc8,0],
		[0x13e00ccc,0],
		[0x13e00cd0,0],
		[0x13e00cd4,0],
		[0x13e00cd8,0],
		[0x13e00cdc,0],
		[0x13e00ce0,0],
		[0x13e00ce4,0],
		[0x13e00ce8,0],
		[0x13e00cec,0],
		[0x13e00cf0,0],
		[0x13e00cf4,0],
		[0x13e00cf8,0],
		[0x13e00cfc,0],
		[0x13e00d00,0],
		[0x13e00d04,0],
		[0x13e00d08,0],
		[0x13e00d0c,0],
		[0x13e00d10,0],
		[0x13e00d14,0],
		[0x13e00d18,0],
		[0x13e00d1c,0],
		[0x13e00d20,0],
		[0x13e00d24,0],
		[0x13e00d28,0],
		[0x13e00d2c,0],
		[0x13e00d30,0],
		[0x13e00d34,0],
		[0x13e00d38,0],
		[0x13e00d3c,0],
		[0x13e00d40,0],
		[0x13e00d44,0],
		[0x13e00d48,0],
		[0x13e00d4c,0],
		[0x13e00d50,0],
		[0x13e00d54,0],
		[0x13e00d58,0],
		[0x13e00d5c,0],
		[0x13e00d60,0],
		[0x13e00d64,0],
		[0x13e00d68,0],
		[0x13e00d6c,0],
		[0x13e00d70,0],
		[0x13e00d74,0],
		[0x13e00d78,0],
		[0x13e00d7c,0],
		[0x13e00d80,0],
		[0x13e00d84,0],
		[0x13e00d88,0],
		[0x13e00d8c,0],
		[0x13e00d90,0],
		[0x13e00d94,0],
		[0x13e00d98,0],
		[0x13e00d9c,0],
		[0x13e00da0,0],
		[0x13e00da4,0],
		[0x13e00da8,0],
		[0x13e00dac,0],
		[0x13e00db0,0],
		[0x13e00db4,0],
		[0x13e00db8,0],
		[0x13e00dbc,0],
		[0x13e00dc0,0],
		[0x13e00dc4,0],
		[0x13e00dc8,0],
		[0x13e00dcc,0],
		[0x13e00dd0,0],
		[0x13e00dd4,0],
		[0x13e00dd8,0],
		[0x13e00ddc,0],
		[0x13e00de0,0],
		[0x13e00de4,0],
		[0x13e00de8,0],
		[0x13e00dec,0],
		[0x13e00df0,0],
		[0x13e00df4,0],
		[0x13e00df8,0],
		[0x13e00dfc,0],
		[0x13e00e00,0],
		[0x13e00e04,0],
		[0x13e00e08,0],
		[0x13e00e0c,0],
		[0x13e00e10,0],
		[0x13e00e14,0],
		[0x13e00e18,0],
		[0x13e00e1c,0],
		[0x13e00e20,0],
		[0x13e00e24,0],
		[0x13e00e28,0],
		[0x13e00e2c,0],
		[0x13e00e30,0],
		[0x13e00e34,0],
		[0x13e00e38,0],
		[0x13e00e3c,0],
		[0x13e00e40,0],
		[0x13e00e44,0],
		[0x13e00e48,0],
		[0x13e00e4c,0],
		[0x13e00e50,0],
		[0x13e00e54,0],
		[0x13e00e58,0],
		[0x13e00e5c,0],
		[0x13e00e60,0],
		[0x13e00e64,0],
		[0x13e00e68,0],
		[0x13e00e6c,0],
		[0x13e00e70,0],
		[0x13e00e74,0],
		[0x13e00e78,0],
		[0x13e00e7c,0],
		[0x13e00e80,0],
		[0x13e00e84,0],
		[0x13e00e88,0],
		[0x13e00e8c,0],
		[0x13e00e90,0],
		[0x13e00e94,0],
		[0x13e00e98,0],
		[0x13e00e9c,0],
		[0x13e00ea0,0],
		[0x13e00ea4,0],
		[0x13e00ea8,0],
		[0x13e00eac,0],
		[0x13e00eb0,0],
		[0x13e00eb4,0],
		[0x13e00eb8,0],
		[0x13e00ebc,0],
		[0x13e00ec0,0],
		[0x13e00ec4,0],
		[0x13e00ec8,0],
		[0x13e00ecc,0],
		[0x13e00ed0,0],
		[0x13e00ed4,0],
		[0x13e00ed8,0],
		[0x13e00edc,0],
		[0x13e00ee0,0],
		[0x13e00ee4,0],
		[0x13e00ee8,0],
		[0x13e00eec,0],
		[0x13e00ef0,0],
		[0x13e00ef4,0],
		[0x13e00ef8,0],
		[0x13e00efc,0],
		[0x13e00f00,0],
		[0x13e00f04,0],
		[0x13e00f08,0],
		[0x13e00f0c,0],
		[0x13e00f10,0],
		[0x13e00f14,0],
		[0x13e00f18,0],
		[0x13e00f1c,0],
		[0x13e00f20,0],
		[0x13e00f24,0],
		[0x13e00f28,0],
		[0x13e00f2c,0],
		[0x13e00f30,0],
		[0x13e00f34,0],
		[0x13e00f38,0],
		[0x13e00f3c,0],
		[0x13e00f40,0],
		[0x13e00f44,0],
		[0x13e00f48,0],
		[0x13e00f4c,0],
		[0x13e00f50,0],
		[0x13e00f54,0],
		[0x13e00f58,0],
		[0x13e00f5c,0],
		[0x13e00f60,0],
		[0x13e00f64,0],
		[0x13e00f68,0],
		[0x13e00f6c,0],
		[0x13e00f70,0],
		[0x13e00f74,0],
		[0x13e00f78,0],
		[0x13e00f7c,0],
		[0x13e00f80,0],
		[0x13e00f84,0],
		[0x13e00f88,0],
		[0x13e00f8c,0],
		[0x13e00f90,0],
		[0x13e00f94,0],
		[0x13e00f98,0],
		[0x13e00f9c,0],
		[0x13e00fa0,0],
		[0x13e00fa4,0],
		[0x13e00fa8,0],
		[0x13e00fac,0],
		[0x13e00fb0,0],
		[0x13e00fb4,0],
		[0x13e00fb8,0],
		[0x13e00fbc,0],
		[0x13e00fc0,0],
		[0x13e00fc4,0],
		[0x13e00fc8,0],
		[0x13e00fcc,0],
		[0x13e00fd0,0],
		[0x13e00fd4,0],
		[0x13e00fd8,0],
		[0x13e00fdc,0],
		[0x13e00fe0,0],
		[0x13e00fe4,0],
		[0x13e00fe8,0],
		[0x13e00fec,0],
		[0x13e00ff0,0],
		[0x13e00ff4,0],
		[0x13e00ff8,0],
		[0x13e00ffc,0],
		[0, 0]
]).
string_val([
		[0, 0]
]).
/* This file contains recursive predicates */
:- use_module(library(clpfd)).
:- use_module(reif).
:- style_check(-singleton).

isTrue([X, Y]):-
    X == 49.

isTrue([X|Tail]):-
    isTrue(Tail).

log(File_name, Name, Addr, Base):-
    Offset #= Addr - Base,
    open(File_name, append, Stream),
    write(Stream, Name),
    write(Stream, ':'),
    write(Stream, Offset),
    nl(Stream),
    close(Stream).

possible_task_struct(Base_addr) :-
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM2_addr, Pid_addr, Tgid_addr, Real_parent_addr, Parent_addr , Child_addr, 
           Group_leader_addr, Thread_group_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    %MM2_addr #> Base_addr + 1000,
    Tasks_addr #> MM2_addr - 100,
    %FS_struct_addr #< Base_addr + 4000,
    Tgid_addr #= Pid_addr + 4,
    Real_parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr - 8,
    Child_addr #= Parent_addr + 8,
    %FIXME This may be too strong
    Group_leader_addr #=< Child_addr +32,
    %Comm_addr #= Base_addr + 1656,
    %Tasks_addr #= Base_addr + 1072,
    %FS_struct_addr #= Base_addr + 2640,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    % make query after labeling
    MM2_val #> 0,
    integer(MM2_val),
    
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val,  Comm_addr, Comm_val ]),

    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_parent_addr, Real_parent_val, Group_leader_addr, Group_leader_val]),
    Real_parent_val #> 0,
    Group_leader_val #> 0,
    query_ts(Real_parent_val, Comm_offset, Tasks_offset),
    query_ts(Group_leader_val, Comm_offset, Tasks_offset),

    labeling([enum], [Cred_addr, Cred_val]),
    Cred_val #> 0,
    query_cred(Cred_val),

    labeling([enum], [FS_struct_addr, FS_struct_val]),
    FS_struct_val #> 0,
    %query_fs_struct(FS_struct_val),



    get_time(End),
    Time_past is End - Current,
    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    log("profile.txt", "tasks", Tasks_addr, Base_addr),
    log("profile.txt", "mm_struct", MM2_addr, Base_addr),
    log("profile.txt", "comm", Comm_addr, Base_addr),
    log("profile.txt", "parent", Parent_addr, Base_addr),
    log("profile.txt", "group_leader", Group_leader_addr, Base_addr),
    log("profile.txt", "cred", Cred_addr, Base_addr),

    
    print_nl('tasks offset', Tasks_offset),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).

possible_string_pointer(Base_addr) :-
    /* Verify if this pointer points to a stirng */
    string_val(Str),
    Str_profile = [
        [Name_addr, Name_val]
    ],
    tuples_in(Str_profile, Str),
    Name_addr #= Base_addr.

query_string_pointer(Val) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "string_pointer"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_mount_struct(Base_addr, Offset) :-
    pointer(Ptr),
    Ptr_profile = ([
        [Mnt_devname_addr, Mnt_devname_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Mnt_devname_addr #= Base_addr + Offset,
    labeling([enum], [Mnt_devname_addr, Mnt_devname_val]),
    query_string_pointer(Mnt_devname_val).



possible_kernel_param(Base_addr) :-
    string_val(Str),
    Str_profile = [
        [Name_addr, Name_val]
    ],
    tuples_in(Str_profile, Str),
    Name_addr #= Base_addr.

possible_in_device(Base_addr) :-
    /* in_ifaddr remains the same across kernel versions 
       but we need this query to find ip_ptr in net_device struct
    */
    /*
        struct net_device *dev;
        int               refcnt;
        int               dead;
        struct in_ifaddr  *ifa_list;
    */
    pointer(Ptr),
    int(Int),
    Ptr_profile = ([
        [Dev_addr, Dev_val],
        [Ifa_list_addr, Ifa_list_val]
    ]),
    Int_profile = ([
        [Refcnt_addr, Refcnt_val],
        [Dead_addr, Dead_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Dead_addr #= Refcnt_addr + 4,
    chain([Dev_addr, Refcnt_addr, Dead_addr, Ifa_list_addr], #<),
    Dev_addr #= Base_addr,
    Ifa_list_addr #= Base_addr + 16,
    labeling([enum], [Ifa_list_addr, Ifa_list_val]),

    process_create(path('python'),
                    ['subquery.py', Ifa_list_val, "in_ifaddr"],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_in_ifaddr(Base_addr) :-
    /* in_ifaddr remains the same across kernel versions */
    pointer(Ptr),
    Ptr_profile = ([
        [Hash_addr, Hash_val],
        [Ifa_next_addr, Ifa_next_val],
        [Ifa_dev_addr, Ifa_dev_val],
        [Rcu_head_addr, Rcu_head_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([Hash_addr, Ifa_next_addr, Ifa_dev_addr, Rcu_head_addr], #<),
    Hash_addr #= Base_addr,
    Ifa_next_addr #= Hash_addr + 16,
    Ifa_dev_addr #= Ifa_next_addr + 8,
    Rcu_head_addr #= Ifa_dev_addr + 8,
    labeling([enum], [Hash_addr, Ifa_next_addr, Ifa_dev_addr, Rcu_head_addr]).



possible_mm_struct(Current_addr) :- 
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),

    Ptr_profile = [
        [Mmap_addr, Mmap_val],
        [Pgd_addr, Pgd_val]  
    ],
    Ulong_profile = [
        [Mmap_base_addr, Mmap_base_val],
        [Mmap_legacy_base_addr, Mmap_legacy_base_val],
        [Task_size_addr, Task_size_val],
        [High_vm_end_addr, High_vm_end_val],
        [Start_brk_addr, Start_brk_val],
        [Brk_addr, Brk_val],
        [Start_stack_addr, Start_stack_val],
        [ARG_start_addr, ARG_start_val]
    ],
    Mmap_addr #= Current_addr,


    Mmap_base_addr #> Mmap_addr,
    %FIXME mmap_base need more value constraint, because we removed mmap_legacy_base and highest_vm_end.
    Mmap_base_val #> 0x7f0000000000,
    High_vm_end_addr #= Mmap_base_addr + 24,
    
    chain([Mmap_base_addr, Mmap_legacy_base_addr Task_size_addr,High_vm_end_addr, Pgd_addr], #<),


    Pgd_addr #> Task_size_addr,
    Pgd_addr #=< Task_size_addr + 40,
    %FIXME: This rule may not be true for other mm_struct.
    Task_size_val #>= 0x7ffffffff000,


    Start_brk_addr #> Pgd_addr,
    Start_stack_val #> 0x7ff000000000,
    ARG_start_addr #< Current_addr + 500,
    chain([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr], #<),
    ARG_start_addr #= Start_brk_addr + 24,
    Brk_val #< 0x7ff000000000,
    ARG_start_val #> 0x7ff000000000,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),


    labeling([enum], [Mmap_addr, Mmap_val, Mmap_base_addr, Pgd_addr, Pgd_val]),
    Mmap_val #> 0,
    Pgd_val #> 0,
    
    process_create(path('python'),
                    ['subquery.py', Mmap_val, "vm_area_struct", Current_addr],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    label([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr]),
    statistics(real_time, [End|_]),

    log("./profile/mm_struct", "mmap", Mmap_addr, Current_addr),
    log("./profile/mm_struct", "mmap_base", Mmap_base_addr, Current_addr),
    log("./profile/mm_struct", "pgd", Pgd_addr, Current_addr),
    log("./profile/mm_struct", "start_brk", Start_brk_addr, Current_addr),
    log("./profile/mm_struct", "brk", Brk_addr, Current_addr),
    log("./profile/mm_struct", "start_stack", Start_stack_addr, Current_addr),
    log("./profile/mm_struct", "arg_start", ARG_start_addr, Current_addr),
    log("./profile/mm_struct", "mm_struct", End, Start).


possible_vm_area_struct(Base_addr, MM_addr) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [VM_next_addr, VM_next_val],
        [Vm_mm_addr, Vm_mm_val],
        [VM_file_addr, VM_file_val]
    ],
    Ulong_profile = [
        [VM_start_addr, VM_start_val],
        [VM_end_addr, VM_end_val],
        [VM_flag_addr, VM_flag_val]
        /*VM_pgoff is 0, and we do not consider 0 as ulong*/
        %[VM_pgoff_addr, VM_pgoff_val]
    ],
    VM_start_addr #>= Base_addr,
    chain([VM_start_addr, VM_end_addr, VM_next_addr, Vm_mm_addr, VM_flag_addr, VM_file_addr], #<),
    VM_end_addr #= VM_start_addr + 8,
    VM_next_addr #= VM_end_addr + 8,
    VM_next_addr #< Base_addr + 32,

    Vm_mm_val #= MM_addr,
    VM_file_addr #< Base_addr + 180,
    VM_pgoff_addr #= VM_file_addr - 8,
    VM_flag_val #< 0x88888888,
    VM_file_addr #< Base_addr + 200,

    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    %FIXME: VM_flag may need value constraints.

    label([VM_next_addr, VM_next_val]),
    /* vm_file maybe zero! */
    labeling([enum], [VM_start_addr, VM_end_addr, Vm_mm_addr, Vm_mm_val, VM_flag_addr, VM_pgoff_addr, VM_file_addr, VM_file_val]),
    
    VM_file_val #> 0,
    
    process_create(path('python'),
                ['subquery.py', VM_file_val, "vm_file"],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    statistics(real_time, [End|_]),
    

    log("./profile/vm_area_struct", "vm_start", VM_start_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_end", VM_end_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_next", VM_next_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_mm", Vm_mm_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_flag", VM_flag_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_pgoff", VM_pgoff_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_file", VM_file_addr, Base_addr),
    log("./profile/vm_area_struct", "vm_area_struct", End, Start).

check_vm_area_struct(Base_addr, Level) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "vm_area_struct", Level],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vm_file(Base_addr) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [Vfs_mount_addr, Vfs_mount_val],
        [Dentry_addr, Dentry_val],
        [F_op_addr, F_op_val]
    ],
    tuples_in(Ptr_profile, Ptr),
    Vfs_mount_addr #> Base_addr,
    Dentry_addr #= Vfs_mount_addr + 8,
    Dentry_addr #< Base_addr + 40,
    Vfs_mount_val #> 0,
    Dentry_val #> 0,
    F_op_addr #= Base_addr + 40, 
    F_op_val #> 0,
    chain([Vfs_mount_addr, Dentry_addr, F_op_addr], #<),
    labeling([enum], [Vfs_mount_val, Dentry_val, F_op_addr, F_op_val]),


    process_create(path('python'),
                    ['subquery.py', Vfs_mount_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),
/*
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/
    query_file_operation(F_op_val),
    statistics(real_time, [End|_]),

    log("./profile/file", "f_path", Vfs_mount_addr, Base_addr),
    log("./profile/file", "f_op", F_op_addr, Base_addr),
    log("./profile/file", "file", End, Start).



query_file_operation(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result).

possible_name_pointer(Val, Name_offset) :-
    /* The value at val+name_offset is a string pointer */
    current_predicate(pointer/1),
    pointer(Ptr),
    Ptr_profile = ([
        [Name_addr, Name_val]
    ]),
    Name_addr #= Val + Name_offset,
    tuples_in(Ptr_profile, Ptr),
    labeling([enum], [Name_addr, Name_val]),
    query_string_pointer(Name_val).

possible_vfs_mount(Base_addr) :-
    pointer(Ptr),
    int(Int),
    Ptr_profile = [
        [Dentry_addr, Dentry_val],
        [Mnt_sb_addr, Mnt_sb_val]
    ],
    Int_profile = [
        [Mnt_flags_addr, Mnt_flags_val]
    ],
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    Dentry_addr #= Base_addr,
    Dentry_val #> 0,
    Mnt_flags_addr #= Dentry_addr + 16,
    Mnt_flags_val #>= 0,
    Mnt_sb_val #> 0,
    chain([Dentry_addr, Mnt_sb_addr, Mnt_flags_addr], #<),
    label([Dentry_addr, Dentry_val, Mnt_flags_addr, Mnt_flags_val]).
 
possible_dentry(Base_addr) :-
    /*
        struct dentry *d_parent;
        struct qstr d_name contains char *name; it's a name pointer
        struct inode *d_inode;
        unsigned char d_iname[LEN];
        const struct dentry_operations *d_op;
        struct list_head d_child;
        struct list_head d_subdirs;
        union {
	        struct hlist_node d_alias;
	        struct rcu_head d_rcu;
        } d_u;
    */
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    string_val(Str),
    Ptr_profile = [
        [Dparent_addr, Dparent_val],
        [Dname_addr, Dname_val],
        [D_inode_addr, D_inode_val],
        [D_op_addr, D_op_val],
        [Dchild_addr, Dchild_val],
        [D_subdirs_addr, D_subdirs_val]
    ],
    Str_profile = [
        [D_iname_addr, D_iname_val]
    ],
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    Dparent_addr #> Base_addr,
    chain([Dparent_addr, Dname_addr, D_inode_addr, D_iname_addr, 
            D_op_addr, Dchild_addr, D_subdirs_addr], #<),
    D_subdirs_addr #= Dchild_addr + 16,
    D_subdirs_addr #< Base_addr + 200,
    Dparent_val #> 0,
    labeling([enum], [Dname_addr, Dname_val]),
    query_string_pointer(Dname_val),
    labeling([enum], [D_iname_addr, D_iname_val]),
    D_iname_offset #= D_iname_addr - Base_addr,
    Dname_offset #= Dname_addr - Base_addr,
    labeling([enum], [Dparent_addr, Dparent_val]),
    Parent_dname #= Dparent_val + Dname_offset,
    process_create(path('python'),
                    ['subquery.py', Parent_dname, "name_pointer", Dname_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    labeling([enum], [D_inode_addr, D_inode_val]),
    query_inode(D_inode_val),
    /* d_op might be zero! */
    labeling([enum], [D_op_addr, D_op_val]),
    %query_file_operation(D_op_val),

    labeling([enum], [Dchild_addr, Dchild_val]),
    Dchild_offset #= Dchild_addr - Base_addr,
    Dchild_init #= Dchild_val - Dchild_offset,
    query_name_pointer(Dchild_init, Dname_offset),

    /* This can be hardcoded as d_child_addr + 16 */
    labeling([enum], [D_subdirs_addr, D_subdirs_val]),
    Dsubdirs_offset #= D_subdirs_addr - Base_addr,
    D_subdirs_init #= D_subdirs_val - Dsubdirs_offset,
    query_name_pointer(D_subdirs_init, Dname_offset),

    _Name_addr #= Dname_addr - 8,

    statistics(real_time, [End|_]),

    log("./profile/dentry", "parent", Dparent_addr, Base_addr),
    log("./profile/dentry", "d_name", _Name_addr, Base_addr),
    log("./profile/dentry", "d_inode", D_inode_addr, Base_addr),
    log("./profile/dentry", "d_iname", D_iname_addr, Base_addr),
    log("./profile/dentry", "dchild", Dchild_addr, Base_addr),
    log("./profile/dentry", "d_subdirs", D_subdirs_addr, Base_addr),
    log("./profile/dentry", "dentry", End, Start).

query_inode(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_inode(Base_addr) :-
    /*
        struct inode_operations *i_op;
        struct super_block      *i_sb;
        struct address_space    *i_mapping;
    */
    statistics(real_time, [Start|_]),

    pointer(Ptr),
    long(Ulg),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [I_op_addr, I_op_val],
        [I_sb_addr, I_sb_val],
        [I_mapping_addr, I_mapping_val],
        [I_fop_addr, I_fop_val]
    ]),
    Ulong_profile = ([
        /* i_mode is actually not long type. */
        [I_mode_addr, I_mode_val],
        [I_ino_addr, I_ino_val],
        [I_size_addr, I_size_val],
        [I_atime_addr, I_atime_val],
        [_I_atime_addr, _I_atime_val],
        [I_mtime_addr, I_mtime_val],
        [I_ctime_addr, I_ctime_val],
        [_I_ctime_addr, _I_ctime_val]
    ]),
    Int_profile = ([
        [I_uid_addr, I_uid_val],
        [I_gid_addr, I_gid_val],
        [_atomic_t_addr, _atomic_t_val],
        [_atomic_t2_addr, _atomic_t2_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    tuples_in(Int_profile, Int),

    chain([I_mode_addr, I_uid_addr, I_gid_addr, I_op_addr, I_sb_addr, I_mapping_addr, I_ino_addr,
           I_size_addr, I_atime_addr, _I_atime_addr, I_mtime_addr, I_ctime_addr, _I_ctime_addr, 
           _atomic_t_addr, _atomic_t2_addr, I_fop_addr], #<),

    I_mode_addr #= Base_addr,
    I_mode_val #> 0,
    I_gid_addr #= I_mode_addr + 8,
    %I_op_addr #= Base_addr + 32,
    I_op_addr #=< Base_addr + 32,
    I_op_val #> 0,
    labeling([enum], [I_op_addr, I_op_val]),
    query_inode_operations(I_op_val),

    I_sb_addr #= I_op_addr + 8,
    I_mapping_addr #= I_sb_addr + 8,
    I_atime_addr #= I_size_addr + 8,
    I_mtime_addr #= I_atime_addr + 16,
    I_ctime_addr #= I_mtime_addr + 16,
    _I_ctime_addr #= I_ctime_addr + 8,
    I_size_val #> 0,
    I_atime_val #> 4096,
    I_mtime_val #> 4096,
    I_ctime_val #> 4096,
    I_fop_addr #< Base_addr + 400,
    labeling([enum], [I_sb_addr, I_mapping_addr, I_atime_addr, I_mtime_addr, I_ctime_addr]),
    I_fop_addr #= _atomic_t_addr + 8,
    labeling([enum], [I_fop_addr, I_fop_val]),
    I_fop_val #> 0,
    query_inode_operations(I_fop_val),

    statistics(real_time, [End|_]),
    log("./profile/inode", "I_mode_addr", I_mode_addr, Base_addr),
    log("./profile/inode", "I_uid_addr", I_uid_addr, Base_addr),
    log("./profile/inode", "I_gid_addr", I_gid_addr, Base_addr),
    log("./profile/inode", "I_op_addr", I_op_addr, Base_addr),
    log("./profile/inode", "I_sb_addr", I_sb_addr, Base_addr),
    log("./profile/inode", "I_mapping_addr", I_mapping_addr, Base_addr),
    log("./profile/inode", "I_size_addr", I_size_addr, Base_addr),
    log("./profile/inode", "I_atime_addr", I_atime_addr, Base_addr),
    log("./profile/inode", "I_mtime_addr", I_mtime_addr, Base_addr),
    log("./profile/inode", "I_ctime_addr", I_ctime_addr, Base_addr),
    log("./profile/inode", "I_fop_addr", I_fop_addr, Base_addr),
    log("./profile/inode", "inode", End, Start).


query_inode_operations(Base_addr) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "inode_operations"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_name_pointer(Base_addr, Offset) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "name_pointer", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_inode_operations(Base_addr) :-
    /* a bunch of function pointers. */
    pointer(Ptr),
    Ptr_profile = ([
        [_L1_addr, _L1_val],
        [_L2_addr, _L2_val],
        [_L3_addr, _L3_val],
        [_L4_addr, _L4_val],
        [_L5_addr, _L5_val],
        [_L6_addr, _L6_val],
        [_L7_addr, _L7_val],
        [_L8_addr, _L8_val],
        [_L9_addr, _L9_val],
        [_L10_addr, _L10_val],
        [_L11_addr, _L11_val],
        [_L12_addr, _L12_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    chain([_L1_addr, _L2_addr, _L3_addr, _L4_addr, _L5_addr, _L6_addr, _L7_addr,
           _L8_addr, _L9_addr, _L10_addr, _L11_addr, _L12_addr], #<),
    _L1_addr #= Base_addr,
    _L12_addr #= Base_addr + 88.




possible_nothing() :-

    %log("profile.txt", "dentry addr", Base_addr, 0),
    Dparent_addr #> Base_addr,
    Dname_addr #> 0,
    Dname_addr #< Base_addr + 200,
    %Dname_addr #= Base_addr + 160,
    %FIXME This child rule is not applicable for old kernel version. 
    %chain([Dparent_addr, Dname_addr, Dchild_addr], #<),
    %Dchild_addr #< Base_addr + 200,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    labeling([enum], [Dparent_addr, Dparent_val, Dname_addr, Dchild_addr, Dchild_val]),
    Dname_offset #= Dname_addr - Base_addr,
    integer(Dname_offset),
    Dparent_val #> 0,
    
    %FIXME d_parent may not be initialized
    /*process_create(path('python'),
                ['subquery.py', Dparent_val, "d_entry", Dname_offset],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/

    %FIXME: may need to find another way for all list_head. 
    /*Dchild_offset #= Dchild_addr - Base_addr,
    integer(Dchild_offset),
    Dchild_base #= Dchild_val - Dchild_offset,
    integer(Dchild_base),
    Dchild_base #> 0,
    process_create(path('python'),
                ['subquery.py', Dchild_base, "d_entry", Dname_offset],
                [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    statistics(real_time, [End|_]).
/*
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    log("profile.txt", "d_parent", Dparent_addr, Base_addr),
    log("profile.txt", "d_child", Dchild_addr, Base_addr),
    log("profile.txt", "dentry time", End, Start).
*/
possible_d_entry(Base_addr, Dname_offset) :-
    current_predicate(string_val/1),
    string_val(Str),
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    Dname_addr #= Base_addr + Dname_offset,
    tuples_in(Str_profile, Str),
    label([Dname_addr]).

possible_list_head(Tasks_val, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_val, Tasks_addr]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],
    Comm_addr #= Tasks_val - Tasks_offset + Comm_offset,
    Tasks_addr #\= Tasks_val,
    tuples_in(Str_profile, Str),
    tuples_in(Ptr_profile, Ptr),
    label([Comm_addr]).

possible_ts(Base_addr, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_addr, Tasks_val]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],

    Comm_addr #= Base_addr + Comm_offset,
    Tasks_addr #= Base_addr + Tasks_offset,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),

    label([Tasks_val]),
    
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "list_head", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_cred(Base_addr) :-
    statistics(real_time, [Start|_]),

    int(Int),
    long(Ulg),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3],
        [Addr4, Val4],
        [Addr5, Val5],
        [Addr6, Val6],
        [Addr7, Val7],
        [Addr8, Val8],
        [Addr9, Val9]
    ],
    %FIXME For now, this rule is hard-coded because we do not consider 0 as a unsign long number. 
    %So that for cred whos val10 is 0, this rule does not apply.
    /*Ulong_profile = [
        [Addr10, Val10],
        [Addr11, Val11]
    ],*/
    Addr1 #> Base_addr,
    %chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9, Addr10, Addr11], #<),
    chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9], #<),
    Addr1 #= Base_addr + 4,
    Addr9 #= Addr1 + 32,
    %Addr11 #< Base_addr + 120,
    tuples_in(Int_profile, Int),
    %tuples_in(Ulong_profile, Ulg),
    statistics(real_time, [End|_]),
    labeling([enum], [Addr1, Addr2, Addr5, Addr6]),
    log("./profile/cred", "cred", End, Start),
    log('./profile/cred', "uid", Addr1, Base_addr),
    log('./profile/cred', "gid", Addr2, Base_addr),
    log('./profile/cred', "euid", Addr5, Base_addr),
    log('./profile/cred', "egid", Addr6, Base_addr).

possible_fs_struct(Base_addr) :-
    statistics(real_time, [Start|_]),
    int(Int),
    pointer(Ptr),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3]
    ],
    Ptr_profile = [
        [Root_addr, Root_val],
        [Root_dentry_addr, Root_dentry_val],
        [PWD_addr, PWD_val]
    ],
    Addr1 #>= Base_addr,
    Root_dentry_addr #= Root_addr + 8,
    chain([Addr1, Addr2, Addr3, Root_addr, Root_dentry_addr, PWD_addr], #<),
    PWD_addr #= Root_addr + 16,
    PWD_addr #< Base_addr + 50,
    tuples_in(Int_profile, Int),
    tuples_in(Ptr_profile, Ptr),
    Root_val #> 0,
    PWD_val #> 0,
    label([Root_addr, Root_val, Root_dentry_addr, Root_dentry_val]),
    /* some times the dentry fields are zero, use vfs_mount instead */
    process_create(path('python'),
                    ['subquery.py', Root_val, "vfs_mount"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    query_dentry(Root_dentry_val),

    label([PWD_addr, PWD_val]),
    process_create(path('python'),
                    ['subquery.py', PWD_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    statistics(real_time, [End|_]),
    log("./profile/fs_struct", "fs time", End, Start),
    log('./profile/fs_struct', "Root", Root_addr, Base_addr),
    log('./profile/fs_struct', "pwd", PWD_addr, Base_addr),
    log('./profile/fs_struct', "fs_struct", End, Start).

possible_mount(Base_addr) :-
    /* struct hlist_head mnt_hash;
       struct mount *mnt_parent; 
       struct vfsmount mnt;
       struct list_head mnt_mounts;
       struct list_head mnt_child;
       struct list_head mnt_instance;
       const char *mnt_devname;
       struct list_head mnt_list;
    */
    statistics(real_time, [Start|_]),
    %get_time(Current),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Mnt_hash_addr, Mnt_hash_val],
        [Mnt_parent_addr, Mnt_parent_val],
        [Vfsmount_addr, Vfsmount_val],
        [Mnt_child_addr, Mnt_child_val],
        [Mnt_devname_addr, Mnt_devname_val],
        [Mnt_list_addr, Mnt_list_val]
    ]),
    Int_profile = ([
        [Mnt_flags_addr, Mnt_flags_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Int_profile, Int),
    /* Order Invariants */
    chain([Mnt_hash_addr, Mnt_parent_addr, Vfsmount_addr, Mnt_flags_addr,
            Mnt_child_addr, Mnt_devname_addr, Mnt_list_addr], #<),
    Mnt_hash_addr #= Base_addr,
    /* mnt_hash_addr is a list_head */
    Mnt_parent_addr #> Base_addr + 8,
    Mnt_list_addr - Base_addr #< 200,
    labeling([enum], [Mnt_devname_addr, Mnt_devname_val]),
    query_string_pointer(Mnt_devname_val),
    Mnt_devname_offset #= Mnt_devname_addr - Base_addr,
    /* the offset from mnt_mounts to mnt_list remains the same, so it's safe to use fixed offsets. */
    Mnt_child_addr #= Mnt_devname_addr - 32,
    Mnt_list_addr #= Mnt_devname_addr + 8,
    Mnt_flags_addr #= Vfsmount_addr + 16,
    labeling([enum], [Mnt_child_addr, Mnt_list_addr, Vfsmount_addr, Vfsmount_val]),
    /* Seems unnecessary 
    Mnt_list_offset #= Mnt_list_addr - Base_addr,
    Mnt_list #= Mnt_list_val - Mnt_list_offset,
    Mnt_list #> 0,
    query_mount_struct(Mnt_list, Mnt_devname_offset),
    */
    Vfsmount_val #>= 0,
    /* Here we can infer layout of dentry structure 
       Maybe need to infer using another dentry, somehow it may not be initialized. 
    */
    Vfsmount_addr #> 0,
    %query_dentry(Vfsmount_addr),

    labeling([enum], [Mnt_parent_addr, Mnt_parent_val]),
    /* To verify another mount struct, only one-level query, so it does not direct call query_mount recursively */
    
    query_mount_struct(Mnt_parent_val, Mnt_devname_offset),
    

    %get_time(End),
    %Time_past is End - Current,
    statistics(real_time, [End|_]),
    log("./profile/mount", "mnt_hash", Mnt_hash_addr, Base_addr),
    log("./profile/mount", "mnt_parent", Mnt_parent_addr, Base_addr),
    log("./profile/mount", "mnt_child", Mnt_child_addr, Base_addr),
    log("./profile/mount", "mnt_devname", Mnt_devname_addr, Base_addr),
    log("./profile/mount", "mnt_list", Mnt_list_addr, Base_addr),
    log("./profile/mount", "mount", End, Start).


possible_neigh_hash_table(Base_addr) :-
    /* neighbour **hash_buckets */
    pointer(Ptr),
    Ptr_profile = ([
        [Hash_buckest_addr, Hash_buckets_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Hash_buckest_addr #= Base_addr,
    labeling([enum], [Hash_buckest_addr, Hash_buckets_val]),
    process_create(path('python'),
                    ['subquery.py', Hash_buckets_val, "hash_buckets"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_hash_buckets(Base_addr) :-
    /* hash_buckets is an array of neighbour pointer 
       note that not all element are non-zero
    */
    pointer(Ptr),
    Ptr_profile = ([
        [Neighbour_addr, Neighbour_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Neighbour_addr #< Base_addr + 32,
    Neighbour_val #> 0,
    labeling([enum], [Neighbour_addr, Neighbour_val]),
    process_create(path('python'),
                    ['subquery.py', Neighbour_val, "neighbour"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_neighbour(Base_addr) :-
    /* net_device *dev at offset 464 */
    pointer(Ptr),
    Ptr_profile = ([
        [Dev_addr, Dev_val]
    ]),
    tuples_in(Ptr_profile, Ptr),
    Dev_addr #>= Base_addr + 360,
    Dev_addr #=< Base_addr + 376,
    labeling([enum], [Dev_addr, Dev_val]),
    process_create(path('python'),
                    ['subquery.py', Dev_val, "net_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).


possible_net_device(Base_addr) :- 
    /*
        char             name[NAMSIZ];
        struct list_head dev_list;
        unsigned char    addr_len;
        unsigned int     promiscuity;
        struct in_device *ip_ptr;
    */
    statistics(real_time, [Start|_]),
    %get_time(Current),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    /* Type Invariants */
    Ptr_profile = ([
        [Dev_list_addr, Dev_list_val],
        [IP_ptr_addr, IP_ptr_val]
    ]),
    Str_profile = ([
        [Name_addr, Name_val]
    ]),
    Int_profile = ([
        [Promisc_addr, Promisc_val],
        [Addr_len_addr, Addr_len_val]
    ]),    
    
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),
    /* Hard to determine offsets for addr_len and promisc */
    chain([Name_addr, Dev_list_addr, Addr_len_addr, Promisc_addr, IP_ptr_addr], #<),
    Name_addr #>= Base_addr,
    Name_offset #= Name_addr - Base_addr,
    IP_ptr_addr #< Base_addr + 1000,
    /* dev_list offset can be hardcoded since it remains the same */
    Dev_list_addr #= Base_addr + 80,
    labeling([enum], [Name_addr, Dev_list_addr, Dev_list_val]),
    /* do not have a good constrain to narrow down ip_ptr, use its rough offset
       to reduce the search space. 
     */
    IP_ptr_addr #> Base_addr + 700,
    IP_ptr_val #> 0,
    labeling([enum], [IP_ptr_addr, IP_ptr_val]),
    query_in_device(IP_ptr_val),

    %get_time(End),
    %Time_past is End - Current,
    statistics(real_time, [End|_]),

    log("./profile/net_device", "name", Name_addr, Base_addr),
    log("./profile/net_device", "ip_ptr", IP_ptr_addr, Base_addr),
    log("./profile/net_device", "dev_list", Dev_list_addr, Base_addr),
    log("./profile/net_device", "net_device", End, Start).

query_in_device(IP_ptr_val) :-
    process_create(path('python'),
                    ['subquery.py', IP_ptr_val, "in_device"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).


query_mount_struct(Val, Offset) :- 
    process_create(path('python'),
                    ['subquery.py', Val, "mount_struct", Offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

query_dentry(Dentry_val) :-
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).
