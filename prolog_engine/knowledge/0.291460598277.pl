:- use_module(library(clpfd)).
:- style_check(-singleton).
pointer([
		[0x1ed9bb90,517524160],
		[0x1ed9bb98,517524160],
		[0x1ed9bba0,0],
		[0x1ed9bba8,517585832],
		[0x1ed9bbb0,517585832],
		[0x1ed9bbb8,517521728],
		[0x1ed9bbc0,517585856],
		[0x1ed9bbc8,517585856],
		[0x1ed9bbd0,0],
		[0x1ed9bbd8,0],
		[0x1ed9bbe0,0],
		[0x1ed9bbe8,0],
		[0x1ed9bbf8,0],
		[0x1ed9bc00,517585920],
		[0x1ed9bc08,517585920],
		[0x1ed9bc10,517585936],
		[0x1ed9bc18,0],
		[0x1ed9bc20,0],
		[0x1ed9bc28,0],
		[0x1ed9bc30,0],
		[0x1ed9bc38,248743328],
		[0x1ed9bc40,522312512],
		[0x1ed9bc48,0],
		[0x1ed9bc50,0],
		[0x1ed9bc58,0],
		[0x1ed9bc60,0],
		[0x1ed9bc68,0],
		[0x1ed9bc70,0],
		[0x1ed9bc78,0],
		[0x1ed9bc80,0],
		[0x1ed9bc88,0],
		[0x1ed9bc90,0],
		[0x1ed9bc98,0],
		[0x1ed9bca0,0],
		[0x1ed9bca8,0],
		[0x1ed9bcb0,517586096],
		[0x1ed9bcb8,517586096],
		[0x1ed9bcc0,517586112],
		[0x1ed9bcc8,517586112],
		[0x1ed9bcd0,517586128],
		[0x1ed9bcd8,517586128],
		[0x1ed9bce0,0],
		[0x1ed9bce8,517395712],
		[0x1ed9bcf0,517395712],
		[0x1ed9bcf8,517395712],
		[0x1ed9bd00,0],
		[0x1ed9bd10,0],
		[0x1ed9bd18,409765856],
		[0x1ed9bd28,0],
		[0x1ed9bd48,0],
		[0x1ed9bd50,0],
		[0x1ed9bd58,0],
		[0x1ed9bd60,0],
		[0x1ed9bd68,0],
		[0x1ed9bdb8,0],
		[0x1ed9be10,0],
		[0x1ed9be60,0],
		[0x1ed9bef0,0],
		[0x1ed9bef8,0],
		[0x1ed9bf00,0],
		[0x1ed9bf08,0],
		[0x1ed9bf20,0],
		[0x1ed9bf28,0],
		[0x1ed9bf30,0],
		[0x1ed9bf38,0],
		[0x1ed9bf58,160376504],
		[0x1ed9bf60,0],
		[0x1ed9bf68,0],
		[0x1ed9bf70,0],
		[0x1ed9bf78,0],
		[0x1ed9bf80,0],
		[0x1ed9bf88,0],
		[0x1ed9bf90,517586832],
		[0x1ed9bf98,517586832],
		[0x1ed9bfa0,0],
		[0x1ed9bfa8,0],
		[0x1ed9bfb0,0],
		[0x1ed9bfb8,0],
		[0x1ed9bfc0,0],
		[0x1ed9bfc8,0],
		[0x1ed9bfd0,0],
		[0x1ed9bfd8,0],
		[0x1ed9bfe0,0],
		[0x1ed9bfe8,0],
		[0x1ed9bff0,0],
		[0x1ed9bff8,0],
		[0x1ed9c000,0],
		[0x1ed9c008,0],
		[0x1ed9c010,0],
		[0x1ed9c018,0],
		[0x1ed9c020,0],
		[0x1ed9c028,0],
		[0x1ed9c030,0],
		[0x1ed9c038,0],
		[0x1ed9c040,0],
		[0x1ed9c048,0],
		[0x1ed9c050,0],
		[0x1ed9c058,0],
		[0x1ed9c060,0],
		[0x1ed9c068,0],
		[0x1ed9c070,0],
		[0x1ed9c078,0],
		[0x1ed9c080,0],
		[0x1ed9c088,0],
		[0x1ed9c090,0],
		[0x1ed9c098,0],
		[0x1ed9c0a0,0],
		[0x1ed9c0a8,0],
		[0x1ed9c0b0,0],
		[0x1ed9c0b8,0],
		[0x1ed9c0c0,0],
		[0x1ed9c0c8,0],
		[0x1ed9c0d0,0],
		[0x1ed9c0d8,0],
		[0x1ed9c0e0,0],
		[0x1ed9c0e8,0],
		[0x1ed9c0f0,0],
		[0x1ed9c0f8,0],
		[0x1ed9c100,0],
		[0x1ed9c108,0],
		[0x1ed9c110,0],
		[0x1ed9c118,0],
		[0x1ed9c120,0],
		[0x1ed9c128,0],
		[0x1ed9c130,0],
		[0x1ed9c138,0],
		[0x1ed9c140,0],
		[0x1ed9c148,0],
		[0x1ed9c150,0],
		[0x1ed9c158,0],
		[0x1ed9c160,0],
		[0x1ed9c168,0],
		[0x1ed9c170,0],
		[0x1ed9c178,0],
		[0x1ed9c180,0],
		[0x1ed9c188,0],
		[0x1ed9c190,0],
		[0x1ed9c198,0],
		[0x1ed9c1a0,0],
		[0x1ed9c1a8,0],
		[0x1ed9c1b0,0],
		[0x1ed9c1b8,0],
		[0x1ed9c1c0,0],
		[0x1ed9c1c8,0],
		[0x1ed9c1d0,0],
		[0x1ed9c1d8,0],
		[0x1ed9c1e0,0],
		[0x1ed9c1e8,0],
		[0x1ed9c1f0,0],
		[0x1ed9c1f8,0],
		[0x1ed9c200,0],
		[0x1ed9c208,0],
		[0x1ed9c210,0],
		[0x1ed9c218,0],
		[0x1ed9c220,0],
		[0x1ed9c228,0],
		[0x1ed9c230,0],
		[0x1ed9c238,0],
		[0x1ed9c240,0],
		[0x1ed9c248,0],
		[0x1ed9c250,0],
		[0x1ed9c258,0],
		[0x1ed9c260,0],
		[0x1ed9c268,0],
		[0x1ed9c270,0],
		[0x1ed9c278,0],
		[0x1ed9c280,0],
		[0x1ed9c288,0],
		[0x1ed9c290,0],
		[0x1ed9c298,0],
		[0x1ed9c2a0,0],
		[0x1ed9c2a8,0],
		[0x1ed9c2b0,0],
		[0x1ed9c2b8,0],
		[0x1ed9c2c0,0],
		[0x1ed9c2c8,0],
		[0x1ed9c2d0,0],
		[0x1ed9c2d8,0],
		[0x1ed9c2e0,0],
		[0x1ed9c2e8,0],
		[0x1ed9c2f0,0],
		[0x1ed9c2f8,0],
		[0x1ed9c300,0],
		[0x1ed9c308,0],
		[0x1ed9c310,0],
		[0x1ed9c318,0],
		[0x1ed9c320,0],
		[0x1ed9c328,0],
		[0x1ed9c330,0],
		[0x1ed9c338,0],
		[0x1ed9c340,0],
		[0x1ed9c348,0],
		[0x1ed9c350,0],
		[0x1ed9c358,0],
		[0x1ed9c360,0],
		[0x1ed9c368,0],
		[0x1ed9c370,0],
		[0x1ed9c378,0],
		[0x1ed9c380,0],
		[0x1ed9c388,0],
		[0x1ed9c390,0],
		[0x1ed9c398,0],
		[0x1ed9c3a0,0],
		[0x1ed9c3a8,0],
		[0x1ed9c3b0,0],
		[0x1ed9c3b8,0],
		[0x1ed9c3c0,0],
		[0x1ed9c3c8,0],
		[0x1ed9c3d0,0],
		[0x1ed9c3d8,0],
		[0x1ed9c3e0,0],
		[0x1ed9c3e8,0],
		[0x1ed9c3f0,0],
		[0x1ed9c3f8,0],
		[0x1ed9c400,0],
		[0x1ed9c408,0],
		[0x1ed9c410,0],
		[0x1ed9c418,0],
		[0x1ed9c420,0],
		[0x1ed9c428,0],
		[0x1ed9c430,0],
		[0x1ed9c438,0],
		[0x1ed9c440,0],
		[0x1ed9c448,0],
		[0x1ed9c450,0],
		[0x1ed9c458,0],
		[0x1ed9c460,0],
		[0x1ed9c468,0],
		[0x1ed9c470,0],
		[0x1ed9c478,0],
		[0x1ed9c480,0],
		[0x1ed9c488,0],
		[0x1ed9c490,0],
		[0x1ed9c498,0],
		[0x1ed9c4a0,0],
		[0x1ed9c4a8,0],
		[0x1ed9c4b0,0],
		[0x1ed9c4b8,0],
		[0x1ed9c4c0,0],
		[0x1ed9c4c8,0],
		[0x1ed9c4d0,0],
		[0x1ed9c4d8,0],
		[0x1ed9c4e0,0],
		[0x1ed9c4e8,0],
		[0x1ed9c4f0,0],
		[0x1ed9c4f8,0],
		[0x1ed9c500,0],
		[0x1ed9c508,0],
		[0x1ed9c510,0],
		[0x1ed9c518,0],
		[0x1ed9c520,0],
		[0x1ed9c528,0],
		[0x1ed9c530,0],
		[0x1ed9c538,0],
		[0x1ed9c540,0],
		[0x1ed9c548,0],
		[0x1ed9c550,0],
		[0x1ed9c558,0],
		[0x1ed9c560,0],
		[0x1ed9c568,0],
		[0x1ed9c570,0],
		[0x1ed9c578,0],
		[0x1ed9c580,0],
		[0x1ed9c588,0],
		[0x1ed9c590,0],
		[0x1ed9c598,0],
		[0x1ed9c5a0,0],
		[0x1ed9c5a8,0],
		[0x1ed9c5b0,0],
		[0x1ed9c5b8,0],
		[0x1ed9c5c0,0],
		[0x1ed9c5c8,0],
		[0x1ed9c5d0,0],
		[0x1ed9c5d8,0],
		[0x1ed9c5e0,0],
		[0x1ed9c5e8,0],
		[0x1ed9c5f0,0],
		[0x1ed9c5f8,0],
		[0x1ed9c600,0],
		[0x1ed9c608,0],
		[0x1ed9c610,0],
		[0x1ed9c618,0],
		[0x1ed9c620,0],
		[0x1ed9c628,0],
		[0x1ed9c630,0],
		[0x1ed9c638,0],
		[0x1ed9c640,0],
		[0x1ed9c648,0],
		[0x1ed9c650,0],
		[0x1ed9c658,0],
		[0x1ed9c660,0],
		[0x1ed9c668,0],
		[0x1ed9c670,0],
		[0x1ed9c678,0],
		[0x1ed9c680,0],
		[0x1ed9c688,0],
		[0x1ed9c690,0],
		[0x1ed9c698,0],
		[0x1ed9c6a0,0],
		[0x1ed9c6a8,0],
		[0x1ed9c6b0,0],
		[0x1ed9c6b8,0],
		[0x1ed9c6c0,0],
		[0x1ed9c6c8,0],
		[0x1ed9c6d0,0],
		[0x1ed9c6d8,0],
		[0x1ed9c6e0,0],
		[0x1ed9c6e8,0],
		[0x1ed9c6f0,0],
		[0x1ed9c6f8,0],
		[0x1ed9c700,0],
		[0x1ed9c708,0],
		[0x1ed9c710,0],
		[0x1ed9c718,0],
		[0x1ed9c720,0],
		[0x1ed9c728,0],
		[0x1ed9c730,0],
		[0x1ed9c738,0],
		[0x1ed9c740,0],
		[0x1ed9c748,0],
		[0x1ed9c750,0],
		[0x1ed9c758,0],
		[0x1ed9c760,0],
		[0x1ed9c768,0],
		[0x1ed9c770,0],
		[0x1ed9c778,0],
		[0x1ed9c780,0],
		[0x1ed9c788,0],
		[0x1ed9c790,0],
		[0x1ed9c798,0],
		[0x1ed9c7a0,0],
		[0x1ed9c7a8,0],
		[0x1ed9c7b0,0],
		[0x1ed9c7b8,0],
		[0x1ed9c7c0,0],
		[0x1ed9c7c8,0],
		[0x1ed9c7d0,0],
		[0x1ed9c7d8,0],
		[0x1ed9c7e0,0],
		[0x1ed9c7e8,0],
		[0x1ed9c7f0,0],
		[0x1ed9c7f8,0],
		[0x1ed9c800,0],
		[0x1ed9c808,0],
		[0x1ed9c810,0],
		[0x1ed9c818,0],
		[0x1ed9c820,0],
		[0x1ed9c828,0],
		[0x1ed9c830,0],
		[0x1ed9c838,0],
		[0x1ed9c840,0],
		[0x1ed9c848,0],
		[0x1ed9c850,0],
		[0x1ed9c858,0],
		[0x1ed9c860,0],
		[0x1ed9c868,0],
		[0x1ed9c870,0],
		[0x1ed9c878,0],
		[0x1ed9c880,0],
		[0x1ed9c888,0],
		[0x1ed9c890,0],
		[0x1ed9c898,0],
		[0x1ed9c8a0,0],
		[0x1ed9c8a8,0],
		[0x1ed9c8b0,0],
		[0x1ed9c8b8,0],
		[0x1ed9c8c0,0],
		[0x1ed9c8c8,0],
		[0x1ed9c8d0,0],
		[0x1ed9c8d8,0],
		[0x1ed9c8e0,0],
		[0x1ed9c8e8,0],
		[0x1ed9c8f0,0],
		[0x1ed9c8f8,0],
		[0x1ed9c900,0],
		[0x1ed9c908,0],
		[0x1ed9c910,0],
		[0x1ed9c918,0],
		[0x1ed9c920,0],
		[0x1ed9c928,0],
		[0x1ed9c930,0],
		[0x1ed9c938,0],
		[0x1ed9c940,0],
		[0x1ed9c948,0],
		[0x1ed9c950,0],
		[0x1ed9c958,0],
		[0x1ed9c960,0],
		[0x1ed9c968,0],
		[0x1ed9c970,0],
		[0x1ed9c978,0],
		[0x1ed9c980,0],
		[0x1ed9c988,0],
		[0x1ed9c990,0],
		[0x1ed9c998,0],
		[0x1ed9c9a0,0],
		[0x1ed9c9a8,0],
		[0x1ed9c9b0,0],
		[0x1ed9c9b8,0],
		[0x1ed9c9c0,0],
		[0x1ed9c9c8,0],
		[0x1ed9c9d0,0],
		[0x1ed9c9d8,0],
		[0x1ed9c9e0,0],
		[0x1ed9c9e8,0],
		[0x1ed9c9f0,0],
		[0x1ed9c9f8,0],
		[0x1ed9ca00,0],
		[0x1ed9ca08,0],
		[0x1ed9ca10,0],
		[0x1ed9ca18,0],
		[0x1ed9ca20,0],
		[0x1ed9ca28,0],
		[0x1ed9ca30,0],
		[0x1ed9ca38,0],
		[0x1ed9ca40,0],
		[0x1ed9ca48,0],
		[0x1ed9ca50,0],
		[0x1ed9ca58,0],
		[0x1ed9ca60,0],
		[0x1ed9ca68,0],
		[0x1ed9ca70,0],
		[0x1ed9ca78,0],
		[0x1ed9ca80,0],
		[0x1ed9ca88,0],
		[0x1ed9ca90,0],
		[0x1ed9ca98,0],
		[0x1ed9caa0,0],
		[0x1ed9caa8,0],
		[0x1ed9cab0,0],
		[0x1ed9cab8,0],
		[0x1ed9cac0,0],
		[0x1ed9cac8,0],
		[0x1ed9cad0,0],
		[0x1ed9cad8,0],
		[0x1ed9cae0,0],
		[0x1ed9cae8,0],
		[0x1ed9caf0,0],
		[0x1ed9caf8,0],
		[0x1ed9cb00,0],
		[0x1ed9cb08,0],
		[0x1ed9cb10,0],
		[0x1ed9cb18,0],
		[0x1ed9cb20,0],
		[0x1ed9cb28,0],
		[0x1ed9cb30,0],
		[0x1ed9cb38,0],
		[0x1ed9cb40,0],
		[0x1ed9cb48,0],
		[0x1ed9cb50,0],
		[0x1ed9cb58,0],
		[0x1ed9cb60,0],
		[0x1ed9cb68,0],
		[0x1ed9cb70,0],
		[0x1ed9cb78,0],
		[0x1ed9cb80,0],
		[0x1ed9cb88,0],
		[0, 0]
]).
unknown([
		[0, 0]
]).
long([
		[0x1ed9bbf0,274877906944],
		[0x1ed9bd08,1],
		[0x1ed9bd20,250],
		[0x1ed9bd30,4000000],
		[0x1ed9bd38,1359682121],
		[0x1ed9bd40,1440811877],
		[0x1ed9bd70,13],
		[0x1ed9bd78,51],
		[0x1ed9bd80,6175],
		[0x1ed9bd88,3115],
		[0x1ed9bd90,12],
		[0x1ed9bd98,1],
		[0x1ed9bda0,64464],
		[0x1ed9bda8,483],
		[0x1ed9bdb0,1000],
		[0x1ed9bdc0,174015],
		[0x1ed9bdc8,3000],
		[0x1ed9bdd0,496],
		[0x1ed9bdd8,5965],
		[0x1ed9bde0,27874751],
		[0x1ed9bde8,7096955],
		[0x1ed9bdf0,52242],
		[0x1ed9bdf8,5184],
		[0x1ed9be00,89607680],
		[0x1ed9be08,1536000],
		[0x1ed9be18,1855318],
		[0x1ed9be50,8388608],
		[0x1ed9be80,1566],
		[0x1ed9be88,1566],
		[0x1ed9be90,1048576],
		[0x1ed9be98,1048576],
		[0x1ed9bea0,67108864],
		[0x1ed9bea8,67108864],
		[0x1ed9bed0,1566],
		[0x1ed9bed8,1566],
		[0x1ed9bee0,819200],
		[0x1ed9bee8,819200],
		[0x1ed9bf40,4000000],
		[0x1ed9bf48,12],
		[0x1ed9bf50,1],
		[0, 0]
]).
int([
		[0x1ed9bba0,0],
		[0x1ed9bba4,0],
		[0x1ed9bbd0,0],
		[0x1ed9bbd4,0],
		[0x1ed9bbd8,0],
		[0x1ed9bbdc,0],
		[0x1ed9bbe0,0],
		[0x1ed9bbe4,0],
		[0x1ed9bbe8,0],
		[0x1ed9bbec,0],
		[0x1ed9bbf0,0],
		[0x1ed9bbf4,64],
		[0x1ed9bbf8,0],
		[0x1ed9bbfc,0],
		[0x1ed9bc18,0],
		[0x1ed9bc1c,0],
		[0x1ed9bc20,0],
		[0x1ed9bc24,0],
		[0x1ed9bc28,0],
		[0x1ed9bc2c,0],
		[0x1ed9bc30,0],
		[0x1ed9bc34,0],
		[0x1ed9bc48,0],
		[0x1ed9bc4c,0],
		[0x1ed9bc50,0],
		[0x1ed9bc54,0],
		[0x1ed9bc58,0],
		[0x1ed9bc5c,0],
		[0x1ed9bc60,0],
		[0x1ed9bc64,0],
		[0x1ed9bc68,0],
		[0x1ed9bc6c,0],
		[0x1ed9bc70,0],
		[0x1ed9bc74,0],
		[0x1ed9bc78,0],
		[0x1ed9bc7c,0],
		[0x1ed9bc80,0],
		[0x1ed9bc84,0],
		[0x1ed9bc88,0],
		[0x1ed9bc8c,0],
		[0x1ed9bc90,0],
		[0x1ed9bc94,0],
		[0x1ed9bc98,0],
		[0x1ed9bc9c,0],
		[0x1ed9bca0,0],
		[0x1ed9bca4,0],
		[0x1ed9bca8,0],
		[0x1ed9bcac,0],
		[0x1ed9bce0,0],
		[0x1ed9bce4,0],
		[0x1ed9bd00,0],
		[0x1ed9bd04,0],
		[0x1ed9bd08,1],
		[0x1ed9bd0c,0],
		[0x1ed9bd10,0],
		[0x1ed9bd14,0],
		[0x1ed9bd20,250],
		[0x1ed9bd24,0],
		[0x1ed9bd28,0],
		[0x1ed9bd2c,0],
		[0x1ed9bd34,0],
		[0x1ed9bd3c,0],
		[0x1ed9bd44,0],
		[0x1ed9bd48,0],
		[0x1ed9bd4c,0],
		[0x1ed9bd50,0],
		[0x1ed9bd54,0],
		[0x1ed9bd58,0],
		[0x1ed9bd5c,0],
		[0x1ed9bd60,0],
		[0x1ed9bd64,0],
		[0x1ed9bd68,0],
		[0x1ed9bd6c,0],
		[0x1ed9bd70,13],
		[0x1ed9bd74,0],
		[0x1ed9bd78,51],
		[0x1ed9bd7c,0],
		[0x1ed9bd80,6175],
		[0x1ed9bd84,0],
		[0x1ed9bd88,3115],
		[0x1ed9bd8c,0],
		[0x1ed9bd90,12],
		[0x1ed9bd94,0],
		[0x1ed9bd98,1],
		[0x1ed9bd9c,0],
		[0x1ed9bda4,0],
		[0x1ed9bda8,483],
		[0x1ed9bdac,0],
		[0x1ed9bdb0,1000],
		[0x1ed9bdb4,0],
		[0x1ed9bdb8,0],
		[0x1ed9bdbc,0],
		[0x1ed9bdc4,0],
		[0x1ed9bdc8,3000],
		[0x1ed9bdcc,0],
		[0x1ed9bdd0,496],
		[0x1ed9bdd4,0],
		[0x1ed9bdd8,5965],
		[0x1ed9bddc,0],
		[0x1ed9bde4,0],
		[0x1ed9bdec,0],
		[0x1ed9bdf4,0],
		[0x1ed9bdf8,5184],
		[0x1ed9bdfc,0],
		[0x1ed9be04,0],
		[0x1ed9be0c,0],
		[0x1ed9be10,0],
		[0x1ed9be14,0],
		[0x1ed9be1c,0],
		[0x1ed9be54,0],
		[0x1ed9be60,0],
		[0x1ed9be64,0],
		[0x1ed9be80,1566],
		[0x1ed9be84,0],
		[0x1ed9be88,1566],
		[0x1ed9be8c,0],
		[0x1ed9be94,0],
		[0x1ed9be9c,0],
		[0x1ed9bea4,0],
		[0x1ed9beac,0],
		[0x1ed9bed0,1566],
		[0x1ed9bed4,0],
		[0x1ed9bed8,1566],
		[0x1ed9bedc,0],
		[0x1ed9bee4,0],
		[0x1ed9beec,0],
		[0x1ed9bef0,0],
		[0x1ed9bef4,0],
		[0x1ed9bef8,0],
		[0x1ed9befc,0],
		[0x1ed9bf00,0],
		[0x1ed9bf04,0],
		[0x1ed9bf08,0],
		[0x1ed9bf0c,0],
		[0x1ed9bf20,0],
		[0x1ed9bf24,0],
		[0x1ed9bf28,0],
		[0x1ed9bf2c,0],
		[0x1ed9bf30,0],
		[0x1ed9bf34,0],
		[0x1ed9bf38,0],
		[0x1ed9bf3c,0],
		[0x1ed9bf44,0],
		[0x1ed9bf48,12],
		[0x1ed9bf4c,0],
		[0x1ed9bf50,1],
		[0x1ed9bf54,0],
		[0x1ed9bf60,0],
		[0x1ed9bf64,0],
		[0x1ed9bf68,0],
		[0x1ed9bf6c,0],
		[0x1ed9bf70,0],
		[0x1ed9bf74,0],
		[0x1ed9bf78,0],
		[0x1ed9bf7c,0],
		[0x1ed9bf80,0],
		[0x1ed9bf84,0],
		[0x1ed9bf88,0],
		[0x1ed9bf8c,0],
		[0x1ed9bfa0,0],
		[0x1ed9bfa4,0],
		[0x1ed9bfa8,0],
		[0x1ed9bfac,0],
		[0x1ed9bfb0,0],
		[0x1ed9bfb4,0],
		[0x1ed9bfb8,0],
		[0x1ed9bfbc,0],
		[0x1ed9bfc0,0],
		[0x1ed9bfc4,0],
		[0x1ed9bfc8,0],
		[0x1ed9bfcc,0],
		[0x1ed9bfd0,0],
		[0x1ed9bfd4,0],
		[0x1ed9bfd8,0],
		[0x1ed9bfdc,0],
		[0x1ed9bfe0,0],
		[0x1ed9bfe4,0],
		[0x1ed9bfe8,0],
		[0x1ed9bfec,0],
		[0x1ed9bff0,0],
		[0x1ed9bff4,0],
		[0x1ed9bff8,0],
		[0x1ed9bffc,0],
		[0x1ed9c000,0],
		[0x1ed9c004,0],
		[0x1ed9c008,0],
		[0x1ed9c00c,0],
		[0x1ed9c010,0],
		[0x1ed9c014,0],
		[0x1ed9c018,0],
		[0x1ed9c01c,0],
		[0x1ed9c020,0],
		[0x1ed9c024,0],
		[0x1ed9c028,0],
		[0x1ed9c02c,0],
		[0x1ed9c030,0],
		[0x1ed9c034,0],
		[0x1ed9c038,0],
		[0x1ed9c03c,0],
		[0x1ed9c040,0],
		[0x1ed9c044,0],
		[0x1ed9c048,0],
		[0x1ed9c04c,0],
		[0x1ed9c050,0],
		[0x1ed9c054,0],
		[0x1ed9c058,0],
		[0x1ed9c05c,0],
		[0x1ed9c060,0],
		[0x1ed9c064,0],
		[0x1ed9c068,0],
		[0x1ed9c06c,0],
		[0x1ed9c070,0],
		[0x1ed9c074,0],
		[0x1ed9c078,0],
		[0x1ed9c07c,0],
		[0x1ed9c080,0],
		[0x1ed9c084,0],
		[0x1ed9c088,0],
		[0x1ed9c08c,0],
		[0x1ed9c090,0],
		[0x1ed9c094,0],
		[0x1ed9c098,0],
		[0x1ed9c09c,0],
		[0x1ed9c0a0,0],
		[0x1ed9c0a4,0],
		[0x1ed9c0a8,0],
		[0x1ed9c0ac,0],
		[0x1ed9c0b0,0],
		[0x1ed9c0b4,0],
		[0x1ed9c0b8,0],
		[0x1ed9c0bc,0],
		[0x1ed9c0c0,0],
		[0x1ed9c0c4,0],
		[0x1ed9c0c8,0],
		[0x1ed9c0cc,0],
		[0x1ed9c0d0,0],
		[0x1ed9c0d4,0],
		[0x1ed9c0d8,0],
		[0x1ed9c0dc,0],
		[0x1ed9c0e0,0],
		[0x1ed9c0e4,0],
		[0x1ed9c0e8,0],
		[0x1ed9c0ec,0],
		[0x1ed9c0f0,0],
		[0x1ed9c0f4,0],
		[0x1ed9c0f8,0],
		[0x1ed9c0fc,0],
		[0x1ed9c100,0],
		[0x1ed9c104,0],
		[0x1ed9c108,0],
		[0x1ed9c10c,0],
		[0x1ed9c110,0],
		[0x1ed9c114,0],
		[0x1ed9c118,0],
		[0x1ed9c11c,0],
		[0x1ed9c120,0],
		[0x1ed9c124,0],
		[0x1ed9c128,0],
		[0x1ed9c12c,0],
		[0x1ed9c130,0],
		[0x1ed9c134,0],
		[0x1ed9c138,0],
		[0x1ed9c13c,0],
		[0x1ed9c140,0],
		[0x1ed9c144,0],
		[0x1ed9c148,0],
		[0x1ed9c14c,0],
		[0x1ed9c150,0],
		[0x1ed9c154,0],
		[0x1ed9c158,0],
		[0x1ed9c15c,0],
		[0x1ed9c160,0],
		[0x1ed9c164,0],
		[0x1ed9c168,0],
		[0x1ed9c16c,0],
		[0x1ed9c170,0],
		[0x1ed9c174,0],
		[0x1ed9c178,0],
		[0x1ed9c17c,0],
		[0x1ed9c180,0],
		[0x1ed9c184,0],
		[0x1ed9c188,0],
		[0x1ed9c18c,0],
		[0x1ed9c190,0],
		[0x1ed9c194,0],
		[0x1ed9c198,0],
		[0x1ed9c19c,0],
		[0x1ed9c1a0,0],
		[0x1ed9c1a4,0],
		[0x1ed9c1a8,0],
		[0x1ed9c1ac,0],
		[0x1ed9c1b0,0],
		[0x1ed9c1b4,0],
		[0x1ed9c1b8,0],
		[0x1ed9c1bc,0],
		[0x1ed9c1c0,0],
		[0x1ed9c1c4,0],
		[0x1ed9c1c8,0],
		[0x1ed9c1cc,0],
		[0x1ed9c1d0,0],
		[0x1ed9c1d4,0],
		[0x1ed9c1d8,0],
		[0x1ed9c1dc,0],
		[0x1ed9c1e0,0],
		[0x1ed9c1e4,0],
		[0x1ed9c1e8,0],
		[0x1ed9c1ec,0],
		[0x1ed9c1f0,0],
		[0x1ed9c1f4,0],
		[0x1ed9c1f8,0],
		[0x1ed9c1fc,0],
		[0x1ed9c200,0],
		[0x1ed9c204,0],
		[0x1ed9c208,0],
		[0x1ed9c20c,0],
		[0x1ed9c210,0],
		[0x1ed9c214,0],
		[0x1ed9c218,0],
		[0x1ed9c21c,0],
		[0x1ed9c220,0],
		[0x1ed9c224,0],
		[0x1ed9c228,0],
		[0x1ed9c22c,0],
		[0x1ed9c230,0],
		[0x1ed9c234,0],
		[0x1ed9c238,0],
		[0x1ed9c23c,0],
		[0x1ed9c240,0],
		[0x1ed9c244,0],
		[0x1ed9c248,0],
		[0x1ed9c24c,0],
		[0x1ed9c250,0],
		[0x1ed9c254,0],
		[0x1ed9c258,0],
		[0x1ed9c25c,0],
		[0x1ed9c260,0],
		[0x1ed9c264,0],
		[0x1ed9c268,0],
		[0x1ed9c26c,0],
		[0x1ed9c270,0],
		[0x1ed9c274,0],
		[0x1ed9c278,0],
		[0x1ed9c27c,0],
		[0x1ed9c280,0],
		[0x1ed9c284,0],
		[0x1ed9c288,0],
		[0x1ed9c28c,0],
		[0x1ed9c290,0],
		[0x1ed9c294,0],
		[0x1ed9c298,0],
		[0x1ed9c29c,0],
		[0x1ed9c2a0,0],
		[0x1ed9c2a4,0],
		[0x1ed9c2a8,0],
		[0x1ed9c2ac,0],
		[0x1ed9c2b0,0],
		[0x1ed9c2b4,0],
		[0x1ed9c2b8,0],
		[0x1ed9c2bc,0],
		[0x1ed9c2c0,0],
		[0x1ed9c2c4,0],
		[0x1ed9c2c8,0],
		[0x1ed9c2cc,0],
		[0x1ed9c2d0,0],
		[0x1ed9c2d4,0],
		[0x1ed9c2d8,0],
		[0x1ed9c2dc,0],
		[0x1ed9c2e0,0],
		[0x1ed9c2e4,0],
		[0x1ed9c2e8,0],
		[0x1ed9c2ec,0],
		[0x1ed9c2f0,0],
		[0x1ed9c2f4,0],
		[0x1ed9c2f8,0],
		[0x1ed9c2fc,0],
		[0x1ed9c300,0],
		[0x1ed9c304,0],
		[0x1ed9c308,0],
		[0x1ed9c30c,0],
		[0x1ed9c310,0],
		[0x1ed9c314,0],
		[0x1ed9c318,0],
		[0x1ed9c31c,0],
		[0x1ed9c320,0],
		[0x1ed9c324,0],
		[0x1ed9c328,0],
		[0x1ed9c32c,0],
		[0x1ed9c330,0],
		[0x1ed9c334,0],
		[0x1ed9c338,0],
		[0x1ed9c33c,0],
		[0x1ed9c340,0],
		[0x1ed9c344,0],
		[0x1ed9c348,0],
		[0x1ed9c34c,0],
		[0x1ed9c350,0],
		[0x1ed9c354,0],
		[0x1ed9c358,0],
		[0x1ed9c35c,0],
		[0x1ed9c360,0],
		[0x1ed9c364,0],
		[0x1ed9c368,0],
		[0x1ed9c36c,0],
		[0x1ed9c370,0],
		[0x1ed9c374,0],
		[0x1ed9c378,0],
		[0x1ed9c37c,0],
		[0x1ed9c380,0],
		[0x1ed9c384,0],
		[0x1ed9c388,0],
		[0x1ed9c38c,0],
		[0x1ed9c390,0],
		[0x1ed9c394,0],
		[0x1ed9c398,0],
		[0x1ed9c39c,0],
		[0x1ed9c3a0,0],
		[0x1ed9c3a4,0],
		[0x1ed9c3a8,0],
		[0x1ed9c3ac,0],
		[0x1ed9c3b0,0],
		[0x1ed9c3b4,0],
		[0x1ed9c3b8,0],
		[0x1ed9c3bc,0],
		[0x1ed9c3c0,0],
		[0x1ed9c3c4,0],
		[0x1ed9c3c8,0],
		[0x1ed9c3cc,0],
		[0x1ed9c3d0,0],
		[0x1ed9c3d4,0],
		[0x1ed9c3d8,0],
		[0x1ed9c3dc,0],
		[0x1ed9c3e0,0],
		[0x1ed9c3e4,0],
		[0x1ed9c3e8,0],
		[0x1ed9c3ec,0],
		[0x1ed9c3f0,0],
		[0x1ed9c3f4,0],
		[0x1ed9c3f8,0],
		[0x1ed9c3fc,0],
		[0x1ed9c400,0],
		[0x1ed9c404,0],
		[0x1ed9c408,0],
		[0x1ed9c40c,0],
		[0x1ed9c410,0],
		[0x1ed9c414,0],
		[0x1ed9c418,0],
		[0x1ed9c41c,0],
		[0x1ed9c420,0],
		[0x1ed9c424,0],
		[0x1ed9c428,0],
		[0x1ed9c42c,0],
		[0x1ed9c430,0],
		[0x1ed9c434,0],
		[0x1ed9c438,0],
		[0x1ed9c43c,0],
		[0x1ed9c440,0],
		[0x1ed9c444,0],
		[0x1ed9c448,0],
		[0x1ed9c44c,0],
		[0x1ed9c450,0],
		[0x1ed9c454,0],
		[0x1ed9c458,0],
		[0x1ed9c45c,0],
		[0x1ed9c460,0],
		[0x1ed9c464,0],
		[0x1ed9c468,0],
		[0x1ed9c46c,0],
		[0x1ed9c470,0],
		[0x1ed9c474,0],
		[0x1ed9c478,0],
		[0x1ed9c47c,0],
		[0x1ed9c480,0],
		[0x1ed9c484,0],
		[0x1ed9c488,0],
		[0x1ed9c48c,0],
		[0x1ed9c490,0],
		[0x1ed9c494,0],
		[0x1ed9c498,0],
		[0x1ed9c49c,0],
		[0x1ed9c4a0,0],
		[0x1ed9c4a4,0],
		[0x1ed9c4a8,0],
		[0x1ed9c4ac,0],
		[0x1ed9c4b0,0],
		[0x1ed9c4b4,0],
		[0x1ed9c4b8,0],
		[0x1ed9c4bc,0],
		[0x1ed9c4c0,0],
		[0x1ed9c4c4,0],
		[0x1ed9c4c8,0],
		[0x1ed9c4cc,0],
		[0x1ed9c4d0,0],
		[0x1ed9c4d4,0],
		[0x1ed9c4d8,0],
		[0x1ed9c4dc,0],
		[0x1ed9c4e0,0],
		[0x1ed9c4e4,0],
		[0x1ed9c4e8,0],
		[0x1ed9c4ec,0],
		[0x1ed9c4f0,0],
		[0x1ed9c4f4,0],
		[0x1ed9c4f8,0],
		[0x1ed9c4fc,0],
		[0x1ed9c500,0],
		[0x1ed9c504,0],
		[0x1ed9c508,0],
		[0x1ed9c50c,0],
		[0x1ed9c510,0],
		[0x1ed9c514,0],
		[0x1ed9c518,0],
		[0x1ed9c51c,0],
		[0x1ed9c520,0],
		[0x1ed9c524,0],
		[0x1ed9c528,0],
		[0x1ed9c52c,0],
		[0x1ed9c530,0],
		[0x1ed9c534,0],
		[0x1ed9c538,0],
		[0x1ed9c53c,0],
		[0x1ed9c540,0],
		[0x1ed9c544,0],
		[0x1ed9c548,0],
		[0x1ed9c54c,0],
		[0x1ed9c550,0],
		[0x1ed9c554,0],
		[0x1ed9c558,0],
		[0x1ed9c55c,0],
		[0x1ed9c560,0],
		[0x1ed9c564,0],
		[0x1ed9c568,0],
		[0x1ed9c56c,0],
		[0x1ed9c570,0],
		[0x1ed9c574,0],
		[0x1ed9c578,0],
		[0x1ed9c57c,0],
		[0x1ed9c580,0],
		[0x1ed9c584,0],
		[0x1ed9c588,0],
		[0x1ed9c58c,0],
		[0x1ed9c590,0],
		[0x1ed9c594,0],
		[0x1ed9c598,0],
		[0x1ed9c59c,0],
		[0x1ed9c5a0,0],
		[0x1ed9c5a4,0],
		[0x1ed9c5a8,0],
		[0x1ed9c5ac,0],
		[0x1ed9c5b0,0],
		[0x1ed9c5b4,0],
		[0x1ed9c5b8,0],
		[0x1ed9c5bc,0],
		[0x1ed9c5c0,0],
		[0x1ed9c5c4,0],
		[0x1ed9c5c8,0],
		[0x1ed9c5cc,0],
		[0x1ed9c5d0,0],
		[0x1ed9c5d4,0],
		[0x1ed9c5d8,0],
		[0x1ed9c5dc,0],
		[0x1ed9c5e0,0],
		[0x1ed9c5e4,0],
		[0x1ed9c5e8,0],
		[0x1ed9c5ec,0],
		[0x1ed9c5f0,0],
		[0x1ed9c5f4,0],
		[0x1ed9c5f8,0],
		[0x1ed9c5fc,0],
		[0x1ed9c600,0],
		[0x1ed9c604,0],
		[0x1ed9c608,0],
		[0x1ed9c60c,0],
		[0x1ed9c610,0],
		[0x1ed9c614,0],
		[0x1ed9c618,0],
		[0x1ed9c61c,0],
		[0x1ed9c620,0],
		[0x1ed9c624,0],
		[0x1ed9c628,0],
		[0x1ed9c62c,0],
		[0x1ed9c630,0],
		[0x1ed9c634,0],
		[0x1ed9c638,0],
		[0x1ed9c63c,0],
		[0x1ed9c640,0],
		[0x1ed9c644,0],
		[0x1ed9c648,0],
		[0x1ed9c64c,0],
		[0x1ed9c650,0],
		[0x1ed9c654,0],
		[0x1ed9c658,0],
		[0x1ed9c65c,0],
		[0x1ed9c660,0],
		[0x1ed9c664,0],
		[0x1ed9c668,0],
		[0x1ed9c66c,0],
		[0x1ed9c670,0],
		[0x1ed9c674,0],
		[0x1ed9c678,0],
		[0x1ed9c67c,0],
		[0x1ed9c680,0],
		[0x1ed9c684,0],
		[0x1ed9c688,0],
		[0x1ed9c68c,0],
		[0x1ed9c690,0],
		[0x1ed9c694,0],
		[0x1ed9c698,0],
		[0x1ed9c69c,0],
		[0x1ed9c6a0,0],
		[0x1ed9c6a4,0],
		[0x1ed9c6a8,0],
		[0x1ed9c6ac,0],
		[0x1ed9c6b0,0],
		[0x1ed9c6b4,0],
		[0x1ed9c6b8,0],
		[0x1ed9c6bc,0],
		[0x1ed9c6c0,0],
		[0x1ed9c6c4,0],
		[0x1ed9c6c8,0],
		[0x1ed9c6cc,0],
		[0x1ed9c6d0,0],
		[0x1ed9c6d4,0],
		[0x1ed9c6d8,0],
		[0x1ed9c6dc,0],
		[0x1ed9c6e0,0],
		[0x1ed9c6e4,0],
		[0x1ed9c6e8,0],
		[0x1ed9c6ec,0],
		[0x1ed9c6f0,0],
		[0x1ed9c6f4,0],
		[0x1ed9c6f8,0],
		[0x1ed9c6fc,0],
		[0x1ed9c700,0],
		[0x1ed9c704,0],
		[0x1ed9c708,0],
		[0x1ed9c70c,0],
		[0x1ed9c710,0],
		[0x1ed9c714,0],
		[0x1ed9c718,0],
		[0x1ed9c71c,0],
		[0x1ed9c720,0],
		[0x1ed9c724,0],
		[0x1ed9c728,0],
		[0x1ed9c72c,0],
		[0x1ed9c730,0],
		[0x1ed9c734,0],
		[0x1ed9c738,0],
		[0x1ed9c73c,0],
		[0x1ed9c740,0],
		[0x1ed9c744,0],
		[0x1ed9c748,0],
		[0x1ed9c74c,0],
		[0x1ed9c750,0],
		[0x1ed9c754,0],
		[0x1ed9c758,0],
		[0x1ed9c75c,0],
		[0x1ed9c760,0],
		[0x1ed9c764,0],
		[0x1ed9c768,0],
		[0x1ed9c76c,0],
		[0x1ed9c770,0],
		[0x1ed9c774,0],
		[0x1ed9c778,0],
		[0x1ed9c77c,0],
		[0x1ed9c780,0],
		[0x1ed9c784,0],
		[0x1ed9c788,0],
		[0x1ed9c78c,0],
		[0x1ed9c790,0],
		[0x1ed9c794,0],
		[0x1ed9c798,0],
		[0x1ed9c79c,0],
		[0x1ed9c7a0,0],
		[0x1ed9c7a4,0],
		[0x1ed9c7a8,0],
		[0x1ed9c7ac,0],
		[0x1ed9c7b0,0],
		[0x1ed9c7b4,0],
		[0x1ed9c7b8,0],
		[0x1ed9c7bc,0],
		[0x1ed9c7c0,0],
		[0x1ed9c7c4,0],
		[0x1ed9c7c8,0],
		[0x1ed9c7cc,0],
		[0x1ed9c7d0,0],
		[0x1ed9c7d4,0],
		[0x1ed9c7d8,0],
		[0x1ed9c7dc,0],
		[0x1ed9c7e0,0],
		[0x1ed9c7e4,0],
		[0x1ed9c7e8,0],
		[0x1ed9c7ec,0],
		[0x1ed9c7f0,0],
		[0x1ed9c7f4,0],
		[0x1ed9c7f8,0],
		[0x1ed9c7fc,0],
		[0x1ed9c800,0],
		[0x1ed9c804,0],
		[0x1ed9c808,0],
		[0x1ed9c80c,0],
		[0x1ed9c810,0],
		[0x1ed9c814,0],
		[0x1ed9c818,0],
		[0x1ed9c81c,0],
		[0x1ed9c820,0],
		[0x1ed9c824,0],
		[0x1ed9c828,0],
		[0x1ed9c82c,0],
		[0x1ed9c830,0],
		[0x1ed9c834,0],
		[0x1ed9c838,0],
		[0x1ed9c83c,0],
		[0x1ed9c840,0],
		[0x1ed9c844,0],
		[0x1ed9c848,0],
		[0x1ed9c84c,0],
		[0x1ed9c850,0],
		[0x1ed9c854,0],
		[0x1ed9c858,0],
		[0x1ed9c85c,0],
		[0x1ed9c860,0],
		[0x1ed9c864,0],
		[0x1ed9c868,0],
		[0x1ed9c86c,0],
		[0x1ed9c870,0],
		[0x1ed9c874,0],
		[0x1ed9c878,0],
		[0x1ed9c87c,0],
		[0x1ed9c880,0],
		[0x1ed9c884,0],
		[0x1ed9c888,0],
		[0x1ed9c88c,0],
		[0x1ed9c890,0],
		[0x1ed9c894,0],
		[0x1ed9c898,0],
		[0x1ed9c89c,0],
		[0x1ed9c8a0,0],
		[0x1ed9c8a4,0],
		[0x1ed9c8a8,0],
		[0x1ed9c8ac,0],
		[0x1ed9c8b0,0],
		[0x1ed9c8b4,0],
		[0x1ed9c8b8,0],
		[0x1ed9c8bc,0],
		[0x1ed9c8c0,0],
		[0x1ed9c8c4,0],
		[0x1ed9c8c8,0],
		[0x1ed9c8cc,0],
		[0x1ed9c8d0,0],
		[0x1ed9c8d4,0],
		[0x1ed9c8d8,0],
		[0x1ed9c8dc,0],
		[0x1ed9c8e0,0],
		[0x1ed9c8e4,0],
		[0x1ed9c8e8,0],
		[0x1ed9c8ec,0],
		[0x1ed9c8f0,0],
		[0x1ed9c8f4,0],
		[0x1ed9c8f8,0],
		[0x1ed9c8fc,0],
		[0x1ed9c900,0],
		[0x1ed9c904,0],
		[0x1ed9c908,0],
		[0x1ed9c90c,0],
		[0x1ed9c910,0],
		[0x1ed9c914,0],
		[0x1ed9c918,0],
		[0x1ed9c91c,0],
		[0x1ed9c920,0],
		[0x1ed9c924,0],
		[0x1ed9c928,0],
		[0x1ed9c92c,0],
		[0x1ed9c930,0],
		[0x1ed9c934,0],
		[0x1ed9c938,0],
		[0x1ed9c93c,0],
		[0x1ed9c940,0],
		[0x1ed9c944,0],
		[0x1ed9c948,0],
		[0x1ed9c94c,0],
		[0x1ed9c950,0],
		[0x1ed9c954,0],
		[0x1ed9c958,0],
		[0x1ed9c95c,0],
		[0x1ed9c960,0],
		[0x1ed9c964,0],
		[0x1ed9c968,0],
		[0x1ed9c96c,0],
		[0x1ed9c970,0],
		[0x1ed9c974,0],
		[0x1ed9c978,0],
		[0x1ed9c97c,0],
		[0x1ed9c980,0],
		[0x1ed9c984,0],
		[0x1ed9c988,0],
		[0x1ed9c98c,0],
		[0x1ed9c990,0],
		[0x1ed9c994,0],
		[0x1ed9c998,0],
		[0x1ed9c99c,0],
		[0x1ed9c9a0,0],
		[0x1ed9c9a4,0],
		[0x1ed9c9a8,0],
		[0x1ed9c9ac,0],
		[0x1ed9c9b0,0],
		[0x1ed9c9b4,0],
		[0x1ed9c9b8,0],
		[0x1ed9c9bc,0],
		[0x1ed9c9c0,0],
		[0x1ed9c9c4,0],
		[0x1ed9c9c8,0],
		[0x1ed9c9cc,0],
		[0x1ed9c9d0,0],
		[0x1ed9c9d4,0],
		[0x1ed9c9d8,0],
		[0x1ed9c9dc,0],
		[0x1ed9c9e0,0],
		[0x1ed9c9e4,0],
		[0x1ed9c9e8,0],
		[0x1ed9c9ec,0],
		[0x1ed9c9f0,0],
		[0x1ed9c9f4,0],
		[0x1ed9c9f8,0],
		[0x1ed9c9fc,0],
		[0x1ed9ca00,0],
		[0x1ed9ca04,0],
		[0x1ed9ca08,0],
		[0x1ed9ca0c,0],
		[0x1ed9ca10,0],
		[0x1ed9ca14,0],
		[0x1ed9ca18,0],
		[0x1ed9ca1c,0],
		[0x1ed9ca20,0],
		[0x1ed9ca24,0],
		[0x1ed9ca28,0],
		[0x1ed9ca2c,0],
		[0x1ed9ca30,0],
		[0x1ed9ca34,0],
		[0x1ed9ca38,0],
		[0x1ed9ca3c,0],
		[0x1ed9ca40,0],
		[0x1ed9ca44,0],
		[0x1ed9ca48,0],
		[0x1ed9ca4c,0],
		[0x1ed9ca50,0],
		[0x1ed9ca54,0],
		[0x1ed9ca58,0],
		[0x1ed9ca5c,0],
		[0x1ed9ca60,0],
		[0x1ed9ca64,0],
		[0x1ed9ca68,0],
		[0x1ed9ca6c,0],
		[0x1ed9ca70,0],
		[0x1ed9ca74,0],
		[0x1ed9ca78,0],
		[0x1ed9ca7c,0],
		[0x1ed9ca80,0],
		[0x1ed9ca84,0],
		[0x1ed9ca88,0],
		[0x1ed9ca8c,0],
		[0x1ed9ca90,0],
		[0x1ed9ca94,0],
		[0x1ed9ca98,0],
		[0x1ed9ca9c,0],
		[0x1ed9caa0,0],
		[0x1ed9caa4,0],
		[0x1ed9caa8,0],
		[0x1ed9caac,0],
		[0x1ed9cab0,0],
		[0x1ed9cab4,0],
		[0x1ed9cab8,0],
		[0x1ed9cabc,0],
		[0x1ed9cac0,0],
		[0x1ed9cac4,0],
		[0x1ed9cac8,0],
		[0x1ed9cacc,0],
		[0x1ed9cad0,0],
		[0x1ed9cad4,0],
		[0x1ed9cad8,0],
		[0x1ed9cadc,0],
		[0x1ed9cae0,0],
		[0x1ed9cae4,0],
		[0x1ed9cae8,0],
		[0x1ed9caec,0],
		[0x1ed9caf0,0],
		[0x1ed9caf4,0],
		[0x1ed9caf8,0],
		[0x1ed9cafc,0],
		[0x1ed9cb00,0],
		[0x1ed9cb04,0],
		[0x1ed9cb08,0],
		[0x1ed9cb0c,0],
		[0x1ed9cb10,0],
		[0x1ed9cb14,0],
		[0x1ed9cb18,0],
		[0x1ed9cb1c,0],
		[0x1ed9cb20,0],
		[0x1ed9cb24,0],
		[0x1ed9cb28,0],
		[0x1ed9cb2c,0],
		[0x1ed9cb30,0],
		[0x1ed9cb34,0],
		[0x1ed9cb38,0],
		[0x1ed9cb3c,0],
		[0x1ed9cb40,0],
		[0x1ed9cb44,0],
		[0x1ed9cb48,0],
		[0x1ed9cb4c,0],
		[0x1ed9cb50,0],
		[0x1ed9cb54,0],
		[0x1ed9cb58,0],
		[0x1ed9cb5c,0],
		[0x1ed9cb60,0],
		[0x1ed9cb64,0],
		[0x1ed9cb68,0],
		[0x1ed9cb6c,0],
		[0x1ed9cb70,0],
		[0x1ed9cb74,0],
		[0x1ed9cb78,0],
		[0x1ed9cb7c,0],
		[0x1ed9cb80,0],
		[0x1ed9cb84,0],
		[0x1ed9cb88,0],
		[0x1ed9cb8c,0],
		[0, 0]
]).
string_val([
		[0, 0]
]).
:- use_module(library(clpfd)).
:- use_module(reif).
:- style_check(-singleton).

isTrue([X, Y]):-
    X == 49.

isTrue([X|Tail]):-
    isTrue(Tail).

log(File_name, Name, Addr, Base):-
    Offset #= Addr - Base,
    open(File_name, append, Stream),
    write(Stream, Name),
    write(Stream, ':'),
    write(Stream, Offset),
    nl(Stream),
    close(Stream).

possible_task_struct(Base_addr) :-
    get_time(Current),
    current_predicate(string_val/1),
    pointer(Ptr),
    string_val(Str),
    int(Int),
    Ptr_profile = ([
        [MM2_addr, MM2_val],
        [Tasks_addr, Tasks_val],
        [Parent_addr, Parent_val],
        [Real_parent_addr, Real_parent_val],
        [Child_addr, Child_val],
        [Group_leader_addr, Group_leader_val],
        [Thread_group_addr, Thread_group_val],
        [Cred_addr, Cred_val],
        [FS_struct_addr, FS_struct_val]
    ]),
    Str_profile = ([
        [Comm_addr, Comm_val]    
    ]),
    Int_profile = ([
        [Pid_addr, Pid_val],
        [Tgid_addr, Tgid_val]    
    ]),
    chain([Tasks_addr, MM2_addr, Pid_addr, Tgid_addr, Real_parent_addr, Parent_addr , Child_addr, 
           Group_leader_addr, Thread_group_addr, Cred_addr, Comm_addr, FS_struct_addr], #<),
    %MM2_addr #> Base_addr + 1000,
    Tasks_addr #> MM2_addr - 100,
    %FS_struct_addr #< Base_addr + 4000,
    Tgid_addr #= Pid_addr + 4,
    Real_parent_addr #< Tgid_addr + 20,
    Real_parent_addr #= Parent_addr - 8,
    Child_addr #= Parent_addr + 8,
    %FIXME This may be too strong
    Group_leader_addr #=< Child_addr +32,
    %Comm_addr #= Base_addr + 1656,
    %Tasks_addr #= Base_addr + 1072,
    %FS_struct_addr #= Base_addr + 2640,


    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    tuples_in(Int_profile, Int),

    label([MM2_addr, MM2_val]),
    % make query after labeling
    MM2_val #> 0,
    integer(MM2_val),
    
    query_mm_struct(MM2_val),
    labeling([enum], [Tasks_addr, Tasks_val,  Comm_addr, Comm_val ]),

    Comm_offset #= Comm_addr - Base_addr,
    Tasks_offset #= Tasks_addr - Base_addr,
    Tasks_val #> 0,
    query_list_head(Tasks_val, Comm_offset, Tasks_offset),

    labeling([enum], [Real_parent_addr, Real_parent_val, Group_leader_addr, Group_leader_val]),
    Real_parent_val #> 0,
    Group_leader_val #> 0,
    query_ts(Real_parent_val, Comm_offset, Tasks_offset),
    query_ts(Group_leader_val, Comm_offset, Tasks_offset),

    labeling([enum], [Cred_addr, Cred_val]),
    Cred_val #> 0,
    query_cred(Cred_val),

    labeling([enum], [FS_struct_addr, FS_struct_val]),
    FS_struct_val #> 0,
    %query_fs_struct(FS_struct_val),



    get_time(End),
    Time_past is End - Current,
    MM_offset #= MM2_addr - Base_addr,
    Real_parent_offset #= Real_parent_addr - Base_addr,
    Group_leader_offset #= Group_leader_addr - Base_addr,
    log("profile.txt", "tasks", Tasks_addr, Base_addr),
    log("profile.txt", "mm_struct", MM2_addr, Base_addr),
    log("profile.txt", "comm", Comm_addr, Base_addr),
    log("profile.txt", "parent", Parent_addr, Base_addr),
    log("profile.txt", "group_leader", Group_leader_addr, Base_addr),
    log("profile.txt", "cred", Cred_addr, Base_addr),

    
    print_nl('tasks offset', Tasks_offset),
    print_nl('mm offset', MM_offset),
    print_nl('comm offset', Comm_offset),
    print_nl('real_parent', Real_parent_offset),
    print_nl('group_leader', Group_leader_offset),
    print_nl("Finished, total time", Time_past).

possible_mm_struct(Current_addr) :- 
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    % TODO: ADD vm_area_struct *mmap
    Ptr_profile = [
        [Mmap_addr, Mmap_val],
        [Pgd_addr, Pgd_val]  
    ],
    Ulong_profile = [
        [Mmap_base_addr, Mmap_base_val],
        [Mmap_legacy_base_addr, Mmap_legacy_base_val],
        [Task_size_addr, Task_size_val],
        [High_vm_end_addr, High_vm_end_val],
        [Start_brk_addr, Start_brk_val],
        [Brk_addr, Brk_val],
        [Start_stack_addr, Start_stack_val],
        [ARG_start_addr, ARG_start_val]
    ],
    Mmap_addr #= Current_addr,


    Mmap_base_addr #> Mmap_addr,
    %FIXME mmap_base need more value constraint, because we removed mmap_legacy_base and highest_vm_end.
    Mmap_base_val #> 0x7f0000000000,
    %FIXME in old linux version, e.g., there is no mmap_legacy_base and highest_vm_enb
    %chain([Mmap_base_addr, Mmap_legacy_base_addr, Task_size_addr, High_vm_end_addr, Pgd_addr], #<),
    chain([Mmap_base_addr, Task_size_addr, Pgd_addr], #<),

    %FIXME: This rule may be too strong
    %High_vm_end_addr #= Mmap_base_addr + 24, 
    Pgd_addr #> Task_size_addr,
    Pgd_addr #=< Task_size_addr + 40,
    %FIXME: This rule may not be true for other mm_struct.
    Task_size_val #>= 0x7ffffffff000,

    %Mmap_base_addr #= Current_addr + 40,
    %Mmap_legacy_base_addr #= Current_addr + 40,
    %Task_size_addr #= Current_addr + 48,
    %High_vm_end_addr #= Current_addr + 72,

    Start_brk_addr #> Pgd_addr,
    Start_stack_val #> 0x7ff000000000,
    % TODO: Convert this to index comparison. 
    ARG_start_addr #< Current_addr + 500,
    chain([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr], #<),
    ARG_start_addr #= Start_brk_addr + 24,
    Brk_val #< 0x7ff000000000,
    ARG_start_val #> 0x7ff000000000,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),


    labeling([enum], [Mmap_addr, Mmap_val, Mmap_base_addr, Pgd_addr, Pgd_val]),
    Mmap_val #> 0,
    Pgd_val #> 0,
    
    process_create(path('python'),
                    ['subquery.py', Mmap_val, "vm_area_struct", 2],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    label([Start_brk_addr, Brk_addr, Start_stack_addr, ARG_start_addr]),
    statistics(real_time, [End|_]),

    log("profile.txt", "mmap", Mmap_addr, Current_addr),
    log("profile.txt", "mmap_base", Mmap_base_addr, Current_addr),
    log("profile.txt", "pgd", Pgd_addr, Current_addr),
    log("profile.txt", "start_brk", Start_brk_addr, Current_addr),
    log("profile.txt", "brk", Brk_addr, Current_addr),
    log("profile.txt", "start_stack", Start_stack_addr, Current_addr),
    log("profile.txt", "arg_start", ARG_start_addr, Current_addr),
    log("profile.txt", "mm_struct time", End, Start).


possible_vm_area_struct(Base_addr, Level) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [VM_next_addr, VM_next_val],
        [VM_file_addr, VM_file_val]
    ],
    Ulong_profile = [
        [VM_start_addr, VM_start_val],
        [VM_end_addr, VM_end_val],
        [VM_flag_addr, VM_flag_val]
        %VM_pgoff is 0, and we do not consider 0 as ulong
        %[VM_pgoff_addr, VM_pgoff_val]
    ],
    VM_start_addr #>= Base_addr,
    chain([VM_start_addr, VM_end_addr, VM_next_addr, VM_flag_addr, VM_file_addr], #<),
    VM_end_addr #= VM_start_addr + 8,
    VM_next_addr #= VM_end_addr + 8,
    VM_next_addr #< Base_addr + 32,
    VM_file_addr #< Base_addr + 180,
    VM_pgoff_addr #= VM_file_addr - 8,
    %VM_file_addr #= Base_addr + 160,

    tuples_in(Ptr_profile, Ptr),
    tuples_in(Ulong_profile, Ulg),
    %FIXME: VM_flag may need value constraints.

    label([VM_next_addr, VM_next_val]),
    /*if_(Level = 2,
        call(check_vm_area_struct, VM_next_val, 1),
        1 = 1),*/
    %Level #> 1 #==> check_vm_area_struct(VM_next_val, 1),

    labeling([enum], [VM_start_addr, VM_end_addr, VM_flag_addr, VM_pgoff_addr, VM_file_addr, VM_file_val]),
    
    VM_file_val #> 0,
    process_create(path('python'),
                ['subquery.py', VM_file_val, "vm_file"],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),
    statistics(real_time, [End|_]),

    log("profile.txt", "vm_start", VM_start_addr, Base_addr),
    log("profile.txt", "vm_end", VM_end_addr, Base_addr),
    log("profile.txt", "vm_next", VM_next_addr, Base_addr),
    log("profile.txt", "vm_flag", VM_flag_addr, Base_addr),
    log("profile.txt", "vm_pgoff", VM_pgoff_addr, Base_addr),
    log("profile.txt", "vm_file", VM_file_addr, Base_addr),
    log("profile.txt", "vm_area_struct time", End, Start).

check_vm_area_struct(Base_addr, Level) :-
    process_create(path('python'),
                    ['subquery.py', Base_addr, "vm_area_struct", Level],
                    [stdout(pipe(In))]),
    print(In),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vm_file(Base_addr) :-
    pointer(Ptr),
    long(Ulg),
    Ptr_profile = [
        [Vfs_mount_addr, Vfs_mount_val],
        [Dentry_addr, Dentry_val]
    ],
    Vfs_mount_addr #> Base_addr,
    Dentry_addr #= Vfs_mount_addr + 8,
    Dentry_addr #< Base_addr + 40,
    tuples_in(Ptr_profile, Ptr),
    label([Vfs_mount_val, Dentry_val]),
    Vfs_mount_val #>0,
    Dentry_val #> 0,
    %FIXME seems like we do not need this, make sure the string is not addr=0
/*
    process_create(path('python'),
                    ['subquery.py', Vfs_mount_val, "vfs_mount"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_vfs_mount(Base_addr) :-
    pointer(Ptr),
    Ptr_profile = [
        [Dentry_addr, Dentry_val]
    ],
    Dentry_addr #< Base_addr + 16,
    tuples_in(Ptr_profile, Ptr),
    label([Dentry_val]),
    Dentry_val #> 0,
    process_create(path('python'),
                    ['subquery.py', Dentry_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).
    
possible_dentry(Base_addr) :-
    statistics(real_time, [Start|_]),
    pointer(Ptr),
    string_val(Str),
    Ptr_profile = [
        [Dparent_addr, Dparent_val],
        [Dchild_addr, Dchild_val]
    ],
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    %log("profile.txt", "dentry addr", Base_addr, 0),
    Dparent_addr #> Base_addr,
    Dname_addr #> 0,
    Dname_addr #< Base_addr + 200,
    %Dname_addr #= Base_addr + 160,
    %FIXME This child rule is not applicable for old kernel version. 
    %chain([Dparent_addr, Dname_addr, Dchild_addr], #<),
    %Dchild_addr #< Base_addr + 200,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),
    labeling([enum], [Dparent_addr, Dparent_val, Dname_addr, Dchild_addr, Dchild_val]),
    Dname_offset #= Dname_addr - Base_addr,
    integer(Dname_offset),
    Dparent_val #> 0,
    
    %FIXME d_parent may not be initialized
    /*process_create(path('python'),
                ['subquery.py', Dparent_val, "d_entry", Dname_offset],
                [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),*/

    %FIXME: may need to find another way for all list_head. 
    /*Dchild_offset #= Dchild_addr - Base_addr,
    integer(Dchild_offset),
    Dchild_base #= Dchild_val - Dchild_offset,
    integer(Dchild_base),
    Dchild_base #> 0,
    process_create(path('python'),
                ['subquery.py', Dchild_base, "d_entry", Dname_offset],
                [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),*/
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    statistics(real_time, [End|_]).
/*
    log("profile.txt", "d_iname", Dname_addr, Base_addr),
    log("profile.txt", "d_parent", Dparent_addr, Base_addr),
    log("profile.txt", "d_child", Dchild_addr, Base_addr),
    log("profile.txt", "dentry time", End, Start).
*/
possible_d_entry(Base_addr, Dname_offset) :-
    current_predicate(string_val/1),
    string_val(Str),
    Str_profile = [
        [Dname_addr, Dname_val]
    ],
    Dname_addr #= Base_addr + Dname_offset,
    tuples_in(Str_profile, Str),
    label([Dname_addr]).

possible_list_head(Tasks_val, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_val, Tasks_addr]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],
    Comm_addr #= Tasks_val - Tasks_offset + Comm_offset,
    Tasks_addr #\= Tasks_val,
    tuples_in(Str_profile, Str),
    tuples_in(Ptr_profile, Ptr),
    label([Comm_addr]).

possible_ts(Base_addr, Comm_offset, Tasks_offset) :-
    string_val(Str),
    pointer(Ptr),
    Ptr_profile = [
        [Tasks_addr, Tasks_val]
    ],
    Str_profile = [
        [Comm_addr, Comm_val]
    ],

    Comm_addr #= Base_addr + Comm_offset,
    Tasks_addr #= Base_addr + Tasks_offset,
    tuples_in(Ptr_profile, Ptr),
    tuples_in(Str_profile, Str),

    label([Tasks_val]),
    
    process_create(path('python'),
                    ['subquery.py', Tasks_val, "list_head", Comm_offset, Tasks_offset],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result).

possible_cred(Base_addr) :-
    statistics(real_time, [Start|_]),

    int(Int),
    long(Ulg),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3],
        [Addr4, Val4],
        [Addr5, Val5],
        [Addr6, Val6],
        [Addr7, Val7],
        [Addr8, Val8],
        [Addr9, Val9]
    ],
    %FIXME For now, this rule is hard-coded because we do not consider 0 as a unsign long number. 
    %So that for cred whos val10 is 0, this rule does not apply.
    /*Ulong_profile = [
        [Addr10, Val10],
        [Addr11, Val11]
    ],*/
    Addr1 #> Base_addr,
    %chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9, Addr10, Addr11], #<),
    chain([Addr1, Addr2, Addr3, Addr4, Addr5, Addr6, Addr7, Addr8, Addr9], #<),
    Addr1 #= Base_addr + 4,
    Addr9 #= Addr1 + 32,
    %Addr11 #< Base_addr + 120,
    tuples_in(Int_profile, Int),
    %tuples_in(Ulong_profile, Ulg),
    statistics(real_time, [End|_]),
    labeling([enum], [Addr1, Addr2, Addr5, Addr6]),
    log("profile.txt", "cred time", End, Start),
    log('profile.txt', "uid", Addr1, Base_addr),
    log('profile.txt', "gid", Addr2, Base_addr),
    log('profile.txt', "euid", Addr5, Base_addr),
    log('profile.txt', "egid", Addr6, Base_addr).

possible_fs_struct(Base_addr) :-
    statistics(real_time, [Start|_]),
    int(Int),
    pointer(Ptr),
    Int_profile = [
        [Addr1, Val1],
        [Addr2, Val2],
        [Addr3, Val3]
    ],
    Ptr_profile = [
        [Root_addr, Root_val],
        [PWD_addr, PWD_val]
    ],
    Addr1 #>= Base_addr,
    chain([Addr1, Addr2, Addr3, Root_addr, PWD_addr], #<),
    PWD_addr #= Root_addr + 16,
    PWD_addr #< Base_addr + 50,
    tuples_in(Int_profile, Int),
    tuples_in(Ptr_profile, Ptr),
    label([Root_addr, Root_val]),
    
    process_create(path('python'),
                    ['subquery.py', Root_val, "dentry"],
                    [stdout(pipe(In))]),
    read_string(In, Len, X),
    string_codes(X, Result),
    close(In),
    isTrue(Result),

    label([PWD_addr, PWD_val]),
    process_create(path('python'),
                    ['subquery.py', PWD_val, "dentry"],
                    [stdout(pipe(NewIn))]),
    read_string(NewIn, Len, X),
    string_codes(X, Result),
    close(NewIn),
    isTrue(Result),

    statistics(real_time, [End|_]),
    log("profile.txt", "fs time", End, Start),
    log('profile.txt', "Root", Root_addr, Base_addr),
    log('profile.txt', "pwd", PWD_addr, Base_addr).
